begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_comment
comment|/** 	This class implements Floyd's version  	of the heapsort algorithm.  	http://users.encs.concordia.ca/~chvatal/notes/hsort.html 	http://en.wikipedia.org/wiki/Heapsort#Variations 	 	@author JosÃ© MarÃ­a FernÃ¡ndez (jmfg@users.sourceforge.net) */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HSort
block|{
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
index|[
name|k
index|]
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|C
name|temp
init|=
name|a
index|[
name|k
index|]
decl_stmt|;
name|a
index|[
name|k
index|]
operator|=
name|a
index|[
name|lo
index|]
expr_stmt|;
name|siftdown
argument_list|(
name|a
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|int
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
index|[
name|k
index|]
argument_list|,
operator|(
name|b
operator|!=
literal|null
operator|)
condition|?
name|b
index|[
name|k
index|]
else|:
literal|0
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|C
name|temp
init|=
name|a
index|[
name|k
index|]
decl_stmt|;
name|a
index|[
name|k
index|]
operator|=
name|a
index|[
name|lo
index|]
expr_stmt|;
name|int
name|tempB
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|tempB
operator|=
name|b
index|[
name|k
index|]
expr_stmt|;
name|b
index|[
name|k
index|]
operator|=
name|b
index|[
name|lo
index|]
expr_stmt|;
block|}
else|else
block|{
name|tempB
operator|=
literal|0
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|tempB
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|C
argument_list|>
name|c
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
index|[
name|k
index|]
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|C
name|temp
init|=
name|a
index|[
name|k
index|]
decl_stmt|;
name|a
index|[
name|k
index|]
operator|=
name|a
index|[
name|lo
index|]
expr_stmt|;
name|siftdown
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|C
argument_list|>
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|C
name|temp
init|=
name|a
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|a
operator|.
name|set
argument_list|(
name|k
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|lo
argument_list|)
argument_list|)
expr_stmt|;
name|siftdown
argument_list|(
name|a
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|Object
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
index|[
name|k
index|]
argument_list|,
operator|(
name|b
operator|!=
literal|null
operator|)
condition|?
name|b
index|[
name|k
index|]
else|:
literal|null
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|long
name|temp
init|=
name|a
index|[
name|k
index|]
decl_stmt|;
name|a
index|[
name|k
index|]
operator|=
name|a
index|[
name|lo
index|]
expr_stmt|;
name|Object
name|tempB
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|tempB
operator|=
name|b
index|[
name|k
index|]
expr_stmt|;
name|b
index|[
name|k
index|]
operator|=
name|b
index|[
name|lo
index|]
expr_stmt|;
block|}
else|else
block|{
name|tempB
operator|=
literal|null
expr_stmt|;
block|}
name|siftdown
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|tempB
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|sortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
block|{
return|return;
block|}
comment|// Next lines are a generalization from makeheap
name|int
name|drop
init|=
literal|1
decl_stmt|;
comment|// originally, first was n/2-1
name|int
name|first
init|=
operator|(
name|hi
operator|+
name|lo
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|first
init|;
name|k
operator|>=
name|lo
condition|;
name|k
operator|--
control|)
block|{
if|if
condition|(
name|k
operator|==
operator|(
name|first
operator|-
literal|1
operator|)
operator|/
literal|2
condition|)
block|{
name|drop
operator|++
expr_stmt|;
name|first
operator|=
name|k
expr_stmt|;
block|}
name|siftdownByNodeId
argument_list|(
name|a
argument_list|,
name|hi
operator|+
literal|1
argument_list|,
name|k
argument_list|,
name|a
index|[
name|k
index|]
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
comment|// Next two lines does the same as floor_of_lg
comment|// And they have been inferred from Java manual
name|int
name|last
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
decl_stmt|;
name|drop
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// Scaling last
name|int
name|lastlo
init|=
name|last
operator|+
name|lo
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|hi
init|;
name|k
operator|>
name|lo
condition|;
name|k
operator|--
control|)
block|{
specifier|final
name|NodeProxy
name|temp
init|=
name|a
index|[
name|k
index|]
decl_stmt|;
name|a
index|[
name|k
index|]
operator|=
name|a
index|[
name|lo
index|]
expr_stmt|;
name|siftdownByNodeId
argument_list|(
name|a
argument_list|,
name|k
argument_list|,
name|lo
argument_list|,
name|temp
argument_list|,
name|drop
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|==
name|lastlo
condition|)
block|{
name|drop
operator|--
expr_stmt|;
name|last
operator|/=
literal|2
expr_stmt|;
name|lastlo
operator|=
name|last
operator|+
name|lo
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|siftdown
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|C
name|missing
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|child
decl_stmt|,
name|parent
decl_stmt|;
name|int
name|count
decl_stmt|,
name|next_peek
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|next_peek
operator|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|-
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|a
index|[
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|a
index|[
name|parent
index|]
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<
literal|0
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|parent
index|]
expr_stmt|;
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|missing
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|siftdown
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
index|[]
name|b
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|C
name|missing
parameter_list|,
name|int
name|missingB
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|child
decl_stmt|,
name|parent
decl_stmt|;
name|int
name|count
decl_stmt|,
name|next_peek
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|next_peek
operator|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|-
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|child
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|a
index|[
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|a
index|[
name|parent
index|]
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<
literal|0
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|parent
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|parent
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|missing
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|missingB
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
parameter_list|>
name|void
name|siftdown
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|C
argument_list|>
name|c
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|C
name|missing
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|child
decl_stmt|,
name|parent
decl_stmt|;
name|int
name|count
decl_stmt|,
name|next_peek
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|next_peek
operator|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|child
index|]
argument_list|,
name|a
index|[
name|child
operator|-
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
argument_list|,
name|missing
argument_list|)
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|parent
index|]
argument_list|,
name|missing
argument_list|)
operator|<
literal|0
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|parent
index|]
expr_stmt|;
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|missing
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|siftdown
parameter_list|(
name|List
argument_list|<
name|C
argument_list|>
name|a
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|C
name|missing
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|child
decl_stmt|,
name|parent
decl_stmt|;
name|int
name|count
decl_stmt|,
name|next_peek
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|next_peek
operator|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
operator|-
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
operator|.
name|set
argument_list|(
name|vacant
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|get
argument_list|(
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
operator|.
name|set
argument_list|(
name|vacant
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|compareTo
argument_list|(
name|missing
argument_list|)
operator|<
literal|0
condition|)
block|{
name|a
operator|.
name|set
argument_list|(
name|vacant
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
operator|.
name|set
argument_list|(
name|vacant
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|siftdown
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|long
name|missing
parameter_list|,
name|Object
name|missingB
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|child
decl_stmt|,
name|parent
decl_stmt|;
name|int
name|count
decl_stmt|,
name|next_peek
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|next_peek
operator|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|a
index|[
name|child
index|]
operator|<
name|a
index|[
name|child
operator|-
literal|1
index|]
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|child
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|a
index|[
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|<=
name|missing
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|a
index|[
name|parent
index|]
operator|<
name|missing
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|parent
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|b
index|[
name|parent
index|]
expr_stmt|;
block|}
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|missing
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
index|[
name|vacant
index|]
operator|=
name|missingB
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|siftdownByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|vacant
parameter_list|,
name|NodeProxy
name|missing
parameter_list|,
name|int
name|drop
parameter_list|)
block|{
specifier|final
name|int
name|memo
init|=
name|vacant
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|next_peek
init|=
operator|(
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|child
init|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
decl_stmt|;
specifier|final
name|NodeId
name|missingNodeId
init|=
name|missing
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|a
index|[
name|child
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|--
expr_stmt|;
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|vacant
operator|=
name|child
expr_stmt|;
name|child
operator|=
literal|2
operator|*
operator|(
name|vacant
operator|+
literal|1
operator|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|next_peek
condition|)
block|{
if|if
condition|(
name|a
index|[
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|missingNodeId
argument_list|)
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next_peek
operator|=
operator|(
name|count
operator|+
name|drop
operator|+
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|child
operator|==
name|n
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|n
operator|-
literal|1
index|]
expr_stmt|;
name|vacant
operator|=
name|n
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|parent
init|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
while|while
condition|(
name|vacant
operator|>
name|memo
condition|)
block|{
if|if
condition|(
name|a
index|[
name|parent
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|missingNodeId
argument_list|)
operator|<
literal|0
condition|)
block|{
name|a
index|[
name|vacant
index|]
operator|=
name|a
index|[
name|parent
index|]
expr_stmt|;
name|vacant
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|vacant
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|a
index|[
name|vacant
index|]
operator|=
name|missing
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|a
init|=
operator|new
name|String
index|[]
block|{
literal|"Rudi"
block|,
literal|"Herbert"
block|,
literal|"Anton"
block|,
literal|"Berta"
block|,
literal|"Olga"
block|,
literal|"Willi"
block|,
literal|"Heinz"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|l
operator|.
name|add
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ordering file "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|is
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|FileReader
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rr
decl_stmt|;
while|while
condition|(
operator|(
name|rr
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ellapsed time: "
operator|+
operator|(
name|b
operator|-
name|a
operator|)
operator|+
literal|" size: "
operator|+
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

