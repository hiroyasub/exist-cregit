begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|SystemExport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|CollectionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeValueIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|CustomMatchListenerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|GrammarPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|resolver
operator|.
name|eXistXMLCatalogResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PerformanceStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TransformerFactoryAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Module
import|;
end_import

begin_class
specifier|public
class|class
name|Configuration
implements|implements
name|ErrorHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Logger
specifier|protected
name|Optional
argument_list|<
name|Path
argument_list|>
name|configFilePath
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|protected
name|Optional
argument_list|<
name|Path
argument_list|>
name|existHome
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|protected
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Configuration
specifier|private
specifier|static
specifier|final
name|String
name|XQUERY_CONFIGURATION_ELEMENT_NAME
init|=
literal|"xquery"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XQUERY_BUILTIN_MODULES_CONFIGURATION_MODULES_ELEMENT_NAME
init|=
literal|"builtin-modules"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XQUERY_BUILTIN_MODULES_CONFIGURATION_MODULE_ELEMENT_NAME
init|=
literal|"module"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|BINARY_CACHE_CLASS_PROPERTY
init|=
literal|"binary.cache.class"
decl_stmt|;
specifier|public
name|Configuration
parameter_list|()
throws|throws
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
name|DatabaseImpl
operator|.
name|CONF_XML
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
parameter_list|(
specifier|final
name|String
name|configFilename
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
name|configFilename
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
parameter_list|(
name|String
name|configFilename
parameter_list|,
name|Optional
argument_list|<
name|Path
argument_list|>
name|existHomeDirname
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|configFilename
operator|==
literal|null
condition|)
block|{
comment|// Default file name
name|configFilename
operator|=
name|DatabaseImpl
operator|.
name|CONF_XML
expr_stmt|;
block|}
comment|// firstly, try to read the configuration from a file within the
comment|// classpath
try|try
block|{
name|is
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from classloader"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|// EB: ignore and go forward, e.g. in case there is an absolute
comment|// file name for configFileName
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, secondly try to read configuration from file. Guess the
comment|// location if necessary
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|existHome
operator|=
name|existHomeDirname
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|of
argument_list|)
operator|.
name|orElse
argument_list|(
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|(
name|configFilename
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existHome
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// EB: try to create existHome based on location of config file
comment|// when config file points to absolute file location
specifier|final
name|Path
name|absoluteConfigFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|configFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|absoluteConfigFile
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|absoluteConfigFile
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|absoluteConfigFile
argument_list|)
condition|)
block|{
name|existHome
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|absoluteConfigFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|configFilename
operator|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|absoluteConfigFile
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|configFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|configFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|existHome
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// try the passed or constructed existHome first
name|configFile
operator|=
name|existHome
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|configFilename
argument_list|)
expr_stmt|;
block|}
comment|//if( configFile == null ) {
comment|//    configFile = ConfigurationHelper.lookup( configFilename );
comment|//}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|configFile
argument_list|)
operator|||
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Unable to read configuration file at "
operator|+
name|configFile
argument_list|)
throw|;
block|}
name|configFilePath
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|configFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
comment|// set dbHome to parent of the conf file found, to resolve relative
comment|// path from conf file
name|existHomeDirname
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|configFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from file "
operator|+
name|configFile
argument_list|)
expr_stmt|;
block|}
comment|// initialize xml parser
comment|// we use eXist's in-memory DOM implementation to work
comment|// around a bug in Xerces
specifier|final
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//            factory.setFeature("http://apache.org/xml/features/validation/schema", true);
comment|//            factory.setFeature("http://apache.org/xml/features/validation/dynamic", true);
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|//indexer settings
specifier|final
name|NodeList
name|indexers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Indexer
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureIndexer
argument_list|(
name|existHomeDirname
argument_list|,
name|doc
argument_list|,
operator|(
name|Element
operator|)
name|indexers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//scheduler settings
specifier|final
name|NodeList
name|schedulers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|JobConfig
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureScheduler
argument_list|(
operator|(
name|Element
operator|)
name|schedulers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//db connection settings
specifier|final
name|NodeList
name|dbcon
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_CONNECTION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbcon
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureBackend
argument_list|(
name|existHomeDirname
argument_list|,
operator|(
name|Element
operator|)
name|dbcon
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|repository
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"repository"
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureRepository
argument_list|(
operator|(
name|Element
operator|)
name|repository
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|binaryManager
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"binary-manager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|binaryManager
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureBinaryManager
argument_list|(
operator|(
name|Element
operator|)
name|binaryManager
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//transformer settings
specifier|final
name|NodeList
name|transformers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|transformers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureTransformer
argument_list|(
operator|(
name|Element
operator|)
name|transformers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//parser settings
specifier|final
name|NodeList
name|parsers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|HtmlToXmlParser
operator|.
name|PARSER_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureParser
argument_list|(
operator|(
name|Element
operator|)
name|parsers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//serializer settings
specifier|final
name|NodeList
name|serializers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Serializer
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureSerializer
argument_list|(
operator|(
name|Element
operator|)
name|serializers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XUpdate settings
specifier|final
name|NodeList
name|xupdates
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|DBBroker
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdates
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXUpdate
argument_list|(
operator|(
name|Element
operator|)
name|xupdates
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XQuery settings
specifier|final
name|NodeList
name|xquery
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|XQUERY_CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|xquery
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQuery
argument_list|(
operator|(
name|Element
operator|)
name|xquery
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Validation
specifier|final
name|NodeList
name|validations
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|validations
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureValidation
argument_list|(
name|existHomeDirname
argument_list|,
name|doc
argument_list|,
operator|(
name|Element
operator|)
name|validations
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|IOException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while reading config file: "
operator|+
name|configFilename
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|configureRepository
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|root
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|root
operator|+=
literal|"/"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|Deployment
operator|.
name|PROPERTY_APP_ROOT
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureBinaryManager
parameter_list|(
name|Element
name|binaryManager
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
specifier|final
name|NodeList
name|nlCache
init|=
name|binaryManager
operator|.
name|getElementsByTagName
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlCache
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Element
name|cache
init|=
operator|(
name|Element
operator|)
name|nlCache
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|binaryCacheClass
init|=
name|cache
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|,
name|binaryCacheClass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BINARY_CACHE_CLASS_PROPERTY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureXQuery
parameter_list|(
name|Element
name|xquery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|//java binding
specifier|final
name|String
name|javabinding
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|FunctionFactory
operator|.
name|ENABLE_JAVA_BINDING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|javabinding
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
argument_list|,
name|javabinding
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|disableDeprecated
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|FunctionFactory
operator|.
name|DISABLE_DEPRECATED_FUNCTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
argument_list|,
name|Configuration
operator|.
name|parseBoolean
argument_list|(
name|disableDeprecated
argument_list|,
name|FunctionFactory
operator|.
name|DISABLE_DEPRECATED_FUNCTIONS_BY_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|optimize
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|XQueryContext
operator|.
name|ENABLE_QUERY_REWRITING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|optimize
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|optimize
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|,
name|optimize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|enforceIndexUse
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|XQueryContext
operator|.
name|ENFORCE_INDEX_USE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|enforceIndexUse
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENFORCE_INDEX_USE
argument_list|,
name|enforceIndexUse
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|backwardCompatible
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|XQueryContext
operator|.
name|XQUERY_BACKWARD_COMPATIBLE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|backwardCompatible
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|backwardCompatible
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|,
name|backwardCompatible
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|raiseErrorOnFailedRetrieval
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|XQueryContext
operator|.
name|XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL_ATTRIBUTE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|,
name|Configuration
operator|.
name|parseBoolean
argument_list|(
name|raiseErrorOnFailedRetrieval
argument_list|,
name|XQueryContext
operator|.
name|XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|trace
init|=
name|getConfigAttributeValue
argument_list|(
name|xquery
argument_list|,
name|PerformanceStats
operator|.
name|CONFIG_ATTR_TRACE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|PerformanceStats
operator|.
name|CONFIG_PROPERTY_TRACE
argument_list|,
name|trace
argument_list|)
expr_stmt|;
comment|// built-in-modules
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|knownMappings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
name|moduleParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|loadModuleClasses
argument_list|(
name|xquery
argument_list|,
name|classMap
argument_list|,
name|knownMappings
argument_list|,
name|moduleParameters
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_BUILT_IN_MODULES
argument_list|,
name|classMap
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_STATIC_MODULE_MAP
argument_list|,
name|knownMappings
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_MODULE_PARAMETERS
argument_list|,
name|moduleParameters
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read list of built-in modules from the configuration. This method will only make sure      * that the specified module class exists and is a subclass of {@link org.exist.xquery.Module}.      *      * @param   xquery            configuration root      * @param   modulesClassMap   map containing all classes of modules      * @param   modulesSourceMap  map containing all source uris to external resources      *      * @throws  DatabaseConfigurationException      */
specifier|private
name|void
name|loadModuleClasses
parameter_list|(
name|Element
name|xquery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|modulesClassMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modulesSourceMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
name|moduleParameters
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// add the standard function module
name|modulesClassMap
operator|.
name|put
argument_list|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|,
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|FnModule
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// add other modules specified in configuration
specifier|final
name|NodeList
name|builtins
init|=
name|xquery
operator|.
name|getElementsByTagName
argument_list|(
name|XQUERY_BUILTIN_MODULES_CONFIGURATION_MODULES_ELEMENT_NAME
argument_list|)
decl_stmt|;
comment|// search under<builtin-modules>
if|if
condition|(
name|builtins
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|builtins
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|modules
init|=
name|elem
operator|.
name|getElementsByTagName
argument_list|(
name|XQUERY_BUILTIN_MODULES_CONFIGURATION_MODULE_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// iterate over all<module src= uri= class=> entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Get element.
name|elem
operator|=
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Get attributes uri class and src
specifier|final
name|String
name|uri
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|BUILT_IN_MODULE_URI_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|clazz
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|BUILT_IN_MODULE_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|source
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|BUILT_IN_MODULE_SOURCE_ATTRIBUTE
argument_list|)
decl_stmt|;
comment|// uri attribute is the identifier and is always required
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires an attribute 'uri'"
argument_list|)
operator|)
throw|;
block|}
comment|// either class or source attribute must be present
if|if
condition|(
operator|(
name|clazz
operator|==
literal|null
operator|)
operator|&&
operator|(
name|source
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires either an attribute "
operator|+
literal|"'class' or 'src'"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
comment|// Store src attribute info
name|modulesSourceMap
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered mapping for module '"
operator|+
name|uri
operator|+
literal|"' to '"
operator|+
name|source
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// source class attribute info
comment|// Get class of module
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|moduleClass
init|=
name|lookupModuleClass
argument_list|(
name|uri
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
comment|// Store class if thw module class actually exists
if|if
condition|(
name|moduleClass
operator|!=
literal|null
condition|)
block|{
name|modulesClassMap
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|moduleClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured module '"
operator|+
name|uri
operator|+
literal|"' implemented in '"
operator|+
name|clazz
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//parse any module parameters
name|moduleParameters
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|ParametersExtractor
operator|.
name|extract
argument_list|(
name|elem
operator|.
name|getElementsByTagName
argument_list|(
name|ParametersExtractor
operator|.
name|PARAMETER_ELEMENT_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      *  Returns the Class object associated with the with the given module class name. All      * important exceptions are caught. @see org.exist.xquery.Module      *      * @param uri   namespace of class. For logging purposes only.      * @param clazz the fully qualified name of the desired module class.      * @return      the module Class object for the module with the specified name.      * @throws      DatabaseConfigurationException if the given module class is not an instance      *              of org.exist.xquery.Module      */
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|lookupModuleClass
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|clazz
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|mClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mClass
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Failed to load module: "
operator|+
name|uri
operator|+
literal|". Class "
operator|+
name|clazz
operator|+
literal|" is not an instance of org.exist.xquery.Module."
argument_list|)
operator|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Note: can't throw an exception here since this would create
comment|// problems with test cases and jar dependencies
name|LOG
operator|.
name|error
argument_list|(
literal|"Configuration problem: class not found for module '"
operator|+
name|uri
operator|+
literal|"' (ClassNotFoundException); class:'"
operator|+
name|clazz
operator|+
literal|"'; message:'"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Module "
operator|+
name|uri
operator|+
literal|" could not be initialized due to a missing "
operator|+
literal|"dependancy (NoClassDefFoundError): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|mClass
return|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param   xupdate      *      * @throws  NumberFormatException      */
specifier|private
name|void
name|configureXUpdate
parameter_list|(
name|Element
name|xupdate
parameter_list|)
throws|throws
name|NumberFormatException
block|{
specifier|final
name|String
name|fragmentation
init|=
name|getConfigAttributeValue
argument_list|(
name|xupdate
argument_list|,
name|DBBroker
operator|.
name|XUPDATE_FRAGMENTATION_FACTOR_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmentation
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|fragmentation
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|consistencyCheck
init|=
name|getConfigAttributeValue
argument_list|(
name|xupdate
argument_list|,
name|DBBroker
operator|.
name|XUPDATE_CONSISTENCY_CHECKS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|consistencyCheck
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
argument_list|,
name|parseBoolean
argument_list|(
name|consistencyCheck
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureTransformer
parameter_list|(
name|Element
name|transformer
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
name|getConfigAttributeValue
argument_list|(
name|transformer
argument_list|,
name|TransformerFactoryAllocator
operator|.
name|TRANSFORMER_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Process any specified attributes that should be passed to the transformer factory
specifier|final
name|NodeList
name|attrs
init|=
name|transformer
operator|.
name|getElementsByTagName
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|CONFIGURATION_TRANSFORMER_ATTRIBUTE_ELEMENT_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
specifier|final
name|Element
name|attr
init|=
operator|(
name|Element
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|a
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|)
operator|||
operator|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Discarded invalid attribute for TransformerFactory: '"
operator|+
name|className
operator|+
literal|"', name not specified"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|type
operator|==
literal|null
operator|)
operator|||
operator|(
name|type
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|||
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
try|try
block|{
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Discarded invalid attribute for TransformerFactory: '"
operator|+
name|className
operator|+
literal|"', name: "
operator|+
name|name
operator|+
literal|", value not integer: "
operator|+
name|value
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Assume string type
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_ATTRIBUTES
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|cachingValue
init|=
name|getConfigAttributeValue
argument_list|(
name|transformer
argument_list|,
name|TransformerFactoryAllocator
operator|.
name|TRANSFORMER_CACHING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachingValue
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_CACHING_ATTRIBUTE
argument_list|,
name|parseBoolean
argument_list|(
name|cachingValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_CACHING_ATTRIBUTE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_CACHING_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureParser
parameter_list|(
specifier|final
name|Element
name|parser
parameter_list|)
block|{
specifier|final
name|NodeList
name|nlHtmlToXml
init|=
name|parser
operator|.
name|getElementsByTagName
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlHtmlToXml
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Element
name|htmlToXml
init|=
operator|(
name|Element
operator|)
name|nlHtmlToXml
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|htmlToXmlParserClass
init|=
name|getConfigAttributeValue
argument_list|(
name|htmlToXml
argument_list|,
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_PROPERTY
argument_list|,
name|htmlToXmlParserClass
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|nlProperties
init|=
name|htmlToXml
operator|.
name|getElementsByTagName
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_PROPERTIES_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlProperties
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Properties
name|pProperties
init|=
name|ParametersExtractor
operator|.
name|parseProperties
argument_list|(
name|nlProperties
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pProperties
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|properties
operator|.
name|put
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_PROPERTIES_PROPERTY
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|NodeList
name|nlFeatures
init|=
name|htmlToXml
operator|.
name|getElementsByTagName
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_FEATURES_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlFeatures
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Properties
name|pFeatures
init|=
name|ParametersExtractor
operator|.
name|parseFeatures
argument_list|(
name|nlFeatures
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pFeatures
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pFeatures
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|features
operator|.
name|put
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HtmlToXmlParser
operator|.
name|HTML_TO_XML_PARSER_FEATURES_PROPERTY
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * DOCUMENT ME!      *      * @param  serializer      */
specifier|private
name|void
name|configureSerializer
parameter_list|(
name|Element
name|serializer
parameter_list|)
block|{
specifier|final
name|String
name|xinclude
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|ENABLE_XINCLUDE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|xinclude
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
argument_list|,
name|xinclude
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|xsl
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|ENABLE_XSL_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsl
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
argument_list|,
name|xsl
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|indent
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|INDENT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|compress
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|COMPRESS_OUTPUT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|internalId
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|ADD_EXIST_ID_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalId
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
argument_list|,
name|internalId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|tagElementMatches
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|TAG_MATCHING_ELEMENTS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagElementMatches
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
argument_list|,
name|tagElementMatches
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|tagAttributeMatches
init|=
name|getConfigAttributeValue
argument_list|(
name|serializer
argument_list|,
name|Serializer
operator|.
name|TAG_MATCHING_ATTRIBUTES_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagAttributeMatches
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
argument_list|,
name|tagAttributeMatches
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|nlFilters
init|=
name|serializer
operator|.
name|getElementsByTagName
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIGURATION_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlFilters
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nlFilters
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlFilters
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|filterElem
init|=
operator|(
name|Element
operator|)
name|nlFilters
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|filterClass
init|=
name|filterElem
operator|.
name|getAttribute
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIGURATION_ATTR_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterClass
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filterClass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIG_MATCH_LISTENERS
operator|+
literal|": "
operator|+
name|filterClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration element "
operator|+
name|CustomMatchListenerFactory
operator|.
name|CONFIGURATION_ELEMENT
operator|+
literal|" needs an attribute 'class'"
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIG_MATCH_LISTENERS
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|backupFilters
init|=
name|serializer
operator|.
name|getElementsByTagName
argument_list|(
name|SystemExport
operator|.
name|CONFIGURATION_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|backupFilters
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|backupFilters
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|backupFilters
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|filterElem
init|=
operator|(
name|Element
operator|)
name|backupFilters
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|filterClass
init|=
name|filterElem
operator|.
name|getAttribute
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIGURATION_ATTR_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterClass
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filterClass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|CustomMatchListenerFactory
operator|.
name|CONFIG_MATCH_LISTENERS
operator|+
literal|": "
operator|+
name|filterClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration element "
operator|+
name|SystemExport
operator|.
name|CONFIGURATION_ELEMENT
operator|+
literal|" needs an attribute 'class'"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
name|config
operator|.
name|put
argument_list|(
name|SystemExport
operator|.
name|CONFIG_FILTERS
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the scheduler configuration.      *      * @param  scheduler  DOCUMENT ME!      */
specifier|private
name|void
name|configureScheduler
parameter_list|(
specifier|final
name|Element
name|scheduler
parameter_list|)
block|{
specifier|final
name|NodeList
name|nlJobs
init|=
name|scheduler
operator|.
name|getElementsByTagName
argument_list|(
name|JobConfig
operator|.
name|CONFIGURATION_JOB_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlJobs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|JobConfig
argument_list|>
name|jobList
init|=
operator|new
name|ArrayList
argument_list|<
name|JobConfig
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlJobs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|job
init|=
operator|(
name|Element
operator|)
name|nlJobs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//get the job type
specifier|final
name|String
name|strJobType
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_TYPE_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|JobType
name|jobType
decl_stmt|;
if|if
condition|(
name|strJobType
operator|==
literal|null
condition|)
block|{
name|jobType
operator|=
name|JobType
operator|.
name|USER
expr_stmt|;
comment|//default to user if unspecified
block|}
else|else
block|{
name|jobType
operator|=
name|JobType
operator|.
name|valueOf
argument_list|(
name|strJobType
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|jobName
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_NAME_ATTRIBUTE
argument_list|)
decl_stmt|;
comment|//get the job resource
name|String
name|jobResource
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobResource
operator|==
literal|null
condition|)
block|{
name|jobResource
operator|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_XQUERY_ATTRIBUTE
argument_list|)
expr_stmt|;
block|}
comment|//get the job schedule
name|String
name|jobSchedule
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_CRON_TRIGGER_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobSchedule
operator|==
literal|null
condition|)
block|{
name|jobSchedule
operator|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_PERIOD_ATTRIBUTE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|jobUnschedule
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_UNSCHEDULE_ON_EXCEPTION
argument_list|)
decl_stmt|;
comment|//create the job config
try|try
block|{
specifier|final
name|JobConfig
name|jobConfig
init|=
operator|new
name|JobConfig
argument_list|(
name|jobType
argument_list|,
name|jobName
argument_list|,
name|jobResource
argument_list|,
name|jobSchedule
argument_list|,
name|jobUnschedule
argument_list|)
decl_stmt|;
comment|//get and set the job delay
specifier|final
name|String
name|jobDelay
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_DELAY_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|jobDelay
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|jobDelay
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|jobConfig
operator|.
name|setDelay
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|jobDelay
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//get and set the job repeat
specifier|final
name|String
name|jobRepeat
init|=
name|getConfigAttributeValue
argument_list|(
name|job
argument_list|,
name|JobConfig
operator|.
name|JOB_REPEAT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|jobRepeat
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|jobRepeat
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|jobConfig
operator|.
name|setRepeat
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|jobRepeat
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|nlParam
init|=
name|job
operator|.
name|getElementsByTagName
argument_list|(
name|ParametersExtractor
operator|.
name|PARAMETER_ELEMENT_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
init|=
name|ParametersExtractor
operator|.
name|extract
argument_list|(
name|nlParam
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|values
init|=
name|param
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jobConfig
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parameter '"
operator|+
name|param
operator|.
name|getKey
argument_list|()
operator|+
literal|"' for job '"
operator|+
name|jobName
operator|+
literal|"' has more than one value, ignoring further values."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|jobList
operator|.
name|add
argument_list|(
name|jobConfig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured scheduled '"
operator|+
name|jobType
operator|+
literal|"' job '"
operator|+
name|jobResource
operator|+
operator|(
operator|(
name|jobSchedule
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
literal|"' with trigger '"
operator|+
name|jobSchedule
operator|)
operator|)
operator|+
operator|(
operator|(
name|jobDelay
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
literal|"' with delay '"
operator|+
name|jobDelay
operator|)
operator|)
operator|+
operator|(
operator|(
name|jobRepeat
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
literal|"' repetitions '"
operator|+
name|jobRepeat
operator|)
operator|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JobException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|je
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|JobConfig
index|[]
name|configs
init|=
operator|new
name|JobConfig
index|[
name|jobList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
operator|(
name|JobConfig
operator|)
name|jobList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|JobConfig
operator|.
name|PROPERTY_SCHEDULER_JOBS
argument_list|,
name|configs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * DOCUMENT ME!      *      * @param   dbHome      * @param   con      *      * @throws  DatabaseConfigurationException      */
specifier|private
name|void
name|configureBackend
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|dbHome
parameter_list|,
name|Element
name|con
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
specifier|final
name|String
name|mysql
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mysql
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|,
name|mysql
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// directory for database files
specifier|final
name|String
name|dataFiles
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|BrokerPool
operator|.
name|DATA_DIR_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFiles
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|df
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
name|dataFiles
argument_list|,
name|dbHome
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|df
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"cannot read data directory: "
operator|+
name|df
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|,
name|df
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheMem
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|DefaultCacheManager
operator|.
name|CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheMem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|cacheMem
operator|=
name|cacheMem
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cacheMem
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cacheMem
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
operator|+
literal|" value to integer: "
operator|+
name|cacheMem
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Process the Check Max Cache value
name|String
name|checkMaxCache
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|DefaultCacheManager
operator|.
name|CACHE_CHECK_MAX_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkMaxCache
operator|==
literal|null
condition|)
block|{
name|checkMaxCache
operator|=
name|DefaultCacheManager
operator|.
name|DEFAULT_CACHE_CHECK_MAX_SIZE_STRING
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_CHECK_MAX_SIZE
argument_list|,
name|parseBoolean
argument_list|(
name|checkMaxCache
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_CHECK_MAX_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_CHECK_MAX_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|cacheShrinkThreshold
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|DefaultCacheManager
operator|.
name|SHRINK_THRESHOLD_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheShrinkThreshold
operator|==
literal|null
condition|)
block|{
name|cacheShrinkThreshold
operator|=
name|DefaultCacheManager
operator|.
name|DEFAULT_SHRINK_THRESHOLD_STRING
expr_stmt|;
block|}
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|DefaultCacheManager
operator|.
name|SHRINK_THRESHOLD_PROPERTY
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cacheShrinkThreshold
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DefaultCacheManager
operator|.
name|SHRINK_THRESHOLD_PROPERTY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DefaultCacheManager
operator|.
name|SHRINK_THRESHOLD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|DefaultCacheManager
operator|.
name|SHRINK_THRESHOLD_PROPERTY
operator|+
literal|" value to integer: "
operator|+
name|cacheShrinkThreshold
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
name|String
name|collectionCache
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|CollectionCacheManager
operator|.
name|CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionCache
operator|!=
literal|null
condition|)
block|{
name|collectionCache
operator|=
name|collectionCache
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|int
name|collectionCacheBytes
decl_stmt|;
if|if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"k"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"kb"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"mb"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"g"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"gb"
argument_list|)
condition|)
block|{
name|collectionCacheBytes
operator|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionCacheBytes
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|collectionCache
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE_BYTES
argument_list|,
name|collectionCacheBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set config {} = {}"
argument_list|,
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE_BYTES
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE_BYTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE_BYTES
operator|+
literal|" value to integer: "
operator|+
name|collectionCache
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|pageSize
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|NativeBroker
operator|.
name|PAGE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_PAGE_SIZE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_PAGE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_PAGE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|BrokerPool
operator|.
name|PROPERTY_PAGE_SIZE
operator|+
literal|" value to integer: "
operator|+
name|pageSize
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Not clear : rather looks like a buffers count
specifier|final
name|String
name|collCacheSize
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|BrokerPool
operator|.
name|COLLECTION_CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|collCacheSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|collCacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
operator|+
literal|" value to integer: "
operator|+
name|collCacheSize
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|nodesBuffer
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|BrokerPool
operator|.
name|NODES_BUFFER_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesBuffer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_NODES_BUFFER
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|nodesBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_NODES_BUFFER
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_NODES_BUFFER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|BrokerPool
operator|.
name|PROPERTY_NODES_BUFFER
operator|+
literal|" value to integer: "
operator|+
name|nodesBuffer
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|docIds
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|DOC_ID_MODE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIds
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|DOC_ID_MODE_PROPERTY
argument_list|,
name|docIds
argument_list|)
expr_stmt|;
block|}
comment|//Unused !
specifier|final
name|String
name|buffers
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
literal|"buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.buffers"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|buffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
literal|"db-connection.buffers"
operator|+
literal|" value to integer: "
operator|+
name|buffers
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
specifier|final
name|String
name|collBuffers
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
literal|"collection_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collBuffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|collBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.collections.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
literal|"db-connection.collections.buffers"
operator|+
literal|" value to integer: "
operator|+
name|collBuffers
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
specifier|final
name|String
name|wordBuffers
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
literal|"words_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wordBuffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.words.buffers"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|wordBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.words.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.words.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
literal|"db-connection.words.buffers"
operator|+
literal|" value to integer: "
operator|+
name|wordBuffers
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
specifier|final
name|String
name|elementBuffers
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
literal|"elements_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementBuffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|elementBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.elements.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
literal|"db-connection.elements.buffers"
operator|+
literal|" value to integer: "
operator|+
name|elementBuffers
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|diskSpace
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|BrokerPool
operator|.
name|DISK_SPACE_MIN_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|diskSpace
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|diskSpace
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|diskSpace
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|diskSpace
operator|=
name|diskSpace
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|diskSpace
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|DISK_SPACE_MIN_PROPERTY
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|diskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert "
operator|+
name|BrokerPool
operator|.
name|DISK_SPACE_MIN_PROPERTY
operator|+
literal|" value to integer: "
operator|+
name|diskSpace
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|posixChownRestrictedStr
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|DBBroker
operator|.
name|POSIX_CHOWN_RESTRICTED_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|posixChownRestricted
decl_stmt|;
if|if
condition|(
name|posixChownRestrictedStr
operator|==
literal|null
condition|)
block|{
name|posixChownRestricted
operator|=
literal|true
expr_stmt|;
comment|// default
block|}
else|else
block|{
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|posixChownRestrictedStr
argument_list|)
condition|)
block|{
name|posixChownRestricted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// configuration explicitly specifies that posix chown should NOT be restricted
name|posixChownRestricted
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|POSIX_CHOWN_RESTRICTED_PROPERTY
argument_list|,
name|posixChownRestricted
argument_list|)
expr_stmt|;
specifier|final
name|String
name|preserveOnCopyStr
init|=
name|getConfigAttributeValue
argument_list|(
name|con
argument_list|,
name|DBBroker
operator|.
name|PRESERVE_ON_COPY_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|DBBroker
operator|.
name|PreserveType
name|preserveOnCopy
decl_stmt|;
if|if
condition|(
name|preserveOnCopyStr
operator|==
literal|null
condition|)
block|{
name|preserveOnCopy
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|NO_PRESERVE
expr_stmt|;
comment|// default
block|}
else|else
block|{
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|preserveOnCopyStr
argument_list|)
condition|)
block|{
comment|// configuration explicitly specifies that attributes should be preserved on copy
name|preserveOnCopy
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|PRESERVE
expr_stmt|;
block|}
else|else
block|{
name|preserveOnCopy
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|NO_PRESERVE
expr_stmt|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|PRESERVE_ON_COPY_PROPERTY
argument_list|,
name|preserveOnCopy
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|securityConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_SECURITY_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|String
name|securityManagerClassName
init|=
name|BrokerPool
operator|.
name|DEFAULT_SECURITY_CLASS
decl_stmt|;
if|if
condition|(
name|securityConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Element
name|security
init|=
operator|(
name|Element
operator|)
name|securityConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|securityManagerClassName
operator|=
name|getConfigAttributeValue
argument_list|(
name|security
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
comment|//Unused
specifier|final
name|String
name|encoding
init|=
name|getConfigAttributeValue
argument_list|(
name|security
argument_list|,
literal|"password-encoding"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.security.password-encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
comment|//Unused
specifier|final
name|String
name|realm
init|=
name|getConfigAttributeValue
argument_list|(
name|security
argument_list|,
literal|"password-realm"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.security.password-realm"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"db-connection.security.password-realm: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.security.password-realm"
argument_list|)
argument_list|)
expr_stmt|;
name|RealmImpl
operator|.
name|setPasswordRealm
argument_list|(
name|realm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No password realm set, defaulting."
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|securityManagerClassName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|ClassNotFoundException
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Cannot find security manager class "
operator|+
name|securityManagerClassName
argument_list|,
name|ex
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Cannot load security manager class "
operator|+
name|securityManagerClassName
operator|+
literal|" due to "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|final
name|NodeList
name|startupConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_STARTUP_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|startupConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureStartup
argument_list|(
operator|(
name|Element
operator|)
name|startupConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Prevent NPE
specifier|final
name|List
argument_list|<
name|StartupTriggerConfig
argument_list|>
name|startupTriggers
init|=
operator|new
name|ArrayList
argument_list|<
name|StartupTriggerConfig
argument_list|>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_STARTUP_TRIGGERS
argument_list|,
name|startupTriggers
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|poolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_POOL_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configurePool
argument_list|(
operator|(
name|Element
operator|)
name|poolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|queryPoolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|XQueryPool
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPoolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQueryPool
argument_list|(
operator|(
name|Element
operator|)
name|queryPoolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|watchConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|XQueryWatchDog
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureWatchdog
argument_list|(
operator|(
name|Element
operator|)
name|watchConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|recoveries
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_RECOVERY_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveries
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureRecovery
argument_list|(
name|dbHome
argument_list|,
operator|(
name|Element
operator|)
name|recoveries
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureRecovery
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|dbHome
parameter_list|,
name|Element
name|recovery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|option
init|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|BrokerPool
operator|.
name|RECOVERY_ENABLED_ATTRIBUTE
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
argument_list|,
name|parseBoolean
argument_list|(
name|option
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|Journal
operator|.
name|RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
argument_list|,
name|parseBoolean
argument_list|(
name|option
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|BrokerPool
operator|.
name|RECOVERY_GROUP_COMMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|,
name|parseBoolean
argument_list|(
name|option
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|Journal
operator|.
name|RECOVERY_JOURNAL_DIR_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
comment|//DWES
specifier|final
name|Path
name|rf
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
name|option
argument_list|,
name|dbHome
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|rf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"cannot read data directory: "
operator|+
name|rf
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|,
name|rf
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|Journal
operator|.
name|RECOVERY_SIZE_LIMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|option
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|option
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|option
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Integer
name|size
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"size attribute in recovery section needs to be a number"
argument_list|)
operator|)
throw|;
block|}
block|}
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|BrokerPool
operator|.
name|RECOVERY_FORCE_RESTART_ATTRIBUTE
argument_list|)
expr_stmt|;
name|boolean
name|value
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_FORCE_RESTART
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_FORCE_RESTART
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_FORCE_RESTART
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|getConfigAttributeValue
argument_list|(
name|recovery
argument_list|,
name|BrokerPool
operator|.
name|RECOVERY_POST_RECOVERY_CHECK
argument_list|)
expr_stmt|;
name|value
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_CHECK
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_CHECK
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_CHECK
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param  watchDog      */
specifier|private
name|void
name|configureWatchdog
parameter_list|(
name|Element
name|watchDog
parameter_list|)
block|{
specifier|final
name|String
name|timeout
init|=
name|getConfigAttributeValue
argument_list|(
name|watchDog
argument_list|,
literal|"query-timeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|maxOutput
init|=
name|getConfigAttributeValue
argument_list|(
name|watchDog
argument_list|,
literal|"output-size-limit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxOutput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxOutput
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * DOCUMENT ME!      *      * @param  queryPool      */
specifier|private
name|void
name|configureXQueryPool
parameter_list|(
name|Element
name|queryPool
parameter_list|)
block|{
specifier|final
name|String
name|maxStackSize
init|=
name|getConfigAttributeValue
argument_list|(
name|queryPool
argument_list|,
name|XQueryPool
operator|.
name|MAX_STACK_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStackSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxStackSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|maxPoolSize
init|=
name|getConfigAttributeValue
argument_list|(
name|queryPool
argument_list|,
name|XQueryPool
operator|.
name|POOL_SIZE_ATTTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxPoolSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxPoolSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|timeout
init|=
name|getConfigAttributeValue
argument_list|(
name|queryPool
argument_list|,
name|XQueryPool
operator|.
name|TIMEOUT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StartupTriggerConfig
block|{
specifier|private
specifier|final
name|String
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
decl_stmt|;
specifier|public
name|StartupTriggerConfig
parameter_list|(
specifier|final
name|String
name|clazz
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
specifier|public
name|String
name|getClazz
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
specifier|private
name|void
name|configureStartup
parameter_list|(
specifier|final
name|Element
name|startup
parameter_list|)
block|{
comment|// Retrieve<triggers>
specifier|final
name|NodeList
name|nlTriggers
init|=
name|startup
operator|.
name|getElementsByTagName
argument_list|(
literal|"triggers"
argument_list|)
decl_stmt|;
comment|// If<triggers> exists
if|if
condition|(
name|nlTriggers
operator|!=
literal|null
operator|&&
name|nlTriggers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Get<triggers>
specifier|final
name|Element
name|triggers
init|=
operator|(
name|Element
operator|)
name|nlTriggers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get<trigger>
specifier|final
name|NodeList
name|nlTrigger
init|=
name|triggers
operator|.
name|getElementsByTagName
argument_list|(
literal|"trigger"
argument_list|)
decl_stmt|;
comment|// If<trigger> exists and there are more than 0
if|if
condition|(
name|nlTrigger
operator|!=
literal|null
operator|&&
name|nlTrigger
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Initialize trigger configuration
name|List
argument_list|<
name|StartupTriggerConfig
argument_list|>
name|startupTriggers
init|=
operator|(
name|List
argument_list|<
name|StartupTriggerConfig
argument_list|>
operator|)
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_STARTUP_TRIGGERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|startupTriggers
operator|==
literal|null
condition|)
block|{
name|startupTriggers
operator|=
operator|new
name|ArrayList
argument_list|<
name|StartupTriggerConfig
argument_list|>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_STARTUP_TRIGGERS
argument_list|,
name|startupTriggers
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over<trigger> elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlTrigger
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Get<trigger> element
specifier|final
name|Element
name|trigger
init|=
operator|(
name|Element
operator|)
name|nlTrigger
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Get @class
specifier|final
name|String
name|startupTriggerClass
init|=
name|trigger
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|boolean
name|isStartupTrigger
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Verify if class is StartupTrigger
for|for
control|(
specifier|final
name|Class
name|iface
range|:
name|Class
operator|.
name|forName
argument_list|(
name|startupTriggerClass
argument_list|)
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
literal|"org.exist.storage.StartupTrigger"
operator|.
name|equals
argument_list|(
name|iface
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|isStartupTrigger
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// if it actually is a StartupTrigger
if|if
condition|(
name|isStartupTrigger
condition|)
block|{
comment|// Parse additional parameters
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
init|=
name|ParametersExtractor
operator|.
name|extract
argument_list|(
name|trigger
operator|.
name|getElementsByTagName
argument_list|(
name|ParametersExtractor
operator|.
name|PARAMETER_ELEMENT_NAME
argument_list|)
argument_list|)
decl_stmt|;
comment|// Register trigger
name|startupTriggers
operator|.
name|add
argument_list|(
operator|new
name|StartupTriggerConfig
argument_list|(
name|startupTriggerClass
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
comment|// Done
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered StartupTrigger: "
operator|+
name|startupTriggerClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"StartupTrigger: "
operator|+
name|startupTriggerClass
operator|+
literal|" does not implement org.exist.storage.StartupTrigger. IGNORING!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not find StartupTrigger class: "
operator|+
name|startupTriggerClass
operator|+
literal|". "
operator|+
name|cnfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cnfe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * DOCUMENT ME!      *      * @param  pool      */
specifier|private
name|void
name|configurePool
parameter_list|(
name|Element
name|pool
parameter_list|)
block|{
specifier|final
name|String
name|min
init|=
name|getConfigAttributeValue
argument_list|(
name|pool
argument_list|,
name|BrokerPool
operator|.
name|MIN_CONNECTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|max
init|=
name|getConfigAttributeValue
argument_list|(
name|pool
argument_list|,
name|BrokerPool
operator|.
name|MAX_CONNECTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|sync
init|=
name|getConfigAttributeValue
argument_list|(
name|pool
argument_list|,
name|BrokerPool
operator|.
name|SYNC_PERIOD_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sync
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|sync
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|maxShutdownWait
init|=
name|getConfigAttributeValue
argument_list|(
name|pool
argument_list|,
name|BrokerPool
operator|.
name|SHUTDOWN_DELAY_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxShutdownWait
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|maxShutdownWait
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|configureIndexer
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|dbHome
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Element
name|indexer
parameter_list|)
throws|throws
name|DatabaseConfigurationException
throws|,
name|MalformedURLException
block|{
specifier|final
name|String
name|caseSensitive
init|=
name|getConfigAttributeValue
argument_list|(
name|indexer
argument_list|,
name|NativeValueIndex
operator|.
name|INDEX_CASE_SENSITIVE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|caseSensitive
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
argument_list|,
name|parseBoolean
argument_list|(
name|caseSensitive
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|depth
init|=
literal|3
decl_stmt|;
specifier|final
name|String
name|indexDepth
init|=
name|getConfigAttributeValue
argument_list|(
name|indexer
argument_list|,
name|NativeBroker
operator|.
name|INDEX_DEPTH_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexDepth
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|depth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|indexDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"parameter index-depth should be>= 3 or you will experience a severe "
operator|+
literal|"performance loss for node updates (XUpdate or XQuery update extensions)"
argument_list|)
expr_stmt|;
name|depth
operator|=
literal|3
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|depth
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|suppressWS
init|=
name|getConfigAttributeValue
argument_list|(
name|indexer
argument_list|,
name|Indexer
operator|.
name|SUPPRESS_WHITESPACE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWS
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|,
name|suppressWS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|suppressWSmixed
init|=
name|getConfigAttributeValue
argument_list|(
name|indexer
argument_list|,
name|Indexer
operator|.
name|PRESERVE_WS_MIXED_CONTENT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWSmixed
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|,
name|parseBoolean
argument_list|(
name|suppressWSmixed
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// index settings
specifier|final
name|NodeList
name|cl
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Indexer
operator|.
name|CONFIGURATION_INDEX_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexSpec
name|spec
init|=
operator|new
name|IndexSpec
argument_list|(
literal|null
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_INDEXER_CONFIG
argument_list|,
name|spec
argument_list|)
expr_stmt|;
comment|//LOG.debug(Indexer.PROPERTY_INDEXER_CONFIG + ": " + config.get(Indexer.PROPERTY_INDEXER_CONFIG));
block|}
comment|// index modules
name|NodeList
name|modules
init|=
name|indexer
operator|.
name|getElementsByTagName
argument_list|(
name|IndexManager
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|modules
operator|=
operator|(
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|IndexManager
operator|.
name|CONFIGURATION_MODULE_ELEMENT_NAME
argument_list|)
expr_stmt|;
specifier|final
name|IndexModuleConfig
index|[]
name|modConfig
init|=
operator|new
name|IndexModuleConfig
index|[
name|modules
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|IndexManager
operator|.
name|INDEXER_MODULES_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|IndexManager
operator|.
name|INDEXER_MODULES_ID_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|className
operator|==
literal|null
operator|)
operator|||
operator|(
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Required attribute class is missing for module"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|id
operator|==
literal|null
operator|)
operator|||
operator|(
name|id
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Required attribute id is missing for module"
argument_list|)
operator|)
throw|;
block|}
name|modConfig
index|[
name|i
index|]
operator|=
operator|new
name|IndexModuleConfig
argument_list|(
name|id
argument_list|,
name|className
argument_list|,
name|elem
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|IndexManager
operator|.
name|PROPERTY_INDEXER_MODULES
argument_list|,
name|modConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureValidation
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|dbHome
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Element
name|validation
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// Determine validation mode
specifier|final
name|String
name|mode
init|=
name|getConfigAttributeValue
argument_list|(
name|validation
argument_list|,
name|XMLReaderObjectFactory
operator|.
name|VALIDATION_MODE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Extract catalogs
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating eXist catalog resolver"
argument_list|)
expr_stmt|;
specifier|final
name|eXistXMLCatalogResolver
name|resolver
init|=
operator|new
name|eXistXMLCatalogResolver
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|entityResolver
init|=
name|validation
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_ENTITY_RESOLVER_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityResolver
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Element
name|r
init|=
operator|(
name|Element
operator|)
name|entityResolver
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|catalogs
init|=
name|r
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_CATALOG_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|catalogs
operator|.
name|getLength
argument_list|()
operator|+
literal|" catalog uri entries."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using dbHome="
operator|+
name|dbHome
argument_list|)
expr_stmt|;
comment|// Determine webapps directory. SingleInstanceConfiguration cannot
comment|// be used at this phase. Trick is to check wether dbHOME is
comment|// pointing to a WEB-INF directory, meaning inside war file)
specifier|final
name|Path
name|webappHome
init|=
name|dbHome
operator|.
name|map
argument_list|(
name|h
lambda|->
block|{
if|if
condition|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|h
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"WEB-INF"
argument_list|)
condition|)
block|{
return|return
name|h
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|h
operator|.
name|resolve
argument_list|(
literal|"webapp"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|orElse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"webapp"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using webappHome="
operator|+
name|webappHome
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get and store all URIs
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allURIs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|catalogs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
operator|(
operator|(
name|Element
operator|)
name|catalogs
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
comment|// when uri attribute is filled in
comment|// Substitute string, creating an uri from a local file
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|"${WEBAPP_HOME}"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{WEBAPP_HOME\\}"
argument_list|,
name|webappHome
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|"${EXIST_HOME}"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{EXIST_HOME\\}"
argument_list|,
name|dbHome
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add uri to confiuration
name|LOG
operator|.
name|info
argument_list|(
literal|"Add catalog uri "
operator|+
name|uri
operator|+
literal|""
argument_list|)
expr_stmt|;
name|allURIs
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
name|resolver
operator|.
name|setCatalogs
argument_list|(
name|allURIs
argument_list|)
expr_stmt|;
comment|// Store all configured URIs
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CATALOG_URIS
argument_list|,
name|allURIs
argument_list|)
expr_stmt|;
block|}
comment|// Store resolver
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CATALOG_RESOLVER
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
comment|// cache
specifier|final
name|GrammarPool
name|gp
init|=
operator|new
name|GrammarPool
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|GRAMMER_POOL
argument_list|,
name|gp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the value of a configuration attribute      *      * The value typically is specified in the conf.xml file, but can be overriden with using a System Property      *      * @param   element        The attribute's parent element      * @param   attributeName  The name of the attribute      *      * @return  The value of the attribute      */
specifier|private
name|String
name|getConfigAttributeValue
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
name|attributeName
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|property
init|=
name|getAttributeSystemPropertyName
argument_list|(
name|element
argument_list|,
name|attributeName
argument_list|)
decl_stmt|;
name|value
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
comment|// If the value has not been overriden in a system property, then get it from the configuration
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration value overriden by system property: "
operator|+
name|property
operator|+
literal|", with value: "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|element
operator|.
name|getAttribute
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|value
operator|)
return|;
block|}
comment|/**      * Generates a suitable system property name from the given config attribute and parent element.      *      * values are of the form org.element.element.....attribute and follow the heirarchical structure of the conf.xml file.       * For example, the db-connection cacheSize property name would be org.exist.db-connection.cacheSize      *      * @param   element        The attribute's parent element      * @param   attributeName  The name of the attribute      *      * @return  The generated system property name      */
specifier|private
name|String
name|getAttributeSystemPropertyName
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|property
init|=
operator|new
name|StringBuilder
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
name|Node
name|parent
init|=
name|element
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|property
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|property
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|instanceof
name|Element
condition|)
block|{
specifier|final
name|String
name|parentName
init|=
operator|(
operator|(
name|Element
operator|)
name|parent
operator|)
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|property
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|property
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|parentName
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
name|property
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"org."
argument_list|)
expr_stmt|;
return|return
operator|(
name|property
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|getConfigFilePath
parameter_list|()
block|{
return|return
name|configFilePath
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|getExistHome
parameter_list|()
block|{
return|return
name|existHome
return|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|T
name|defaultValue
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|T
operator|)
name|config
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Takes the passed string and converts it to a non-null<code>Boolean</code> object. If value is null, the specified default value is used.      * Otherwise, Boolean.TRUE is returned if and only if the passed string equals&quot;yes&quot; or&quot;true&quot;, ignoring case.      *      * @param   value         The string to parse      * @param   defaultValue  The default if the string is null      *      * @return  The parsed<code>Boolean</code>      */
specifier|public
specifier|static
name|boolean
name|parseBoolean
parameter_list|(
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|value
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|v
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|int
name|getInteger
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|instanceof
name|Integer
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
operator|(
name|int
operator|)
name|v
argument_list|)
operator|.
name|orElse
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * (non-Javadoc).      *      * @param   exception  DOCUMENT ME!      *      * @throws  SAXException  DOCUMENT ME!      *      * @see     org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)      */
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error occurred while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * (non-Javadoc).      *      * @param   exception  DOCUMENT ME!      *      * @throws  SAXException  DOCUMENT ME!      *      * @see     org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)      */
annotation|@
name|Override
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error occurred while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * (non-Javadoc).      *      * @param   exception  DOCUMENT ME!      *      * @throws  SAXException  DOCUMENT ME!      *      * @see     org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)      */
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error occurred while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|IndexModuleConfig
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|className
decl_stmt|;
specifier|private
specifier|final
name|Element
name|config
decl_stmt|;
specifier|public
name|IndexModuleConfig
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|Element
name|config
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
operator|(
name|id
operator|)
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
operator|(
name|className
operator|)
return|;
block|}
specifier|public
name|Element
name|getConfig
parameter_list|()
block|{
return|return
operator|(
name|config
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

