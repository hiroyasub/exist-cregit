begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|tools
operator|.
name|CatalogResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_class
specifier|public
class|class
name|Configuration
implements|implements
name|ErrorHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Logger
specifier|protected
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
specifier|protected
name|HashMap
name|config
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//Configuration
specifier|protected
name|String
name|file
init|=
literal|null
decl_stmt|;
comment|//config file (conf.xml)
specifier|public
specifier|static
specifier|final
class|class
name|SystemTaskConfig
block|{
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|long
name|period
decl_stmt|;
specifier|private
name|Properties
name|params
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|SystemTaskConfig
parameter_list|(
name|String
name|className
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
return|return
name|period
return|;
block|}
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
comment|//Constructor (wrapper)
specifier|public
name|Configuration
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//Constructor
specifier|public
name|Configuration
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|dbHome
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
try|try
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|//firstly, try to read the configuration from a file within the classpath
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from classloader"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Default file name
name|file
operator|=
literal|"conf.xml"
expr_stmt|;
block|}
comment|//otherise, secondly try to read configuration from file. Guess the location if necessary
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
comment|//try and read the config file from the specified home folder
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|f
operator|.
name|isAbsolute
argument_list|()
operator|)
operator|&&
name|dbHome
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|dbHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|file
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|//if cant read config from specified home folder
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to read configuration. Trying to guess location ..."
argument_list|)
expr_stmt|;
comment|//Read from the configration file from the guessed home folder
if|if
condition|(
name|dbHome
operator|==
literal|null
condition|)
block|{
comment|// try to determine exist home directory
name|dbHome
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbHome
operator|==
literal|null
condition|)
name|dbHome
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbHome
operator|!=
literal|null
condition|)
name|file
operator|=
name|dbHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|file
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"giving up"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Unable to read configuration file"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|// Create resolver
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating CatalogResolver"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"xml.catalog.verbosity"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|CatalogResolver
name|resolver
init|=
operator|new
name|CatalogResolver
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"resolver"
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
comment|// initialize xml parser
comment|// we use eXist's in-memory DOM implementation to work
comment|// around a bug in Xerces
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//            factory.setFeature("http://apache.org/xml/features/validation/schema", true);
comment|//            factory.setFeature("http://apache.org/xml/features/validation/dynamic", true);
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|//indexer settings
name|NodeList
name|indexer
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"indexer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexer
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureIndexer
argument_list|(
name|dbHome
argument_list|,
name|doc
argument_list|,
name|indexer
argument_list|)
expr_stmt|;
block|}
comment|//db connection settings
name|NodeList
name|dbcon
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"db-connection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbcon
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureBackend
argument_list|(
name|dbHome
argument_list|,
name|dbcon
argument_list|)
expr_stmt|;
block|}
comment|//serializer settings
name|NodeList
name|serializers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"serializer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureSerializer
argument_list|(
name|serializers
argument_list|)
expr_stmt|;
block|}
comment|//XUpdate settings
name|NodeList
name|xupdates
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"xupdate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdates
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXUpdate
argument_list|(
name|xupdates
argument_list|)
expr_stmt|;
block|}
comment|//XQuery settings
name|NodeList
name|xquery
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"xquery"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xquery
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQuery
argument_list|(
operator|(
name|Element
operator|)
name|xquery
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XACML settings
name|NodeList
name|xacml
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"xacml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xacml
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXACML
argument_list|(
operator|(
name|Element
operator|)
name|xacml
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*             CLUSTER CONFIGURATION...              */
name|NodeList
name|clusters
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusters
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureCluster
argument_list|(
operator|(
name|Element
operator|)
name|clusters
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*             END CLUSTER CONFIGURATION....              */
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|cfg
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|file
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|cfg
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|file
argument_list|,
name|io
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|configureCluster
parameter_list|(
name|Element
name|cluster
parameter_list|)
block|{
name|String
name|protocol
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"protocol"
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"cluster.protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"dbaUser"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"cluster.user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|String
name|pwd
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"dbaPassword"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"cluster.pwd"
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
block|}
name|String
name|dir
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"journalDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"cluster.journalDir"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|String
name|excludedColl
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"exclude"
argument_list|)
decl_stmt|;
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludedColl
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|excl
init|=
name|excludedColl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|excl
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
condition|)
name|list
operator|.
name|add
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"cluster.exclude"
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|/*Cluster parameters for test*/
name|String
name|maxStore
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"journalMaxItem"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStore
operator|==
literal|null
operator|||
name|maxStore
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|maxStore
operator|=
literal|"65000"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
literal|"cluster.journal.maxStore"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxStore
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|shift
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
literal|"journalIndexShift"
argument_list|)
decl_stmt|;
if|if
condition|(
name|shift
operator|==
literal|null
operator|||
name|shift
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|shift
operator|=
literal|"100"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
literal|"cluster.journal.shift"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IN CONFIGURE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cluster.journal.maxStore "
operator|+
name|this
operator|.
name|getProperty
argument_list|(
literal|"cluster.journal.maxStore"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cluster.journal.shift "
operator|+
name|this
operator|.
name|getProperty
argument_list|(
literal|"cluster.journal.shift"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureXQuery
parameter_list|(
name|Element
name|xquery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|NodeList
name|builtins
init|=
name|xquery
operator|.
name|getElementsByTagName
argument_list|(
literal|"builtin-modules"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builtins
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|builtins
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeList
name|modules
init|=
name|elem
operator|.
name|getElementsByTagName
argument_list|(
literal|"module"
argument_list|)
decl_stmt|;
name|String
name|moduleList
index|[]
index|[]
init|=
operator|new
name|String
index|[
name|modules
operator|.
name|getLength
argument_list|()
index|]
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires an attribute 'uri'"
argument_list|)
throw|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires an attribute 'class'"
argument_list|)
throw|;
name|moduleList
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|uri
expr_stmt|;
name|moduleList
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
name|clazz
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
literal|"xquery.modules"
argument_list|,
name|moduleList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|configureXACML
parameter_list|(
name|Element
name|xacml
parameter_list|)
block|{
name|String
name|enable
init|=
name|xacml
operator|.
name|getAttribute
argument_list|(
literal|"enable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|enable
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"xacml.enable"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|enable
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param xupdates      * @throws NumberFormatException      */
specifier|private
name|void
name|configureXUpdate
parameter_list|(
name|NodeList
name|xupdates
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|Element
name|xupdate
init|=
operator|(
name|Element
operator|)
name|xupdates
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|growth
init|=
name|xupdate
operator|.
name|getAttribute
argument_list|(
literal|"growth-factor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|growth
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"xupdate.growth-factor"
argument_list|,
operator|new
name|Integer
argument_list|(
name|growth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fragmentation
init|=
name|xupdate
operator|.
name|getAttribute
argument_list|(
literal|"allowed-fragmentation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmentation
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"xupdate.fragmentation"
argument_list|,
operator|new
name|Integer
argument_list|(
name|fragmentation
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|consistencyCheck
init|=
name|xupdate
operator|.
name|getAttribute
argument_list|(
literal|"enable-consistency-checks"
argument_list|)
decl_stmt|;
if|if
condition|(
name|consistencyCheck
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"xupdate.consistency-checks"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|consistencyCheck
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param serializers      */
specifier|private
name|void
name|configureSerializer
parameter_list|(
name|NodeList
name|serializers
parameter_list|)
block|{
name|Element
name|serializer
init|=
operator|(
name|Element
operator|)
name|serializers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|xinclude
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"enable-xinclude"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xinclude
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.enable-xinclude"
argument_list|,
name|xinclude
argument_list|)
expr_stmt|;
name|String
name|xsl
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"enable-xsl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsl
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.enable-xsl"
argument_list|,
name|xsl
argument_list|)
expr_stmt|;
name|String
name|indent
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.indent"
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|String
name|internalId
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"add-exist-id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalId
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.add-exist-id"
argument_list|,
name|internalId
argument_list|)
expr_stmt|;
name|String
name|tagElementMatches
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"match-tagging-elements"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagElementMatches
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.match-tagging-elements"
argument_list|,
name|tagElementMatches
argument_list|)
expr_stmt|;
name|String
name|tagAttributeMatches
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
literal|"match-tagging-attributes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagAttributeMatches
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"serialization.match-tagging-attributes"
argument_list|,
name|tagAttributeMatches
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param dbHome      * @param dbcon      * @throws DatabaseConfigurationException      */
specifier|private
name|void
name|configureBackend
parameter_list|(
name|String
name|dbHome
parameter_list|,
name|NodeList
name|dbcon
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Element
name|con
init|=
operator|(
name|Element
operator|)
name|dbcon
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|cacheMem
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"cacheSize"
argument_list|)
decl_stmt|;
name|String
name|pageSize
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"pageSize"
argument_list|)
decl_stmt|;
name|String
name|dataFiles
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"files"
argument_list|)
decl_stmt|;
name|String
name|buffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"buffers"
argument_list|)
decl_stmt|;
name|String
name|collBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"collection_buffers"
argument_list|)
decl_stmt|;
name|String
name|wordBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"words_buffers"
argument_list|)
decl_stmt|;
name|String
name|elementBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"elements_buffers"
argument_list|)
decl_stmt|;
name|String
name|freeMem
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"free_mem_min"
argument_list|)
decl_stmt|;
name|String
name|mysql
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"database"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mysql
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|mysql
argument_list|)
expr_stmt|;
comment|// directory for database files
if|if
condition|(
name|dataFiles
operator|!=
literal|null
condition|)
block|{
name|File
name|df
init|=
operator|new
name|File
argument_list|(
name|dataFiles
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|df
operator|.
name|isAbsolute
argument_list|()
operator|)
operator|&&
name|dbHome
operator|!=
literal|null
condition|)
block|{
name|dataFiles
operator|=
name|dbHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|dataFiles
expr_stmt|;
name|df
operator|=
operator|new
name|File
argument_list|(
name|dataFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|df
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"cannot read data directory: "
operator|+
name|df
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.data-dir"
argument_list|,
name|df
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"data directory = "
operator|+
name|df
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheMem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
name|cacheMem
operator|=
name|cacheMem
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cacheMem
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.cache-size"
argument_list|,
operator|new
name|Integer
argument_list|(
name|cacheMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|buffers
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|buffers
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.page-size"
argument_list|,
operator|new
name|Integer
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
if|if
condition|(
name|collBuffers
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|collBuffers
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
if|if
condition|(
name|wordBuffers
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.words.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|wordBuffers
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
if|if
condition|(
name|elementBuffers
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|elementBuffers
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
if|if
condition|(
name|freeMem
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.min_free_memory"
argument_list|,
operator|new
name|Integer
argument_list|(
name|freeMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
name|NodeList
name|poolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"pool"
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configurePool
argument_list|(
name|poolConf
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|queryPoolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"query-pool"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPoolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQueryPool
argument_list|(
name|queryPoolConf
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|watchConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"watchdog"
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureWatchdog
argument_list|(
name|watchConf
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|sysTasks
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"system-task"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysTasks
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureSystemTasks
argument_list|(
name|sysTasks
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|recovery
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"recovery"
argument_list|)
decl_stmt|;
if|if
condition|(
name|recovery
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureRecovery
argument_list|(
name|recovery
argument_list|)
expr_stmt|;
block|}
name|configurePermissions
argument_list|(
name|con
operator|.
name|getElementsByTagName
argument_list|(
literal|"default-permissions"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureRecovery
parameter_list|(
name|NodeList
name|nodes
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Element
name|recovery
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|recovery
operator|.
name|getAttribute
argument_list|(
literal|"enabled"
argument_list|)
decl_stmt|;
name|boolean
name|value
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
literal|"db-connection.recovery.enabled"
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
literal|"sync-on-commit"
argument_list|)
expr_stmt|;
name|value
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
literal|"db-connection.recovery.sync-on-commit"
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
literal|"group-commit"
argument_list|)
expr_stmt|;
name|value
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
literal|"db-connection.recovery.group-commit"
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
literal|"journal-dir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|setProperty
argument_list|(
literal|"db-connection.recovery.journal-dir"
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|option
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
name|option
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|option
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|Integer
name|size
init|=
operator|new
name|Integer
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
literal|"db-connection.recovery.size-limit"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"size attribute in recovery section needs to be a number"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|configurePermissions
parameter_list|(
name|NodeList
name|nodes
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
operator|&&
name|option
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
name|perms
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
literal|"indexer.permissions.collection"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"collection attribute in default-permissions section needs "
operator|+
literal|"to be an octal number"
argument_list|)
throw|;
block|}
block|}
name|option
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"resource"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
operator|&&
name|option
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
name|perms
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
literal|"indexer.permissions.resource"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"resource attribute in default-permissions section needs "
operator|+
literal|"to be an octal number"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * @param sysTasks      */
specifier|private
name|void
name|configureSystemTasks
parameter_list|(
name|NodeList
name|sysTasks
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|SystemTaskConfig
name|taskList
index|[]
init|=
operator|new
name|SystemTaskConfig
index|[
name|sysTasks
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sysTasks
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|taskDef
init|=
operator|(
name|Element
operator|)
name|sysTasks
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|classAttr
init|=
name|taskDef
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classAttr
operator|==
literal|null
operator|||
name|classAttr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"No class specified for system-task"
argument_list|)
throw|;
name|String
name|periodAttr
init|=
name|taskDef
operator|.
name|getAttribute
argument_list|(
literal|"period"
argument_list|)
decl_stmt|;
if|if
condition|(
name|periodAttr
operator|==
literal|null
operator|||
name|periodAttr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"No period specified for system-task"
argument_list|)
throw|;
name|long
name|period
decl_stmt|;
try|try
block|{
name|period
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|periodAttr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Attribute period is not a number: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|SystemTaskConfig
name|sysTask
init|=
operator|new
name|SystemTaskConfig
argument_list|(
name|classAttr
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|NodeList
name|params
init|=
name|taskDef
operator|.
name|getElementsByTagName
argument_list|(
literal|"parameter"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|params
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|param
init|=
operator|(
name|Element
operator|)
name|params
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"No name specified for parameter"
argument_list|)
throw|;
name|sysTask
operator|.
name|params
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|taskList
index|[
name|i
index|]
operator|=
name|sysTask
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.system-task-config"
argument_list|,
name|taskList
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param watchConf      */
specifier|private
name|void
name|configureWatchdog
parameter_list|(
name|NodeList
name|watchConf
parameter_list|)
block|{
name|Element
name|watchDog
init|=
operator|(
name|Element
operator|)
name|watchConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|timeout
init|=
name|watchDog
operator|.
name|getAttribute
argument_list|(
literal|"query-timeout"
argument_list|)
decl_stmt|;
name|String
name|maxOutput
init|=
name|watchDog
operator|.
name|getAttribute
argument_list|(
literal|"output-size-limit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.watchdog.query-timeout"
argument_list|,
operator|new
name|Long
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|maxOutput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.watchdog.output-size-limit"
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
comment|/**      * @param queryPoolConf      */
specifier|private
name|void
name|configureXQueryPool
parameter_list|(
name|NodeList
name|queryPoolConf
parameter_list|)
block|{
name|Element
name|queryPool
init|=
operator|(
name|Element
operator|)
name|queryPoolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|maxStackSize
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
literal|"max-stack-size"
argument_list|)
decl_stmt|;
name|String
name|maxPoolSize
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|String
name|timeout
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
name|String
name|timeoutCheckInterval
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
literal|"timeout-check-interval"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStackSize
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.query-pool.max-stack-size"
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxStackSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|maxPoolSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.query-pool.size"
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxPoolSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.query-pool.timeout"
argument_list|,
operator|new
name|Long
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|timeoutCheckInterval
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.query-pool.timeout-check-interval"
argument_list|,
operator|new
name|Long
argument_list|(
name|timeoutCheckInterval
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/**      * @param poolConf      */
specifier|private
name|void
name|configurePool
parameter_list|(
name|NodeList
name|poolConf
parameter_list|)
block|{
name|Element
name|pool
init|=
operator|(
name|Element
operator|)
name|poolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|min
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
name|String
name|max
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
name|String
name|sync
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
literal|"sync-period"
argument_list|)
decl_stmt|;
name|String
name|maxShutdownWait
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
literal|"wait-before-shutdown"
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.pool.min"
argument_list|,
operator|new
name|Integer
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.pool.max"
argument_list|,
operator|new
name|Integer
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|sync
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.pool.sync-period"
argument_list|,
operator|new
name|Long
argument_list|(
name|sync
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|maxShutdownWait
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.pool.shutdown-wait"
argument_list|,
operator|new
name|Long
argument_list|(
name|maxShutdownWait
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/**      * @param dbHome      * @param doc      * @param indexer      * @throws DatabaseConfigurationException      * @throws MalformedURLException      * @throws IOException      */
specifier|private
name|void
name|configureIndexer
parameter_list|(
name|String
name|dbHome
parameter_list|,
name|Document
name|doc
parameter_list|,
name|NodeList
name|indexer
parameter_list|)
throws|throws
name|DatabaseConfigurationException
throws|,
name|MalformedURLException
block|{
name|Element
name|p
init|=
operator|(
name|Element
operator|)
name|indexer
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|parseNum
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"parseNumbers"
argument_list|)
decl_stmt|;
name|String
name|indexDepth
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"index-depth"
argument_list|)
decl_stmt|;
name|String
name|stemming
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"stemming"
argument_list|)
decl_stmt|;
name|String
name|termFreq
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"track-term-freq"
argument_list|)
decl_stmt|;
name|String
name|suppressWS
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"suppress-whitespace"
argument_list|)
decl_stmt|;
name|String
name|caseSensitive
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"caseSensitive"
argument_list|)
decl_stmt|;
name|String
name|tokenizer
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"tokenizer"
argument_list|)
decl_stmt|;
name|String
name|validation
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"validation"
argument_list|)
decl_stmt|;
name|String
name|suppressWSmixed
init|=
name|p
operator|.
name|getAttribute
argument_list|(
literal|"preserve-whitespace-mixed-content"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseNum
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.indexNumbers"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|parseNum
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stemming
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.stem"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|stemming
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|termFreq
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.store-term-freq"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|termFreq
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|caseSensitive
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.case-sensitive"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|caseSensitive
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppressWS
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.suppress-whitespace"
argument_list|,
name|suppressWS
argument_list|)
expr_stmt|;
if|if
condition|(
name|validation
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.validation"
argument_list|,
name|validation
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizer
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.tokenizer"
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexDepth
operator|!=
literal|null
condition|)
try|try
block|{
name|int
name|depth
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|indexDepth
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"indexer.index-depth"
argument_list|,
operator|new
name|Integer
argument_list|(
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|suppressWSmixed
operator|!=
literal|null
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"indexer.preserve-whitespace-mixed-content"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|suppressWSmixed
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// index settings
name|NodeList
name|cl
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IndexSpec
name|spec
init|=
operator|new
name|IndexSpec
argument_list|(
name|elem
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"indexer.config"
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
comment|// stopwords
name|NodeList
name|stopwords
init|=
name|p
operator|.
name|getElementsByTagName
argument_list|(
literal|"stopwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopwords
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|stopwordFile
init|=
operator|(
operator|(
name|Element
operator|)
name|stopwords
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|File
name|sf
init|=
operator|new
name|File
argument_list|(
name|stopwordFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sf
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|stopwordFile
operator|=
name|dbHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|stopwordFile
expr_stmt|;
name|sf
operator|=
operator|new
name|File
argument_list|(
name|stopwordFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sf
operator|.
name|canRead
argument_list|()
condition|)
name|config
operator|.
name|put
argument_list|(
literal|"stopwords"
argument_list|,
name|stopwordFile
argument_list|)
expr_stmt|;
block|}
name|CatalogResolver
name|resolver
init|=
operator|(
name|CatalogResolver
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"resolver"
argument_list|)
decl_stmt|;
name|NodeList
name|entityResolver
init|=
name|p
operator|.
name|getElementsByTagName
argument_list|(
literal|"entity-resolver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityResolver
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|r
init|=
operator|(
name|Element
operator|)
name|entityResolver
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeList
name|catalogs
init|=
name|r
operator|.
name|getElementsByTagName
argument_list|(
literal|"catalog"
argument_list|)
decl_stmt|;
comment|// TODO remove. log function does not work yet
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|catalogs
operator|.
name|getLength
argument_list|()
operator|+
literal|" catalog entries."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|catalogs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|catalog
init|=
operator|(
operator|(
name|Element
operator|)
name|catalogs
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|File
name|catalogFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbHome
operator|==
literal|null
condition|)
name|catalogFile
operator|=
operator|new
name|File
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
else|else
name|catalogFile
operator|=
operator|new
name|File
argument_list|(
name|dbHome
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalogFile
operator|!=
literal|null
operator|&&
name|catalogFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading catalog '"
operator|+
name|catalogFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// TODO dizzzz remove debug
comment|//System.out.println("Loading catalog '"+catalogFile.getAbsolutePath()+"'.");
try|try
block|{
name|resolver
operator|.
name|getCatalog
argument_list|()
operator|.
name|parseCatalog
argument_list|(
name|catalogFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"An exception occurred while reading catalog: "
operator|+
name|catalogFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Could not load catalog '"
operator|+
name|catalogFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getInteger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|obj
init|=
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|Integer
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
operator|(
operator|(
name|Integer
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

