begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|ClusterComunication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|journal
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|eXistURLStreamHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|XMLSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|XACMLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|CollectionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeValueIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|TextSearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|GrammarPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|resolver
operator|.
name|eXistXMLCatalogResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TransformerFactoryAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SimpleTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_class
specifier|public
class|class
name|Configuration
implements|implements
name|ErrorHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Logger
specifier|protected
name|String
name|configFilePath
init|=
literal|null
decl_stmt|;
specifier|protected
name|File
name|existHome
init|=
literal|null
decl_stmt|;
specifier|protected
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
specifier|protected
name|HashMap
name|config
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//Configuration
specifier|public
specifier|static
specifier|final
class|class
name|JobConfig
block|{
specifier|private
name|String
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|jobName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|resourceName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|schedule
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|delay
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|repeat
init|=
name|SimpleTrigger
operator|.
name|REPEAT_INDEFINITELY
decl_stmt|;
specifier|private
name|Properties
name|parameters
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|JobConfig
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|String
name|schedule
parameter_list|)
throws|throws
name|JobException
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|type
operator|=
name|Scheduler
operator|.
name|JOB_TYPE_USER
expr_stmt|;
block|}
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
if|if
condition|(
name|resourceName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resourceName
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|JobException
argument_list|(
name|JobException
operator|.
name|JOB_ABORT
argument_list|,
literal|"Job must have a resource for execution"
argument_list|)
throw|;
block|}
if|if
condition|(
name|schedule
operator|==
literal|null
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|Scheduler
operator|.
name|JOB_TYPE_STARTUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JobException
argument_list|(
name|JobException
operator|.
name|JOB_ABORT
argument_list|,
literal|"Job must have a schedule"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|schedule
operator|=
name|schedule
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
return|return
name|resourceName
return|;
block|}
specifier|public
name|String
name|getSchedule
parameter_list|()
block|{
return|return
name|schedule
return|;
block|}
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
specifier|public
name|void
name|setRepeat
parameter_list|(
name|int
name|repeat
parameter_list|)
block|{
name|this
operator|.
name|repeat
operator|=
name|repeat
expr_stmt|;
block|}
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
specifier|public
name|int
name|getRepeat
parameter_list|()
block|{
return|return
name|repeat
return|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Properties
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|IndexModuleConfig
block|{
specifier|protected
name|String
name|id
decl_stmt|;
specifier|protected
name|String
name|className
decl_stmt|;
specifier|protected
name|Element
name|config
decl_stmt|;
specifier|public
name|IndexModuleConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|className
parameter_list|,
name|Element
name|config
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|Element
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
specifier|public
name|Configuration
parameter_list|()
throws|throws
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
literal|"conf.xml"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
parameter_list|(
name|String
name|configFilename
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
name|configFilename
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
parameter_list|(
name|String
name|configFilename
parameter_list|,
name|String
name|existHomeDirname
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
try|try
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configFilename
operator|==
literal|null
condition|)
block|{
comment|// Default file name
name|configFilename
operator|=
literal|"conf.xml"
expr_stmt|;
block|}
comment|// firstly, try to read the configuration from a file within the
comment|// classpath
try|try
block|{
name|is
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from classloader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// EB: ignore and go forward, e.g. in case there is an absolute
comment|// file name for configFileName
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, secondly try to read configuration from file. Guess the
comment|// location if necessary
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|existHome
operator|=
operator|(
name|existHomeDirname
operator|!=
literal|null
operator|)
condition|?
operator|new
name|File
argument_list|(
name|existHomeDirname
argument_list|)
else|:
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
expr_stmt|;
if|if
condition|(
name|existHome
operator|==
literal|null
condition|)
block|{
comment|// EB: try to create existHome based on location of config file
comment|// when config file points to absolute file location
name|File
name|absoluteConfigFile
init|=
operator|new
name|File
argument_list|(
name|configFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|absoluteConfigFile
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|absoluteConfigFile
operator|.
name|exists
argument_list|()
operator|&&
name|absoluteConfigFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|existHome
operator|=
name|absoluteConfigFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|configFilename
operator|=
name|absoluteConfigFile
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|configFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|existHome
operator|!=
literal|null
condition|)
comment|// try the passed or constructed existHome first
name|configFile
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
name|configFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|configFile
operator|==
literal|null
condition|)
name|configFile
operator|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
name|configFilename
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|configFile
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Unable to read configuration file at "
operator|+
name|configFile
argument_list|)
throw|;
name|configFilePath
operator|=
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
comment|// set dbHome to parent of the conf file found, to resolve relative
comment|// path from conf file
name|existHomeDirname
operator|=
name|configFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from file "
operator|+
name|configFile
argument_list|)
expr_stmt|;
block|}
comment|// initialize xml parser
comment|// we use eXist's in-memory DOM implementation to work
comment|// around a bug in Xerces
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//            factory.setFeature("http://apache.org/xml/features/validation/schema", true);
comment|//            factory.setFeature("http://apache.org/xml/features/validation/dynamic", true);
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|//indexer settings
name|NodeList
name|indexers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Indexer
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureIndexer
argument_list|(
name|existHomeDirname
argument_list|,
name|doc
argument_list|,
operator|(
name|Element
operator|)
name|indexers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//scheduler settings
name|NodeList
name|schedulers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Scheduler
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureScheduler
argument_list|(
operator|(
name|Element
operator|)
name|schedulers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//db connection settings
name|NodeList
name|dbcon
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_CONNECTION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbcon
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureBackend
argument_list|(
name|existHomeDirname
argument_list|,
operator|(
name|Element
operator|)
name|dbcon
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//transformer settings
name|NodeList
name|transformers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|transformers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureTransformer
argument_list|(
operator|(
name|Element
operator|)
name|transformers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//serializer settings
name|NodeList
name|serializers
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Serializer
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializers
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureSerializer
argument_list|(
operator|(
name|Element
operator|)
name|serializers
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XUpdate settings
name|NodeList
name|xupdates
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|DBBroker
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdates
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXUpdate
argument_list|(
operator|(
name|Element
operator|)
name|xupdates
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XQuery settings
name|NodeList
name|xquery
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|XQueryContext
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|xquery
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQuery
argument_list|(
operator|(
name|Element
operator|)
name|xquery
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//XACML settings
name|NodeList
name|xacml
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|XACMLConstants
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|xacml
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXACML
argument_list|(
operator|(
name|Element
operator|)
name|xacml
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Cluster configuration
name|NodeList
name|clusters
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|ClusterComunication
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusters
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureCluster
argument_list|(
operator|(
name|Element
operator|)
name|clusters
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Validation
name|NodeList
name|validations
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|validations
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureValidation
argument_list|(
name|existHomeDirname
argument_list|,
name|doc
argument_list|,
operator|(
name|Element
operator|)
name|validations
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|configFilename
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|cfg
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|configFilename
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|cfg
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading config file: "
operator|+
name|configFilename
argument_list|,
name|io
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|configureCluster
parameter_list|(
name|Element
name|cluster
parameter_list|)
block|{
name|String
name|protocol
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|ClusterComunication
operator|.
name|CLUSTER_PROTOCOL_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PROTOCOL
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PROTOCOL
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PROTOCOL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|ClusterComunication
operator|.
name|CLUSTER_USER_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_USER
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|pwd
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|ClusterComunication
operator|.
name|CLUSTER_PWD_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PWD
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PWD
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_PWD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|dir
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|JournalManager
operator|.
name|JOURNAL_DIR_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_JOURNAL_DIR
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_JOURNAL_DIR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_JOURNAL_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|excludedColl
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|ClusterComunication
operator|.
name|CLUSTER_EXCLUDED_COLLECTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludedColl
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|excl
init|=
name|excludedColl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|excl
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
condition|)
name|list
operator|.
name|add
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_EXCLUDED_COLLECTIONS
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_EXCLUDED_COLLECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|ClusterComunication
operator|.
name|PROPERTY_CLUSTER_EXCLUDED_COLLECTIONS
argument_list|)
argument_list|)
expr_stmt|;
comment|/*Cluster parameters for test*/
name|String
name|maxStore
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|JournalManager
operator|.
name|CLUSTER_JOURNAL_MAXSTORE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStore
operator|==
literal|null
operator|||
name|maxStore
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|maxStore
operator|=
literal|"65000"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_MAXSTORE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxStore
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_MAXSTORE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_MAXSTORE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|shift
init|=
name|cluster
operator|.
name|getAttribute
argument_list|(
name|JournalManager
operator|.
name|CLUSTER_JOURNAL_SHIFT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|shift
operator|==
literal|null
operator|||
name|shift
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|shift
operator|=
literal|"100"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_SHIFT
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_SHIFT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|JournalManager
operator|.
name|PROPERTY_CLUSTER_JOURNAL_SHIFT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureXQuery
parameter_list|(
name|Element
name|xquery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|//java binding
name|String
name|javabinding
init|=
name|xquery
operator|.
name|getAttribute
argument_list|(
name|FunctionFactory
operator|.
name|ENABLE_JAVA_BINDING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|javabinding
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
argument_list|,
name|javabinding
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_ENABLE_JAVA_BINDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|optimize
init|=
name|xquery
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|ENABLE_QUERY_REWRITING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|optimize
operator|!=
literal|null
operator|&&
name|optimize
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|,
name|optimize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|backwardCompatible
init|=
name|xquery
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|XQUERY_BACKWARD_COMPATIBLE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|backwardCompatible
operator|!=
literal|null
operator|&&
name|backwardCompatible
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|,
name|backwardCompatible
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//built-in-modules
name|Map
name|moduleMap
init|=
name|XQueryContext
operator|.
name|loadModuleClasses
argument_list|(
name|xquery
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_BUILT_IN_MODULES
argument_list|,
name|moduleMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureXACML
parameter_list|(
name|Element
name|xacml
parameter_list|)
block|{
name|String
name|enable
init|=
name|xacml
operator|.
name|getAttribute
argument_list|(
name|XACMLConstants
operator|.
name|ENABLE_XACML_ATTRIBUTE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XACMLConstants
operator|.
name|ENABLE_XACML_PROPERTY
argument_list|,
name|parseBoolean
argument_list|(
name|enable
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XACMLConstants
operator|.
name|ENABLE_XACML_PROPERTY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XACMLConstants
operator|.
name|ENABLE_XACML_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|loadDefaults
init|=
name|xacml
operator|.
name|getAttribute
argument_list|(
name|XACMLConstants
operator|.
name|LOAD_DEFAULT_POLICIES_ATTRIBUTE
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XACMLConstants
operator|.
name|LOAD_DEFAULT_POLICIES_PROPERTY
argument_list|,
name|parseBoolean
argument_list|(
name|loadDefaults
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XACMLConstants
operator|.
name|LOAD_DEFAULT_POLICIES_PROPERTY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XACMLConstants
operator|.
name|LOAD_DEFAULT_POLICIES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param xupdate      * @throws NumberFormatException      */
specifier|private
name|void
name|configureXUpdate
parameter_list|(
name|Element
name|xupdate
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|String
name|fragmentation
init|=
name|xupdate
operator|.
name|getAttribute
argument_list|(
name|DBBroker
operator|.
name|XUPDATE_FRAGMENTATION_FACTOR_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmentation
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|,
operator|new
name|Integer
argument_list|(
name|fragmentation
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|consistencyCheck
init|=
name|xupdate
operator|.
name|getAttribute
argument_list|(
name|DBBroker
operator|.
name|XUPDATE_CONSISTENCY_CHECKS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|consistencyCheck
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|consistencyCheck
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_CONSISTENCY_CHECKS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureTransformer
parameter_list|(
name|Element
name|transformer
parameter_list|)
block|{
name|String
name|className
init|=
name|transformer
operator|.
name|getAttribute
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|TRANSFORMER_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_TRANSFORMER_CLASS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param serializer      */
specifier|private
name|void
name|configureSerializer
parameter_list|(
name|Element
name|serializer
parameter_list|)
block|{
name|String
name|xinclude
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|ENABLE_XINCLUDE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|xinclude
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
argument_list|,
name|xinclude
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XINCLUDE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|xsl
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|ENABLE_XSL_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsl
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
argument_list|,
name|xsl
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ENABLE_XSL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|indent
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|INDENT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_INDENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|compress
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|COMPRESS_OUTPUT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_COMPRESS_OUTPUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|internalId
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|ADD_EXIST_ID_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalId
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
argument_list|,
name|internalId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_ADD_EXIST_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tagElementMatches
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|TAG_MATCHING_ELEMENTS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagElementMatches
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
argument_list|,
name|tagElementMatches
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ELEMENTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tagAttributeMatches
init|=
name|serializer
operator|.
name|getAttribute
argument_list|(
name|Serializer
operator|.
name|TAG_MATCHING_ATTRIBUTES_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagAttributeMatches
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
argument_list|,
name|tagAttributeMatches
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Serializer
operator|.
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the scheduler configuration      */
specifier|private
name|void
name|configureScheduler
parameter_list|(
name|Element
name|scheduler
parameter_list|)
block|{
name|NodeList
name|nlJobs
init|=
name|scheduler
operator|.
name|getElementsByTagName
argument_list|(
name|Scheduler
operator|.
name|CONFIGURATION_JOB_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|nlJobs
operator|==
literal|null
condition|)
return|return;
name|ArrayList
name|jobList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|jobType
init|=
literal|null
decl_stmt|;
name|String
name|jobName
init|=
literal|null
decl_stmt|;
name|String
name|jobResource
init|=
literal|null
decl_stmt|;
name|String
name|jobSchedule
init|=
literal|null
decl_stmt|;
name|String
name|jobDelay
init|=
literal|null
decl_stmt|;
name|String
name|jobRepeat
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlJobs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|job
init|=
operator|(
name|Element
operator|)
name|nlJobs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//get the job type
name|jobType
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_TYPE_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobType
operator|==
literal|null
condition|)
name|jobType
operator|=
name|Scheduler
operator|.
name|JOB_TYPE_USER
expr_stmt|;
comment|//default to user if unspecified
name|jobName
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_NAME_ATTRIBUTE
argument_list|)
expr_stmt|;
comment|//get the job resource
name|jobResource
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_CLASS_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobResource
operator|==
literal|null
condition|)
name|jobResource
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_XQUERY_ATTRIBUTE
argument_list|)
expr_stmt|;
comment|//get the job schedule
name|jobSchedule
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_CRON_TRIGGER_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobSchedule
operator|==
literal|null
condition|)
name|jobSchedule
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_PERIOD_ATTRIBUTE
argument_list|)
expr_stmt|;
comment|//create the job config
try|try
block|{
name|JobConfig
name|jobConfig
init|=
operator|new
name|JobConfig
argument_list|(
name|jobType
argument_list|,
name|jobName
argument_list|,
name|jobResource
argument_list|,
name|jobSchedule
argument_list|)
decl_stmt|;
comment|//get and set the job delay
name|jobDelay
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_DELAY_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobDelay
operator|!=
literal|null
operator|&&
name|jobDelay
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jobConfig
operator|.
name|setDelay
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|jobDelay
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//get and set the job repeat
name|jobRepeat
operator|=
name|job
operator|.
name|getAttribute
argument_list|(
name|Scheduler
operator|.
name|JOB_REPEAT_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobRepeat
operator|!=
literal|null
operator|&&
name|jobRepeat
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jobConfig
operator|.
name|setRepeat
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|jobRepeat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|params
init|=
name|job
operator|.
name|getElementsByTagName
argument_list|(
name|Scheduler
operator|.
name|CONFIGURATION_JOB_PARAMETER_ELEMENT_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|params
operator|.
name|getLength
argument_list|()
condition|;
name|p
operator|++
control|)
block|{
name|Element
name|param
init|=
operator|(
name|Element
operator|)
name|params
operator|.
name|item
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Discarded invalid parameter for '"
operator|+
name|jobType
operator|+
literal|"' job '"
operator|+
name|jobResource
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobConfig
operator|.
name|addParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|jobList
operator|.
name|add
argument_list|(
name|jobConfig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured scheduled '"
operator|+
name|jobType
operator|+
literal|"' job '"
operator|+
name|jobResource
operator|+
operator|(
name|jobSchedule
operator|==
literal|null
condition|?
literal|""
else|:
literal|"' with trigger '"
operator|+
name|jobSchedule
operator|)
operator|+
operator|(
name|jobDelay
operator|==
literal|null
condition|?
literal|""
else|:
literal|"' with delay '"
operator|+
name|jobDelay
operator|)
operator|+
operator|(
name|jobRepeat
operator|==
literal|null
condition|?
literal|""
else|:
literal|"' repetitions '"
operator|+
name|jobRepeat
operator|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JobException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|je
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|JobConfig
index|[]
name|configs
init|=
operator|new
name|JobConfig
index|[
name|jobList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
operator|(
name|JobConfig
operator|)
name|jobList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_JOBS
argument_list|,
name|configs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param dbHome      * @param con      * @throws DatabaseConfigurationException      */
specifier|private
name|void
name|configureBackend
parameter_list|(
name|String
name|dbHome
parameter_list|,
name|Element
name|con
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|mysql
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mysql
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|,
name|mysql
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerFactory
operator|.
name|PROPERTY_DATABASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// directory for database files
name|String
name|dataFiles
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|DATA_DIR_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFiles
operator|!=
literal|null
condition|)
block|{
name|File
name|df
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
name|dataFiles
argument_list|,
name|dbHome
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|df
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"cannot read data directory: "
operator|+
name|df
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|,
name|df
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheMem
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|DefaultCacheManager
operator|.
name|CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheMem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|cacheMem
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
name|cacheMem
operator|=
name|cacheMem
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cacheMem
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|cacheMem
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|DefaultCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|collectionCache
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|CollectionCacheManager
operator|.
name|CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|collectionCache
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
name|collectionCache
operator|=
name|collectionCache
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|collectionCache
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|collectionCache
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|CollectionCacheManager
operator|.
name|PROPERTY_CACHE_SIZE
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|pageSize
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|NativeBroker
operator|.
name|PAGE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_PAGE_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_PAGE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_PAGE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Not clear : rather looks like a buffers count
name|String
name|collCacheSize
init|=
name|con
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|COLLECTION_CACHE_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|collCacheSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|collCacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_COLLECTION_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
name|String
name|buffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|buffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
name|String
name|collBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"collection_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collBuffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|collBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.collections.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Unused !
name|String
name|wordBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"words_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wordBuffers
operator|!=
literal|null
condition|)
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.words.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|wordBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.words.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.words.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
comment|//Unused !
name|String
name|elementBuffers
init|=
name|con
operator|.
name|getAttribute
argument_list|(
literal|"elements_buffers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementBuffers
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|,
operator|new
name|Integer
argument_list|(
name|elementBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"db-connection.elements.buffers: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeList
name|securityConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_SECURITY_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|String
name|securityManagerClassName
init|=
name|BrokerPool
operator|.
name|DEFAULT_SECURITY_CLASS
decl_stmt|;
if|if
condition|(
name|securityConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|security
init|=
operator|(
name|Element
operator|)
name|securityConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|securityManagerClassName
operator|=
name|security
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
comment|//Unused
name|String
name|encoding
init|=
name|security
operator|.
name|getAttribute
argument_list|(
literal|"password-encoding"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.security.password-encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"db-connection.security.password-encoding: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.security.password-encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|User
operator|.
name|setPasswordEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No password encoding set, defaulting."
argument_list|)
expr_stmt|;
block|}
comment|//Unused
name|String
name|realm
init|=
name|security
operator|.
name|getAttribute
argument_list|(
literal|"password-realm"
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"db-connection.security.password-realm"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"db-connection.security.password-realm: "
operator|+
name|config
operator|.
name|get
argument_list|(
literal|"db-connection.security.password-realm"
argument_list|)
argument_list|)
expr_stmt|;
name|User
operator|.
name|setPasswordRealm
argument_list|(
name|realm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No password realm set, defaulting."
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|securityManagerClassName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SECURITY_CLASS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|ClassNotFoundException
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Cannot find security manager class "
operator|+
name|securityManagerClassName
argument_list|,
name|ex
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Cannot load security manager class "
operator|+
name|securityManagerClassName
operator|+
literal|" due to "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|NodeList
name|poolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_POOL_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configurePool
argument_list|(
operator|(
name|Element
operator|)
name|poolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|queryPoolConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|XQueryPool
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPoolConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureXQueryPool
argument_list|(
operator|(
name|Element
operator|)
name|queryPoolConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|watchConf
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|XQueryWatchDog
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchConf
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureWatchdog
argument_list|(
operator|(
name|Element
operator|)
name|watchConf
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|recoveries
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|BrokerPool
operator|.
name|CONFIGURATION_RECOVERY_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveries
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureRecovery
argument_list|(
operator|(
name|Element
operator|)
name|recoveries
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|defaultPermissions
init|=
name|con
operator|.
name|getElementsByTagName
argument_list|(
name|XMLSecurityManager
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultPermissions
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configurePermissions
argument_list|(
operator|(
name|Element
operator|)
name|defaultPermissions
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureRecovery
parameter_list|(
name|Element
name|recovery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|option
init|=
name|recovery
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|RECOVERY_ENABLED_ATTRIBUTE
argument_list|)
decl_stmt|;
name|boolean
name|value
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
name|Journal
operator|.
name|RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
name|value
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
name|TransactionManager
operator|.
name|RECOVERY_GROUP_COMMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
name|value
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|TransactionManager
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|,
operator|new
name|Boolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TransactionManager
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TransactionManager
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
name|Journal
operator|.
name|RECOVERY_JOURNAL_DIR_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
name|recovery
operator|.
name|getAttribute
argument_list|(
name|Journal
operator|.
name|RECOVERY_SIZE_LIMIT_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|endsWith
argument_list|(
literal|"M"
argument_list|)
operator|||
name|option
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
name|option
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|option
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|Integer
name|size
init|=
operator|new
name|Integer
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_SIZE_LIMIT
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"size attribute in recovery section needs to be a number"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|configurePermissions
parameter_list|(
name|Element
name|defaultPermission
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|option
init|=
name|defaultPermission
operator|.
name|getAttribute
argument_list|(
name|XMLSecurityManager
operator|.
name|COLLECTION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
operator|&&
name|option
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
name|perms
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_COLLECTIONS
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_COLLECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_COLLECTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"collection attribute in default-permissions section needs "
operator|+
literal|"to be an octal number"
argument_list|)
throw|;
block|}
block|}
name|option
operator|=
name|defaultPermission
operator|.
name|getAttribute
argument_list|(
name|XMLSecurityManager
operator|.
name|RESOURCE_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
operator|&&
name|option
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
name|perms
init|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_RESOURCES
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_RESOURCES
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XMLSecurityManager
operator|.
name|PROPERTY_PERMISSIONS_RESOURCES
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"resource attribute in default-permissions section needs "
operator|+
literal|"to be an octal number"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * @param watchDog      */
specifier|private
name|void
name|configureWatchdog
parameter_list|(
name|Element
name|watchDog
parameter_list|)
block|{
name|String
name|timeout
init|=
name|watchDog
operator|.
name|getAttribute
argument_list|(
literal|"query-timeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
argument_list|,
operator|new
name|Long
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_QUERY_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|maxOutput
init|=
name|watchDog
operator|.
name|getAttribute
argument_list|(
literal|"output-size-limit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxOutput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxOutput
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryWatchDog
operator|.
name|PROPERTY_OUTPUT_SIZE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param queryPool      */
specifier|private
name|void
name|configureXQueryPool
parameter_list|(
name|Element
name|queryPool
parameter_list|)
block|{
name|String
name|maxStackSize
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
name|XQueryPool
operator|.
name|MAX_STACK_SIZE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxStackSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxStackSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_MAX_STACK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|maxPoolSize
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
name|XQueryPool
operator|.
name|POOL_SIZE_ATTTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxPoolSize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
argument_list|,
operator|new
name|Integer
argument_list|(
name|maxPoolSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|timeout
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
name|XQueryPool
operator|.
name|TIMEOUT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
argument_list|,
operator|new
name|Long
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|timeoutCheckInterval
init|=
name|queryPool
operator|.
name|getAttribute
argument_list|(
name|XQueryPool
operator|.
name|TIMEOUT_CHECK_INTERVAL_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeoutCheckInterval
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT_CHECK_INTERVAL
argument_list|,
operator|new
name|Long
argument_list|(
name|timeoutCheckInterval
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT_CHECK_INTERVAL
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XQueryPool
operator|.
name|PROPERTY_TIMEOUT_CHECK_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param pool      */
specifier|private
name|void
name|configurePool
parameter_list|(
name|Element
name|pool
parameter_list|)
block|{
name|String
name|min
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|MIN_CONNECTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
argument_list|,
operator|new
name|Integer
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MIN_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|max
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|MAX_CONNECTIONS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
argument_list|,
operator|new
name|Integer
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_MAX_CONNECTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|sync
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|SYNC_PERIOD_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sync
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
argument_list|,
operator|new
name|Long
argument_list|(
name|sync
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SYNC_PERIOD
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|maxShutdownWait
init|=
name|pool
operator|.
name|getAttribute
argument_list|(
name|BrokerPool
operator|.
name|SHUTDOWN_DELAY_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxShutdownWait
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
argument_list|,
operator|new
name|Long
argument_list|(
name|maxShutdownWait
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param dbHome      * @param doc      * @param indexer      * @throws DatabaseConfigurationException      * @throws MalformedURLException      * @throws IOException      */
specifier|private
name|void
name|configureIndexer
parameter_list|(
name|String
name|dbHome
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Element
name|indexer
parameter_list|)
throws|throws
name|DatabaseConfigurationException
throws|,
name|MalformedURLException
block|{
name|String
name|parseNum
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|TextSearchEngine
operator|.
name|INDEX_NUMBERS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseNum
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_INDEX_NUMBERS
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|parseNum
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_INDEX_NUMBERS
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_INDEX_NUMBERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|stemming
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|TextSearchEngine
operator|.
name|STEM_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stemming
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STEM
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|stemming
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STEM
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STEM
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|termFreq
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|TextSearchEngine
operator|.
name|STORE_TERM_FREQUENCY_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|termFreq
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STORE_TERM_FREQUENCY
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|termFreq
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STORE_TERM_FREQUENCY
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STORE_TERM_FREQUENCY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tokenizer
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|TextSearchEngine
operator|.
name|TOKENIZER_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_TOKENIZER
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_TOKENIZER
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_TOKENIZER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|caseSensitive
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|NativeValueIndex
operator|.
name|INDEX_CASE_SENSITIVE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|caseSensitive
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|caseSensitive
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// stopwords
name|NodeList
name|stopwords
init|=
name|indexer
operator|.
name|getElementsByTagName
argument_list|(
name|TextSearchEngine
operator|.
name|CONFIGURATION_STOPWORDS_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopwords
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|stopwordFile
init|=
operator|(
operator|(
name|Element
operator|)
name|stopwords
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
name|TextSearchEngine
operator|.
name|STOPWORD_FILE_ATTRIBUTE
argument_list|)
decl_stmt|;
name|File
name|sf
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
name|stopwordFile
argument_list|,
name|dbHome
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STOPWORD_FILE
argument_list|,
name|stopwordFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STOPWORD_FILE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TextSearchEngine
operator|.
name|PROPERTY_STOPWORD_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|depth
init|=
literal|3
decl_stmt|;
name|String
name|indexDepth
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|NativeBroker
operator|.
name|INDEX_DEPTH_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexDepth
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|depth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|indexDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"parameter index-depth should be>= 3 or you will experience a severe "
operator|+
literal|"performance loss for node updates (XUpdate or XQuery update extensions)"
argument_list|)
expr_stmt|;
name|depth
operator|=
literal|3
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
argument_list|,
operator|new
name|Integer
argument_list|(
name|depth
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_INDEX_DEPTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|suppressWS
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|Indexer
operator|.
name|SUPPRESS_WHITESPACE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWS
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|,
name|suppressWS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|suppressWSmixed
init|=
name|indexer
operator|.
name|getAttribute
argument_list|(
name|Indexer
operator|.
name|PRESERVE_WS_MIXED_CONTENT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWSmixed
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|suppressWSmixed
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// index settings
name|NodeList
name|cl
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|Indexer
operator|.
name|CONFIGURATION_INDEX_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IndexSpec
name|spec
init|=
operator|new
name|IndexSpec
argument_list|(
literal|null
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PROPERTY_INDEXER_CONFIG
argument_list|,
name|spec
argument_list|)
expr_stmt|;
comment|//LOG.debug(Indexer.PROPERTY_INDEXER_CONFIG + ": " + config.get(Indexer.PROPERTY_INDEXER_CONFIG));
block|}
comment|// index modules
name|NodeList
name|modules
init|=
name|indexer
operator|.
name|getElementsByTagName
argument_list|(
name|IndexManager
operator|.
name|CONFIGURATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|modules
operator|=
operator|(
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|IndexManager
operator|.
name|CONFIGURATION_MODULE_ELEMENT_NAME
argument_list|)
expr_stmt|;
name|IndexModuleConfig
name|modConfig
index|[]
init|=
operator|new
name|IndexModuleConfig
index|[
name|modules
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|IndexManager
operator|.
name|INDEXER_MODULES_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|IndexManager
operator|.
name|INDEXER_MODULES_ID_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Required attribute class is missing for module"
argument_list|)
throw|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Required attribute id is missing for module"
argument_list|)
throw|;
name|modConfig
index|[
name|i
index|]
operator|=
operator|new
name|IndexModuleConfig
argument_list|(
name|id
argument_list|,
name|className
argument_list|,
name|elem
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|IndexManager
operator|.
name|PROPERTY_INDEXER_MODULES
argument_list|,
name|modConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureValidation
parameter_list|(
name|String
name|dbHome
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Element
name|validation
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// Register custom protocol URL
comment|// TODO DWES move to different location?
name|eXistURLStreamHandlerFactory
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// Determine validation mode
name|String
name|mode
init|=
name|validation
operator|.
name|getAttribute
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|VALIDATION_MODE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
operator|+
literal|": "
operator|+
name|config
operator|.
name|get
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|PROPERTY_VALIDATION_MODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Extract catalogs
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating eXist catalog resolver"
argument_list|)
expr_stmt|;
name|eXistXMLCatalogResolver
name|resolver
init|=
operator|new
name|eXistXMLCatalogResolver
argument_list|()
decl_stmt|;
name|NodeList
name|entityResolver
init|=
name|validation
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_ENTITY_RESOLVER_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityResolver
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|r
init|=
operator|(
name|Element
operator|)
name|entityResolver
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeList
name|catalogs
init|=
name|r
operator|.
name|getElementsByTagName
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CONFIGURATION_CATALOG_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|catalogs
operator|.
name|getLength
argument_list|()
operator|+
literal|" catalog uri entries."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using dbHome="
operator|+
name|dbHome
argument_list|)
expr_stmt|;
comment|// Determine webapps directory. SingleInstanceConfiguration cannot
comment|// be used at this phase. Trick is to check wether dbHOME is
comment|// pointing to a WEB-INF directory, meaning inside war file)
name|File
name|webappHome
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbHome
operator|==
literal|null
condition|)
block|{
comment|/// DWES Why? let's make jUnit happy
name|webappHome
operator|=
operator|new
name|File
argument_list|(
literal|"webapp"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|dbHome
operator|.
name|endsWith
argument_list|(
literal|"WEB-INF"
argument_list|)
condition|)
block|{
name|webappHome
operator|=
operator|new
name|File
argument_list|(
name|dbHome
argument_list|)
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|webappHome
operator|=
operator|new
name|File
argument_list|(
name|dbHome
argument_list|,
literal|"webapp"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"using webappHome="
operator|+
name|webappHome
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get and store all URIs
name|List
name|allURIs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|catalogs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
operator|(
operator|(
name|Element
operator|)
name|catalogs
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
comment|// when uri attribute is filled in
comment|// Substitute string, creating an uri from a local file
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|"${WEBAPP_HOME}"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{WEBAPP_HOME\\}"
argument_list|,
name|webappHome
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add uri to confiuration
name|LOG
operator|.
name|info
argument_list|(
literal|"Add catalog uri "
operator|+
name|uri
operator|+
literal|""
argument_list|)
expr_stmt|;
name|allURIs
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
name|resolver
operator|.
name|setCatalogs
argument_list|(
name|allURIs
argument_list|)
expr_stmt|;
comment|// Store all configured URIs
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CATALOG_URIS
argument_list|,
name|allURIs
argument_list|)
expr_stmt|;
block|}
comment|// Store resolver
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|CATALOG_RESOLVER
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
comment|// cache
name|GrammarPool
name|gp
init|=
operator|new
name|GrammarPool
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|XMLReaderObjectFactory
operator|.
name|GRAMMER_POOL
argument_list|,
name|gp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getConfigFilePath
parameter_list|()
block|{
return|return
name|configFilePath
return|;
block|}
specifier|public
name|File
name|getExistHome
parameter_list|()
block|{
return|return
name|existHome
return|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/**      * Takes the passed string and converts it to a non-null      *<code>Boolean</code> object.  If value is null, the specified      * default value is used.  Otherwise, Boolean.TRUE is returned if      * and only if the passed string equals&quot;yes&quot; or      *&quot;true&quot;, ignoring case.      *      * @param value The string to parse      * @param defaultValue The default if the string is null      * @return The parsed<code>Boolean</code>      */
specifier|private
name|Boolean
name|parseBoolean
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
return|;
name|value
operator|=
name|value
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getInteger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|obj
init|=
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|Integer
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
operator|(
operator|(
name|Integer
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading configuration file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

