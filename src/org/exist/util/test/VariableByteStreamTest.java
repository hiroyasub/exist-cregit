begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|VariableByteStreamTest
extends|extends
name|TestCase
block|{
specifier|private
name|long
index|[]
name|longValues
init|=
operator|new
name|long
index|[
literal|1000
index|]
decl_stmt|;
comment|/** 	 * Constructor for VariableByteStreamTest. 	 * @param arg0 	 */
specifier|public
name|VariableByteStreamTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"generating 1000 longs ..."
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Random
name|rand2
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|boolean
name|useLong
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|useLong
operator|=
name|rand2
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|useLong
condition|)
name|longValues
index|[
name|i
index|]
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
operator|&
literal|0x7fffffffffffffffL
expr_stmt|;
else|else
name|longValues
index|[
name|i
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
operator|&
literal|0x7fffffff
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|longValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testInOut
parameter_list|()
block|{
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
name|os
operator|.
name|writeLong
argument_list|(
name|longValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"data length: "
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|VariableByteInputStream
name|is
init|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|long
name|l
decl_stmt|;
name|int
name|i
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|l
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|longValues
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

