begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * CollectionCache.java - Mar 11, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Object2ObjectAVLTreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
import|;
end_import

begin_class
specifier|public
class|class
name|CollectionCache
block|{
specifier|public
specifier|final
specifier|static
name|int
name|BUFFER_SIZE
init|=
literal|32
decl_stmt|;
specifier|protected
name|int
name|buffers
decl_stmt|;
specifier|protected
name|int
name|fails
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|hits
init|=
literal|0
decl_stmt|;
specifier|protected
name|Object2ObjectAVLTreeMap
name|map
decl_stmt|;
specifier|public
name|CollectionCache
parameter_list|(
name|int
name|blockBuffers
parameter_list|)
block|{
name|this
operator|.
name|buffers
operator|=
name|blockBuffers
expr_stmt|;
name|map
operator|=
operator|new
name|Object2ObjectAVLTreeMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CollectionCache
parameter_list|()
block|{
name|this
argument_list|(
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|add
argument_list|(
name|collection
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|int
name|initialRefCount
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|collection
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|collection
operator|.
name|incRefCount
argument_list|()
expr_stmt|;
return|return;
block|}
name|collection
operator|.
name|setRefCount
argument_list|(
name|initialRefCount
argument_list|)
expr_stmt|;
while|while
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
name|buffers
condition|)
name|removeOne
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
name|get
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Collection
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
name|fails
operator|++
expr_stmt|;
else|else
block|{
name|collection
operator|.
name|incRefCount
argument_list|()
expr_stmt|;
name|hits
operator|++
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|removeOne
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|Collection
name|old
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
name|long
name|oldId
decl_stmt|,
name|id
decl_stmt|;
while|while
condition|(
operator|!
name|removed
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|old
operator|=
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|getId
argument_list|()
operator|==
name|collection
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
name|old
operator|.
name|decRefCount
argument_list|()
expr_stmt|;
comment|// replace old page if it has reference count< 1,
if|if
condition|(
name|old
operator|.
name|getRefCount
argument_list|()
operator|<
literal|1
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//map.remove(oldNum);
name|removed
operator|=
literal|true
expr_stmt|;
name|old
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

