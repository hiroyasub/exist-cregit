begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_class
specifier|public
class|class
name|FileInputSource
extends|extends
name|EXistInputSource
block|{
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|InputStream
name|inputStream
decl_stmt|;
comment|/** 	 * Empty constructor 	 */
specifier|public
name|FileInputSource
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor which calls {@link #setFile(File)} 	 * @param file 	 * The file passed to {@link #setFile(File)} 	 */
specifier|public
name|FileInputSource
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|inputStream
operator|=
literal|null
expr_stmt|;
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * If a file source has been set, the File 	 * object used for that is returned 	 * @return 	 * The File object. 	 */
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|/** 	 * This method sets the File object used to get 	 * the uncompressed stream of data 	 * @param file 	 * The File object pointing to the GZIP file. 	 */
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
comment|// Remember: super.setSystemId must be used instead of local implementation
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|setSystemId
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setSystemId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * This method was re-implemented to open a 	 * new GZIPInputStream each time it is called. 	 * @return 	 * If the file was set, and it could be opened, and it was 	 * a correct gzip file, a GZIPInputStream object. 	 * null, otherwise. 	 */
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
comment|// close any open stream first
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|inputStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// No way to notify :-(
block|}
block|}
return|return
name|inputStream
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore if the stream is already closed
block|}
name|inputStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setByteStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setSystemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
specifier|public
name|long
name|getByteStreamLength
parameter_list|()
block|{
name|long
name|retval
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
specifier|public
name|String
name|getSymbolicPath
parameter_list|()
block|{
return|return
name|file
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

