begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Implements locking with timeout  *   * Call acquire to acquire a lock followed by enter.  * When you're done, release the lock with release.  * By default, acquire times out after 3 minutes.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|SimpleTimeOutLock
implements|implements
name|Lock
block|{
specifier|private
specifier|final
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|SimpleTimeOutLock
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the current key
specifier|private
name|Object
name|currentKey
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|referenceCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|mode
decl_stmt|;
comment|// wait for 3 minutes before timeout
specifier|private
name|long
name|timeOut
init|=
literal|60000L
decl_stmt|;
comment|/** 	 * @see org.exist.util.Lock#hasKey(Object) 	 */
specifier|public
name|boolean
name|hasKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|currentKey
operator|==
name|key
return|;
block|}
specifier|public
name|void
name|acquire
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|LockException
block|{
name|acquire
argument_list|(
name|key
argument_list|,
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Acquire a lock for the given key 	 *  	 * To prevent deadlock situations, the method will throw  	 * a LockException after 3 minutes of waiting. 	 *  	 * @see org.exist.util.Lock#acquire(Object) 	 */
specifier|public
name|void
name|acquire
parameter_list|(
name|Object
name|key
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|LockException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|currentKey
operator|==
name|key
condition|)
block|{
operator|++
name|referenceCount
expr_stmt|;
return|return;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentKey
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|currentKey
operator|!=
literal|null
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|>
name|timeOut
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|mode
operator|==
name|READ_LOCK
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"blocking thread found: removing lock "
operator|+
name|currentKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"timeout while waiting on lock "
operator|+
name|currentKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"cannot acquire lock"
argument_list|)
throw|;
block|}
block|}
block|}
comment|//			System.out.println(Thread.currentThread().getName() +
comment|//				"acquired lock " + key.hashCode());
name|currentKey
operator|=
name|key
expr_stmt|;
name|referenceCount
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
comment|//notifyAll();
block|}
block|}
comment|/** 	 * Enter a synchronized block of code with the given key. 	 * The key should have been acquired by calling acquire. 	 *  	 * @see org.exist.util.Lock#enter(Object) 	 */
specifier|public
name|void
name|enter
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|LockException
block|{
while|while
condition|(
name|currentKey
operator|!=
name|key
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
name|timeOut
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|currentKey
operator|!=
name|key
condition|)
throw|throw
operator|new
name|LockException
argument_list|()
throw|;
block|}
block|}
comment|/** 	 * Release a key. 	 *  	 * @see org.exist.util.Lock#release(Object) 	 */
specifier|public
name|void
name|release
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|currentKey
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"key : "
operator|+
name|key
operator|.
name|hashCode
argument_list|()
operator|+
literal|" already released."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|currentKey
operator|==
name|key
condition|)
block|{
comment|//				System.out.println(Thread.currentThread().getName() +
comment|//					" released lock: " + currentKey.hashCode());
if|if
condition|(
operator|--
name|referenceCount
operator|==
literal|0
condition|)
block|{
name|currentKey
operator|=
literal|null
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|referenceCount
operator|<
literal|0
condition|)
name|LOG
operator|.
name|warn
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": negative reference count"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this should never happen
name|LOG
operator|.
name|warn
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": wrong key: "
operator|+
name|key
operator|.
name|hashCode
argument_list|()
operator|+
literal|"; current = "
operator|+
name|currentKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

