begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|FastQSort
block|{
specifier|private
specifier|final
specifier|static
name|void
name|QuickSort
parameter_list|(
name|Comparable
name|a
index|[]
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|Comparable
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|a
index|[
operator|++
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|<
literal|0
condition|)
empty_stmt|;
while|while
condition|(
name|a
index|[
operator|--
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|QuickSort
parameter_list|(
name|Object
name|a
index|[]
parameter_list|,
name|Comparator
name|comp
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|Object
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|l
index|]
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|l
index|]
argument_list|,
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
operator|++
name|i
index|]
argument_list|,
name|v
argument_list|)
operator|<
literal|0
condition|)
empty_stmt|;
while|while
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
operator|--
name|j
index|]
argument_list|,
name|v
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|comp
argument_list|,
name|l
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|comp
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|QuickSort
parameter_list|(
name|NodeProxy
name|a
index|[]
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|NodeProxy
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|r
index|]
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|a
index|[
operator|++
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|<
literal|0
condition|)
empty_stmt|;
while|while
condition|(
name|a
index|[
operator|--
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|QuickSort
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|Object
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|l
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
if|if
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|l
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|<
literal|0
condition|)
empty_stmt|;
while|while
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
operator|--
name|j
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|QuickSort
parameter_list|(
name|long
name|a
index|[]
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|long
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|a
index|[
name|l
index|]
operator|>
name|a
index|[
name|i
index|]
condition|)
block|{
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
name|swap
argument_list|(
name|b
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
index|[
name|l
index|]
operator|>
name|a
index|[
name|r
index|]
condition|)
block|{
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|swap
argument_list|(
name|b
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
index|[
name|i
index|]
operator|>
name|a
index|[
name|r
index|]
condition|)
block|{
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|swap
argument_list|(
name|b
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|swap
argument_list|(
name|b
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|a
index|[
operator|++
name|i
index|]
operator|<
name|v
condition|)
empty_stmt|;
while|while
condition|(
name|a
index|[
operator|--
name|j
index|]
operator|>
name|v
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|swap
argument_list|(
name|b
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|swap
argument_list|(
name|b
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|j
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QuickSort
argument_list|(
name|a
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|QuickSortByNodeId
parameter_list|(
name|NodeProxy
name|a
index|[]
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|r
parameter_list|)
comment|//----------------------------------------------------
block|{
name|int
name|M
init|=
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|NodeProxy
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|-
name|l
operator|)
operator|>
name|M
condition|)
block|{
comment|// 26july00: following [.][1] -> [.][0]
name|i
operator|=
operator|(
name|r
operator|+
name|l
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|gid
operator|>
name|a
index|[
name|i
index|]
operator|.
name|gid
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Tri-Median Methode!
if|if
condition|(
name|a
index|[
name|l
index|]
operator|.
name|gid
operator|>
name|a
index|[
name|r
index|]
operator|.
name|gid
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|gid
operator|>
name|a
index|[
name|r
index|]
operator|.
name|gid
condition|)
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|j
operator|=
name|r
operator|-
literal|1
expr_stmt|;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|i
operator|=
name|l
expr_stmt|;
name|v
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|a
index|[
operator|++
name|i
index|]
operator|.
name|gid
operator|<
name|v
operator|.
name|gid
condition|)
empty_stmt|;
while|while
condition|(
name|a
index|[
operator|--
name|j
index|]
operator|.
name|gid
operator|>
name|v
operator|.
name|gid
condition|)
empty_stmt|;
if|if
condition|(
name|j
operator|<
name|i
condition|)
break|break;
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|swap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QuickSortByNodeId
argument_list|(
name|a
argument_list|,
name|l
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|QuickSortByNodeId
argument_list|(
name|a
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|long
name|a
index|[]
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|long
name|T
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
return|return;
name|Object
name|T
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|Object
name|T
decl_stmt|;
name|T
operator|=
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|a
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|T
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|Comparable
name|T
decl_stmt|;
name|T
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|InsertionSortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|NodeProxy
name|temp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<=
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
comment|// the column we're sorting on
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
operator|(
name|j
operator|>
name|lo0
operator|)
operator|&&
operator|(
name|a
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|gid
operator|>
name|temp
operator|.
name|gid
operator|)
condition|)
block|{
name|a
index|[
name|j
index|]
operator|=
name|a
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|a
index|[
name|j
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|InsertionSort
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|Comparable
name|temp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<=
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
comment|// the column we're sorting on
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
operator|(
name|j
operator|>
name|lo0
operator|)
operator|&&
operator|(
name|a
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|temp
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|a
index|[
name|j
index|]
operator|=
name|a
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|a
index|[
name|j
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|InsertionSort
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Comparator
name|comp
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|Object
name|temp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<=
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
comment|// the column we're sorting on
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
operator|(
name|j
operator|>
name|lo0
operator|)
operator|&&
operator|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|j
operator|-
literal|1
index|]
argument_list|,
name|temp
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|a
index|[
name|j
index|]
operator|=
name|a
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|a
index|[
name|j
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|InsertionSort
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|Object
name|temp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<=
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// the column we're sorting on
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
operator|(
name|j
operator|>
name|lo0
operator|)
operator|&&
operator|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|temp
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|a
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|a
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|void
name|InsertionSort
parameter_list|(
name|long
name|a
index|[]
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
comment|//------------------------------------------------------------
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|long
name|tempa
decl_stmt|;
name|Object
name|tempb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<=
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|tempa
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
comment|// the column we're sorting on
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|tempb
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
operator|(
name|j
operator|>
name|lo0
operator|)
operator|&&
operator|(
name|a
index|[
name|j
operator|-
literal|1
index|]
operator|>
name|tempa
operator|)
condition|)
block|{
name|a
index|[
name|j
index|]
operator|=
name|a
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|j
index|]
operator|=
name|b
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
name|j
operator|--
expr_stmt|;
block|}
name|a
index|[
name|j
index|]
operator|=
name|tempa
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|j
index|]
operator|=
name|tempb
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
name|QuickSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
name|InsertionSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Comparator
name|c
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
name|QuickSort
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
name|InsertionSort
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
name|QuickSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
name|InsertionSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
name|QuickSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
name|InsertionSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
name|QuickSortByNodeId
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
name|InsertionSortByNodeId
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
block|{
name|QuickSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|InsertionSort
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|a
init|=
operator|new
name|String
index|[]
block|{
literal|"Rudi"
block|,
literal|"Herbert"
block|,
literal|"Anton"
block|,
literal|"Berta"
block|,
literal|"Olga"
block|,
literal|"Willi"
block|,
literal|"Heinz"
block|}
decl_stmt|;
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|a
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|l
operator|.
name|add
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sort
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

