begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-05 The eXist Project  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** 	This class only contains static 	methods which help when the values 	of two positions in a array or 	list-like structure must be swapped. 	 	Based on previous implementations 	found in eXist FastQSort original 	code and internet */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SwapVals
block|{
specifier|public
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|long
name|a
index|[]
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|long
name|T
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|int
name|a
index|[]
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|int
name|T
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
comment|//		assert a != null : "Trying to swap elements in a null array!";
name|Object
name|T
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|Object
name|T
decl_stmt|;
name|T
operator|=
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|a
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|T
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|swap
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
comment|//-----------------------------------------------
block|{
name|Comparable
name|T
decl_stmt|;
name|T
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|T
expr_stmt|;
block|}
block|}
end_class

end_unit

