begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|json
operator|.
name|JSONSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|FnModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Utility class for writing out XQuery results. It is an abstraction around  * eXist's internal serializers specialized on writing XQuery sequences.  *  * @author Wolf  */
end_comment

begin_class
specifier|public
class|class
name|XQuerySerializer
block|{
specifier|private
specifier|final
name|Properties
name|outputProperties
decl_stmt|;
specifier|private
specifier|final
name|XQueryContext
name|context
decl_stmt|;
specifier|public
name|XQuerySerializer
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Properties
name|outputProperties
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|outputProperties
operator|=
name|outputProperties
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|Sequence
name|sequence
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XPathException
block|{
specifier|final
name|String
name|method
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|serializeJSON
argument_list|(
name|sequence
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeXML
argument_list|(
name|sequence
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serializeXML
parameter_list|(
name|Sequence
name|sequence
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XPathException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|sequence
operator|=
name|normalize
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|sequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|next
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|next
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|String
name|val
init|=
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeValue
operator|)
name|next
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SAXNotSupportedException
decl||
name|SAXNotRecognizedException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|serializeJSON
parameter_list|(
name|Sequence
name|sequence
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XPathException
block|{
comment|// backwards compatibility: if the sequence contains a single element, we assume
comment|// it should be transformed to JSON following the rules of the old JSON writer
if|if
condition|(
name|sequence
operator|.
name|hasOne
argument_list|()
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|sequence
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|)
condition|)
block|{
name|serializeXML
argument_list|(
name|sequence
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|JSONSerializer
name|serializer
init|=
operator|new
name|JSONSerializer
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|sequence
argument_list|,
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sequence normalization as described in      * http://www.w3.org/TR/xslt-xquery-serialization-30/#serdm      *      * @param input non-normalized sequence      * @return normalized sequence      * @throws org.exist.xquery.XPathException      */
specifier|private
name|Sequence
name|normalize
parameter_list|(
name|Sequence
name|input
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// "If the sequence that is input to serialization is empty, create a sequence S1 that consists of a zero-length string."
block|{
return|return
name|StringValue
operator|.
name|EMPTY_STRING
return|;
block|}
specifier|final
name|ValueSequence
name|temp
init|=
operator|new
name|ValueSequence
argument_list|(
name|input
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|input
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|next
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|next
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATTRIBUTE
operator|||
name|next
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NAMESPACE
operator|||
name|next
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|FUNCTION_REFERENCE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|FnModule
operator|.
name|SENR0001
argument_list|,
literal|"It is an error if an item in the sequence to serialize is an attribute node or a namespace node."
argument_list|)
throw|;
block|}
name|temp
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// atomic value
name|Item
name|last
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|temp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|last
operator|=
name|temp
operator|.
name|itemAt
argument_list|(
name|temp
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|STRING
condition|)
comment|// "For each subsequence of adjacent strings in S2, copy a single string to the new sequence
comment|// equal to the values of the strings in the subsequence concatenated in order, each separated
comment|// by a single space."
block|{
operator|(
operator|(
name|StringValue
operator|)
name|last
operator|)
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
comment|// "For each item in S1, if the item is atomic, obtain the lexical representation of the item by
comment|// casting it to an xs:string and copy the string representation to the new sequence;"
block|{
name|temp
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|temp
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|next
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|next
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|next
operator|.
name|copyTo
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|characters
argument_list|(
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|DocumentImpl
operator|)
name|receiver
operator|.
name|getDocument
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|FnModule
operator|.
name|SENR0001
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

