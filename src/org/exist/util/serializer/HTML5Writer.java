begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * HTML5 writer which does not produce well-formed XHTML.  *  * @author Wolfgang  */
end_comment

begin_class
specifier|public
class|class
name|HTML5Writer
extends|extends
name|XHTML5Writer
block|{
specifier|private
specifier|final
specifier|static
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
name|EMPTY_TAGS
init|=
operator|new
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|31
argument_list|)
decl_stmt|;
static|static
block|{
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"area"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"br"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"embed"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"img"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"keygen"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"meta"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"param"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"track"
argument_list|)
expr_stmt|;
name|EMPTY_TAGS
operator|.
name|add
argument_list|(
literal|"wbr"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
name|RAW_TEXT_ELEMENTS
init|=
operator|new
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|31
argument_list|)
decl_stmt|;
static|static
block|{
name|RAW_TEXT_ELEMENTS
operator|.
name|add
argument_list|(
literal|"script"
argument_list|)
expr_stmt|;
name|RAW_TEXT_ELEMENTS
operator|.
name|add
argument_list|(
literal|"style"
argument_list|)
expr_stmt|;
name|RAW_TEXT_ELEMENTS
operator|.
name|add
argument_list|(
literal|"textarea"
argument_list|)
expr_stmt|;
name|RAW_TEXT_ELEMENTS
operator|.
name|add
argument_list|(
literal|"title"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTML5Writer
parameter_list|()
block|{
name|super
argument_list|(
name|EMPTY_TAGS
argument_list|,
name|INLINE_TAGS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTML5Writer
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|EMPTY_TAGS
argument_list|,
name|INLINE_TAGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
operator|!
name|isEmptyTag
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endIndent
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
operator|!
name|isEmptyTag
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeStartTag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endIndent
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|String
name|qname
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|TransformerException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|tagIsOpen
condition|)
block|{
name|characters
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Writer
name|writer
init|=
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qname
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|writeChars
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|TransformerException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|tagIsOpen
condition|)
block|{
name|characters
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
comment|// throw new TransformerException("Found an attribute outside an
comment|// element");
block|}
specifier|final
name|Writer
name|writer
init|=
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
operator|&&
name|qname
operator|.
name|getPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|writeChars
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|namespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|nsURI
parameter_list|)
throws|throws
name|TransformerException
block|{
comment|// no namespaces allowed in HTML5
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeStartTag
parameter_list|(
name|boolean
name|isEmpty
parameter_list|)
throws|throws
name|TransformerException
block|{
try|try
block|{
if|if
condition|(
name|tagIsOpen
condition|)
block|{
if|if
condition|(
name|isEmpty
condition|)
block|{
if|if
condition|(
name|isEmptyTag
argument_list|(
name|currentTag
argument_list|)
condition|)
block|{
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|currentTag
argument_list|)
expr_stmt|;
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|tagIsOpen
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|needsEscape
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|RAW_TEXT_ELEMENTS
operator|.
name|contains
argument_list|(
name|currentTag
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|needsEscape
argument_list|(
name|ch
argument_list|)
return|;
block|}
block|}
end_class

end_unit

