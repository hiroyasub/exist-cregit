begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|ValueOccurrences
block|{
specifier|private
name|AtomicValue
name|value
decl_stmt|;
specifier|private
name|int
name|occurrences
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
comment|/** 	 *  	 */
specifier|public
name|ValueOccurrences
parameter_list|(
name|AtomicValue
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|AtomicValue
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Returns the overall frequency of this term      * in the document set.      *       * @return      */
specifier|public
name|int
name|getOccurrences
parameter_list|()
block|{
return|return
name|occurrences
return|;
block|}
specifier|public
name|void
name|addOccurrences
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|occurrences
operator|+=
name|count
expr_stmt|;
block|}
specifier|public
name|void
name|addDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
if|if
condition|(
operator|!
name|docs
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ValueOccurrences
name|other
parameter_list|)
block|{
name|addOccurrences
argument_list|(
name|other
operator|.
name|occurrences
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|docs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the number of documents from the set in      * which the term has been found.      *       * @return      */
specifier|public
name|int
name|getDocuments
parameter_list|()
block|{
return|return
name|docs
operator|.
name|getLength
argument_list|()
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see java.lang.Comparable#compareTo(java.lang.Object) 	 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|ValueOccurrences
operator|)
name|o
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

