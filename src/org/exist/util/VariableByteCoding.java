begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_comment
comment|/**  *  This class encodes integer values using variable-byte coding.  * In variable-byte coding, the value is split into a sequence  * of 7-bit chunks. Bit 8 is used to indicate if more bytes follow.  * If bit 8 is 0, all bytes have been read.  *   * Variable-byte coding usually achieves good compression ratios for  * a sequence of random integer values. Compression ratio is bad for  * very small and very large values.  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  */
end_comment

begin_class
specifier|public
class|class
name|VariableByteCoding
block|{
comment|/** 	 *  Decode a variable-byte encoded sequence 	 * 	 *@param  d       the variable-byte encoded sequence of bytes 	 *@param  offset  the offset at which decoding should start 	 *@return         the decoded value 	 */
specifier|public
specifier|final
specifier|static
name|long
name|decode
parameter_list|(
name|byte
index|[]
name|d
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|r
init|=
literal|0
decl_stmt|;
name|int
name|shift
init|=
literal|0
decl_stmt|;
name|long
name|more
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|r
operator||=
operator|(
operator|(
name|more
operator|=
name|d
index|[
name|offset
operator|+
name|i
operator|++
index|]
operator|)
operator|&
literal|0177
operator|)
operator|<<
name|shift
expr_stmt|;
name|more
operator|&=
literal|0200
expr_stmt|;
name|shift
operator|+=
literal|7
expr_stmt|;
block|}
do|while
condition|(
name|more
operator|>
literal|0
condition|)
do|;
return|return
name|r
return|;
block|}
comment|/** 	 *  Decode a variable-byte encoded sequence 	 * 	 *@param  is  ByteArrayInputStream to read the variable-byte 	 *	encoded data from 	 *@return     the decoded value 	 */
specifier|public
specifier|final
specifier|static
name|long
name|decode
parameter_list|(
name|ByteArrayInputStream
name|is
parameter_list|)
block|{
name|long
name|r
init|=
literal|0
decl_stmt|;
name|int
name|shift
init|=
literal|0
decl_stmt|;
name|long
name|more
decl_stmt|;
do|do
block|{
name|r
operator||=
operator|(
operator|(
name|more
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|&
literal|0177
operator|)
operator|<<
name|shift
expr_stmt|;
if|if
condition|(
name|more
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
name|shift
operator|+=
literal|7
expr_stmt|;
name|more
operator|&=
literal|0200
expr_stmt|;
block|}
do|while
condition|(
name|more
operator|>
literal|0
condition|)
do|;
return|return
name|r
return|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|copyTo
parameter_list|(
name|ByteArrayInputStream
name|in
parameter_list|,
name|FastByteBuffer
name|out
parameter_list|)
block|{
name|long
name|more
decl_stmt|;
do|do
block|{
name|more
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|more
argument_list|)
expr_stmt|;
name|more
operator|&=
literal|0200
expr_stmt|;
block|}
do|while
condition|(
name|more
operator|>
literal|0
condition|)
do|;
block|}
comment|/** 	 *  Encode a long integer to a variable-byte encoded 	 * sequence of bytes. 	 * 	 *@param  l  The long integer value to encode 	 *@return    The coded byte sequence 	 */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|encode
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|9
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|l
operator|>
literal|0177
condition|)
block|{
name|buf
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|l
operator|&
literal|0xff
operator|)
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
expr_stmt|;
name|l
operator|>>=
literal|7
expr_stmt|;
block|}
name|buf
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|&
literal|0xff
operator|)
operator|&
literal|0177
operator|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/** 	 * Encode a long integer to a variable-byte encoded sequence of bytes. 	 *  	 *@param  l       Description of the Parameter 	 *@param  data    Description of the Parameter 	 *@param  offset  Description of the Parameter 	 */
specifier|public
specifier|final
specifier|static
name|void
name|encode
parameter_list|(
name|long
name|l
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|l
operator|>
literal|0177
condition|)
block|{
name|data
index|[
name|offset
operator|+
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
expr_stmt|;
name|l
operator|>>=
literal|7
expr_stmt|;
block|}
name|data
index|[
name|offset
operator|+
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|l
operator|&
literal|0177
operator|)
expr_stmt|;
block|}
comment|/** 	 *  Encode  a long integer to a variable-byte encoded sequence of bytes. 	 * Write output to a FastByteBuffer. 	 * 	 *@param  buf  Description of the Parameter 	 *@param  l    Description of the Parameter 	 */
specifier|public
specifier|final
specifier|static
name|void
name|encode
parameter_list|(
name|FastByteBuffer
name|buf
parameter_list|,
name|long
name|l
parameter_list|)
block|{
while|while
condition|(
name|l
operator|>
literal|0177
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
argument_list|)
expr_stmt|;
name|l
operator|>>=
literal|7
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|l
operator|&
literal|0177
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Get the size of the variable-byte encoded sequence for a 	 * given long. 	 * 	 *@param  l  Description of the Parameter 	 *@return    The size value 	 */
specifier|public
specifier|final
specifier|static
name|int
name|getSize
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|l
operator|>
literal|0177
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|l
operator|>>=
literal|7
expr_stmt|;
block|}
return|return
name|i
operator|+
literal|1
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  args  Description of the Parameter 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|int
name|t0
init|=
literal|11
decl_stmt|;
name|int
name|t1
init|=
literal|12
decl_stmt|;
name|byte
index|[]
name|d0
init|=
name|encode
argument_list|(
name|t0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|d1
init|=
name|encode
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtil
operator|.
name|hexDump
argument_list|(
name|d0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtil
operator|.
name|hexDump
argument_list|(
name|d1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

