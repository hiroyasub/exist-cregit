begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A simple Java Regular Expression Pattern Factory.  *  * Patterns are Cached in a LRU like Cache  *  * @author<a href="mailto:adam.retter@googlemail.com>Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|PatternFactory
block|{
specifier|private
specifier|static
specifier|final
name|PatternFactory
name|instance
init|=
operator|new
name|PatternFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|PatternFactory
parameter_list|()
block|{
name|this
operator|.
name|cache
operator|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1_000
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|PatternFactory
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|public
name|Pattern
name|getPattern
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|pattern
argument_list|,
name|ptn
lambda|->
name|Pattern
operator|.
name|compile
argument_list|(
name|ptn
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Pattern
name|getPattern
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|,
specifier|final
name|int
name|flags
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|pattern
operator|+
name|flags
argument_list|,
name|key
lambda|->
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|,
name|flags
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

