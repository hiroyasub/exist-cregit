begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * The Apache Software License, Version 1.1  *  * Copyright (c) 2002 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution, if  *    any, must include the following acknowlegement:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowlegement may appear in the software itself,  *    if and wherever such third-party acknowlegements normally appear.  *  * 4. The names "The Jakarta Project", "Ant", and "Apache Software  *    Foundation" must not be used to endorse or promote products derived  *    from this software without prior written permission. For written  *    permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache"  *    nor may "Apache" appear in their names without prior written  *    permission of the Apache Group.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  *<p>This is a utility class used by selectors and DirectoryScanner. The  * functionality more properly belongs just to selectors, but unfortunately  * DirectoryScanner exposed these as protected methods. Thus we have to  * support any subclasses of DirectoryScanner that may access these methods.  *</p>  *<p>This is a Singleton.</p>  *  * @author Arnout J. Kuiper  *<a href="mailto:ajkuiper@wxs.nl">ajkuiper@wxs.nl</a>  * @author<a href="mailto:umagesh@rediffmail.com">Magesh Umasankar</a>  * @author<a href="mailto:bruce@callenish.com">Bruce Atherton</a>  * @since 1.5  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SelectorUtils
block|{
specifier|private
specifier|static
name|SelectorUtils
name|instance
init|=
operator|new
name|SelectorUtils
argument_list|()
decl_stmt|;
comment|/**      * Private Constructor      */
specifier|private
name|SelectorUtils
parameter_list|()
block|{
block|}
comment|/**       * Retrieves the instance of the Singleton.       */
specifier|public
specifier|static
name|SelectorUtils
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Tests whether or not a given path matches the start of a given      * pattern up to the first "**".      *<p>      * This is not a general purpose test and should only be used if you      * can live with false positives. For example,<code>pattern=**\a</code>      * and<code>str=b</code> will yield<code>true</code>.      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      *      * @return whether or not a given path matches the start of a given      * pattern up to the first "**".      */
specifier|public
specifier|static
name|boolean
name|matchPatternStart
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|matchPatternStart
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a given path matches the start of a given      * pattern up to the first "**".      *<p>      * This is not a general purpose test and should only be used if you      * can live with false positives. For example,<code>pattern=**\a</code>      * and<code>str=b</code> will yield<code>true</code>.      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      * @param isCaseSensitive Whether or not matching should be performed      *                        case sensitively.      *      * @return whether or not a given path matches the start of a given      * pattern up to the first "**".      */
specifier|public
specifier|static
name|boolean
name|matchPatternStart
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
comment|// When str starts with a File.separator, pattern has to start with a
comment|// File.separator.
comment|// When pattern starts with a File.separator, str has to start with a
comment|// File.separator.
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|!=
name|pattern
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|patDirs
init|=
name|tokenizePath
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|strDirs
init|=
name|tokenizePath
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|patIdxEnd
init|=
name|patDirs
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|strIdxEnd
init|=
name|strDirs
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// up to first '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
specifier|final
name|String
name|patDir
init|=
name|patDirs
operator|.
name|elementAt
argument_list|(
name|patIdxStart
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|patDir
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
operator|.
name|elementAt
argument_list|(
name|strIdxStart
argument_list|)
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|patIdxStart
operator|>
name|patIdxEnd
condition|)
block|{
comment|// String not exhausted, but pattern is. Failure.
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// pattern now holds ** while string is not exhausted
comment|// this will generate false positives but we can live with that.
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a given path matches a given pattern.      *      * @param pattern The pattern to match against. Must not be      *<code>null</code>.      * @param str     The path to match, as a String. Must not be      *<code>null</code>.      * @param isCaseSensitive Whether or not matching should be performed      *                        case sensitively.      *      * @return<code>true</code> if the pattern matches against the string,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
comment|// When str starts with a File.separator, pattern has to start with a
comment|// File.separator.
comment|// When pattern starts with a File.separator, str has to start with a
comment|// File.separator.
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|!=
name|pattern
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|patDirs
init|=
name|tokenizePath
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|strDirs
init|=
name|tokenizePath
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|patDirs
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strDirs
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// up to first '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
specifier|final
name|String
name|patDir
init|=
name|patDirs
operator|.
name|elementAt
argument_list|(
name|patIdxStart
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|patDir
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
operator|.
name|elementAt
argument_list|(
name|strIdxStart
argument_list|)
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"**"
operator|.
name|equals
argument_list|(
name|patDirs
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|patIdxStart
operator|>
name|patIdxEnd
condition|)
block|{
comment|// String not exhausted, but pattern is. Failure.
return|return
literal|false
return|;
block|}
block|}
comment|// up to last '**'
while|while
condition|(
name|patIdxStart
operator|<=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
specifier|final
name|String
name|patDir
init|=
name|patDirs
operator|.
name|elementAt
argument_list|(
name|patIdxEnd
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|patDir
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|patDir
argument_list|,
name|strDirs
operator|.
name|elementAt
argument_list|(
name|strIdxEnd
argument_list|)
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// String is exhausted
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"**"
operator|.
name|equals
argument_list|(
name|patDirs
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|patDirs
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// '**/**' situation, so skip one
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
specifier|final
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|String
name|subPat
init|=
name|patDirs
operator|.
name|elementAt
argument_list|(
name|patIdxStart
operator|+
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subStr
init|=
name|strDirs
operator|.
name|elementAt
argument_list|(
name|strIdxStart
operator|+
name|i
operator|+
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|subPat
argument_list|,
name|subStr
argument_list|,
name|isCaseSensitive
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"**"
operator|.
name|equals
argument_list|(
name|patDirs
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|pattern
argument_list|,
name|str
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern The pattern to match against.      *                Must not be<code>null</code>.      * @param str     The string which must be matched against the pattern.      *                Must not be<code>null</code>.      * @param isCaseSensitive Whether or not matching should be performed      *                        case sensitively.      *      *      * @return<code>true</code> if the string matches against the pattern,      *         or<code>false</code> otherwise.      */
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|patArr
init|=
name|pattern
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|strArr
init|=
name|str
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|patIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|patIdxEnd
init|=
name|patArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|strIdxStart
init|=
literal|0
decl_stmt|;
name|int
name|strIdxEnd
init|=
name|strArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|char
name|ch
decl_stmt|;
name|boolean
name|containsStar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|==
literal|'*'
condition|)
block|{
name|containsStar
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|containsStar
condition|)
block|{
comment|// No '*'s, so we make a shortcut
if|if
condition|(
name|patIdxEnd
operator|!=
name|strIdxEnd
condition|)
block|{
return|return
literal|false
return|;
comment|// Pattern and string do not have the same size
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|patArr
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|isCaseSensitive
operator|&&
name|ch
operator|!=
name|strArr
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
if|if
condition|(
operator|!
name|isCaseSensitive
operator|&&
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|strArr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
block|}
return|return
literal|true
return|;
comment|// String matches against pattern
block|}
if|if
condition|(
name|patIdxEnd
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
comment|// Pattern contains only '*', which matches anything
block|}
comment|// Process characters before first star
while|while
condition|(
operator|(
name|ch
operator|=
name|patArr
index|[
name|patIdxStart
index|]
operator|)
operator|!=
literal|'*'
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|isCaseSensitive
operator|&&
name|ch
operator|!=
name|strArr
index|[
name|strIdxStart
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
if|if
condition|(
operator|!
name|isCaseSensitive
operator|&&
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|strArr
index|[
name|strIdxStart
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
name|patIdxStart
operator|++
expr_stmt|;
name|strIdxStart
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Process characters after last star
while|while
condition|(
operator|(
name|ch
operator|=
name|patArr
index|[
name|patIdxEnd
index|]
operator|)
operator|!=
literal|'*'
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|isCaseSensitive
operator|&&
name|ch
operator|!=
name|strArr
index|[
name|strIdxEnd
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
if|if
condition|(
operator|!
name|isCaseSensitive
operator|&&
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|strArr
index|[
name|strIdxEnd
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
name|patIdxEnd
operator|--
expr_stmt|;
name|strIdxEnd
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|strIdxStart
operator|>
name|strIdxEnd
condition|)
block|{
comment|// All characters in the string are used. Check if only '*'s are
comment|// left in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// process pattern between stars. padIdxStart and patIdxEnd point
comment|// always to a '*'.
while|while
condition|(
name|patIdxStart
operator|!=
name|patIdxEnd
operator|&&
name|strIdxStart
operator|<=
name|strIdxEnd
condition|)
block|{
name|int
name|patIdxTmp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
operator|+
literal|1
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|==
literal|'*'
condition|)
block|{
name|patIdxTmp
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|patIdxTmp
operator|==
name|patIdxStart
operator|+
literal|1
condition|)
block|{
comment|// Two stars next to each other, skip the first one.
name|patIdxStart
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between padIdxStart& padIdxTmp in str between
comment|// strIdxStart& strIdxEnd
specifier|final
name|int
name|patLength
init|=
operator|(
name|patIdxTmp
operator|-
name|patIdxStart
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|int
name|strLength
init|=
operator|(
name|strIdxEnd
operator|-
name|strIdxStart
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|strLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|strLength
operator|-
name|patLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|patLength
condition|;
name|j
operator|++
control|)
block|{
name|ch
operator|=
name|patArr
index|[
name|patIdxStart
operator|+
name|j
operator|+
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|isCaseSensitive
operator|&&
name|ch
operator|!=
name|strArr
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
if|if
condition|(
operator|!
name|isCaseSensitive
operator|&&
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|!=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|strArr
index|[
name|strIdxStart
operator|+
name|i
operator|+
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue
name|strLoop
continue|;
block|}
block|}
block|}
name|foundIdx
operator|=
name|strIdxStart
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIdx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIdxStart
operator|=
name|patIdxTmp
expr_stmt|;
name|strIdxStart
operator|=
name|foundIdx
operator|+
name|patLength
expr_stmt|;
block|}
comment|// All characters in the string are used. Check if only '*'s are left
comment|// in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIdxStart
init|;
name|i
operator|<=
name|patIdxEnd
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Breaks a path up into a Vector of path elements, tokenizing on      *<code>File.separator</code>.      *      * @param path Path to tokenize. Must not be<code>null</code>.      *      * @return a Vector of path elements from the tokenized path      */
specifier|public
specifier|static
name|Vector
argument_list|<
name|String
argument_list|>
name|tokenizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|File
operator|.
name|separator
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|ret
operator|.
name|addElement
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Returns dependency information on these two files. If src has been      * modified later than target, it returns true. If target doesn't exist,      * it likewise returns true. Otherwise, target is newer than src and      * is not out of date, thus the method returns false. It also returns      * false if the src file doesn't even exist, since how could the      * target then be out of date.      *      * @param src the original file      * @param target the file being compared against      * @param granularity the amount in seconds of slack we will give in      *        determining out of dateness      * @return whether the target is out of date      */
specifier|public
specifier|static
name|boolean
name|isOutOfDate
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|target
parameter_list|,
name|int
name|granularity
parameter_list|)
block|{
if|if
condition|(
operator|!
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|src
operator|.
name|lastModified
argument_list|()
operator|-
name|granularity
operator|)
operator|>
name|target
operator|.
name|lastModified
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

