begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  meier@ifs.tu-darmstadt.de  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Compiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|Paged
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|indexer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  NativeBroker.  *  *@author     Wolfang Meier  *@created    15. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|NativeBroker
extends|extends
name|DBBroker
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|BUFFERS
init|=
literal|256
decl_stmt|;
specifier|protected
specifier|static
name|int
name|FILE_BUFFER_SIZE
init|=
literal|131072
decl_stmt|;
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|RelationalBroker
operator|.
name|TableLock
name|writeLock
init|=
operator|new
name|RelationalBroker
operator|.
name|TableLock
argument_list|()
decl_stmt|;
specifier|protected
name|BFile
name|collectionsDb
init|=
literal|null
decl_stmt|;
specifier|protected
name|DOMFile
name|domDb
init|=
literal|null
decl_stmt|;
specifier|protected
name|NativeElementIndex
name|elementIndex
decl_stmt|;
specifier|protected
name|ElementPool
name|elementPool
init|=
operator|new
name|ElementPool
argument_list|(
literal|50
argument_list|)
decl_stmt|;
comment|//protected BFile docsDb = null;
specifier|protected
name|BFile
name|elementsDb
init|=
literal|null
decl_stmt|;
specifier|protected
name|BFile
name|namespacesDb
init|=
literal|null
decl_stmt|;
specifier|protected
name|NativeTextEngine
name|textEngine
decl_stmt|;
specifier|protected
name|Serializer
name|xmlSerializer
decl_stmt|;
specifier|protected
specifier|static
name|SymbolTable
name|symbols
init|=
literal|null
decl_stmt|;
specifier|protected
name|PatternCompiler
name|compiler
init|=
operator|new
name|Perl5Compiler
argument_list|()
decl_stmt|;
specifier|protected
name|PatternMatcher
name|matcher
init|=
operator|new
name|Perl5Matcher
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|defaultIndexDepth
init|=
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
comment|/** 	 *  Constructor for the NativeBroker object 	 * 	 *@param  config              Description of the Parameter 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|NativeBroker
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
argument_list|(
name|pool
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|dataDir
decl_stmt|;
name|int
name|buffers
decl_stmt|,
name|pageSize
decl_stmt|;
name|String
name|temp
decl_stmt|;
name|boolean
name|compress
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|dataDir
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.data-dir"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|dataDir
operator|=
literal|"data"
expr_stmt|;
if|if
condition|(
operator|(
name|buffers
operator|=
name|config
operator|.
name|getInteger
argument_list|(
literal|"db-connection.buffers"
argument_list|)
operator|)
operator|<
literal|0
condition|)
name|buffers
operator|=
name|BUFFERS
expr_stmt|;
if|if
condition|(
operator|(
name|pageSize
operator|=
name|config
operator|.
name|getInteger
argument_list|(
literal|"db-connection.page-size"
argument_list|)
operator|)
operator|<
literal|0
condition|)
name|pageSize
operator|=
literal|4096
expr_stmt|;
if|if
condition|(
operator|(
name|temp
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.compress"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|compress
operator|=
name|temp
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|defaultIndexDepth
operator|=
name|config
operator|.
name|getInteger
argument_list|(
literal|"indexer.index-depth"
argument_list|)
operator|)
operator|<
literal|0
condition|)
name|defaultIndexDepth
operator|=
literal|1
expr_stmt|;
name|Paged
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|String
name|pathSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|elementsDb
operator|=
operator|(
name|BFile
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.elements"
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|int
name|elementsBuffers
decl_stmt|;
if|if
condition|(
operator|(
name|elementsBuffers
operator|=
name|config
operator|.
name|getInteger
argument_list|(
literal|"db-connection.elements.buffers"
argument_list|)
operator|)
operator|<
literal|0
condition|)
name|elementsBuffers
operator|=
name|buffers
operator|*
literal|4
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"elements index buffer size: "
operator|+
name|elementsBuffers
argument_list|)
expr_stmt|;
name|elementsDb
operator|=
operator|new
name|BFile
argument_list|(
operator|new
name|File
argument_list|(
name|dataDir
operator|+
name|pathSep
operator|+
literal|"elements.dbx"
argument_list|)
argument_list|,
name|elementsBuffers
operator|>>
literal|3
argument_list|,
name|elementsBuffers
argument_list|)
expr_stmt|;
name|elementsDb
operator|.
name|fixedKeyLen
operator|=
literal|4
expr_stmt|;
if|if
condition|(
operator|!
name|elementsDb
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating elements.dbx"
argument_list|)
expr_stmt|;
name|elementsDb
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
else|else
name|elementsDb
operator|.
name|open
argument_list|()
expr_stmt|;
name|elementsDb
operator|.
name|setCompression
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"db-connection.elements"
argument_list|,
name|elementsDb
argument_list|)
expr_stmt|;
name|readOnly
operator|=
name|elementsDb
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|namespacesDb
operator|=
operator|(
name|BFile
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.namespaces"
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|namespacesDb
operator|=
operator|new
name|BFile
argument_list|(
operator|new
name|File
argument_list|(
name|dataDir
operator|+
name|pathSep
operator|+
literal|"namespaces.dbx"
argument_list|)
argument_list|,
name|buffers
operator|/
literal|4
argument_list|,
name|buffers
operator|/
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|namespacesDb
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating namespaces.dbx"
argument_list|)
expr_stmt|;
name|namespacesDb
operator|.
name|create
argument_list|()
expr_stmt|;
name|symbols
operator|=
operator|new
name|SymbolTable
argument_list|()
expr_stmt|;
name|saveSymbols
argument_list|(
name|namespacesDb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespacesDb
operator|.
name|open
argument_list|()
expr_stmt|;
name|symbols
operator|=
name|loadSymbols
argument_list|(
name|namespacesDb
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
literal|"db-connection.namespaces"
argument_list|,
name|namespacesDb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
name|readOnly
operator|=
name|namespacesDb
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|domDb
operator|=
operator|(
name|DOMFile
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.dom"
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"page buffer size = "
operator|+
name|buffers
argument_list|)
expr_stmt|;
name|domDb
operator|=
operator|new
name|DOMFile
argument_list|(
operator|new
name|File
argument_list|(
name|dataDir
operator|+
name|pathSep
operator|+
literal|"dom.dbx"
argument_list|)
argument_list|,
name|buffers
argument_list|,
literal|64
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|domDb
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating dom.dbx"
argument_list|)
expr_stmt|;
name|domDb
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
else|else
name|domDb
operator|.
name|open
argument_list|()
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"db-connection.dom"
argument_list|,
name|domDb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
name|readOnly
operator|=
name|domDb
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|collectionsDb
operator|=
operator|(
name|BFile
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.collections"
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|int
name|collectionBuffers
decl_stmt|;
if|if
condition|(
operator|(
name|collectionBuffers
operator|=
name|config
operator|.
name|getInteger
argument_list|(
literal|"db-connection.collections.buffers"
argument_list|)
operator|)
operator|<
literal|0
condition|)
name|collectionBuffers
operator|=
name|buffers
operator|*
literal|2
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"collections index buffer size: "
operator|+
name|collectionBuffers
argument_list|)
expr_stmt|;
name|collectionsDb
operator|=
operator|new
name|BFile
argument_list|(
operator|new
name|File
argument_list|(
name|dataDir
operator|+
name|pathSep
operator|+
literal|"collections.dbx"
argument_list|)
argument_list|,
name|collectionBuffers
operator|/
literal|2
argument_list|,
name|collectionBuffers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|collectionsDb
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating collections.dbx"
argument_list|)
expr_stmt|;
name|collectionsDb
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
else|else
name|collectionsDb
operator|.
name|open
argument_list|()
expr_stmt|;
name|collectionsDb
operator|.
name|setCompression
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"db-connection.collections"
argument_list|,
name|collectionsDb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
name|readOnly
operator|=
name|collectionsDb
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|readOnly
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"database runs in read-only mode"
argument_list|)
expr_stmt|;
name|textEngine
operator|=
operator|new
name|NativeTextEngine
argument_list|(
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|xmlSerializer
operator|=
operator|new
name|NativeSerializer
argument_list|(
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|elementIndex
operator|=
operator|new
name|NativeElementIndex
argument_list|(
name|this
argument_list|,
name|config
argument_list|,
name|elementsDb
argument_list|)
expr_stmt|;
name|getOrCreateCollection
argument_list|(
literal|"/db"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  name  Description of the Parameter 	 *@return       Description of the Return Value 	 */
specifier|protected
specifier|final
specifier|static
name|String
name|normalizeCollectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|1
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
name|i
operator|++
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|Object
name|acquireWriteLock
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Adds a feature to the Observer attribute of the NativeBroker object 	 * 	 *@param  o  The feature to be added to the Observer attribute 	 */
specifier|public
name|void
name|addObserver
parameter_list|(
name|Observer
name|o
parameter_list|)
block|{
name|super
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|textEngine
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|elementIndex
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|boolean
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|int
name|cmp
decl_stmt|;
if|if
condition|(
operator|!
name|isCaseSensitive
argument_list|()
condition|)
name|cmp
operator|=
name|o1
operator|.
name|toLowerCase
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cmp
operator|=
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|LT
case|:
return|return
operator|(
name|cmp
operator|<
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
operator|(
name|cmp
operator|<=
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
operator|(
name|cmp
operator|>
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
operator|(
name|cmp
operator|>=
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
operator|(
name|cmp
operator|==
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
operator|(
name|cmp
operator|!=
literal|0
operator|)
return|;
block|}
return|return
literal|false
return|;
comment|// never reached
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  element  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
name|boolean
name|elementWith
parameter_list|(
name|ElementImpl
name|element
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/** 	 *  find elements by their tag name. This method is comparable to the DOM's 	 *  method call getElementsByTagName. All elements matching tagName and 	 *  belonging to one of the documents in the DocumentSet docs are returned. 	 * 	 *@param  docs     Description of the Parameter 	 *@param  tagName  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
name|NodeSet
name|findElementsByTagName
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|tagName
parameter_list|)
block|{
comment|//if ( elementPool != null&& elementPool.inCache( docs, tagName ) ) {
comment|//    LOG.debug( "cache hit for " + tagName );
comment|//    return elementPool.getNodeSet( docs, tagName );
comment|//}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|int
name|docId
decl_stmt|;
name|int
name|len
decl_stmt|;
name|short
name|collectionId
decl_stmt|;
name|long
name|gid
decl_stmt|;
name|long
name|address
decl_stmt|;
name|long
name|delta
decl_stmt|;
name|long
name|last
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|tid
decl_stmt|;
name|int
name|page
decl_stmt|;
name|VariableByteInputStream
name|is
decl_stmt|;
name|ElementValue
name|ref
decl_stmt|;
name|Value
name|val
decl_stmt|;
comment|//byte[] data;
name|short
name|sym
decl_stmt|;
name|Collection
name|collection
decl_stmt|;
name|Lock
name|lock
init|=
name|elementsDb
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|collection
operator|=
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|collectionId
operator|=
name|collection
operator|.
name|getId
argument_list|()
expr_stmt|;
name|sym
operator|=
name|NativeBroker
operator|.
name|getSymbols
argument_list|()
operator|.
name|getSymbol
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
name|ref
operator|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|,
name|sym
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|val
operator|=
name|elementsDb
operator|.
name|get
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to acquire lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|val
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
continue|continue;
comment|//data = val.getData();
name|is
operator|=
operator|new
name|VariableByteInputStream
argument_list|(
name|val
operator|.
name|data
argument_list|()
argument_list|,
name|val
operator|.
name|start
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|docId
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|len
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|doc
operator|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skip
argument_list|(
name|len
operator|*
literal|3
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|last
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|len
condition|;
name|k
operator|++
control|)
block|{
name|delta
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|gid
operator|=
name|last
operator|+
name|delta
expr_stmt|;
name|last
operator|=
name|gid
expr_stmt|;
name|page
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|tid
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|address
operator|=
name|DOMFile
operator|.
name|createPointer
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|tagName
operator|+
literal|": "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|domDb
init|)
block|{
name|domDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|textEngine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|elementIndex
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|symbols
operator|!=
literal|null
operator|&&
name|symbols
operator|.
name|hasChanged
argument_list|()
condition|)
name|saveSymbols
argument_list|(
name|namespacesDb
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  get all the documents in this database repository. The documents are 	 *  returned as a DocumentSet. 	 * 	 *@param  user  Description of the Parameter 	 *@return       The allDocuments value 	 */
specifier|public
name|DocumentSet
name|getAllDocuments
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
try|try
block|{
name|ArrayList
name|collList
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|collList
operator|=
name|collectionsDb
operator|.
name|getEntries
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collList
operator|==
literal|null
condition|)
return|return
name|docs
return|;
name|Value
name|val
decl_stmt|;
name|Value
index|[]
name|entry
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|VariableByteInputStream
name|istream
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|Collection
name|collection
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|entry
operator|=
operator|(
name|Value
index|[]
operator|)
name|collList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
continue|continue;
name|val
operator|=
name|entry
index|[
literal|1
index|]
expr_stmt|;
name|data
operator|=
name|val
operator|.
name|getData
argument_list|()
expr_stmt|;
name|istream
operator|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|collection
operator|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|collection
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
for|for
control|(
name|Iterator
name|iter
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BTreeException
name|dbe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading "
operator|+
name|docs
operator|.
name|getLength
argument_list|()
operator|+
literal|" documents took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
comment|/** 	 *  Attributes are stored in the element-index (with a leading "@" in the 	 *  name). So simply call findElementsByTagName() 	 * 	 *@param  docs  Description of the Parameter 	 *@param  name  Description of the Parameter 	 *@return       The attributesByName value 	 */
specifier|public
name|NodeSet
name|getAttributesByName
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeSet
name|result
init|=
name|findElementsByTagName
argument_list|(
name|docs
argument_list|,
literal|"@"
operator|+
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" matching attributes"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  get collection object. If the collection does not exist, null is 	 *  returned. 	 * 	 *@param  name  Description of the Parameter 	 *@return       The collection value 	 */
specifier|public
name|Collection
name|getCollection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|normalizeCollectionName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|name
operator|=
literal|"/"
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Value
name|key
decl_stmt|;
try|try
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
name|name
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|collection
init|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Value
name|val
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|val
operator|=
name|collectionsDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|data
init|=
name|val
operator|.
name|getData
argument_list|()
decl_stmt|;
name|VariableByteInputStream
name|istream
init|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|collection
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|collection
return|;
block|}
specifier|public
specifier|static
name|SymbolTable
name|getSymbols
parameter_list|()
block|{
return|return
name|symbols
return|;
block|}
specifier|protected
specifier|synchronized
specifier|static
name|SymbolTable
name|loadSymbols
parameter_list|(
name|BFile
name|namespacesDb
parameter_list|)
block|{
name|Value
name|key
decl_stmt|;
try|try
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
literal|"__symbols"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
literal|"__symbols"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Value
name|val
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|namespacesDb
init|)
block|{
name|val
operator|=
name|namespacesDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"symbol-table not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|data
init|=
name|val
operator|.
name|getData
argument_list|()
decl_stmt|;
name|VariableByteInputStream
name|istream
init|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|SymbolTable
name|symbols
init|=
operator|new
name|SymbolTable
argument_list|()
decl_stmt|;
try|try
block|{
name|symbols
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|symbols
return|;
block|}
comment|/** 	 *  Gets the dOMIterator attribute of the NativeBroker object 	 * 	 *@param  proxy  Description of the Parameter 	 *@return        The dOMIterator value 	 */
specifier|public
name|Iterator
name|getDOMIterator
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|domDb
operator|.
name|setOwnerObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|proxy
operator|.
name|getAddress
argument_list|()
condition|)
return|return
name|domDb
operator|.
name|iterator
argument_list|(
name|proxy
operator|.
name|doc
argument_list|,
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
else|else
return|return
name|domDb
operator|.
name|iterator
argument_list|(
name|proxy
operator|.
name|doc
argument_list|,
name|proxy
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the dOMIterator attribute of the NativeBroker object 	 * 	 *@param  doc  Description of the Parameter 	 *@param  gid  Description of the Parameter 	 *@return      The dOMIterator value 	 */
specifier|public
name|Iterator
name|getDOMIterator
parameter_list|(
name|Document
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|domDb
operator|.
name|setOwnerObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|domDb
operator|.
name|iterator
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
operator|new
name|NodeProxy
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
name|gid
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the databaseType attribute of the NativeBroker object 	 * 	 *@return    The databaseType value 	 */
specifier|public
name|int
name|getDatabaseType
parameter_list|()
block|{
return|return
name|DBBroker
operator|.
name|NATIVE
return|;
block|}
comment|/** 	 *  get a document by it's file name. The document's file name is used to 	 *  identify a document. File names are stored without the leading path. 	 * 	 *@param  fileName                       Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                The document value 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|Document
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|fileName
operator|=
literal|'/'
operator|+
name|fileName
expr_stmt|;
name|int
name|pos
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|collName
init|=
operator|(
name|pos
operator|>
literal|0
operator|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
else|:
literal|"/"
decl_stmt|;
name|Collection
name|collection
init|=
name|getCollection
argument_list|(
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collName
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"permission denied to read collection"
argument_list|)
throw|;
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"document "
operator|+
name|fileName
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read document"
argument_list|)
throw|;
return|return
name|doc
return|;
block|}
comment|/** 	 *  Gets the documentsByCollection attribute of the NativeBroker object 	 * 	 *@param  collection                     Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                The documentsByCollection value 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|DocumentSet
name|getDocumentsByCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
return|return
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|collection
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the documentsByCollection attribute of the NativeBroker object 	 * 	 *@param  collection                     Description of the Parameter 	 *@param  inclusive                      Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                The documentsByCollection value 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|DocumentSet
name|getDocumentsByCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|collection
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|docs
return|;
if|if
condition|(
name|collection
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|collection
operator|=
literal|"/"
operator|+
name|collection
expr_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|collection
operator|=
literal|"/db"
operator|+
name|collection
expr_stmt|;
name|Collection
name|coll
init|=
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collection
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
if|if
condition|(
operator|!
name|coll
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"permission to read collection denied"
argument_list|)
throw|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|coll
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inclusive
condition|)
block|{
name|String
name|childName
decl_stmt|;
name|DocumentSet
name|childDocs
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|coll
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childName
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|childName
operator|=
name|coll
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|childName
expr_stmt|;
name|childDocs
operator|=
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|childName
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addAll
argument_list|(
name|childDocs
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading "
operator|+
name|docs
operator|.
name|getLength
argument_list|()
operator|+
literal|" documents from collection "
operator|+
name|collection
operator|+
literal|" took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
comment|/** 	 *  get all the documents in this database matching the given 	 *  document-type's name. 	 * 	 *@param  doctypeName  Description of the Parameter 	 *@param  user         Description of the Parameter 	 *@return              The documentsByDoctype value 	 */
specifier|public
name|DocumentSet
name|getDocumentsByDoctype
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|doctypeName
parameter_list|)
block|{
name|DocumentSet
name|docs
init|=
name|getAllDocuments
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|DocumentSet
name|result
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|doc
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypeName
operator|.
name|equals
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
operator|&&
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 *  Gets the namespacePrefix attribute of the NativeBroker object 	 * 	 *@param  namespace  Description of the Parameter 	 *@return            The namespacePrefix value 	 */
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|Value
name|ns
decl_stmt|;
try|try
block|{
name|ns
operator|=
operator|new
name|Value
argument_list|(
name|namespace
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|ns
operator|=
operator|new
name|Value
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
name|Value
name|prefix
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|namespacesDb
init|)
block|{
name|prefix
operator|=
name|namespacesDb
operator|.
name|get
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|prefix
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Gets the namespaceURI attribute of the NativeBroker object 	 * 	 *@param  prefix  Description of the Parameter 	 *@return         The namespaceURI value 	 */
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|getNamespacePrefix
argument_list|(
name|prefix
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the nextCollectionId attribute of the NativeBroker object 	 * 	 *@return    The nextCollectionId value 	 */
specifier|protected
name|short
name|getNextCollectionId
parameter_list|()
throws|throws
name|ReadOnlyException
block|{
name|short
name|nextCollectionId
init|=
literal|0
decl_stmt|;
name|Value
name|key
init|=
operator|new
name|Value
argument_list|(
literal|"__next_collection_id"
argument_list|)
decl_stmt|;
name|Value
name|data
decl_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|data
operator|=
name|collectionsDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|nextCollectionId
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|nextCollectionId
expr_stmt|;
block|}
name|byte
index|[]
name|d
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|nextCollectionId
argument_list|,
name|d
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Value
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|collectionsDb
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|nextCollectionId
return|;
block|}
comment|/** 	 *  get the number of documents in the repository this is used to determine 	 *  a free document-id for the document to be stored. 	 * 	 *@param  collection  Description of the Parameter 	 *@return             The nextDocId value 	 */
specifier|public
name|int
name|getNextDocId
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|int
name|nextDocId
init|=
literal|1
decl_stmt|;
name|Value
name|key
init|=
operator|new
name|Value
argument_list|(
literal|"__next_doc_id"
argument_list|)
decl_stmt|;
name|Value
name|data
decl_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|data
operator|=
name|collectionsDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|nextDocId
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|nextDocId
expr_stmt|;
block|}
name|byte
index|[]
name|d
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|nextDocId
argument_list|,
name|d
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Value
argument_list|(
name|d
argument_list|)
expr_stmt|;
try|try
block|{
name|collectionsDb
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"database read-only"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|nextDocId
return|;
block|}
comment|/** 	 *  Gets the nodeValue attribute of the NativeBroker object 	 * 	 *@param  node  Description of the Parameter 	 *@return       The nodeValue value 	 */
specifier|public
name|String
name|getNodeValue
parameter_list|(
name|NodeImpl
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
if|if
condition|(
name|node
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|firstChild
init|=
name|node
operator|.
name|firstChildID
argument_list|()
decl_stmt|;
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|firstChild
argument_list|)
decl_stmt|;
name|Iterator
name|domIterator
init|=
name|getDOMIterator
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|getNodeValue
argument_list|(
name|buf
argument_list|,
name|domIterator
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|buf
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|value
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
else|else
return|return
literal|""
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
operator|(
operator|(
name|Text
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
block|}
comment|/** 	 *  Gets the nodeValue attribute of the NativeBroker object 	 * 	 *@param  proxy  Description of the Parameter 	 *@return        The nodeValue value 	 */
specifier|public
name|String
name|getNodeValue
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Iterator
name|domIterator
init|=
name|getDOMIterator
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|getNodeValue
argument_list|(
name|buf
argument_list|,
name|domIterator
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|buf
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|value
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/** 	 *  Gets the nodeValue attribute of the NativeBroker object 	 * 	 *@param  buf          Description of the Parameter 	 *@param  domIterator  Description of the Parameter 	 */
specifier|protected
name|void
name|getNodeValue
parameter_list|(
name|ByteArrayOutputStream
name|buf
parameter_list|,
name|Iterator
name|domIterator
parameter_list|)
block|{
name|getNodeValue
argument_list|(
name|buf
argument_list|,
name|domIterator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Gets the nodeValue attribute of the NativeBroker object 	 * 	 *@param  buf          Description of the Parameter 	 *@param  domIterator  Description of the Parameter 	 *@param  firstNode    Description of the Parameter 	 */
specifier|protected
name|void
name|getNodeValue
parameter_list|(
name|ByteArrayOutputStream
name|buf
parameter_list|,
name|Iterator
name|domIterator
parameter_list|,
name|boolean
name|firstNode
parameter_list|)
block|{
try|try
block|{
name|Value
name|value
init|=
operator|(
name|Value
operator|)
name|domIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
comment|//byte[] data = value.getData();
name|short
name|type
init|=
name|Signatures
operator|.
name|getType
argument_list|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|val
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|int
name|children
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
name|getNodeValue
argument_list|(
name|buf
argument_list|,
name|domIterator
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|buf
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
name|value
operator|.
name|streamTo
argument_list|(
name|buf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
comment|// use attribute value only if the
comment|// context node is an attribute (if this is
comment|// the top level call of this method)
if|if
condition|(
name|firstNode
condition|)
block|{
name|byte
name|idSizeType
init|=
operator|(
name|byte
operator|)
operator|(
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|&
literal|0x3
operator|)
decl_stmt|;
name|value
operator|.
name|streamTo
argument_list|(
name|buf
argument_list|,
literal|1
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
operator|-
literal|1
operator|-
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  get all the nodes containing the search terms given by the array expr 	 *  using the fulltext-index. Calls to this method are normally delegated to 	 *  the associated instance of class TextSearchEngine. 	 * 	 *@param  docs      Description of the Parameter 	 *@param  termList  Description of the Parameter 	 *@param  type      Description of the Parameter 	 *@return           NodeSet[] an array of node sets, one for each search 	 *      term 	 */
specifier|public
name|NodeSet
index|[]
name|getNodesContaining
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
index|[]
name|termList
parameter_list|,
name|int
name|type
parameter_list|)
block|{
return|return
name|textEngine
operator|.
name|getNodesContaining
argument_list|(
name|docs
argument_list|,
name|termList
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the nodesContaining attribute of the NativeBroker object 	 * 	 *@param  docs      Description of the Parameter 	 *@param  termList  Description of the Parameter 	 *@return           The nodesContaining value 	 */
specifier|public
name|NodeSet
index|[]
name|getNodesContaining
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
index|[]
name|termList
parameter_list|)
block|{
return|return
name|getNodesContaining
argument_list|(
name|docs
argument_list|,
name|termList
argument_list|,
name|MATCH_EXACT
argument_list|)
return|;
block|}
comment|/** 	 *  This method handles left or left-and-right truncated search terms. In 	 *  these cases it is not possible to use the cdata-index, since it contains 	 *  just the first 8 bytes of every cdata-string. 	 * 	 *@param  context   Description of the Parameter 	 *@param  docs      Description of the Parameter 	 *@param  relation  Description of the Parameter 	 *@param  expr      Description of the Parameter 	 *@return           The nodesEqualTo value 	 */
specifier|public
name|NodeSet
name|getNodesEqualTo
parameter_list|(
name|NodeSet
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|int
name|relation
parameter_list|,
name|String
name|expr
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeSet
name|temp
decl_stmt|;
name|int
name|truncation
init|=
name|Constants
operator|.
name|TRUNC_NONE
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'%'
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|expr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|truncation
operator|=
name|Constants
operator|.
name|TRUNC_LEFT
expr_stmt|;
block|}
if|if
condition|(
name|expr
operator|.
name|charAt
argument_list|(
name|expr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'%'
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|truncation
operator|=
operator|(
name|truncation
operator|==
name|Constants
operator|.
name|TRUNC_LEFT
operator|)
condition|?
name|Constants
operator|.
name|TRUNC_BOTH
else|:
name|Constants
operator|.
name|TRUNC_RIGHT
expr_stmt|;
block|}
name|NodeSet
name|result
init|=
name|scanSequential
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|relation
argument_list|,
name|truncation
argument_list|,
name|expr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"searching "
operator|+
name|context
operator|.
name|getLength
argument_list|()
operator|+
literal|" nodes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  get collection object If the collection does not yet exists, it is 	 *  created automatically. 	 * 	 *@param  name                           the collection's name 	 *@param  user                           Description of the Parameter 	 *@return                                The orCreateCollection value 	 *@exception  PermissionDeniedException  Description of the Exception 	 *@author=@author 	 */
specifier|public
name|Collection
name|getOrCreateCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|name
operator|=
name|normalizeCollectionName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|name
operator|=
literal|"/"
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Collection
name|current
decl_stmt|;
try|try
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|temp
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/db"
decl_stmt|;
name|Collection
name|sub
decl_stmt|;
name|current
operator|=
name|getCollection
argument_list|(
literal|"/db"
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating root collection /db"
argument_list|)
expr_stmt|;
name|current
operator|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
literal|"/db"
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setPermissions
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|user
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|setId
argument_list|(
name|getNextCollectionId
argument_list|()
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|temp
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|temp
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|hasSubcollection
argument_list|(
name|temp
argument_list|)
condition|)
name|current
operator|=
name|getCollection
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to write to collection"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|sub
operator|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|user
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setId
argument_list|(
name|getNextCollectionId
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|addCollection
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|sub
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"database read-only"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|current
return|;
block|}
comment|/** 	 *  Gets the range attribute of the NativeBroker object 	 * 	 *@param  doc    Description of the Parameter 	 *@param  first  Description of the Parameter 	 *@param  last   Description of the Parameter 	 *@return        The range value 	 */
specifier|public
name|NodeList
name|getRange
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|long
name|first
parameter_list|,
specifier|final
name|long
name|last
parameter_list|)
block|{
name|NodeListImpl
name|result
init|=
operator|new
name|NodeListImpl
argument_list|(
operator|(
name|int
operator|)
operator|(
name|last
operator|-
name|first
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|gid
init|=
name|first
init|;
name|gid
operator|<=
name|last
condition|;
name|gid
operator|++
control|)
name|result
operator|.
name|add
argument_list|(
name|objectWith
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  Gets the serializer attribute of the NativeBroker object 	 * 	 *@return    The serializer value 	 */
specifier|public
name|Serializer
name|getSerializer
parameter_list|()
block|{
name|xmlSerializer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|xmlSerializer
return|;
block|}
comment|/** 	 *  return a data-input-stream which is positioned at the first byte of the 	 *  node with id gid and owned by doc. This method may be used to do a 	 *  sequential walk through a node and it's descendants. 	 * 	 *@param  doc  Description of the Parameter 	 *@param  gid  Description of the Parameter 	 *@return      The stream value 	 */
specifier|public
name|DataInput
name|getStream
parameter_list|(
name|Document
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Gets the textEngine attribute of the NativeBroker object 	 * 	 *@return    The textEngine value 	 */
specifier|public
name|TextSearchEngine
name|getTextEngine
parameter_list|()
block|{
return|return
name|textEngine
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|Serializer
name|newSerializer
parameter_list|()
block|{
return|return
operator|new
name|NativeSerializer
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc  Description of the Parameter 	 *@param  gid  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
name|Node
name|objectWith
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|long
name|gid
parameter_list|)
block|{
return|return
operator|(
name|Node
operator|)
operator|new
name|DOMTransaction
argument_list|(
name|this
argument_list|,
name|domDb
argument_list|)
block|{
specifier|public
name|Object
name|start
parameter_list|()
block|{
name|Value
name|val
init|=
name|domDb
operator|.
name|get
argument_list|(
operator|new
name|NodeProxy
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
name|gid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"node "
operator|+
name|gid
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|NodeImpl
name|node
init|=
name|NodeImpl
operator|.
name|deserialize
argument_list|(
name|val
operator|.
name|getData
argument_list|()
argument_list|,
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|)
decl_stmt|;
name|node
operator|.
name|setGID
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|node
operator|.
name|setInternalAddress
argument_list|(
name|val
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
name|Node
name|preloadDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  namespace  Description of the Parameter 	 *@param  prefix     Description of the Parameter 	 */
specifier|public
name|void
name|registerNamespace
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Value
name|ns
decl_stmt|;
name|Value
name|pfx
decl_stmt|;
try|try
block|{
name|ns
operator|=
operator|new
name|Value
argument_list|(
name|namespace
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|pfx
operator|=
operator|new
name|Value
argument_list|(
name|prefix
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|ns
operator|=
operator|new
name|Value
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|pfx
operator|=
operator|new
name|Value
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"registering namespace: "
operator|+
name|namespace
operator|+
literal|"; prefix: "
operator|+
name|prefix
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|namespacesDb
init|)
block|{
try|try
block|{
name|namespacesDb
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|pfx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|namespacesDb
operator|.
name|put
argument_list|(
name|pfx
argument_list|,
name|ns
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  lock  Description of the Parameter 	 */
specifier|public
name|void
name|releaseWriteLock
parameter_list|(
name|Object
name|lock
parameter_list|)
block|{
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  name                           Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                Description of the Return Value 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|readOnly
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"database is read-only"
argument_list|)
throw|;
try|try
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
name|Collection
name|collection
init|=
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Collection
name|parent
init|=
name|collection
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to remove collection"
argument_list|)
throw|;
operator|(
operator|(
name|NativeTextEngine
operator|)
name|textEngine
operator|)
operator|.
name|removeCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing elements ..."
argument_list|)
expr_stmt|;
name|short
name|collectionId
init|=
name|collection
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Value
name|ref
init|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|elementsDb
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|this
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ArrayList
name|elements
init|=
name|elementsDb
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|elements
operator|.
name|size
argument_list|()
operator|+
literal|" elements."
argument_list|)
expr_stmt|;
name|Value
name|val
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|elements
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|val
operator|=
operator|(
name|Value
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|elementsDb
operator|.
name|remove
argument_list|(
name|val
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|elementsDb
operator|.
name|removeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"could not acquire lock on elements index"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|elementPool
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|removeCollection
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|String
name|childCollection
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing sub-collections"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childCollection
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|removeCollection
argument_list|(
operator|(
name|name
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|childCollection
else|:
name|name
operator|+
literal|"/"
operator|+
name|childCollection
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// if this is not the root collection remove it completely
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
else|else
block|{
name|Value
name|key
decl_stmt|;
try|try
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|key
operator|=
operator|new
name|Value
argument_list|(
name|name
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|collectionsDb
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed collection ..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing dom ..."
argument_list|)
expr_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|domDb
init|)
block|{
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|NodeImpl
name|node
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|Iterator
name|k
init|=
name|getDOMIterator
argument_list|(
name|doc
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
name|removeNodes
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
name|ref
operator|=
operator|new
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|lock
operator|=
name|domDb
operator|.
name|getLock
argument_list|()
expr_stmt|;
comment|// try to acquire a lock on the file
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|this
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|domDb
operator|.
name|setOwnerObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ArrayList
name|nodes
init|=
name|domDb
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ref
operator|=
operator|(
name|Value
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|domDb
operator|.
name|removeValue
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|domDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// timed out
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  docName                        Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|void
name|removeDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|readOnly
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"database is read-only"
argument_list|)
throw|;
try|try
block|{
if|if
condition|(
operator|!
name|docName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|docName
operator|=
literal|'/'
operator|+
name|docName
expr_stmt|;
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|getDocument
argument_list|(
name|docName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"document "
operator|+
name|docName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"write access to collection denied; user="
operator|+
name|user
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"permission to remove document denied"
argument_list|)
throw|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removing document "
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
comment|// remove document
comment|// drop element-index
name|short
name|collectionId
init|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Value
name|ref
init|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|elementsDb
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|this
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ArrayList
name|elements
init|=
name|elementsDb
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|elements
operator|.
name|size
argument_list|()
operator|+
literal|" elements."
argument_list|)
expr_stmt|;
name|Value
name|key
decl_stmt|;
name|Value
name|value
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|byte
index|[]
name|ndata
decl_stmt|;
name|VariableByteInputStream
name|is
decl_stmt|;
name|VariableByteOutputStream
name|os
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|docId
decl_stmt|;
name|long
name|delta
decl_stmt|;
name|int
name|page
decl_stmt|;
name|int
name|tid
decl_stmt|;
name|boolean
name|changed
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|=
operator|(
name|Value
operator|)
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|=
name|elementsDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|data
operator|=
name|value
operator|.
name|getData
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|VariableByteOutputStream
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|docId
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|len
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|docId
operator|!=
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// copy data to new buffer
name|os
operator|.
name|writeInt
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|delta
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|page
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|tid
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|// skip
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"eof: "
operator|+
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ndata
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|value
operator|=
operator|new
name|Value
argument_list|(
name|ndata
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elementsDb
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not save element"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not acquire lock on elements"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|elementPool
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|(
operator|(
name|NativeTextEngine
operator|)
name|textEngine
operator|)
operator|.
name|removeDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|domDb
init|)
block|{
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|NodeImpl
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Iterator
name|j
init|=
name|getDOMIterator
argument_list|(
name|doc
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
name|removeNodes
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|ref
operator|=
operator|new
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|lock
operator|=
name|domDb
operator|.
name|getLock
argument_list|()
expr_stmt|;
comment|// try to acquire a lock on the file
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|this
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|domDb
operator|.
name|setOwnerObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ArrayList
name|nodes
init|=
name|domDb
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ref
operator|=
operator|(
name|Value
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|domDb
operator|.
name|removeValue
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|domDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// timed out
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|Collection
name|collection
init|=
name|doc
operator|.
name|getCollection
argument_list|()
decl_stmt|;
name|collection
operator|.
name|removeDocument
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|collectionsDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removed document."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|bte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  domIterator  Description of the Parameter 	 */
specifier|protected
name|void
name|removeNodes
parameter_list|(
name|Iterator
name|domIterator
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|Value
operator|)
name|domIterator
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|short
name|type
init|=
name|Signatures
operator|.
name|getType
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|int
name|children
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|domIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
name|removeNodes
argument_list|(
name|domIterator
argument_list|)
expr_stmt|;
break|break;
default|default :
name|domIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDocument
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|Value
name|name
decl_stmt|;
try|try
block|{
name|name
operator|=
operator|new
name|Value
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uee
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|Value
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|VariableByteOutputStream
name|ostream
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
name|doc
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ostream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Value
name|collData
init|=
operator|new
name|Value
argument_list|(
name|data
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
if|if
condition|(
operator|!
name|collectionsDb
operator|.
name|append
argument_list|(
name|name
argument_list|,
name|collData
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not store collection data for "
operator|+
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  collection  Description of the Parameter 	 */
specifier|public
name|void
name|saveCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|readOnly
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"database is read-only"
argument_list|)
throw|;
try|try
block|{
if|if
condition|(
name|collection
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
name|collection
operator|.
name|setId
argument_list|(
name|getNextCollectionId
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|name
decl_stmt|;
try|try
block|{
name|name
operator|=
operator|new
name|Value
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uee
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|Value
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|VariableByteOutputStream
name|ostream
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
name|collection
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
if|if
condition|(
operator|!
name|collectionsDb
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Value
argument_list|(
name|ostream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not store collection data for "
operator|+
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|saveSymbols
parameter_list|(
name|BFile
name|namespacesDb
parameter_list|)
block|{
name|Value
name|name
decl_stmt|;
try|try
block|{
name|name
operator|=
operator|new
name|Value
argument_list|(
literal|"__symbols"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|name
operator|=
operator|new
name|Value
argument_list|(
literal|"__symbols"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|VariableByteOutputStream
name|ostream
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
name|symbols
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ostream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|namespacesDb
init|)
block|{
if|if
condition|(
operator|!
name|namespacesDb
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Value
argument_list|(
name|data
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not store symbol table"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Do a sequential search through the DOM-file. 	 * 	 *@param  context     Description of the Parameter 	 *@param  doc         Description of the Parameter 	 *@param  relation    Description of the Parameter 	 *@param  truncation  Description of the Parameter 	 *@param  expr        Description of the Parameter 	 *@return             Description of the Return Value 	 */
specifier|protected
name|NodeSet
name|scanSequential
parameter_list|(
name|NodeSet
name|context
parameter_list|,
name|DocumentSet
name|doc
parameter_list|,
name|int
name|relation
parameter_list|,
name|int
name|truncation
parameter_list|,
name|String
name|expr
parameter_list|)
block|{
name|ArraySet
name|resultNodeSet
init|=
operator|new
name|ArraySet
argument_list|(
name|context
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|content
decl_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|long
name|filePos
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|NodeRef
name|nodeRef
decl_stmt|;
name|String
name|cmp
decl_stmt|;
name|Iterator
name|domIterator
init|=
literal|null
decl_stmt|;
name|Pattern
name|regexp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|Constants
operator|.
name|REGEXP
condition|)
try|try
block|{
name|regexp
operator|=
name|compiler
operator|.
name|compile
argument_list|(
name|expr
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|Perl5Compiler
operator|.
name|CASE_INSENSITIVE_MASK
argument_list|)
expr_stmt|;
name|truncation
operator|=
name|Constants
operator|.
name|REGEXP
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|context
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|domIterator
operator|=
name|getDOMIterator
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|getNodeValue
argument_list|(
name|buf
argument_list|,
name|domIterator
argument_list|)
expr_stmt|;
name|data
operator|=
name|buf
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
try|try
block|{
name|content
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|content
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCaseSensitive
argument_list|()
condition|)
name|cmp
operator|=
name|content
expr_stmt|;
else|else
block|{
name|cmp
operator|=
name|content
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|expr
operator|=
name|expr
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
comment|//System.out.println(content);
switch|switch
condition|(
name|truncation
condition|)
block|{
case|case
name|Constants
operator|.
name|TRUNC_LEFT
case|:
if|if
condition|(
name|cmp
operator|.
name|endsWith
argument_list|(
name|expr
argument_list|)
condition|)
name|resultNodeSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|TRUNC_RIGHT
case|:
if|if
condition|(
name|cmp
operator|.
name|startsWith
argument_list|(
name|expr
argument_list|)
condition|)
name|resultNodeSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|TRUNC_BOTH
case|:
if|if
condition|(
operator|-
literal|1
operator|<
name|cmp
operator|.
name|indexOf
argument_list|(
name|expr
argument_list|)
condition|)
name|resultNodeSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|TRUNC_NONE
case|:
if|if
condition|(
name|compare
argument_list|(
name|cmp
argument_list|,
name|expr
argument_list|,
name|relation
argument_list|)
condition|)
name|resultNodeSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|REGEXP
case|:
if|if
condition|(
name|regexp
operator|!=
literal|null
operator|&&
name|matcher
operator|.
name|contains
argument_list|(
name|cmp
argument_list|,
name|regexp
argument_list|)
condition|)
name|resultNodeSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultNodeSet
return|;
block|}
comment|/** 	 *  Sets the retrvMode attribute of the NativeBroker object 	 * 	 *@param  mode  The new retrvMode value 	 */
specifier|public
name|void
name|setRetrvMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
name|sync
argument_list|()
expr_stmt|;
name|textEngine
operator|.
name|close
argument_list|()
expr_stmt|;
name|domDb
operator|.
name|close
argument_list|()
expr_stmt|;
name|elementsDb
operator|.
name|close
argument_list|()
expr_stmt|;
name|namespacesDb
operator|.
name|close
argument_list|()
expr_stmt|;
name|collectionsDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 *  Store a node into the database. This method is called by the parser to 	 *  write a node to the storage backend. 	 * 	 *@param  node         the node to be stored 	 *@param  currentPath  path expression which points to this node's 	 *      element-parent or to itself if it is an element (currently used by 	 *      the Broker to determine if a node's content should be 	 *      fulltext-indexed). 	 */
specifier|public
name|void
name|store
parameter_list|(
specifier|final
name|NodeImpl
name|node
parameter_list|,
name|String
name|currentPath
parameter_list|)
block|{
name|IndexPaths
name|idx
init|=
operator|(
name|IndexPaths
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexScheme."
operator|+
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getGID
argument_list|()
operator|<
literal|0
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"illegal node: "
operator|+
name|node
operator|.
name|getGID
argument_list|()
operator|+
literal|"; "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|short
name|nodeType
init|=
name|node
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
specifier|final
name|long
name|gid
init|=
name|node
operator|.
name|getGID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeName
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
specifier|final
name|int
name|depth
init|=
name|idx
operator|==
literal|null
condition|?
name|defaultIndexDepth
else|:
name|idx
operator|.
name|getIndexDepth
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|data
index|[]
init|=
name|node
operator|.
name|serialize
argument_list|()
decl_stmt|;
operator|new
name|DOMTransaction
argument_list|(
name|this
argument_list|,
name|domDb
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
block|{
specifier|public
name|Object
name|start
parameter_list|()
throws|throws
name|ReadOnlyException
block|{
name|long
name|address
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|nodeType
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|nodeType
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|||
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
operator|>
name|depth
condition|)
name|address
operator|=
name|domDb
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
else|else
block|{
name|address
operator|=
name|domDb
operator|.
name|put
argument_list|(
operator|new
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|gid
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setInternalAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeProxy
name|tempProxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nodeType
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
comment|// save element by calling ElementIndex
name|elementIndex
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|elementIndex
operator|.
name|addRow
argument_list|(
name|nodeName
argument_list|,
name|tempProxy
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|elementIndex
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|elementIndex
operator|.
name|addRow
argument_list|(
literal|"@"
operator|+
name|nodeName
argument_list|,
name|tempProxy
argument_list|)
expr_stmt|;
comment|// check if attribute value should be fulltext-indexed
comment|// by calling IndexPaths.match(path)
if|if
condition|(
name|idx
operator|==
literal|null
operator|||
operator|(
name|idx
operator|.
name|getIncludeAttributes
argument_list|()
operator|&&
name|idx
operator|.
name|match
argument_list|(
name|currentPath
operator|+
literal|"/@"
operator|+
name|nodeName
argument_list|)
operator|)
condition|)
name|textEngine
operator|.
name|storeAttribute
argument_list|(
name|idx
argument_list|,
operator|(
name|AttrImpl
operator|)
name|node
argument_list|)
expr_stmt|;
comment|// if the attribute has type ID, store the ID-value
comment|// to the element index as well
if|if
condition|(
operator|(
operator|(
name|AttrImpl
operator|)
name|node
operator|)
operator|.
name|getType
argument_list|()
operator|==
name|AttrImpl
operator|.
name|ID
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storing ID"
argument_list|)
expr_stmt|;
name|elementIndex
operator|.
name|addRow
argument_list|(
literal|"&"
operator|+
operator|(
operator|(
name|AttrImpl
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|tempProxy
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
comment|// check if this textual content should be fulltext-indexed
comment|// by calling IndexPaths.match(path)
if|if
condition|(
name|idx
operator|==
literal|null
operator|||
name|idx
operator|.
name|match
argument_list|(
name|currentPath
argument_list|)
condition|)
name|textEngine
operator|.
name|storeText
argument_list|(
name|idx
argument_list|,
operator|(
name|TextImpl
operator|)
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|void
name|storeDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
block|}
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"syncing broker"
argument_list|)
expr_stmt|;
comment|// uncomment this to get statistics on page buffer usage
name|elementsDb
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
name|collectionsDb
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
name|domDb
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|collectionsDb
init|)
block|{
name|collectionsDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|domDb
init|)
block|{
name|domDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|namespacesDb
init|)
block|{
name|namespacesDb
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|elementIndex
operator|.
name|sync
argument_list|()
expr_stmt|;
name|textEngine
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbe
parameter_list|)
block|{
name|dbe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|NodeImpl
name|node
parameter_list|)
block|{
try|try
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
specifier|final
name|long
name|internalAddress
init|=
name|node
operator|.
name|getInternalAddress
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|node
operator|.
name|serialize
argument_list|()
decl_stmt|;
operator|new
name|DOMTransaction
argument_list|(
name|this
argument_list|,
name|domDb
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
block|{
specifier|public
name|Object
name|start
parameter_list|()
throws|throws
name|ReadOnlyException
block|{
if|if
condition|(
operator|-
literal|1
operator|<
name|internalAddress
condition|)
name|domDb
operator|.
name|update
argument_list|(
operator|new
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
argument_list|,
name|internalAddress
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|domDb
operator|.
name|update
argument_list|(
operator|new
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|insertAfter
parameter_list|(
specifier|final
name|NodeImpl
name|previous
parameter_list|,
specifier|final
name|NodeImpl
name|node
parameter_list|)
block|{
specifier|final
name|byte
name|data
index|[]
init|=
name|node
operator|.
name|serialize
argument_list|()
decl_stmt|;
operator|new
name|DOMTransaction
argument_list|(
name|this
argument_list|,
name|domDb
argument_list|)
block|{
specifier|public
name|Object
name|start
parameter_list|()
block|{
name|NodeRef
name|ref
init|=
operator|new
name|NodeRef
argument_list|(
operator|(
operator|(
name|DocumentImpl
operator|)
name|previous
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|,
name|previous
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|address
init|=
name|domDb
operator|.
name|insertAfter
argument_list|(
name|ref
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|node
operator|.
name|setInternalAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"node stored at "
operator|+
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"NativeBroker ["
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|readOnly
return|;
block|}
specifier|final
specifier|static
class|class
name|ElementValue
extends|extends
name|Value
block|{
name|ElementValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ed
decl_stmt|;
try|try
block|{
name|ed
operator|=
name|elementName
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|ed
operator|=
name|elementName
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
name|len
operator|=
name|ed
operator|.
name|length
operator|+
literal|2
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ed
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|2
argument_list|,
name|ed
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|ElementValue
parameter_list|(
name|short
name|collectionId
parameter_list|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|len
operator|=
literal|2
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|ElementValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|short
name|symbol
parameter_list|)
block|{
name|len
operator|=
literal|4
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|symbol
argument_list|,
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|ElementValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|short
name|symbol
parameter_list|,
name|short
name|partition
parameter_list|)
block|{
name|len
operator|=
literal|6
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|symbol
argument_list|,
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|partition
argument_list|,
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|short
name|getCollectionId
parameter_list|()
block|{
return|return
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|String
name|getElementName
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|2
argument_list|,
name|len
operator|-
literal|2
argument_list|)
return|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|final
specifier|static
class|class
name|NodeRef
extends|extends
name|Value
block|{
name|NodeRef
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|12
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|docId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|gid
argument_list|,
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|len
operator|=
literal|12
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|NodeRef
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|docId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|len
operator|=
literal|4
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|getDocId
parameter_list|()
block|{
return|return
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|long
name|getGid
parameter_list|()
block|{
return|return
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|void
name|set
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|docId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|gid
argument_list|,
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

