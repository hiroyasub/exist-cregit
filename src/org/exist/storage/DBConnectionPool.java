begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist xml document repository and xpath implementation  *  Copyright (C) 2000,  Wolfgang Meier (meier@ifs.tu-darmstadt.de)  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_comment
comment|/**  *  verwaltet einen Pool von Datenbank-Connections. die Klasse sorgt dafuer,  *  dass eine maximale Zahl von (gleichzeitigen) Datenbankverbindungen  *  (JDBC-Connection-Objekte) nicht ueberschritten wird. Das Maximum ist  *  abhaengig von der Oracle-Installation und liegt standardmaessig bei 40-50.  *  Die verfuegbaren Verbindungen werden an die konkurrierenden Threads  *  verteilt. Ist keine Verbindung mehr verfuegbar, wird der aufrufende Thread  *  in eine Warte- schleife geschickt - solange, bis ein anderer Thread sein  *  Connection-Objekt zurueckgibt. Die beiden zentralen Methoden sind get() und  *  release(Connection con). Mit get() erhaelt der aufrufende Thread ein  *  Connection-Objekt, mit release gibt er es wieder zurueck. Man sollte also  *  nicht vergessen, nach Ende der Transaktionen release aufzurufen. Der  *  Konstruktor benoetigt die Klasse des JDBC-Treibers als String. Ueber  *  Reflection wird davon eine Instanz erzeugt und an den DriverManager  *  uebergeben.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    17. Juli 2002  */
end_comment

begin_class
specifier|public
class|class
name|DBConnectionPool
block|{
specifier|protected
name|Stack
name|pool
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|min
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|max
init|=
literal|1
decl_stmt|;
specifier|protected
name|String
name|uid
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|pass
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|url
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|connections
init|=
literal|0
decl_stmt|;
specifier|protected
name|boolean
name|autoCommit
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|DBConnectionPool
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      *  Constructor for the DBConnectionPool object      *      *@param  url                 Description of the Parameter      *@param  uid                 Description of the Parameter      *@param  pass                Description of the Parameter      *@param  driver              Description of the Parameter      *@param  min                 Description of the Parameter      *@param  max                 Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|DBConnectionPool
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|uid
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|driver
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
argument_list|(
name|url
argument_list|,
name|uid
argument_list|,
name|pass
argument_list|,
name|driver
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor for the DBConnectionPool object      *      *@param  url                 Description of the Parameter      *@param  uid                 Description of the Parameter      *@param  pass                Description of the Parameter      *@param  driver              Description of the Parameter      *@param  min                 Description of the Parameter      *@param  max                 Description of the Parameter      *@param  autoCommit          Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|DBConnectionPool
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|uid
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|driver
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|EXistException
block|{
try|try
block|{
name|this
operator|.
name|autoCommit
operator|=
name|autoCommit
expr_stmt|;
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
decl_stmt|;
name|Constructor
name|construct
init|=
name|c
operator|.
name|getConstructor
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DriverManager
operator|.
name|registerDriver
argument_list|(
operator|(
name|Driver
operator|)
name|construct
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|pass
operator|=
name|pass
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"error in initialization of db connection pool"
argument_list|)
throw|;
block|}
block|}
comment|/**      *  Gets the user attribute of the DBConnectionPool object      *      *@return    The user value      */
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
comment|/**      *  Gets the pass attribute of the DBConnectionPool object      *      *@return    The pass value      */
specifier|public
name|String
name|getPass
parameter_list|()
block|{
return|return
name|pass
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|Connection
name|con
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|con
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot create new database connection"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
name|Connection
name|createConnection
parameter_list|()
block|{
name|Connection
name|con
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating database connection ..."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|uid
operator|==
literal|null
condition|)
block|{
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|uid
argument_list|,
name|pass
argument_list|)
expr_stmt|;
block|}
name|connections
operator|++
expr_stmt|;
name|con
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|con
return|;
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
specifier|synchronized
name|Connection
name|get
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|connections
operator|<
name|max
condition|)
block|{
return|return
name|createConnection
argument_list|()
return|;
block|}
else|else
block|{
while|while
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for connection to become available"
argument_list|)
expr_stmt|;
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
name|Connection
name|con
init|=
operator|(
name|Connection
operator|)
name|pool
operator|.
name|pop
argument_list|()
decl_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|con
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  con  Description of the Parameter      */
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
comment|//LOG.debug("releasing connection");
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
name|autoCommit
condition|)
block|{
return|return;
block|}
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pool
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|Connection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**  Description of the Method */
specifier|public
specifier|synchronized
name|void
name|closeAll
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pool
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|Connection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|finalize
parameter_list|()
block|{
name|notifyAll
argument_list|()
expr_stmt|;
name|closeAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

