begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist Open Source Native XML Database  * Copyright (C) 2001/02,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StreamTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|SimpleTokenizer
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TextSearchEngine
extends|extends
name|Observable
block|{
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|TextSearchEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|TreeSet
name|stoplist
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
name|Tokenizer
name|tokenizer
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|protected
name|boolean
name|indexNumbers
init|=
literal|false
decl_stmt|,
name|stem
init|=
literal|false
decl_stmt|;
specifier|protected
name|PorterStemmer
name|stemmer
init|=
literal|null
decl_stmt|;
specifier|public
name|TextSearchEngine
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|String
name|stopword
decl_stmt|,
name|tokenizerClass
decl_stmt|;
name|Boolean
name|num
decl_stmt|,
name|stemming
decl_stmt|;
if|if
condition|(
operator|(
name|num
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.indexNumbers"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|indexNumbers
operator|=
name|num
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|stemming
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.stem"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|stem
operator|=
name|stemming
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|tokenizerClass
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.tokenizer"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
name|tokClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|tokenizerClass
argument_list|)
decl_stmt|;
name|tokenizer
operator|=
operator|(
name|Tokenizer
operator|)
name|tokClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using tokenizer: "
operator|+
name|tokenizerClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokenizer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"using simple tokenizer"
argument_list|)
expr_stmt|;
name|tokenizer
operator|=
operator|new
name|SimpleTokenizer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stem
condition|)
name|stemmer
operator|=
operator|new
name|PorterStemmer
argument_list|()
expr_stmt|;
name|tokenizer
operator|.
name|setStemming
argument_list|(
name|stem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|stopword
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"stopwords"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|stopword
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|stopword
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FileReader
name|in
init|=
operator|new
name|FileReader
argument_list|(
name|stopword
argument_list|)
decl_stmt|;
name|StreamTokenizer
name|tok
init|=
operator|new
name|StreamTokenizer
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|next
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
name|StreamTokenizer
operator|.
name|TT_EOF
condition|)
block|{
if|if
condition|(
name|next
operator|!=
name|StreamTokenizer
operator|.
name|TT_WORD
condition|)
continue|continue;
name|stoplist
operator|.
name|add
argument_list|(
name|tok
operator|.
name|sval
argument_list|)
expr_stmt|;
name|next
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Tokenizer
name|getTokenizer
parameter_list|()
block|{
return|return
name|tokenizer
return|;
block|}
specifier|public
specifier|abstract
name|void
name|storeText
parameter_list|(
name|IndexPaths
name|idx
parameter_list|,
name|TextImpl
name|text
parameter_list|)
function_decl|;
specifier|public
name|void
name|storeAttribute
parameter_list|(
name|IndexPaths
name|idx
parameter_list|,
name|TextImpl
name|text
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|void
name|flush
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|NodeSet
index|[]
name|getNodesContaining
parameter_list|(
name|DocumentSet
name|doc
parameter_list|,
name|String
name|expr
index|[]
parameter_list|)
function_decl|;
block|}
end_class

end_unit

