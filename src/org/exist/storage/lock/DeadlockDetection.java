begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Deadlock detection for resource and collection locks. The static methods in this class  * keep track of all waiting threads, which are currently waiting on a resource or collection  * lock. In some scenarios (e.g. a complex XQuery which modifies resources), a single thread  * may acquire different read/write locks on resources in a collection. The locks can be arbitrarily  * nested. For example, a thread may first acquire a read lock on a collection, then a read lock on  * a resource and later acquires a write lock on the collection to remove the resource.  *  * Since we have locks on both, collections and resources, deadlock situations are sometimes  * unavoidable. For example, imagine the following scenario:  *  *<ul>  *<li>T1 owns write lock on resource</li>  *<li>T2 owns write lock on collection</li>  *<li>T2 wants to acquire write lock on resource locked by T1</li>  *<li>T1 tries to acquire write lock on collection currently locked by T2</li>  *<li>DEADLOCK</li>  *</ul>  *  * The code should probably be redesigned to avoid this kind of crossed collection-resource  * locking, which easily leads to circular wait conditions. However, this needs to be done with care. In  * the meantime, DeadlockDetection is used to detect deadlock situations as the one described  * above. The lock classes can  * then try to resolve the deadlock by suspending one thread.  */
end_comment

begin_class
specifier|public
class|class
name|DeadlockDetection
block|{
specifier|private
specifier|final
specifier|static
name|Map
name|waitForResource
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
name|waitForCollection
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Register a thread as waiting for a resource lock.      *      * @param thread the thread      * @param waiter the WaitingThread object which wraps around the thread      */
specifier|public
specifier|static
name|void
name|addResourceWaiter
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|WaitingThread
name|waiter
parameter_list|)
block|{
name|waitForResource
operator|.
name|put
argument_list|(
name|thread
argument_list|,
name|waiter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deregister a waiting thread.      *        * @param thread      * @return      */
specifier|public
specifier|static
name|Lock
name|clearResourceWaiter
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
name|WaitingThread
name|waiter
init|=
operator|(
name|WaitingThread
operator|)
name|waitForResource
operator|.
name|remove
argument_list|(
name|thread
argument_list|)
decl_stmt|;
if|if
condition|(
name|waiter
operator|!=
literal|null
condition|)
return|return
name|waiter
operator|.
name|getLock
argument_list|()
return|;
return|return
literal|null
return|;
block|}
comment|/**      * Check if there's a risk for a circular wait between threadA and threadB. The method tests if      * threadB is currently waiting for a resource lock (read or write). It then checks      * if threadA holds a lock on this resource. If yes, the {@link org.exist.storage.lock.WaitingThread}      * object for threadB is returned. This object can be used to suspend the waiting thread      * in order to temporarily yield the lock to threadA.      *      * @param threadA      * @param threadB      * @return      */
specifier|public
specifier|static
name|WaitingThread
name|deadlockCheckResource
parameter_list|(
name|Thread
name|threadA
parameter_list|,
name|Thread
name|threadB
parameter_list|)
block|{
comment|// check if threadB is waiting for a resource lock
name|WaitingThread
name|waitingThread
init|=
operator|(
name|WaitingThread
operator|)
name|waitForResource
operator|.
name|get
argument_list|(
name|threadB
argument_list|)
decl_stmt|;
comment|// if lock != null, check if thread B waits for a resource lock currently held by thread A
if|if
condition|(
name|waitingThread
operator|!=
literal|null
condition|)
block|{
return|return
name|waitingThread
operator|.
name|getLock
argument_list|()
operator|.
name|hasLock
argument_list|(
name|threadA
argument_list|)
condition|?
name|waitingThread
else|:
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Check if the second thread is currently waiting for a resource lock and      * is blocked by the first thread.      *      * @param threadA the thread whose lock might be blocking threadB      * @param threadB the thread to check      * @return true if threadB is currently blocked by a lock held by threadA      */
specifier|public
specifier|static
name|boolean
name|isBlockedBy
parameter_list|(
name|Thread
name|threadA
parameter_list|,
name|Thread
name|threadB
parameter_list|)
block|{
comment|// check if threadB is waiting for a resource lock
name|WaitingThread
name|waitingThread
init|=
operator|(
name|WaitingThread
operator|)
name|waitForResource
operator|.
name|get
argument_list|(
name|threadB
argument_list|)
decl_stmt|;
comment|// if lock != null, check if thread B waits for a resource lock currently held by thread A
if|if
condition|(
name|waitingThread
operator|!=
literal|null
condition|)
block|{
return|return
name|waitingThread
operator|.
name|getLock
argument_list|()
operator|.
name|hasLock
argument_list|(
name|threadA
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Register a thread as waiting for a resource lock.      *      * @param waiter the thread      * @param lock the lock object      */
specifier|public
specifier|static
name|void
name|addCollectionWaiter
parameter_list|(
name|Thread
name|waiter
parameter_list|,
name|Lock
name|lock
parameter_list|)
block|{
name|waitForCollection
operator|.
name|put
argument_list|(
name|waiter
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Lock
name|clearCollectionWaiter
parameter_list|(
name|Thread
name|waiter
parameter_list|)
block|{
return|return
operator|(
name|Lock
operator|)
name|waitForCollection
operator|.
name|remove
argument_list|(
name|waiter
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Lock
name|isWaitingFor
parameter_list|(
name|Thread
name|waiter
parameter_list|)
block|{
return|return
operator|(
name|Lock
operator|)
name|waitForCollection
operator|.
name|get
argument_list|(
name|waiter
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|getWaitingThreads
parameter_list|()
block|{
name|Map
name|table
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|waitForResource
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|WaitingThread
name|waitingThread
init|=
operator|(
name|WaitingThread
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|waitingThread
operator|.
name|getThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|waitingThread
operator|.
name|getLock
argument_list|()
operator|.
name|getLockInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|waitForCollection
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
operator|(
name|Thread
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|thread
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|Lock
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLockInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

