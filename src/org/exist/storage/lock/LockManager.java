begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|WeakLazyStripes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|uk
operator|.
name|ac
operator|.
name|ic
operator|.
name|doc
operator|.
name|slurp
operator|.
name|multilock
operator|.
name|MultiLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * A Lock Manager for Locks that are used across  * database instance functions.  *  * There is a unique lock for each ID, and calls with the same  * ID will always return the same lock. Different IDs will always  * receive different locks.  *  * The locking protocol for Collection locks is taken from the paper:  *     Granularity of Locks in a Shared Data Base - Gray, Lorie and Putzolu 1975  *     {@see https://pdfs.semanticscholar.org/5acd/43c51fa5e677b0c242b065a64f5948af022c.pdf}  * specifically we have adopted the acquisition algorithm from Section 3.2 of the paper.  *  * Our adaptions enable us to specify either a multi-writer/multi-reader approach between Collection  * sub-trees or a single-writer/multi-reader approach on the entire Collection tree.  *  * The uptake is that locking a Collection, also implicitly implies locking all descendant  * Collections with the same mode. This reduces the amount of locks required for  * manipulating Collection sub-trees.  *  * The locking protocol for Documents is entirely flat, and is unrelated to Collection locking.  * Deadlocks can still occur between Collections and Documents in eXist-db (as they could in the past).  * If it becomes necessary to eliminate such Collection/Document deadlock scenarios, Document locks  * could be acquired using the same protocol as Collection locks (as really they are all just URI paths in a hierarchy)!  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockManager
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PROP_ENABLE_COLLECTIONS_MULTI_WRITER
init|=
literal|"exist.lockmanager.collections.multiwriter"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROP_UPGRADE_CHECK
init|=
literal|"exist.lockmanager.upgrade.check"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROP_WARN_WAIT_ON_READ_FOR_WRITE
init|=
literal|"exist.lockmanager.warn.waitonreadforwrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|USE_FAIR_SCHEDULER
init|=
literal|true
decl_stmt|;
comment|//Java's ReentrantReadWriteLock must use the Fair Scheduler to get FIFO like ordering
specifier|private
specifier|static
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Set to true to enable Multi-Writer/Multi-Reader semantics for      * the Collection Hierarchy as opposed to the default Single-Writer/Multi-Reader      */
specifier|private
specifier|volatile
name|boolean
name|collectionsMultiWriter
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_ENABLE_COLLECTIONS_MULTI_WRITER
argument_list|)
decl_stmt|;
comment|/**      * Set to true to enable checking for lock upgrading within the same      * thread, i.e. READ_LOCK -> WRITE_LOCK      */
specifier|private
specifier|volatile
name|boolean
name|upgradeCheck
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_UPGRADE_CHECK
argument_list|)
decl_stmt|;
comment|/**      * Set to true to enable warning when a thread wants to acquire the WRITE_LOCK      * but another thread holds the READ_LOCK      */
specifier|private
specifier|volatile
name|boolean
name|warnWaitOnReadForWrite
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_WARN_WAIT_ON_READ_FOR_WRITE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|MultiLock
argument_list|>
name|collectionLocks
decl_stmt|;
specifier|private
specifier|final
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|documentLocks
decl_stmt|;
specifier|private
specifier|final
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|ReentrantLock
argument_list|>
name|btreeLocks
decl_stmt|;
specifier|public
name|LockManager
parameter_list|(
specifier|final
name|int
name|concurrencyLevel
parameter_list|)
block|{
name|this
operator|.
name|collectionLocks
operator|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
name|concurrencyLevel
argument_list|,
name|LockManager
operator|::
name|createCollectionLock
argument_list|)
expr_stmt|;
name|this
operator|.
name|documentLocks
operator|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
name|concurrencyLevel
argument_list|,
name|LockManager
operator|::
name|createDocumentLock
argument_list|)
expr_stmt|;
name|this
operator|.
name|btreeLocks
operator|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
name|concurrencyLevel
argument_list|,
name|LockManager
operator|::
name|createBtreeLock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured LockManager with concurrencyLevel={}"
argument_list|,
name|concurrencyLevel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new lock for a Collection      * will be Striped by the collectionPath      */
specifier|private
specifier|static
name|MultiLock
name|createCollectionLock
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
block|{
return|return
operator|new
name|MultiLock
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a new lock for a Document      * will be Striped by the collectionPath      */
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|createDocumentLock
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
block|{
return|return
operator|new
name|ReentrantReadWriteLock
argument_list|()
return|;
block|}
comment|/**      * Creates a new lock for a {@link org.exist.storage.btree.BTree}      * will be Striped by the btreeFileName      */
specifier|private
specifier|static
name|ReentrantLock
name|createBtreeLock
parameter_list|(
specifier|final
name|String
name|btreeFileName
parameter_list|)
block|{
return|return
operator|new
name|ReentrantLock
argument_list|()
return|;
block|}
comment|/**      * Retrieves a lock for a Collection      *      * This function is concerned with just the lock object      * and has no knowledge of the state of the lock. The only      * guarantee is that if this lock has not been requested before      * then it will be provided in the unlocked state      *      * @param collectionPath The path of the Collection for which a lock is requested      *      * @return A lock for the Collection      */
name|MultiLock
name|getCollectionLock
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
block|{
return|return
name|collectionLocks
operator|.
name|get
argument_list|(
name|collectionPath
argument_list|)
return|;
block|}
comment|/**      * Acquires a READ_LOCK on a Collection (and implicitly all descendant Collections).      *      * @param collectionPath The path of the Collection for which a lock is requested.      *      * @return A READ_LOCK on the Collection.      */
specifier|public
name|ManagedCollectionLock
name|acquireCollectionReadLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collectionPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
specifier|final
name|Tuple3
argument_list|<
name|MultiLock
argument_list|,
name|Lock
operator|.
name|LockMode
argument_list|,
name|String
argument_list|>
index|[]
name|locked
init|=
operator|new
name|Tuple3
index|[
name|segments
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|'/'
operator|+
name|segments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|lockMode
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|segments
operator|.
name|length
condition|)
block|{
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
expr_stmt|;
comment|//leaf
block|}
else|else
block|{
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
expr_stmt|;
comment|//ancestor
block|}
specifier|final
name|MultiLock
name|lock
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
argument_list|(
name|lock
argument_list|,
name|lockMode
argument_list|)
condition|)
block|{
name|locked
index|[
name|i
index|]
operator|=
operator|new
name|Tuple3
argument_list|<>
argument_list|(
name|lock
argument_list|,
name|lockMode
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
name|unlockAll
argument_list|(
name|locked
argument_list|,
name|l
lambda|->
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|l
operator|.
name|_3
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|l
operator|.
name|_2
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire "
operator|+
name|lockMode
operator|+
literal|" for: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|locked
argument_list|)
operator|.
name|map
argument_list|(
name|Tuple3
operator|::
name|get_1
argument_list|)
operator|.
name|toArray
argument_list|(
name|MultiLock
index|[]
operator|::
operator|new
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|unlockAll
argument_list|(
name|locked
argument_list|,
name|l
lambda|->
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|l
operator|.
name|_3
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|l
operator|.
name|_2
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Locks a lock object.      *      * @param lock the lock object to lock.      * @param lockMode the mode of the {@code lock} to acquire.      *      * @return true, if we were able to lock with the mode.      */
specifier|private
name|boolean
name|lock
parameter_list|(
specifier|final
name|MultiLock
name|lock
parameter_list|,
specifier|final
name|Lock
operator|.
name|LockMode
name|lockMode
parameter_list|)
block|{
switch|switch
condition|(
name|lockMode
condition|)
block|{
case|case
name|INTENTION_READ
case|:
return|return
name|lock
operator|.
name|lockIntentionRead
argument_list|()
return|;
case|case
name|INTENTION_WRITE
case|:
return|return
name|lock
operator|.
name|lockIntentionWrite
argument_list|()
return|;
case|case
name|READ_LOCK
case|:
return|return
name|lock
operator|.
name|lockRead
argument_list|()
return|;
case|case
name|WRITE_LOCK
case|:
return|return
name|lock
operator|.
name|lockWrite
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// TODO(AR) implement the other modes
block|}
block|}
comment|/**      * Releases an array of locked locks for the modes with which they were locked      *      * Locks are released in the opposite to their acquisition order      *      * @param locked An array of locks in acquisition order      */
specifier|private
name|void
name|unlockAll
parameter_list|(
specifier|final
name|Tuple3
argument_list|<
name|MultiLock
argument_list|,
name|Lock
operator|.
name|LockMode
argument_list|,
name|String
argument_list|>
index|[]
name|locked
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|Tuple3
argument_list|<
name|MultiLock
argument_list|,
name|Lock
operator|.
name|LockMode
argument_list|,
name|String
argument_list|>
argument_list|>
name|unlockListener
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|locked
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|Tuple3
argument_list|<
name|MultiLock
argument_list|,
name|Lock
operator|.
name|LockMode
argument_list|,
name|String
argument_list|>
name|lock
init|=
name|locked
index|[
name|i
index|]
decl_stmt|;
name|unlock
argument_list|(
name|lock
operator|.
name|_1
argument_list|,
name|lock
operator|.
name|_2
argument_list|)
expr_stmt|;
name|unlockListener
operator|.
name|accept
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unlocks a lock object.      *      * @param lock The lock object to unlock.      * @param lockMode The mode of the {@code lock} to release.      */
specifier|private
name|void
name|unlock
parameter_list|(
specifier|final
name|MultiLock
name|lock
parameter_list|,
specifier|final
name|Lock
operator|.
name|LockMode
name|lockMode
parameter_list|)
block|{
switch|switch
condition|(
name|lockMode
condition|)
block|{
case|case
name|INTENTION_READ
case|:
name|lock
operator|.
name|unlockIntentionRead
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTENTION_WRITE
case|:
name|lock
operator|.
name|unlockIntentionWrite
argument_list|()
expr_stmt|;
break|break;
case|case
name|READ_LOCK
case|:
name|lock
operator|.
name|unlockRead
argument_list|()
expr_stmt|;
break|break;
case|case
name|WRITE_LOCK
case|:
name|lock
operator|.
name|unlockWrite
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// TODO(AR) implement the other modes
block|}
block|}
comment|/**      * Acquires a WRITE_LOCK on a Collection (and implicitly all descendant Collections).      *      * @param collectionPath The path of the Collection for which a lock is requested.      *      * @return A WRITE_LOCK on the Collection.      */
specifier|public
name|ManagedCollectionLock
name|acquireCollectionWriteLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
return|return
name|acquireCollectionWriteLock
argument_list|(
name|collectionPath
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Acquires a WRITE_LOCK on a Collection (and implicitly all descendant Collections).      *      * @param collectionPath The path of the Collection for which a lock is requested.      * @param lockParent true if we should also explicitly write lock the parent Collection.      *      * @return A WRITE_LOCK on the Collection.      */
name|ManagedCollectionLock
name|acquireCollectionWriteLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|,
specifier|final
name|boolean
name|lockParent
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collectionPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
specifier|final
name|Tuple3
argument_list|<
name|MultiLock
argument_list|,
name|Lock
operator|.
name|LockMode
argument_list|,
name|String
argument_list|>
index|[]
name|locked
init|=
operator|new
name|Tuple3
index|[
name|segments
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|'/'
operator|+
name|segments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|lockMode
decl_stmt|;
if|if
condition|(
name|lockParent
operator|&&
name|i
operator|+
literal|2
operator|==
name|segments
operator|.
name|length
condition|)
block|{
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
expr_stmt|;
comment|// parent
block|}
if|else if
condition|(
name|i
operator|+
literal|1
operator|==
name|segments
operator|.
name|length
condition|)
block|{
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
expr_stmt|;
comment|// leaf
block|}
else|else
block|{
comment|// ancestor
if|if
condition|(
operator|!
name|collectionsMultiWriter
condition|)
block|{
comment|// single-writer/multi-reader
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
expr_stmt|;
block|}
else|else
block|{
comment|// multi-writer/multi-reader
name|lockMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_WRITE
expr_stmt|;
block|}
block|}
specifier|final
name|MultiLock
name|lock
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|upgradeCheck
operator|&&
name|lockMode
operator|==
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
operator|&&
operator|(
name|lock
operator|.
name|getIntentionReadHoldCount
argument_list|()
operator|>
literal|0
operator|||
name|lock
operator|.
name|getReadHoldCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Lock upgrading would lead to a self-deadlock: "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|warnWaitOnReadForWrite
operator|&&
name|lockMode
operator|==
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
condition|)
block|{
if|if
condition|(
name|lock
operator|.
name|getIntentionReadLockCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"About to acquire WRITE_LOCK for: {}, but INTENTION_READ_LOCK held by other thread(s): "
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lock
operator|.
name|getReadLockCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"About to acquire WRITE_LOCK for: {}, but READ_LOCK held by other thread(s): "
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
argument_list|(
name|lock
argument_list|,
name|lockMode
argument_list|)
condition|)
block|{
name|locked
index|[
name|i
index|]
operator|=
operator|new
name|Tuple3
argument_list|<>
argument_list|(
name|lock
argument_list|,
name|lockMode
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
name|unlockAll
argument_list|(
name|locked
argument_list|,
name|l
lambda|->
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|l
operator|.
name|_3
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|l
operator|.
name|_2
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire "
operator|+
name|lockMode
operator|+
literal|" for: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|locked
argument_list|)
operator|.
name|map
argument_list|(
name|Tuple3
operator|::
name|get_1
argument_list|)
operator|.
name|toArray
argument_list|(
name|MultiLock
index|[]
operator|::
operator|new
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|unlockAll
argument_list|(
name|locked
argument_list|,
name|l
lambda|->
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|l
operator|.
name|_3
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|l
operator|.
name|_2
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns true if a WRITE_LOCK is held for a Collection      *      * @param collectionPath The URI of the Collection within the database      *      * @return true if a WRITE_LOCK is held      */
specifier|public
name|boolean
name|isCollectionLockedForWrite
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
block|{
specifier|final
name|MultiLock
name|existingLock
init|=
name|getCollectionLock
argument_list|(
name|collectionPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|getWriteLockCount
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Returns true if a READ_LOCK is held for a Collection      *      * @param collectionPath The URI of the Collection within the database      *      * @return true if a READ_LOCK is held      */
specifier|public
name|boolean
name|isCollectionLockedForRead
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
block|{
specifier|final
name|MultiLock
name|existingLock
init|=
name|getCollectionLock
argument_list|(
name|collectionPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|getReadLockCount
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Retrieves a lock for a Document      *      * This function is concerned with just the lock object      * and has no knowledge of the state of the lock. The only      * guarantee is that if this lock has not been requested before      * then it will be provided in the unlocked state      *      * @param documentPath The path of the Document for which a lock is requested      *      * @return A lock for the Document      */
name|ReentrantReadWriteLock
name|getDocumentLock
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
block|{
return|return
name|documentLocks
operator|.
name|get
argument_list|(
name|documentPath
argument_list|)
return|;
block|}
comment|/**      * Acquire a READ_LOCK on a Document      *      * @param documentPath The URI of the Document within the database      *      * @return the lock for the Document      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedDocumentLock
name|acquireDocumentReadLock
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|documentPath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
name|getDocumentLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedDocumentLock
argument_list|(
name|documentPath
argument_list|,
name|lock
operator|.
name|readLock
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Acquire a WRITE_LOCK on a Document      *      * @param documentPath The URI of the Document within the database      *      * @return the lock for the Document      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedDocumentLock
name|acquireDocumentWriteLock
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|documentPath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
name|getDocumentLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire WRITE_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedDocumentLock
argument_list|(
name|documentPath
argument_list|,
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns true if a WRITE_LOCK is held for a Document      *      * @param documentPath The URI of the Document within the database      *      * @return true if a WRITE_LOCK is held      */
specifier|public
name|boolean
name|isDocumentLockedForWrite
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
block|{
specifier|final
name|ReentrantReadWriteLock
name|existingLock
init|=
name|getDocumentLock
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|isWriteLocked
argument_list|()
return|;
block|}
comment|/**      * Returns true if a READ_LOCK is held for a Document      *      * @param documentPath The URI of the Document within the database      *      * @return true if a READ_LOCK is held      */
specifier|public
name|boolean
name|isDocumentLockedForRead
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
block|{
specifier|final
name|ReentrantReadWriteLock
name|existingLock
init|=
name|getDocumentLock
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|getReadLockCount
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Retrieves a lock for a {@link org.exist.storage.dom.DOMFile}      *      * This function is concerned with just the lock object      * and has no knowledge of the state of the lock. The only      * guarantee is that if this lock has not been requested before      * then it will be provided in the unlocked state      *      * @param domFileName The path of the Document for which a lock is requested      *      * @return A lock for the DOMFile      */
name|ReentrantLock
name|getBTreeLock
parameter_list|(
specifier|final
name|String
name|domFileName
parameter_list|)
block|{
return|return
name|btreeLocks
operator|.
name|get
argument_list|(
name|domFileName
argument_list|)
return|;
block|}
comment|/**      * Acquire a WRITE_LOCK on a {@link org.exist.storage.btree.BTree}      *      * @param btreeFileName the filename of the BTree      *      * @return the lock for the BTree      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedLock
argument_list|<
name|ReentrantLock
argument_list|>
name|acquireBtreeReadLock
parameter_list|(
specifier|final
name|String
name|btreeFileName
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantLock
name|lock
init|=
name|getBTreeLock
argument_list|(
name|btreeFileName
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|btreeFileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedLock
argument_list|(
name|lock
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Acquire a WRITE_LOCK on a {@link org.exist.storage.btree.BTree}      *      * @param btreeFileName the filename of the BTree      *      * @return the lock for the BTree      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedLock
argument_list|<
name|ReentrantLock
argument_list|>
name|acquireBtreeWriteLock
parameter_list|(
specifier|final
name|String
name|btreeFileName
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantLock
name|lock
init|=
name|getBTreeLock
argument_list|(
name|btreeFileName
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire WRITE_LOCK for: "
operator|+
name|btreeFileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedLock
argument_list|(
name|lock
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|btreeFileName
argument_list|,
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns true if the BTree for the file name is locked.      *      * @param btreeFileName The name of the .dbx file.      *      * @return true if the Btree is locked.      */
specifier|public
name|boolean
name|isBtreeLocked
parameter_list|(
specifier|final
name|String
name|btreeFileName
parameter_list|)
block|{
specifier|final
name|ReentrantLock
name|lock
init|=
name|getBTreeLock
argument_list|(
name|btreeFileName
argument_list|)
decl_stmt|;
return|return
name|lock
operator|.
name|isLocked
argument_list|()
return|;
block|}
comment|/**      * Returns true if the BTree for the file name is locked for writes.      *      * @param btreeFileName The name of the .dbx file.      *      * @return true if the Btree is locked for writes.      *      * @deprecated Just a place holder until we can make the BTree reader/writer safe      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isBtreeLockedForWrite
parameter_list|(
specifier|final
name|String
name|btreeFileName
parameter_list|)
block|{
return|return
name|isBtreeLocked
argument_list|(
name|btreeFileName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

