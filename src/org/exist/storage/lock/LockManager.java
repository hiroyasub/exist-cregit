begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|WeakLazyStripes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * A Lock Manager for Locks that are used across  * database instance functions  *  * There is a unique lock for each ID, and calls with the same  * ID will always return the same lock. Different IDs will always  * receive different locks.  *  * The locking protocol for Collection locks is taken from the paper:  *     Concurrency of Operations on B-Trees - Bayer and Schkolnick 1977  *     {@see https://link.springer.com/article/10.1007/BF00263762}  * specifically we have adopted Solution 2 presented in Section 3 of the paper  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|USE_FAIR_SCHEDULER
init|=
literal|true
decl_stmt|;
comment|//Java's ReentrantReadWriteLock must use the Fair Scheduler to get FIFO like ordering
specifier|private
specifier|static
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|collectionLocks
decl_stmt|;
specifier|private
specifier|final
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|documentLocks
decl_stmt|;
specifier|public
name|LockManager
parameter_list|(
specifier|final
name|int
name|concurrencyLevel
parameter_list|)
block|{
name|this
operator|.
name|collectionLocks
operator|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
name|concurrencyLevel
argument_list|,
name|LockManager
operator|::
name|createCollectionLock
argument_list|)
expr_stmt|;
name|this
operator|.
name|documentLocks
operator|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
name|concurrencyLevel
argument_list|,
name|LockManager
operator|::
name|createDocumentLock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured LockManager with concurrencyLevel={}"
argument_list|,
name|concurrencyLevel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new lock for a Collection      * will be Striped by the collectionPath      */
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|createCollectionLock
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
block|{
return|return
operator|new
name|ReentrantReadWriteLock
argument_list|(
name|USE_FAIR_SCHEDULER
argument_list|)
return|;
block|}
comment|/**      * Creates a new lock for a Document      * will be Striped by the collectionPath      */
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|createDocumentLock
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
block|{
return|return
operator|new
name|ReentrantReadWriteLock
argument_list|()
return|;
block|}
comment|/**      * Retrieves a lock for a Collection      *      * This function is concerned with just the lock object      * and has no knowledge of the state of the lock. The only      * guarantee is that if this lock has not been requested before      * then it will be provided in the unlocked state      *      * @param collectionPath The path of the Collection for which a lock is requested      *      * @return A lock for the Collection      */
name|ReentrantReadWriteLock
name|getCollectionLock
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
block|{
return|return
name|collectionLocks
operator|.
name|get
argument_list|(
name|collectionPath
argument_list|)
return|;
block|}
comment|//See Concurrency of Operations on B-Trees - Bayer and Schkolnick 1977 - Solution 2
specifier|public
name|ManagedCollectionLock
name|acquireCollectionReadLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collectionPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|'/'
operator|+
name|segments
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|root
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|root
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ReentrantReadWriteLock
name|current
init|=
name|root
decl_stmt|;
name|String
name|currentPath
init|=
name|path
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|'/'
operator|+
name|segments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|son
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|son
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|current
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|current
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|current
operator|=
name|son
expr_stmt|;
name|currentPath
operator|=
name|path
expr_stmt|;
block|}
specifier|final
name|ReentrantReadWriteLock
name|collectionReadLock
init|=
name|current
decl_stmt|;
specifier|final
name|String
name|collectionReadLockPath
init|=
name|currentPath
decl_stmt|;
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Either
operator|.
name|Left
argument_list|(
name|collectionReadLock
operator|.
name|readLock
argument_list|()
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
name|collectionReadLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|collectionReadLockPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Similar to {@link #acquireCollectionReadLock(XmldbURI)} but non-waiting.      * We only acquire the read lock if the write lock is not held by      * another thread at the time of invocation.      */
specifier|public
name|ManagedCollectionLock
name|tryCollectionReadLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collectionPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|'/'
operator|+
name|segments
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|root
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|boolean
name|hasLock
init|=
name|root
operator|.
name|readLock
argument_list|()
operator|.
name|tryLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasLock
condition|)
block|{
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|ReentrantReadWriteLock
name|current
init|=
name|root
decl_stmt|;
name|String
name|currentPath
init|=
name|path
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|'/'
operator|+
name|segments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|son
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|hasLock
operator|=
name|son
operator|.
name|readLock
argument_list|()
operator|.
name|tryLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasLock
condition|)
block|{
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|current
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|current
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|current
operator|=
name|son
expr_stmt|;
name|currentPath
operator|=
name|path
expr_stmt|;
block|}
specifier|final
name|ReentrantReadWriteLock
name|collectionReadLock
init|=
name|current
decl_stmt|;
specifier|final
name|String
name|collectionReadLockPath
init|=
name|currentPath
decl_stmt|;
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Either
operator|.
name|Left
argument_list|(
name|collectionReadLock
operator|.
name|readLock
argument_list|()
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
name|collectionReadLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|collectionReadLockPath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|//TODO(AR) there are several reasons we might lock a collection for writes
comment|// 1) When we also need to modify its parent:
comment|// 1.1) to remove a collection (which requires also modifying its parent)
comment|// 1.2) to add a new collection (which also requires modifying its parent)
comment|// 1.3) to rename a collection (which also requires modifying its parent)
comment|//... So we take read locks all the way down, util the parent collection which we write lock, and then we write lock the collection
comment|// 2) When we just need to modify its properties:
comment|// 2.1) to add/remove/rename the child documents of the collection
comment|// 2.2) to modify the collections metadata (permissions, timestamps etc)
comment|//... So we read lock all the way down until the actual collection which we write lock
specifier|public
name|ManagedCollectionLock
name|acquireCollectionWriteLock
parameter_list|(
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|,
specifier|final
name|boolean
name|lockParent
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collectionPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|'/'
operator|+
name|segments
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|root
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|rootMode
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|rootModeLock
decl_stmt|;
if|if
condition|(
name|segments
operator|.
name|length
operator|==
literal|1
operator|||
operator|(
name|segments
operator|.
name|length
operator|==
literal|2
operator|&&
name|lockParent
operator|)
condition|)
block|{
name|rootMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
expr_stmt|;
name|rootModeLock
operator|=
name|root
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rootMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
expr_stmt|;
name|rootModeLock
operator|=
name|root
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|rootMode
argument_list|)
expr_stmt|;
name|rootModeLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|rootMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|rootMode
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire "
operator|+
name|rootMode
operator|.
name|name
argument_list|()
operator|+
literal|" for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|currentModeLock
init|=
name|rootModeLock
decl_stmt|;
name|Lock
operator|.
name|LockMode
name|currentMode
init|=
name|rootMode
decl_stmt|;
name|String
name|currentModePath
init|=
name|path
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|parentModeLock
init|=
literal|null
decl_stmt|;
name|Lock
operator|.
name|LockMode
name|parentMode
init|=
literal|null
decl_stmt|;
name|String
name|parentPath
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|lastSegmentIdx
init|=
name|segments
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|'/'
operator|+
name|segments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|son
init|=
name|getCollectionLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|sonMode
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|sonModeLock
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|lastSegmentIdx
operator|||
operator|(
name|i
operator|==
name|segments
operator|.
name|length
operator|-
literal|2
operator|&&
name|lockParent
operator|)
condition|)
block|{
name|sonMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
expr_stmt|;
name|sonModeLock
operator|=
name|son
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sonMode
operator|=
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
expr_stmt|;
name|sonModeLock
operator|=
name|son
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|sonMode
argument_list|)
expr_stmt|;
name|sonModeLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|sonMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|sonMode
argument_list|)
expr_stmt|;
name|currentModeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentModePath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|currentMode
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire "
operator|+
name|sonMode
operator|.
name|name
argument_list|()
operator|+
literal|" for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|i
operator|==
name|lastSegmentIdx
operator|&&
name|lockParent
operator|)
condition|)
block|{
name|currentModeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|currentModePath
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|currentMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentModeLock
operator|=
name|currentModeLock
expr_stmt|;
name|parentMode
operator|=
name|currentMode
expr_stmt|;
name|parentPath
operator|=
name|currentModePath
expr_stmt|;
block|}
name|currentModeLock
operator|=
name|sonModeLock
expr_stmt|;
name|currentMode
operator|=
name|sonMode
expr_stmt|;
name|currentModePath
operator|=
name|path
expr_stmt|;
block|}
specifier|final
name|String
name|collectionPathStr
init|=
name|path
decl_stmt|;
if|if
condition|(
name|lockParent
operator|&&
name|parentModeLock
operator|!=
literal|null
condition|)
block|{
comment|//we return two locks as a single managed lock, the first lock is the parent collection and the second is the actual collection
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|parentCollectionLock
init|=
name|parentModeLock
decl_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|parentCollectionMode
init|=
name|parentMode
decl_stmt|;
specifier|final
name|String
name|parentCollectionString
init|=
name|parentPath
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|collectionLock
init|=
name|currentModeLock
decl_stmt|;
specifier|final
name|Lock
operator|.
name|LockMode
name|collectionMode
init|=
name|currentMode
decl_stmt|;
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Either
operator|.
name|Right
argument_list|(
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|parentCollectionLock
argument_list|,
name|collectionLock
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
comment|//TODO(AR) should this unlock order be inverted?
name|collectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|collectionMode
argument_list|)
expr_stmt|;
name|parentCollectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|parentCollectionString
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|parentCollectionMode
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|collectionLock
init|=
name|currentModeLock
decl_stmt|;
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Either
operator|.
name|Left
argument_list|(
name|collectionLock
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
name|collectionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
block|}
comment|/**      * Optimized locking method for acquiring a WRITE_LOCK lock on a Collection, when we already hold a WRITE_LOCK lock on the      * parent collection. In that instance we can avoid descending the locking tree again      */
specifier|public
name|ManagedCollectionLock
name|acquireCollectionWriteLock
parameter_list|(
specifier|final
name|ManagedCollectionLock
name|parentLock
parameter_list|,
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
return|return
name|acquireCollectionLock
argument_list|(
name|parentLock
argument_list|,
name|collectionPath
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
return|;
block|}
comment|/**      * Optimized locking method for acquiring a READ_LOCK lock on a Collection, when we already hold a READ_LOCK lock on the      * parent collection. In that instance we can avoid descending the locking tree again      */
specifier|public
name|ManagedCollectionLock
name|acquireCollectionReadLock
parameter_list|(
specifier|final
name|ManagedCollectionLock
name|parentLock
parameter_list|,
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|LockException
block|{
return|return
name|acquireCollectionLock
argument_list|(
name|parentLock
argument_list|,
name|collectionPath
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
return|;
block|}
comment|/**      * Optimized locking method for acquiring a lock on a Collection, when we already hold a lock on the      * parent collection. In that instance we can avoid descending the locking tree again      */
specifier|private
name|ManagedCollectionLock
name|acquireCollectionLock
parameter_list|(
specifier|final
name|ManagedCollectionLock
name|parentLock
parameter_list|,
specifier|final
name|XmldbURI
name|collectionPath
parameter_list|,
specifier|final
name|Lock
operator|.
name|LockMode
name|lockMode
parameter_list|)
throws|throws
name|LockException
block|{
if|if
condition|(
name|Objects
operator|.
name|isNull
argument_list|(
name|parentLock
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Cannot acquire a sub-Collection lock without a lock for the parent"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentLock
operator|.
name|isReleased
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Cannot acquire a sub-Collection lock without a lock on the parent"
argument_list|)
throw|;
block|}
specifier|final
name|XmldbURI
name|parentCollectionUri
init|=
name|collectionPath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentLock
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|parentCollectionUri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Cannot acquire a lock on sub-Collection '"
operator|+
name|collectionPath
operator|+
literal|"' as provided parent lock '"
operator|+
name|parentCollectionUri
operator|+
literal|"' is not the parent"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|collectionPathStr
init|=
name|collectionPath
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//TODO(AR) is this correct do we need to unlock the parentLock's parent, and what about on LockException? -- need tests
specifier|final
name|ReentrantReadWriteLock
name|subCollectionLock
init|=
name|getCollectionLock
argument_list|(
name|collectionPath
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|lock
decl_stmt|;
switch|switch
condition|(
name|lockMode
condition|)
block|{
case|case
name|WRITE_LOCK
case|:
name|lock
operator|=
name|subCollectionLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
break|break;
case|case
name|READ_LOCK
case|:
name|lock
operator|=
name|subCollectionLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported lock mode: "
operator|+
name|lockMode
argument_list|)
throw|;
block|}
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire "
operator|+
name|lockMode
operator|+
literal|" for: "
operator|+
name|collectionPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedCollectionLock
argument_list|(
name|collectionPath
argument_list|,
name|Either
operator|.
name|Left
argument_list|(
name|lock
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|collectionPathStr
argument_list|,
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Retrieves a lock for a Document      *      * This function is concerned with just the lock object      * and has no knowledge of the state of the lock. The only      * guarantee is that if this lock has not been requested before      * then it will be provided in the unlocked state      *      * @param documentPath The path of the Document for which a lock is requested      *      * @return A lock for the Document      */
name|ReentrantReadWriteLock
name|getDocumentLock
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
block|{
return|return
name|documentLocks
operator|.
name|get
argument_list|(
name|documentPath
argument_list|)
return|;
block|}
comment|/**      * Acquire a READ_LOCK on a Document      *      * @param documentPath The URI of the Document within the database      *      * @return the lock for the Document      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedDocumentLock
name|acquireDocumentReadLock
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|documentPath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
name|getDocumentLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire READ_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedDocumentLock
argument_list|(
name|documentPath
argument_list|,
name|lock
operator|.
name|readLock
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Acquire a WRITE_LOCK on a Document      *      * @param documentPath The URI of the Document within the database      *      * @return the lock for the Document      *      * @throws LockException if the lock could not be acquired      */
specifier|public
name|ManagedDocumentLock
name|acquireDocumentWriteLock
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|documentPath
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
name|getDocumentLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|lockTable
operator|.
name|attemptFailed
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unable to acquire WRITE_LOCK for: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ManagedDocumentLock
argument_list|(
name|documentPath
argument_list|,
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|path
argument_list|,
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns true if a WRITE_LOCK is held for a Document      *      * @param documentPath The URI of the Document within the database      *      * @return true if a WRITE_LOCK is held      */
specifier|public
name|boolean
name|isDocumentLockedForWrite
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
block|{
specifier|final
name|ReentrantReadWriteLock
name|existingLock
init|=
name|getDocumentLock
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|isWriteLocked
argument_list|()
return|;
block|}
comment|/**      * Returns true if a READ_LOCK is held for a Document      *      * @param documentPath The URI of the Document within the database      *      * @return true if a READ_LOCK is held      */
specifier|public
name|boolean
name|isDocumentLockedForRead
parameter_list|(
specifier|final
name|XmldbURI
name|documentPath
parameter_list|)
block|{
specifier|final
name|ReentrantReadWriteLock
name|existingLock
init|=
name|getDocumentLock
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|existingLock
operator|.
name|getReadLockCount
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
end_class

end_unit

