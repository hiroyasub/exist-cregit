begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This map is used by the XQuery engine to track how many read locks were  * acquired for a document during query execution.  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|LockedDocumentMap
block|{
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_SIZE
init|=
literal|29
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|float
name|DEFAULT_GROWTH
init|=
literal|1.75f
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|LockedDocument
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|DEFAULT_SIZE
argument_list|,
name|DEFAULT_GROWTH
argument_list|)
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|LockedDocument
name|lockedDocument
parameter_list|)
block|{
name|map
operator|.
name|compute
argument_list|(
name|lockedDocument
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableDocumentSet
name|toDocumentSet
parameter_list|()
block|{
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|List
argument_list|<
name|LockedDocument
argument_list|>
name|documentLocks
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|documentLocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
specifier|public
name|DocumentSet
name|getDocsByCollection
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
name|MutableDocumentSet
name|targetSet
parameter_list|)
block|{
if|if
condition|(
name|targetSet
operator|==
literal|null
condition|)
block|{
name|targetSet
operator|=
operator|new
name|DefaultDocumentSet
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|List
argument_list|<
name|LockedDocument
argument_list|>
name|documentLocks
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|documentLocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|startsWith
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
name|targetSet
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|targetSet
return|;
block|}
specifier|public
name|void
name|unlock
parameter_list|()
block|{
comment|// NOTE: locks should be released in the reverse order that they were acquired
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|LockedDocument
argument_list|>
argument_list|>
name|documentsLockedDocuments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|documentsLockedDocuments
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|List
argument_list|<
name|LockedDocument
argument_list|>
name|documentLocks
init|=
name|documentsLockedDocuments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|documentLocks
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
specifier|final
name|LockedDocument
name|documentLock
init|=
name|documentLocks
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|documentLock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|LockedDocumentMap
name|unlockSome
parameter_list|(
specifier|final
name|DocumentSet
name|keep
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|docIdsToRemove
init|=
operator|new
name|int
index|[
name|map
operator|.
name|size
argument_list|()
operator|-
name|keep
operator|.
name|getDocumentCount
argument_list|()
index|]
decl_stmt|;
comment|// NOTE: locks should be released in the reverse order that they were acquired
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|LockedDocument
argument_list|>
argument_list|>
name|documentsLockedDocuments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|documentsLockedDocuments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|len
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|List
argument_list|<
name|LockedDocument
argument_list|>
name|documentLocks
init|=
name|documentsLockedDocuments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|docId
init|=
name|documentLocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|keep
operator|.
name|contains
argument_list|(
name|docId
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|documentLocks
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
specifier|final
name|LockedDocument
name|documentLock
init|=
name|documentLocks
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|documentLock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|docIdsToRemove
index|[
name|len
operator|-
literal|1
operator|-
name|i
index|]
operator|=
name|docId
expr_stmt|;
block|}
block|}
comment|// cleanup
for|for
control|(
specifier|final
name|int
name|docIdToRemove
range|:
name|docIdsToRemove
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|docIdToRemove
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|docId
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

