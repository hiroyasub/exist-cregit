begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Int2ObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_comment
comment|/**  * This map is used by the XQuery engine to track how many read locks were  * acquired for a document during query execution.  */
end_comment

begin_class
specifier|public
class|class
name|LockedDocumentMap
extends|extends
name|Int2ObjectHashMap
block|{
specifier|public
name|LockedDocumentMap
parameter_list|()
block|{
name|super
argument_list|(
literal|29
argument_list|,
literal|1.75
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|LockedDocument
name|entry
init|=
operator|(
name|LockedDocument
operator|)
name|get
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|LockedDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|locksAcquired
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|LockedDocument
name|d
decl_stmt|;
name|Lock
name|dlock
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|tabSize
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|idx
index|]
operator|==
literal|null
operator|||
name|values
index|[
name|idx
index|]
operator|==
name|REMOVED
condition|)
continue|continue;
name|d
operator|=
operator|(
name|LockedDocument
operator|)
name|values
index|[
name|idx
index|]
expr_stmt|;
name|unlockDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|LockedDocumentMap
name|unlockSome
parameter_list|(
name|DocumentSet
name|keep
parameter_list|)
block|{
name|LockedDocument
name|d
decl_stmt|;
name|Lock
name|dlock
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|tabSize
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|idx
index|]
operator|==
literal|null
operator|||
name|values
index|[
name|idx
index|]
operator|==
name|REMOVED
condition|)
continue|continue;
name|d
operator|=
operator|(
name|LockedDocument
operator|)
name|values
index|[
name|idx
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|keep
operator|.
name|containsKey
argument_list|(
name|d
operator|.
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|values
index|[
name|idx
index|]
operator|=
name|REMOVED
expr_stmt|;
name|unlockDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|unlockDocument
parameter_list|(
name|LockedDocument
name|d
parameter_list|)
block|{
name|Lock
name|dlock
decl_stmt|;
name|dlock
operator|=
name|d
operator|.
name|document
operator|.
name|getUpdateLock
argument_list|()
expr_stmt|;
name|dlock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|,
name|d
operator|.
name|locksAcquired
argument_list|)
expr_stmt|;
comment|//        for (int i = 0; i< d.locksAcquired; i++) {
comment|//            dlock.release(Lock.READ_LOCK);
comment|//        }
if|if
condition|(
name|dlock
operator|.
name|isLockedForRead
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread is still LOCKED: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LockedDocument
block|{
specifier|private
name|DocumentImpl
name|document
decl_stmt|;
specifier|private
name|int
name|locksAcquired
init|=
literal|0
decl_stmt|;
specifier|public
name|LockedDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

