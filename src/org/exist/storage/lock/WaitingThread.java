begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DeadlockException
import|;
end_import

begin_comment
comment|/**  * Wraps around a thread in order to be able to suspend it completely while it is waiting  * for a lock.  */
end_comment

begin_class
specifier|public
class|class
name|WaitingThread
implements|implements
name|LockListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|WaitingThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|Object
name|monitor
decl_stmt|;
specifier|private
specifier|final
name|MultiReadReentrantLock
name|lock
decl_stmt|;
specifier|private
specifier|final
name|LockMode
name|lockMode
decl_stmt|;
specifier|private
name|boolean
name|suspended
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|deadlocked
init|=
literal|false
decl_stmt|;
specifier|public
name|WaitingThread
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|,
specifier|final
name|Object
name|monitor
parameter_list|,
specifier|final
name|MultiReadReentrantLock
name|lock
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|)
block|{
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
block|}
comment|/**      * Start waiting on the monitor object. Continue waiting if the thread wakes up      * and suspended is set to true. Only stop waiting if suspended is false.      *      * @throws LockException      */
specifier|public
name|void
name|doWait
parameter_list|()
throws|throws
name|LockException
block|{
do|do
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
try|try
block|{
name|monitor
operator|.
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Interrupted while waiting for read lock"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|deadlocked
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deadlock detected: cancelling wait..."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeadlockException
argument_list|()
throw|;
block|}
block|}
do|while
condition|(
name|suspended
condition|)
do|;
block|}
specifier|public
name|void
name|signalDeadlock
parameter_list|()
block|{
name|deadlocked
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|monitor
init|)
block|{
name|monitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Put the thread into suspended mode, i.e. keep it asleep even if      * a notify causes it to wake up temporarily.      */
specifier|public
name|void
name|suspendWaiting
parameter_list|()
block|{
name|suspended
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Wake the thread from suspended mode.      */
annotation|@
name|Override
specifier|public
name|void
name|lockReleased
parameter_list|()
block|{
comment|//        LOG.debug("Reactivate suspended lock: " + thread.getName());
name|suspended
operator|=
literal|false
expr_stmt|;
synchronized|synchronized
init|(
name|monitor
init|)
block|{
name|monitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSuspended
parameter_list|()
block|{
return|return
name|suspended
return|;
block|}
specifier|public
name|Thread
name|getThread
parameter_list|()
block|{
return|return
name|thread
return|;
block|}
specifier|public
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|WaitingThread
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|thread
operator|==
operator|(
operator|(
name|WaitingThread
operator|)
name|obj
operator|)
operator|.
name|getThread
argument_list|()
return|;
block|}
block|}
end_class

end_unit

