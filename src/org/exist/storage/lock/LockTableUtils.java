begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utilities for working with the Lock Table  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockTableUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|stateToString
parameter_list|(
specifier|final
name|LockTable
name|lockTable
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
init|=
name|lockTable
operator|.
name|getAttempting
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquired
init|=
name|lockTable
operator|.
name|getAcquired
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"Acquired Locks"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"------------------------------------"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquire
range|:
name|acquired
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|acquire
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|type
range|:
name|acquire
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Lock
operator|.
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|lockModeOwners
range|:
name|type
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwners
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|boolean
name|firstOwner
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ownerHoldCount
range|:
name|lockModeOwners
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstOwner
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstOwner
operator|=
literal|false
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|ownerHoldCount
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" (count="
argument_list|)
operator|.
name|append
argument_list|(
name|ownerHoldCount
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Attempting Locks"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"------------------------------------"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempt
range|:
name|attempting
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
name|type
range|:
name|attempt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|LockTable
operator|.
name|LockModeOwner
name|lockModeOwner
range|:
name|type
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwner
operator|.
name|getLockMode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwner
operator|.
name|getOwnerThread
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

