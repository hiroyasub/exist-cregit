begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The Lock Table holds the details of  * threads awaiting to acquire a Lock  * and threads that have acquired a lock  *  * It is arranged by the id of the lock  * which is typically an indicator of the  * lock subject  */
end_comment

begin_class
specifier|public
class|class
name|LockTable
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|LockTable
name|instance
init|=
operator|new
name|LockTable
argument_list|()
decl_stmt|;
comment|//TODO(AR) make configurable
specifier|private
specifier|volatile
name|boolean
name|enableLogEvents
init|=
literal|true
decl_stmt|;
comment|// set to false to disable all events
comment|//TODO(AR) probably better to create an Enum of reasons and statically use those from call sites
comment|//TODO(AR) or make configurable from conf.xml
specifier|private
specifier|volatile
name|boolean
name|traceReason
init|=
literal|true
decl_stmt|;
comment|// whether we should try and determine a reason for the lock
comment|//TODO(AR) {@link #attempting) and {@link #acquired} are at class member level so that they can later be exposed via XQuery methods etc for reporting
comment|/**      * List of threads attempting to acquire a lock      *      * Map<Id, Map<Lock Type, List<Map<Lock Mode, Thread Name>>>>      */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple2
argument_list|<
name|LockMode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|attempting
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Reference count of acquired locks by id and type      *      * Map<Id, Map<Lock Type, List<Map<Lock Mode, Reference Count>>>>      */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The {@link #queue} holds lock events and lock listener events      * and is processed by the single thread {@link #queueConsumer} which uses      * {@link QueueConsumer} to ensure serializability of locking events and monitoring      */
specifier|private
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|LinkedTransferQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|queueConsumer
decl_stmt|;
specifier|private
name|LockTable
parameter_list|()
block|{
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|this
operator|.
name|queueConsumer
operator|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|QueueConsumer
argument_list|(
name|queue
argument_list|,
name|attempting
argument_list|,
name|acquired
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a log listener if trace level logging is enabled
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|registerListener
argument_list|(
operator|new
name|LockEventLogListener
argument_list|(
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|LockTable
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|public
name|void
name|setTraceReason
parameter_list|(
specifier|final
name|boolean
name|traceReason
parameter_list|)
block|{
name|this
operator|.
name|traceReason
operator|=
name|traceReason
expr_stmt|;
block|}
specifier|public
name|void
name|attempt
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Attempt
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attemptFailed
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|AttemptFailed
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|acquired
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Acquired
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockAction
operator|.
name|Action
name|action
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|action
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockAction
operator|.
name|Action
name|action
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enableLogEvents
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|final
name|String
name|threadName
init|=
name|currentThread
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reason
init|=
name|getReason
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadName
operator|.
name|startsWith
argument_list|(
literal|"DefaultQuartzScheduler_"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"dom.dbx"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"collections.dbx"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"collections.dbx"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"structure.dbx"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"values.dbx"
argument_list|)
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|"CollectionCache"
argument_list|)
condition|)
return|return;
comment|//TODO(AR) temp for filtering
specifier|final
name|LockAction
name|lockAction
init|=
operator|new
name|LockAction
argument_list|(
name|action
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|threadName
argument_list|,
name|count
argument_list|,
name|timestamp
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Right
argument_list|(
name|lockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasPendingEvents
parameter_list|()
block|{
return|return
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_BROKER_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_STORE_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TXN_CLASS_NAME
init|=
name|Txn
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|String
name|getReason
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|)
block|{
if|if
condition|(
name|traceReason
condition|)
block|{
for|for
control|(
specifier|final
name|StackTraceElement
name|stackTraceElement
range|:
name|thread
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
specifier|final
name|String
name|className
init|=
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|NATIVE_BROKER_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|COLLECTION_STORE_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|TXN_CLASS_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"LockCollection"
argument_list|)
operator|||
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lockCollectionCache"
argument_list|)
operator|)
condition|)
block|{
return|return
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|+
literal|'('
operator|+
name|stackTraceElement
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|')'
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|registerListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|ListenerAction
name|listenerAction
init|=
operator|new
name|ListenerAction
argument_list|(
name|ListenerAction
operator|.
name|Action
operator|.
name|Register
argument_list|,
name|lockEventListener
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Left
argument_list|(
name|listenerAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|ListenerAction
name|listenerAction
init|=
operator|new
name|ListenerAction
argument_list|(
name|ListenerAction
operator|.
name|Action
operator|.
name|Deregister
argument_list|,
name|lockEventListener
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Left
argument_list|(
name|listenerAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|QueueConsumer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple2
argument_list|<
name|LockMode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|attempting
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LockEventListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|QueueConsumer
parameter_list|(
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple2
argument_list|<
name|LockMode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|attempting
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|attempting
operator|=
name|attempting
expr_stmt|;
name|this
operator|.
name|acquired
operator|=
name|acquired
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
specifier|final
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
name|event
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|isLeft
argument_list|()
condition|)
block|{
name|processListenerAction
argument_list|(
name|event
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processLockAction
argument_list|(
name|event
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"LockTable.QueueConsumer was interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processListenerAction
parameter_list|(
specifier|final
name|ListenerAction
name|listenerAction
parameter_list|)
block|{
if|if
condition|(
name|listenerAction
operator|.
name|action
operator|==
name|ListenerAction
operator|.
name|Action
operator|.
name|Register
condition|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listenerAction
operator|.
name|lockEventListener
argument_list|)
expr_stmt|;
name|listenerAction
operator|.
name|lockEventListener
operator|.
name|registered
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|listenerAction
operator|.
name|action
operator|==
name|ListenerAction
operator|.
name|Action
operator|.
name|Deregister
condition|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listenerAction
operator|.
name|lockEventListener
argument_list|)
expr_stmt|;
name|listenerAction
operator|.
name|lockEventListener
operator|.
name|unregistered
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processLockAction
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
if|if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Attempt
condition|)
block|{
name|notifyListenersOfAttempt
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|addToAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|AttemptFailed
condition|)
block|{
name|removeFromAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|notifyListenersOfAttemptFailed
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Acquired
condition|)
block|{
name|removeFromAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|incrementAcquired
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Released
condition|)
block|{
name|decrementAcquired
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|notifyListenersOfAttempt
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|accept
argument_list|(
name|lockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|notifyListenersOfAttemptFailed
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|accept
argument_list|(
name|lockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|notifyListenersOfAcquire
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|,
specifier|final
name|int
name|newReferenceCount
parameter_list|)
block|{
specifier|final
name|LockAction
name|newLockAction
init|=
name|lockAction
operator|.
name|withCount
argument_list|(
name|newReferenceCount
argument_list|)
decl_stmt|;
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|accept
argument_list|(
name|newLockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|notifyListenersOfRelease
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|,
specifier|final
name|int
name|newReferenceCount
parameter_list|)
block|{
specifier|final
name|LockAction
name|newLockAction
init|=
name|lockAction
operator|.
name|withCount
argument_list|(
name|newReferenceCount
argument_list|)
decl_stmt|;
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|accept
argument_list|(
name|newLockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToAttempting
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|attempting
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|attempts
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
name|attempts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|attempts
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
operator|.
name|getSimpleName
argument_list|()
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
name|lockAction
operator|.
name|threadName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|attempts
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeFromAttempting
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|attempting
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|attempts
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|attempts
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
operator|.
name|getSimpleName
argument_list|()
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|v
operator|.
name|removeIf
argument_list|(
name|val
lambda|->
name|val
operator|.
name|_1
operator|==
name|lockAction
operator|.
name|mode
operator|&&
name|val
operator|.
name|_2
operator|.
name|equals
argument_list|(
name|lockAction
operator|.
name|threadName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|v
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|attempts
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|incrementAcquired
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|acquired
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|acqu
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|acqu
operator|==
literal|null
condition|)
block|{
name|acqu
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|acqu
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
operator|.
name|getSimpleName
argument_list|()
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
parameter_list|(
name|mode
parameter_list|,
name|referenceCount
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|referenceCount
operator|==
literal|null
condition|)
block|{
name|referenceCount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|referenceCount
operator|++
expr_stmt|;
block|}
name|notifyListenersOfAcquire
argument_list|(
name|lockAction
argument_list|,
name|referenceCount
argument_list|)
expr_stmt|;
return|return
name|referenceCount
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|acqu
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decrementAcquired
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|acquired
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|acqu
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|acqu
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|acqu
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
operator|.
name|getSimpleName
argument_list|()
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
parameter_list|(
name|mode
parameter_list|,
name|referenceCount
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|referenceCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|referenceCount
operator|--
expr_stmt|;
name|notifyListenersOfRelease
argument_list|(
name|lockAction
argument_list|,
name|referenceCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|referenceCount
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|referenceCount
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|v
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|acqu
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|acqu
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|LockEventListener
block|{
specifier|default
name|void
name|registered
parameter_list|()
block|{
block|}
name|void
name|accept
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
function_decl|;
specifier|default
name|void
name|unregistered
parameter_list|()
block|{
block|}
block|}
specifier|private
specifier|static
class|class
name|ListenerAction
block|{
enum|enum
name|Action
block|{
name|Register
block|,
name|Deregister
block|}
specifier|private
specifier|final
name|Action
name|action
decl_stmt|;
specifier|private
specifier|final
name|LockEventListener
name|lockEventListener
decl_stmt|;
specifier|public
name|ListenerAction
parameter_list|(
specifier|final
name|Action
name|action
parameter_list|,
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|lockEventListener
operator|=
name|lockEventListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|action
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|lockEventListener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LockAction
block|{
specifier|public
enum|enum
name|Action
block|{
name|Attempt
block|,
name|AttemptFailed
block|,
name|Acquired
block|,
name|Released
block|}
specifier|public
specifier|final
name|Action
name|action
decl_stmt|;
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
specifier|final
name|Class
name|lockType
decl_stmt|;
specifier|public
specifier|final
name|LockMode
name|mode
decl_stmt|;
specifier|public
specifier|final
name|String
name|threadName
decl_stmt|;
specifier|public
specifier|final
name|int
name|count
decl_stmt|;
specifier|public
specifier|final
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|String
name|reason
decl_stmt|;
name|LockAction
parameter_list|(
specifier|final
name|Action
name|action
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Class
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|threadName
operator|=
name|threadName
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
specifier|public
name|LockAction
name|withCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|LockAction
argument_list|(
name|action
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|threadName
argument_list|,
name|count
argument_list|,
name|timestamp
argument_list|,
name|reason
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|action
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|lockType
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") of "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" for #"
argument_list|)
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
operator|.
name|append
argument_list|(
name|threadName
argument_list|)
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|Acquired
operator|||
name|action
operator|==
name|Released
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|". count="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LockEventLogListener
implements|implements
name|LockEventListener
block|{
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
specifier|private
name|LockEventLogListener
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

