begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The Lock Table holds the details of  * threads awaiting to acquire a Lock  * and threads that have acquired a lock  *  * It is arranged by the id of the lock  * which is typically an indicator of the  * lock subject  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockTable
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PROP_ENABLE
init|=
literal|"exist.locktable.enabled"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROP_SANITY_CHECK
init|=
literal|"exist.locktable.sanity.check"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROP_TRACE_STACK_DEPTH
init|=
literal|"exist.locktable.trace.stack.depth"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|LockTable
name|instance
init|=
operator|new
name|LockTable
argument_list|()
decl_stmt|;
comment|/**      * Set to false to disable all events      */
specifier|private
specifier|volatile
name|boolean
name|enableEvents
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_ENABLE
argument_list|)
decl_stmt|;
comment|/**      * Set to true to enable sanity checking of lock leases      */
specifier|private
specifier|volatile
name|boolean
name|sanityCheck
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_SANITY_CHECK
argument_list|)
decl_stmt|;
comment|/**      * Whether we should try and trace the stack for the lock event, -1 means all stack,      * 0 means no stack, n means n stack frames, 5 is a reasonable value      */
specifier|private
specifier|volatile
name|int
name|traceStackDepth
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROP_TRACE_STACK_DEPTH
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * List of threads attempting to acquire a lock      *      * Map<Id, Map<Lock Type, List<LockModeOwner>>>      */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Reference count of acquired locks by id and type      *      * Map<Id, Map<Lock Type, List<Map<Lock Mode, Reference Count>>>>      */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The {@link #queue} holds lock events and lock listener events      * and is processed by the single thread {@link #queueConsumer} which uses      * {@link QueueConsumer} to ensure serializability of locking events and monitoring      */
specifier|private
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|LinkedTransferQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|queueConsumer
decl_stmt|;
specifier|private
name|LockTable
parameter_list|()
block|{
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|this
operator|.
name|queueConsumer
operator|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|QueueConsumer
argument_list|(
name|queue
argument_list|,
name|attempting
argument_list|,
name|acquired
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a log listener if trace level logging is enabled
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|registerListener
argument_list|(
operator|new
name|LockEventLogListener
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|LockTable
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Set the depth at which we should trace lock events through the stack      *      * @param traceStackDepth -1 traces the whole stack, 0 means no stack traces, n means n stack frames      */
specifier|public
name|void
name|setTraceStackDepth
parameter_list|(
specifier|final
name|int
name|traceStackDepth
parameter_list|)
block|{
name|this
operator|.
name|traceStackDepth
operator|=
name|traceStackDepth
expr_stmt|;
block|}
specifier|public
name|void
name|attempt
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Attempt
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attemptFailed
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|AttemptFailed
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|acquired
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Acquired
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockAction
operator|.
name|Action
name|action
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|action
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockAction
operator|.
name|Action
name|action
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enableEvents
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|final
name|String
name|threadName
init|=
name|currentThread
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|getStackTrace
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreEvent
argument_list|(
name|threadName
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|LockAction
name|lockAction
init|=
operator|new
name|LockAction
argument_list|(
name|action
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|threadName
argument_list|,
name|count
argument_list|,
name|timestamp
argument_list|,
name|stackTrace
argument_list|)
decl_stmt|;
comment|/**          * Very useful for debugging Lock life cycles          */
if|if
condition|(
name|sanityCheck
condition|)
block|{
name|sanityCheckLockLifecycles
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Right
argument_list|(
name|lockAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Simple filtering to ignore events that are not of interest      *      * @param threadName The name of the thread that triggered the event      * @param id The id of the lock      *      * @return true if the event should be ignored      */
specifier|private
name|boolean
name|ignoreEvent
parameter_list|(
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// useful for debugging specific log events
comment|//        return threadName.startsWith("DefaultQuartzScheduler_")
comment|//                || id.equals("dom.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("structure.dbx")
comment|//                || id.equals("values.dbx")
comment|//                || id.equals("CollectionCache");
block|}
annotation|@
name|Nullable
specifier|private
name|StackTraceElement
index|[]
name|getStackTrace
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|)
block|{
if|if
condition|(
name|traceStackDepth
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|thread
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lastStackTraceElementIdx
init|=
name|stackTrace
operator|.
name|length
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
name|from
init|=
name|findFirstExternalFrame
argument_list|(
name|stackTrace
argument_list|)
decl_stmt|;
specifier|final
name|int
name|to
decl_stmt|;
if|if
condition|(
name|traceStackDepth
operator|==
operator|-
literal|1
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|calcTo
init|=
name|from
operator|+
name|traceStackDepth
decl_stmt|;
if|if
condition|(
name|calcTo
operator|>
name|lastStackTraceElementIdx
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
name|to
operator|=
name|calcTo
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stackTrace
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|THIS_CLASS_NAME
init|=
name|LockTable
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|int
name|findFirstExternalFrame
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
comment|// we start with i = 1 to avoid Thread#getStackTrace() frame
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|THIS_CLASS_NAME
operator|.
name|equals
argument_list|(
name|stackTrace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|registerListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|ListenerAction
name|listenerAction
init|=
operator|new
name|ListenerAction
argument_list|(
name|ListenerAction
operator|.
name|Action
operator|.
name|Register
argument_list|,
name|lockEventListener
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Left
argument_list|(
name|listenerAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|ListenerAction
name|listenerAction
init|=
operator|new
name|ListenerAction
argument_list|(
name|ListenerAction
operator|.
name|Action
operator|.
name|Deregister
argument_list|,
name|lockEventListener
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|Either
operator|.
name|Left
argument_list|(
name|listenerAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasPendingEvents
parameter_list|()
block|{
return|return
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Get's a copy of the current lock attempt information      *      * @return lock attempt information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|getAttempting
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|attempting
argument_list|)
return|;
block|}
comment|/**      * Get's a copy of the current acquired lock information      *      * @return acquired lock information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|getAcquired
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|acquired
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|LockModeOwner
block|{
specifier|final
name|LockMode
name|lockMode
decl_stmt|;
specifier|final
name|String
name|ownerThread
decl_stmt|;
specifier|public
name|LockModeOwner
parameter_list|(
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|ownerThread
parameter_list|)
block|{
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|this
operator|.
name|ownerThread
operator|=
name|ownerThread
expr_stmt|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
specifier|public
name|String
name|getOwnerThread
parameter_list|()
block|{
return|return
name|ownerThread
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QueueConsumer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LockEventListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|QueueConsumer
parameter_list|(
specifier|final
name|TransferQueue
argument_list|<
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
argument_list|>
name|queue
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|acquired
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|attempting
operator|=
name|attempting
expr_stmt|;
name|this
operator|.
name|acquired
operator|=
name|acquired
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
specifier|final
name|Either
argument_list|<
name|ListenerAction
argument_list|,
name|LockAction
argument_list|>
name|event
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|isLeft
argument_list|()
condition|)
block|{
name|processListenerAction
argument_list|(
name|event
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processLockAction
argument_list|(
name|event
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"LockTable.QueueConsumer was interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processListenerAction
parameter_list|(
specifier|final
name|ListenerAction
name|listenerAction
parameter_list|)
block|{
if|if
condition|(
name|listenerAction
operator|.
name|action
operator|==
name|ListenerAction
operator|.
name|Action
operator|.
name|Register
condition|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listenerAction
operator|.
name|lockEventListener
argument_list|)
expr_stmt|;
name|listenerAction
operator|.
name|lockEventListener
operator|.
name|registered
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|listenerAction
operator|.
name|action
operator|==
name|ListenerAction
operator|.
name|Action
operator|.
name|Deregister
condition|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listenerAction
operator|.
name|lockEventListener
argument_list|)
expr_stmt|;
name|listenerAction
operator|.
name|lockEventListener
operator|.
name|unregistered
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processLockAction
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
if|if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Attempt
condition|)
block|{
name|notifyListenersOfAttempt
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|addToAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|AttemptFailed
condition|)
block|{
name|removeFromAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|notifyListenersOfAttemptFailed
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Acquired
condition|)
block|{
name|removeFromAttempting
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
name|incrementAcquired
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|Released
condition|)
block|{
name|decrementAcquired
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|notifyListenersOfAttempt
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockEventListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|accept
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyListenersOfAttemptFailed
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockEventListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|accept
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyListenersOfAcquire
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|,
specifier|final
name|int
name|newReferenceCount
parameter_list|)
block|{
specifier|final
name|LockAction
name|newLockAction
init|=
name|lockAction
operator|.
name|withCount
argument_list|(
name|newReferenceCount
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LockEventListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|accept
argument_list|(
name|newLockAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyListenersOfRelease
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|,
specifier|final
name|int
name|newReferenceCount
parameter_list|)
block|{
specifier|final
name|LockAction
name|newLockAction
init|=
name|lockAction
operator|.
name|withCount
argument_list|(
name|newReferenceCount
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LockEventListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|accept
argument_list|(
name|newLockAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addToAttempting
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|attempting
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|attempts
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
name|attempts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|attempts
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
operator|new
name|LockModeOwner
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
name|lockAction
operator|.
name|threadName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|attempts
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeFromAttempting
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|attempting
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|attempts
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|attempts
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|v
operator|.
name|removeIf
argument_list|(
name|val
lambda|->
name|val
operator|.
name|getLockMode
argument_list|()
operator|==
name|lockAction
operator|.
name|mode
operator|&&
name|val
operator|.
name|getOwnerThread
argument_list|()
operator|.
name|equals
argument_list|(
name|lockAction
operator|.
name|threadName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|v
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|attempts
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|incrementAcquired
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|acquired
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|acqu
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|acqu
operator|==
literal|null
condition|)
block|{
name|acqu
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|acqu
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
parameter_list|(
name|mode
parameter_list|,
name|referenceCount
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|referenceCount
operator|==
literal|null
condition|)
block|{
name|referenceCount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|referenceCount
operator|++
expr_stmt|;
block|}
name|notifyListenersOfAcquire
argument_list|(
name|lockAction
argument_list|,
name|referenceCount
argument_list|)
expr_stmt|;
return|return
name|referenceCount
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|acqu
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decrementAcquired
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
name|acquired
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|acqu
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|acqu
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|acqu
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|lockType
argument_list|,
parameter_list|(
name|lockType
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|lockAction
operator|.
name|mode
argument_list|,
parameter_list|(
name|mode
parameter_list|,
name|referenceCount
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|referenceCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|referenceCount
operator|--
expr_stmt|;
name|notifyListenersOfRelease
argument_list|(
name|lockAction
argument_list|,
name|referenceCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|referenceCount
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|referenceCount
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|v
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|acqu
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|acqu
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|LockEventListener
block|{
specifier|default
name|void
name|registered
parameter_list|()
block|{
block|}
name|void
name|accept
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
function_decl|;
specifier|default
name|void
name|unregistered
parameter_list|()
block|{
block|}
block|}
specifier|private
specifier|static
class|class
name|ListenerAction
block|{
enum|enum
name|Action
block|{
name|Register
block|,
name|Deregister
block|}
specifier|private
specifier|final
name|Action
name|action
decl_stmt|;
specifier|private
specifier|final
name|LockEventListener
name|lockEventListener
decl_stmt|;
specifier|public
name|ListenerAction
parameter_list|(
specifier|final
name|Action
name|action
parameter_list|,
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|lockEventListener
operator|=
name|lockEventListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|action
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|lockEventListener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LockAction
block|{
specifier|public
enum|enum
name|Action
block|{
name|Attempt
block|,
name|AttemptFailed
block|,
name|Acquired
block|,
name|Released
block|}
specifier|public
specifier|final
name|Action
name|action
decl_stmt|;
specifier|public
specifier|final
name|long
name|groupId
decl_stmt|;
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
specifier|final
name|LockType
name|lockType
decl_stmt|;
specifier|public
specifier|final
name|LockMode
name|mode
decl_stmt|;
specifier|public
specifier|final
name|String
name|threadName
decl_stmt|;
specifier|public
specifier|final
name|int
name|count
decl_stmt|;
comment|/**          * System#nanoTime()          */
specifier|public
specifier|final
name|long
name|timestamp
decl_stmt|;
annotation|@
name|Nullable
specifier|public
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
decl_stmt|;
name|LockAction
parameter_list|(
specifier|final
name|Action
name|action
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|threadName
operator|=
name|threadName
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|stackTrace
operator|=
name|stackTrace
expr_stmt|;
block|}
specifier|public
name|LockAction
name|withCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
return|return
operator|new
name|LockAction
argument_list|(
name|action
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|,
name|threadName
argument_list|,
name|count
argument_list|,
name|timestamp
argument_list|,
name|stackTrace
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|action
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|lockType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") of "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|reason
init|=
name|getSimpleStackReason
argument_list|()
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" for #"
argument_list|)
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
operator|.
name|append
argument_list|(
name|threadName
argument_list|)
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|Acquired
operator|||
name|action
operator|==
name|Released
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|". count="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_BROKER_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_STORE_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TXN_CLASS_NAME
init|=
name|Txn
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|public
name|String
name|getSimpleStackReason
parameter_list|()
block|{
for|for
control|(
specifier|final
name|StackTraceElement
name|stackTraceElement
range|:
name|stackTrace
control|)
block|{
specifier|final
name|String
name|className
init|=
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|NATIVE_BROKER_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|COLLECTION_STORE_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|TXN_CLASS_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"LockCollection"
argument_list|)
operator|||
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lockCollectionCache"
argument_list|)
operator|)
condition|)
block|{
return|return
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|+
literal|'('
operator|+
name|stackTraceElement
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|')'
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
enum|enum
name|LockType
block|{
annotation|@
name|Deprecated
name|LEGACY_COLLECTION
decl_stmt|,         @
name|Deprecated
name|LEGACY_DOCUMENT
decl_stmt|,
name|COLLECTION
decl_stmt|,
name|DOCUMENT
decl_stmt|,
name|COLLECTION_CACHE
block|}
comment|/** debugging tools below **/
comment|/**      * Holds a count of READ and WRITE locks by {@link LockAction#id}      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|lockCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Checks that there are not more releases and then acquires      */
specifier|private
name|void
name|sanityCheckLockLifecycles
parameter_list|(
specifier|final
name|LockAction
name|lockAction
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lockCounts
init|)
block|{
name|long
name|read
init|=
literal|0
decl_stmt|;
name|long
name|write
init|=
literal|0
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|lockCount
init|=
name|lockCounts
operator|.
name|get
argument_list|(
name|lockAction
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockCount
operator|!=
literal|null
condition|)
block|{
name|read
operator|=
name|lockCount
operator|.
name|_1
expr_stmt|;
name|write
operator|=
name|lockCount
operator|.
name|_2
expr_stmt|;
block|}
if|if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
condition|)
block|{
if|if
condition|(
name|lockAction
operator|.
name|mode
operator|==
name|LockMode
operator|.
name|READ_LOCK
condition|)
block|{
name|read
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|mode
operator|==
name|LockMode
operator|.
name|WRITE_LOCK
condition|)
block|{
name|write
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|lockAction
operator|.
name|action
operator|==
name|LockAction
operator|.
name|Action
operator|.
name|Released
condition|)
block|{
if|if
condition|(
name|lockAction
operator|.
name|mode
operator|==
name|LockMode
operator|.
name|READ_LOCK
condition|)
block|{
if|if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Negative READ_LOCKs"
argument_list|,
operator|new
name|IllegalStateException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|read
operator|--
expr_stmt|;
block|}
if|else if
condition|(
name|lockAction
operator|.
name|mode
operator|==
name|LockMode
operator|.
name|WRITE_LOCK
condition|)
block|{
if|if
condition|(
name|write
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Negative WRITE_LOCKs"
argument_list|,
operator|new
name|IllegalStateException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|write
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"QUEUE: {} (read={} write={})"
argument_list|,
name|lockAction
operator|.
name|toString
argument_list|()
argument_list|,
name|read
argument_list|,
name|write
argument_list|)
expr_stmt|;
block|}
name|lockCounts
operator|.
name|put
argument_list|(
name|lockAction
operator|.
name|id
argument_list|,
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|read
argument_list|,
name|write
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

