begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2006-2007 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Provides a Scheduled HeartBeat for the FileLock  */
end_comment

begin_class
specifier|public
class|class
name|FileLockHeartBeat
implements|implements
name|JobDescription
implements|,
name|Job
block|{
specifier|private
name|String
name|JOB_NAME
init|=
literal|"FileLockHeartBeat"
decl_stmt|;
specifier|public
name|FileLockHeartBeat
parameter_list|()
block|{
block|}
specifier|public
name|FileLockHeartBeat
parameter_list|(
name|String
name|lockName
parameter_list|)
block|{
name|JOB_NAME
operator|+=
literal|": "
operator|+
name|lockName
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|JOB_NAME
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
literal|"eXist.internal"
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|jobExecutionContext
parameter_list|)
throws|throws
name|JobExecutionException
block|{
comment|//get the file lock
name|JobDataMap
name|jobDataMap
init|=
name|jobExecutionContext
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
operator|(
name|Map
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
name|FileLock
name|lock
init|=
operator|(
name|FileLock
operator|)
name|params
operator|.
name|get
argument_list|(
name|FileLock
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lock
operator|.
name|message
argument_list|(
literal|"Caught exception while trying to write lock file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//abort this job
name|JobExecutionException
name|jat
init|=
operator|new
name|JobExecutionException
argument_list|(
literal|"Unable to write heart-beat: lock was null"
argument_list|)
decl_stmt|;
name|jat
operator|.
name|setUnscheduleFiringTrigger
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

