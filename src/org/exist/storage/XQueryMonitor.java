begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_comment
comment|/**  * Class to keep track of all running queries in a database instance. The main  * purpose of this class is to signal running queries that the database is going to  * shut down. This is done through the {@link org.exist.xquery.XQueryWatchDog}  * registered by each query. It is up to the query to check the watchdog's state.  * If it simply ignores the terminate signal, it will be killed after the shutdown  * timeout is reached.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|XQueryMonitor
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XQueryMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
name|runningQueries
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|public
name|XQueryMonitor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|queryStarted
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
name|runningQueries
operator|.
name|add
argument_list|(
name|watchdog
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queryCompleted
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
name|runningQueries
operator|.
name|remove
argument_list|(
name|watchdog
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killAll
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
name|XQueryWatchDog
name|watchdog
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|runningQueries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|watchdog
operator|=
operator|(
name|XQueryWatchDog
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing query: "
operator|+
name|ExpressionDumper
operator|.
name|dump
argument_list|(
name|watchdog
operator|.
name|getContext
argument_list|()
operator|.
name|getRootExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|watchdog
operator|.
name|kill
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Iterator
name|getRunningXQueriesIterator
parameter_list|()
block|{
return|return
operator|(
name|runningQueries
operator|.
name|iterator
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

