begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_comment
comment|//TODO : rename as NativeIndexValueFactory ? -pb
end_comment

begin_class
specifier|public
class|class
name|ValueIndexFactory
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ValueIndexFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//TODO : check
specifier|public
specifier|static
name|int
name|OFFSET_COLLECTION_ID
init|=
literal|0
decl_stmt|;
comment|//TODO : check
specifier|public
specifier|static
name|int
name|OFFSET_TYPE
init|=
name|OFFSET_COLLECTION_ID
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
decl_stmt|;
comment|//2
specifier|public
specifier|static
name|int
name|LENGTH_VALUE_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
specifier|static
name|int
name|OFFSET_VALUE
init|=
name|OFFSET_TYPE
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
decl_stmt|;
comment|//3
specifier|public
specifier|final
specifier|static
name|Indexable
name|deserialize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|EXistException
block|{
name|int
name|type
init|=
name|data
index|[
name|start
index|]
decl_stmt|;
comment|//TODO : improve deserialization (use static methods in the org.exist.xquery.Value package
comment|/* xs:string */
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|s
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
name|len
operator|-
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|StringValue
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/* xs:dateTime */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
block|{
comment|//get the dateTime back as a long
name|long
name|value
init|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
decl_stmt|;
comment|//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)
name|GregorianCalendar
name|utccal
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|utccal
operator|.
name|setTimeInMillis
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|//Create a XMLGregorianCalendar from the GregorianCalendar
try|try
block|{
name|XMLGregorianCalendar
name|xmlutccal
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|utccal
argument_list|)
decl_stmt|;
return|return
operator|new
name|DateTimeValue
argument_list|(
name|xmlutccal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|dtce
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:dateTime data type for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|dtce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/* xs:date */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
condition|)
block|{
comment|//get the date back as a long
name|long
name|value
init|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
decl_stmt|;
comment|//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)
name|GregorianCalendar
name|utccal
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|utccal
operator|.
name|setTimeInMillis
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|//Create a XMLGregorianCalendar from the GregorianCalendar
try|try
block|{
name|XMLGregorianCalendar
name|xmlutccal
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|utccal
argument_list|)
decl_stmt|;
return|return
operator|new
name|DateValue
argument_list|(
name|xmlutccal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|dtce
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:date data type for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|dtce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:date data type for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/* xs:integer */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x8000000000000000L
argument_list|)
return|;
block|}
comment|/* xs:double */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|long
name|bits
init|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x8000000000000000L
decl_stmt|;
name|double
name|d
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleValue
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/* xs:float */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|int
name|bits
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
name|float
name|f
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bits
argument_list|)
decl_stmt|;
return|return
operator|new
name|FloatValue
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/* xs:boolean */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
return|return
operator|new
name|BooleanValue
argument_list|(
name|data
index|[
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
index|]
operator|==
literal|1
argument_list|)
return|;
block|}
comment|/* unknown! */
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unknown data type for deserialization: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/* 	public final static byte[] serialize(Indexable value, short collectionId) throws EXistException { 		//TODO : refactor (only strings are case sensitive) 		return  serialize(value, collectionId, true); 	}	 	*/
comment|/** 	 * @ deprecated 	 * @param value 	 * @param collectionId 	 * @param caseSensitive 	 * @throws EXistException 	 */
comment|/* 	public final static byte[] serialize(Indexable value, short collectionId, boolean caseSensitive)  		throws EXistException {	  		// xs:string 		if (Type.subTypeOf(value.getType(), Type.STRING)) 		{			 			final String val = caseSensitive ?  					((StringValue)value).getStringValue() :  					((StringValue)value).getStringValue().toLowerCase(); 			final byte[] data = new byte[UTF8.encoded(val) + (Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE)]; 			ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID); 			data[OFFSET_TYPE] = (byte) value.getType();	// TODO: cast to byte is not safe 			UTF8.encode(val, data, OFFSET_VALUE); 			return data; 		} 		 		// xs:dateTime  		else if(Type.subTypeOf(value.getType(), Type.DATE_TIME))		{ 	    	GregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar();	//Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar) 			long millis = utccal.getTimeInMillis();			//Get the normalized dateTime as a long (milliseconds since the Epoch) 			byte[] data = new byte[(Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE) + 8];						//alocate a byte array for holding collectionId,Type,long (11 = (byte)short + byte + (byte)long) 			ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID);	//put the collectionId in the byte array 			//TODO : should we keep the actual type, i.e. value.getType() ? 			data[OFFSET_TYPE] = (byte) Type.DATE_TIME;					//put the Type in the byte array 			ByteConversion.longToByte(millis, data, OFFSET_VALUE);			//put the long in the byte array 			return(data);			 		} 		 		// xs:integer  		else if(Type.subTypeOf(value.getType(), Type.INTEGER)) 		{ 	        long l = ((IntegerValue)value).getValue() - Long.MIN_VALUE; 	        byte[] data = new byte[(Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE) + 8]; 			ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID); 			data[OFFSET_TYPE] = (byte) Type.INTEGER; 			ByteConversion.longToByte(l, data, OFFSET_VALUE); 			return data; 		} 		 		// xs:double  		else if (value.getType() == Type.DOUBLE) 		{ 	        final byte[] data = new byte[(Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE) + 8]; 	        ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID); 	        data[OFFSET_TYPE] = (byte) Type.DOUBLE; 	        final long bits = Double.doubleToLongBits(((DoubleValue)value).getValue()) ^ 0x8000000000000000L; 	        ByteConversion.longToByte(bits, data, OFFSET_VALUE); 	        return data; 		} 		 		// xs:float  		else if (value.getType() == Type.FLOAT) 		{ 	        final byte[] data = new byte[(Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE) + 4]; 	        ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID); 	        data[OFFSET_TYPE] = (byte) Type.FLOAT; 	        final int bits = (int)(Float.floatToIntBits(((FloatValue)value).getValue()) ^ 0x80000000); 	        ByteConversion.intToByte(bits, data, OFFSET_VALUE); 	        return data; 		} 	 		// xs:boolean  		else if(value.getType() == Type.BOOLEAN) 		{ 			byte[] data = new byte[(Collection.LENGTH_COLLECTION_ID + ValueIndexFactory.LENGTH_VALUE_TYPE) + 1]; 	        ByteConversion.shortToByte(collectionId, data, OFFSET_COLLECTION_ID); 	        data[OFFSET_TYPE] = Type.BOOLEAN; 	        data[OFFSET_VALUE] = (byte)(((BooleanValue)value).getValue() ? 1 : 0); 	        return data; 		} 		 		 		// unknown!  		else 		{ 			throw new EXistException("Unknown data type for serialization: " + Type.getTypeName(value.getType())); 		}	 	} 	*/
comment|/** 	 * @param value 	 * @param offset 	 * @throws EXistException 	 */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Indexable
name|value
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|EXistException
block|{
comment|//TODO : refactor (only strings are case sensitive)
return|return
name|serialize
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * @deprecated 	 * @param value 	 * @param offset 	 * @param caseSensitive 	 * @throws EXistException 	 */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Indexable
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
throws|throws
name|EXistException
block|{
comment|/* xs:string */
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
specifier|final
name|String
name|val
init|=
name|caseSensitive
condition|?
operator|(
operator|(
name|StringValue
operator|)
name|value
operator|)
operator|.
name|getStringValue
argument_list|()
else|:
operator|(
operator|(
name|StringValue
operator|)
name|value
operator|)
operator|.
name|getStringValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|val
argument_list|)
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|value
operator|.
name|getType
argument_list|()
expr_stmt|;
comment|// TODO: cast to byte is not safe
name|UTF8
operator|.
name|encode
argument_list|(
name|val
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:dateTime */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
block|{
name|XMLGregorianCalendar
name|utccal
init|=
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|value
operator|)
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
literal|12
index|]
decl_stmt|;
comment|//allocate an appropriately sized byte array for holding Type,long
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DATE_TIME
expr_stmt|;
comment|//put the Type in the byte array
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|utccal
operator|.
name|getYear
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMonth
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getDay
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getHour
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|8
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMinute
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|9
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getSecond
argument_list|()
expr_stmt|;
name|int
name|ms
init|=
name|utccal
operator|.
name|getMillisecond
argument_list|()
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
operator|(
name|short
operator|)
operator|(
name|ms
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|?
literal|0
else|:
name|ms
operator|)
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|10
argument_list|)
expr_stmt|;
return|return
operator|(
name|data
operator|)
return|;
comment|//return the byte array
block|}
comment|/* xs:date */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
condition|)
block|{
name|XMLGregorianCalendar
name|utccal
init|=
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|value
operator|)
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
literal|7
index|]
decl_stmt|;
comment|//allocate an appropriately sized byte array for holding Type,long
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DATE_TIME
expr_stmt|;
comment|//put the Type in the byte array
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|utccal
operator|.
name|getYear
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMonth
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getDay
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:integer */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|8
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|INTEGER
expr_stmt|;
name|long
name|l
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
operator|-
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|l
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:double */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DOUBLE
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|8
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DOUBLE
expr_stmt|;
specifier|final
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|(
operator|(
name|DoubleValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
literal|0x8000000000000000L
decl_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|bits
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:float */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|4
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|FLOAT
expr_stmt|;
specifier|final
name|int
name|bits
init|=
operator|(
name|int
operator|)
operator|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
operator|(
name|FloatValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
literal|0x80000000
operator|)
decl_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|bits
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:boolean */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|1
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
name|Type
operator|.
name|BOOLEAN
expr_stmt|;
name|data
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|BooleanValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* unknown! */
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unknown data type for serialization: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"0753-04-21T00:00:00+01:00"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b1
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|dtv
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|dtv
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|DateTimeValue
name|dtv2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"1960-03-19T19:03:59.782+01:00"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|dtv2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|dtv2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Value
argument_list|(
name|b1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Value
argument_list|(
name|b2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IntegerValue
name|iv
init|=
operator|new
name|IntegerValue
argument_list|(
literal|753
argument_list|)
decl_stmt|;
name|byte
index|[]
name|i1
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|iv
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|iv
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|IntegerValue
name|iv2
init|=
operator|new
name|IntegerValue
argument_list|(
literal|1960
argument_list|)
decl_stmt|;
name|byte
index|[]
name|i2
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|iv2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|iv2
argument_list|,
name|i2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Value
argument_list|(
name|i1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Value
argument_list|(
name|i2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|AtomicValue
name|dtv
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|XPathException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|dtv
operator|.
name|getStringValue
argument_list|()
operator|+
literal|" = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|data
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

