begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2010 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * @author wolf  *   */
end_comment

begin_comment
comment|// TODO : rename as NativeIndexValueFactory ? -pb
end_comment

begin_class
specifier|public
class|class
name|ValueIndexFactory
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ValueIndexFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|int
name|LENGTH_VALUE_TYPE
init|=
literal|1
decl_stmt|;
comment|// sizeof byte
specifier|public
specifier|final
specifier|static
name|Indexable
name|deserialize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|EXistException
block|{
specifier|final
name|int
name|type
init|=
name|data
index|[
name|start
index|]
decl_stmt|;
comment|// TODO : improve deserialization (use static methods in the org.exist.xquery.Value package
comment|/* xs:string */
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
name|len
operator|-
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringValue
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/* xs:dateTime */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|XMLGregorianCalendar
name|xmlutccal
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|ByteConversion
operator|.
name|byteToIntH
argument_list|(
name|data
argument_list|,
name|start
operator|+
literal|1
argument_list|)
argument_list|,
name|data
index|[
name|start
operator|+
literal|5
index|]
argument_list|,
name|data
index|[
name|start
operator|+
literal|6
index|]
argument_list|,
name|data
index|[
name|start
operator|+
literal|7
index|]
argument_list|,
name|data
index|[
name|start
operator|+
literal|8
index|]
argument_list|,
name|data
index|[
name|start
operator|+
literal|9
index|]
argument_list|,
name|ByteConversion
operator|.
name|byteToShortH
argument_list|(
name|data
argument_list|,
name|start
operator|+
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|DateTimeValue
argument_list|(
name|xmlutccal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DatatypeConfigurationException
name|dtce
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:dateTime data type"
operator|+
literal|"for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|dtce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/* xs:date */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|XMLGregorianCalendar
name|xmlutccal
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendarDate
argument_list|(
name|ByteConversion
operator|.
name|byteToIntH
argument_list|(
name|data
argument_list|,
name|start
operator|+
literal|1
argument_list|)
argument_list|,
name|data
index|[
name|start
operator|+
literal|5
index|]
argument_list|,
name|data
index|[
name|start
operator|+
literal|6
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|DateValue
argument_list|(
name|xmlutccal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DatatypeConfigurationException
name|dtce
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:date data type"
operator|+
literal|" for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|dtce
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Could not deserialize xs:date data type"
operator|+
literal|" for range index key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" - "
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/* xs:integer */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x8000000000000000L
argument_list|)
return|;
block|}
comment|/* xs:double */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|DOUBLE
condition|)
block|{
specifier|final
name|long
name|bits
init|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x8000000000000000L
decl_stmt|;
specifier|final
name|double
name|d
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleValue
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/* xs:float */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
specifier|final
name|int
name|bits
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|)
operator|^
literal|0x80000000
decl_stmt|;
specifier|final
name|float
name|f
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bits
argument_list|)
decl_stmt|;
return|return
operator|new
name|FloatValue
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/* xs:decimal */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|DECIMAL
condition|)
block|{
comment|//actually loaded from string data due to the uncertain length
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
name|len
operator|-
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
return|return
operator|new
name|DecimalValue
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
comment|/* xs:boolean */
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
return|return
operator|new
name|BooleanValue
argument_list|(
name|data
index|[
name|start
operator|+
operator|(
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|)
index|]
operator|==
literal|1
argument_list|)
return|;
block|}
comment|/* unknown! */
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unknown data type for deserialization: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param value      * @param offset      * @throws EXistException      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Indexable
name|value
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|EXistException
block|{
comment|// TODO : refactor (only strings are case sensitive)
return|return
name|serialize
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * @deprecated      * @param value      * @param offset      * @param caseSensitive      * @throws EXistException      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Indexable
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
throws|throws
name|EXistException
block|{
comment|/* xs:string */
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
specifier|final
name|String
name|val
init|=
name|caseSensitive
condition|?
operator|(
operator|(
name|StringValue
operator|)
name|value
operator|)
operator|.
name|getStringValue
argument_list|()
else|:
operator|(
operator|(
name|StringValue
operator|)
name|value
operator|)
operator|.
name|getStringValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|val
argument_list|)
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|value
operator|.
name|getType
argument_list|()
expr_stmt|;
comment|// TODO: cast to byte is not safe
name|UTF8
operator|.
name|encode
argument_list|(
name|val
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:dateTime */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
block|{
specifier|final
name|XMLGregorianCalendar
name|utccal
init|=
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|value
operator|)
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
literal|12
index|]
decl_stmt|;
comment|// allocate an appropriately sized
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DATE_TIME
expr_stmt|;
comment|// put the type in the byte array
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|utccal
operator|.
name|getYear
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMonth
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getDay
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getHour
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|8
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMinute
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|9
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getSecond
argument_list|()
expr_stmt|;
specifier|final
name|int
name|ms
init|=
name|utccal
operator|.
name|getMillisecond
argument_list|()
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
operator|(
name|short
operator|)
operator|(
name|ms
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|?
literal|0
else|:
name|ms
operator|)
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|10
argument_list|)
expr_stmt|;
return|return
operator|(
name|data
operator|)
return|;
comment|// return the byte array
block|}
comment|/* xs:date */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
condition|)
block|{
specifier|final
name|XMLGregorianCalendar
name|utccal
init|=
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|value
operator|)
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
literal|7
index|]
decl_stmt|;
comment|// allocate an appropriately sized
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DATE
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|utccal
operator|.
name|getYear
argument_list|()
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getMonth
argument_list|()
expr_stmt|;
name|data
index|[
name|offset
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
name|utccal
operator|.
name|getDay
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:integer */
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|8
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|INTEGER
expr_stmt|;
specifier|final
name|long
name|l
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
operator|-
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|l
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:double */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DOUBLE
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|8
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|DOUBLE
expr_stmt|;
specifier|final
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|(
operator|(
name|DoubleValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
literal|0x8000000000000000L
decl_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|bits
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:float */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|4
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|Type
operator|.
name|FLOAT
expr_stmt|;
specifier|final
name|int
name|bits
init|=
operator|(
name|int
operator|)
operator|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
operator|(
name|FloatValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
literal|0x80000000
operator|)
decl_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|bits
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* xs:boolean */
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
literal|1
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
name|Type
operator|.
name|BOOLEAN
expr_stmt|;
name|data
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|BooleanValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
if|else if
condition|(
name|value
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DECIMAL
condition|)
block|{
comment|//actually stored as string data due to variable length
specifier|final
name|BigDecimal
name|dec
init|=
operator|(
operator|(
name|DecimalValue
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|val
init|=
name|dec
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|val
argument_list|)
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|value
operator|.
name|getType
argument_list|()
expr_stmt|;
comment|// TODO: cast to byte is not safe
name|UTF8
operator|.
name|encode
argument_list|(
name|val
argument_list|,
name|data
argument_list|,
name|offset
operator|+
name|ValueIndexFactory
operator|.
name|LENGTH_VALUE_TYPE
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/* unknown! */
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unknown data type for serialization: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
comment|//******** DateTimeValue ********
specifier|final
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"0753-04-21T01:00:00+01:00"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b1
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|dtv
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|dtv
argument_list|,
name|b1
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeValue
name|dtv2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"1960-03-19T19:03:59.782+01:00"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b2
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|dtv2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|dtv2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Value
argument_list|(
name|b1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Value
argument_list|(
name|b2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeValue
name|dtv2_
init|=
operator|(
name|DateTimeValue
operator|)
name|ValueIndexFactory
operator|.
name|deserialize
argument_list|(
name|b2
argument_list|,
literal|0
argument_list|,
name|b2
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dtv2
operator|.
name|equals
argument_list|(
name|dtv2_
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR! "
operator|+
name|dtv2
operator|.
name|toString
argument_list|()
operator|+
literal|" ne "
operator|+
name|dtv2_
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//******** DateValue ********
specifier|final
name|DateValue
name|dv
init|=
operator|new
name|DateValue
argument_list|(
literal|"1960-03-19Z"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b3
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|dv
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|dv
argument_list|,
name|b3
argument_list|)
expr_stmt|;
specifier|final
name|DateValue
name|dv_
init|=
operator|(
name|DateValue
operator|)
name|ValueIndexFactory
operator|.
name|deserialize
argument_list|(
name|b3
argument_list|,
literal|0
argument_list|,
name|b3
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dv
operator|.
name|equals
argument_list|(
name|dv_
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR! "
operator|+
name|dv
operator|.
name|toString
argument_list|()
operator|+
literal|" ne "
operator|+
name|dv_
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//******** IntegerValue ********
specifier|final
name|IntegerValue
name|iv
init|=
operator|new
name|IntegerValue
argument_list|(
literal|753
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|i1
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|iv
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|iv
argument_list|,
name|i1
argument_list|)
expr_stmt|;
specifier|final
name|IntegerValue
name|iv2
init|=
operator|new
name|IntegerValue
argument_list|(
literal|1960
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|i2
init|=
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|iv2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|iv2
argument_list|,
name|i2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Value
argument_list|(
name|i1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Value
argument_list|(
name|i2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|AtomicValue
name|dtv
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|XPathException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|dtv
operator|.
name|getStringValue
argument_list|()
operator|+
literal|" = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|data
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

