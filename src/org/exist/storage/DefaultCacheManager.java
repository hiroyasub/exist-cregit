begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|Agent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|AgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * CacheManager maintains a global memory pool available  * to all page caches. All caches start with a low default  * setting, but CacheManager can grow individual caches   * until the total memory is reached. Caches can also be  * shrinked if their "load" remains below a given threshold  * between check intervals.The check interval is determined  * by the global sync background thread.  *   * The class computes the available memory in terms of  * pages.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultCacheManager
implements|implements
name|CacheManager
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DefaultCacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The maximum fraction of the total memory that can      * be used by a single cache.      */
specifier|public
specifier|final
specifier|static
name|double
name|MAX_MEM_USE
init|=
literal|0.9
decl_stmt|;
comment|/**      * The minimum size a cache needs to have to be      * considered for shrinking, defined in terms of a fraction      * of the overall memory.        */
specifier|public
specifier|final
specifier|static
name|double
name|MIN_SHRINK_FACTOR
init|=
literal|0.5
decl_stmt|;
comment|/**      * The amount by which a large cache will be shrinked if      * other caches request a resize.      */
specifier|public
specifier|final
specifier|static
name|double
name|SHRINK_FACTOR
init|=
literal|0.7
decl_stmt|;
comment|/**      * The minimum number of pages that must be read from a      * cache between check intervals to be not considered for       * shrinking. This is a measure for the "load" of the cache. Caches      * with high load will never be shrinked.      */
specifier|public
specifier|final
specifier|static
name|int
name|SHRINK_THRESHOLD
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
name|int
name|DEFAULT_CACHE_SIZE
init|=
literal|64
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_SIZE_ATTRIBUTE
init|=
literal|"cacheSize"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_CACHE_SIZE
init|=
literal|"db-connection.cache-size"
decl_stmt|;
comment|/** Caches maintained by this class */
specifier|private
name|List
name|caches
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|totalMem
decl_stmt|;
comment|/**      * The total maximum amount of pages shared between      * all caches.       */
specifier|private
name|int
name|totalPageCount
decl_stmt|;
comment|/**      * The number of pages currently used by the active caches.      */
specifier|private
name|int
name|currentPageCount
init|=
literal|0
decl_stmt|;
comment|/**      * The maximum number of pages that can be allocated by a      * single cache.      */
specifier|private
name|int
name|maxCacheSize
decl_stmt|;
comment|/**      * Signals that a resize had been requested by a cache, but      * the request could not be accepted during normal operations.      * The manager might try to shrink the largest cache during the      * next sync event.      */
specifier|private
name|Cache
name|lastRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|instanceName
decl_stmt|;
specifier|public
name|DefaultCacheManager
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|instanceName
operator|=
name|pool
operator|.
name|getId
argument_list|()
expr_stmt|;
name|int
name|pageSize
decl_stmt|,
name|cacheSize
decl_stmt|;
if|if
condition|(
operator|(
name|pageSize
operator|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInteger
argument_list|(
name|NativeBroker
operator|.
name|PROPERTY_PAGE_SIZE
argument_list|)
operator|)
operator|<
literal|0
condition|)
comment|//TODO : should we share the page size with the native broker ?
name|pageSize
operator|=
name|NativeBroker
operator|.
name|DEFAULT_PAGE_SIZE
expr_stmt|;
if|if
condition|(
operator|(
name|cacheSize
operator|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInteger
argument_list|(
name|PROPERTY_CACHE_SIZE
argument_list|)
operator|)
operator|<
literal|0
condition|)
block|{
name|cacheSize
operator|=
name|DEFAULT_CACHE_SIZE
expr_stmt|;
block|}
name|totalMem
operator|=
name|cacheSize
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|int
name|buffers
init|=
operator|(
name|int
operator|)
operator|(
name|totalMem
operator|/
name|pageSize
operator|)
decl_stmt|;
name|this
operator|.
name|totalPageCount
operator|=
name|buffers
expr_stmt|;
name|this
operator|.
name|maxCacheSize
operator|=
operator|(
name|int
operator|)
operator|(
name|totalPageCount
operator|*
name|MAX_MEM_USE
operator|)
expr_stmt|;
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache settings: totalPages: "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|totalPageCount
argument_list|)
operator|+
literal|"; maxCacheSize: "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|maxCacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|registerMBean
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|registerCache
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|currentPageCount
operator|+=
name|cache
operator|.
name|getBuffers
argument_list|()
expr_stmt|;
name|caches
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setCacheManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|registerMBean
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterCache
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|Cache
name|next
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|caches
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
name|Cache
operator|)
name|caches
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|==
name|next
condition|)
block|{
name|caches
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|currentPageCount
operator|-=
name|cache
operator|.
name|getBuffers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|requestMem
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
if|if
condition|(
name|currentPageCount
operator|>=
name|totalPageCount
condition|)
block|{
if|if
condition|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|<
name|maxCacheSize
condition|)
name|lastRequest
operator|=
name|cache
expr_stmt|;
comment|// no free pages available
comment|//            LOG.debug("Cache " + cache.getFileName() + " cannot be resized");
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|getGrowthFactor
argument_list|()
operator|>
literal|1.0
operator|&&
name|cache
operator|.
name|getBuffers
argument_list|()
operator|<
name|maxCacheSize
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|currentPageCount
operator|>=
name|totalPageCount
condition|)
comment|// another cache has been resized. Give up
return|return
operator|-
literal|1
return|;
comment|// calculate new cache size
name|int
name|newCacheSize
init|=
operator|(
name|int
operator|)
operator|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|*
name|cache
operator|.
name|getGrowthFactor
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|newCacheSize
operator|>
name|maxCacheSize
condition|)
comment|// new cache size is too large: adjust
name|newCacheSize
operator|=
name|maxCacheSize
expr_stmt|;
if|if
condition|(
name|currentPageCount
operator|+
name|newCacheSize
operator|>
name|totalPageCount
condition|)
comment|// new cache size exceeds total: adjust
name|newCacheSize
operator|=
name|cache
operator|.
name|getBuffers
argument_list|()
operator|+
operator|(
name|totalPageCount
operator|-
name|currentPageCount
operator|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Growing cache "
operator|+
name|cache
operator|.
name|getFileName
argument_list|()
operator|+
literal|" (a "
operator|+
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") from "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getBuffers
argument_list|()
argument_list|)
operator|+
literal|" to "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|newCacheSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentPageCount
operator|-=
name|cache
operator|.
name|getBuffers
argument_list|()
expr_stmt|;
comment|// resize the cache
name|cache
operator|.
name|resize
argument_list|(
name|newCacheSize
argument_list|)
expr_stmt|;
name|currentPageCount
operator|+=
name|newCacheSize
expr_stmt|;
comment|//                LOG.debug("currentPageCount = " + currentPageCount + "; max = " + totalPageCount);
return|return
name|newCacheSize
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Called from the global major sync event to check if caches can      * be shrinked. To be shrinked, the size of a cache needs to be      * larger than the factor defined by {@link #MIN_SHRINK_FACTOR}      * and its load needs to be lower than {@link #SHRINK_THRESHOLD}.      *      * If shrinked, the cache will be reset to the default initial cache size.      */
specifier|public
name|void
name|checkCaches
parameter_list|()
block|{
name|int
name|minSize
init|=
operator|(
name|int
operator|)
operator|(
name|totalPageCount
operator|*
name|MIN_SHRINK_FACTOR
operator|)
decl_stmt|;
name|Cache
name|cache
decl_stmt|;
name|int
name|load
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|caches
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|=
operator|(
name|Cache
operator|)
name|caches
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|getGrowthFactor
argument_list|()
operator|>
literal|1.0
condition|)
block|{
name|load
operator|=
name|cache
operator|.
name|getLoad
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|>
name|minSize
operator|&&
name|load
operator|<
name|SHRINK_THRESHOLD
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shrinking cache: "
operator|+
name|cache
operator|.
name|getFileName
argument_list|()
operator|+
literal|" (a "
operator|+
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") to "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getBuffers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentPageCount
operator|-=
name|cache
operator|.
name|getBuffers
argument_list|()
expr_stmt|;
name|cache
operator|.
name|resize
argument_list|(
name|getDefaultInitialSize
argument_list|()
argument_list|)
expr_stmt|;
name|currentPageCount
operator|+=
name|getDefaultInitialSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|checkDistribution
parameter_list|()
block|{
if|if
condition|(
name|lastRequest
operator|==
literal|null
condition|)
return|return;
name|int
name|minSize
init|=
operator|(
name|int
operator|)
operator|(
name|totalPageCount
operator|*
name|MIN_SHRINK_FACTOR
operator|)
decl_stmt|;
name|Cache
name|cache
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|caches
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|=
operator|(
name|Cache
operator|)
name|caches
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|>=
name|minSize
operator|||
name|cache
operator|.
name|getType
argument_list|()
operator|==
name|CacheManager
operator|.
name|DATA_CACHE
condition|)
block|{
name|int
name|newSize
init|=
operator|(
name|int
operator|)
operator|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|*
name|SHRINK_FACTOR
operator|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shrinking cache: "
operator|+
name|cache
operator|.
name|getFileName
argument_list|()
operator|+
literal|" (a "
operator|+
name|cache
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") to "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|newSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentPageCount
operator|-=
name|cache
operator|.
name|getBuffers
argument_list|()
expr_stmt|;
name|cache
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|currentPageCount
operator|+=
name|newSize
expr_stmt|;
break|break;
block|}
block|}
name|lastRequest
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxTotal
parameter_list|()
block|{
return|return
name|totalPageCount
return|;
block|}
specifier|public
name|long
name|getCurrentSize
parameter_list|()
block|{
return|return
name|currentPageCount
return|;
block|}
specifier|public
name|long
name|getMaxSingle
parameter_list|()
block|{
return|return
name|maxCacheSize
return|;
block|}
specifier|public
name|long
name|getTotalMem
parameter_list|()
block|{
return|return
name|totalMem
return|;
block|}
comment|/**      * Returns the default initial size for all caches.      *       * @return Default initial size 64.      */
specifier|public
name|int
name|getDefaultInitialSize
parameter_list|()
block|{
return|return
name|DEFAULT_CACHE_SIZE
return|;
block|}
specifier|private
name|void
name|registerMBean
parameter_list|()
block|{
name|Agent
name|agent
init|=
name|AgentFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|agent
operator|.
name|addMBean
argument_list|(
literal|"org.exist.management."
operator|+
name|instanceName
operator|+
literal|":type=CacheManager"
argument_list|,
operator|new
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|CacheManager
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while registering cache mbean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerMBean
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|Agent
name|agent
init|=
name|AgentFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|agent
operator|.
name|addMBean
argument_list|(
literal|"org.exist.management."
operator|+
name|instanceName
operator|+
literal|":type=CacheManager.Cache,name="
operator|+
name|cache
operator|.
name|getFileName
argument_list|()
operator|+
literal|",cache-type="
operator|+
name|cache
operator|.
name|getType
argument_list|()
argument_list|,
operator|new
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|Cache
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while registering cache mbean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

