begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_comment
comment|/**  * Global notification service for document updates. Other classes  * can subscribe to this service to be notified of document modifications,  * removals or additions.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|NotificationService
extends|extends
name|IdentityHashMap
block|{
specifier|private
specifier|final
specifier|static
name|Object
name|DUMMY_VALUE
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NotificationService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|NotificationService
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Subscribe an {@link UpdateListener} to receive notifications. 	 *  	 * @param listener 	 */
specifier|public
specifier|synchronized
name|void
name|subscribe
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
block|{
name|put
argument_list|(
name|listener
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Unsubscribe an {@link UpdateListener}. 	 *  	 * @param listener 	 */
specifier|public
specifier|synchronized
name|void
name|unsubscribe
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
block|{
name|Object
name|i
init|=
name|remove
argument_list|(
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|hashCode
argument_list|()
operator|+
literal|" listener not found: "
operator|+
name|listener
operator|.
name|hashCode
argument_list|()
argument_list|)
throw|;
block|}
comment|/** 	 * Notify all subscribers that a document has been updated/removed or 	 * a new document has been added. 	 *  	 * @param document 	 * @param event 	 */
specifier|public
specifier|synchronized
name|void
name|notifyUpdate
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|event
parameter_list|)
block|{
name|UpdateListener
name|listener
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|listener
operator|=
operator|(
name|UpdateListener
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|listener
operator|.
name|documentUpdated
argument_list|(
name|document
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Notify all subscribers that a node has been moved. Nodes may be moved during a      * defragmentation run. 	 */
specifier|public
specifier|synchronized
name|void
name|notifyMove
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|StoredNode
name|newNode
parameter_list|)
block|{
name|UpdateListener
name|listener
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|listener
operator|=
operator|(
name|UpdateListener
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|listener
operator|.
name|nodeMoved
argument_list|(
name|oldNodeId
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|debug
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered UpdateListeners:"
argument_list|)
expr_stmt|;
name|UpdateListener
name|listener
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|listener
operator|=
operator|(
name|UpdateListener
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|listener
operator|.
name|debug
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

