begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
package|;
end_package

begin_comment
comment|/*  * dbXML License, Version 1.0  *  *  * Copyright (c) 1999-2001 The dbXML Group, L.L.C.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by  *        The dbXML Group (http://www.dbxml.com/)."  *    Alternately, this acknowledgment may appear in the software  *    itself, if and wherever such third-party acknowledgments normally  *    appear.  *  * 4. The names "dbXML" and "The dbXML Group" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    info@dbxml.com.  *  * 5. Products derived from this software may not be called "dbXML",  *    nor may "dbXML" appear in their name, without prior written  *    permission of The dbXML Group.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE DBXML GROUP OR ITS CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Value is the primary base class for all data storing objects.  * The content window of Value objects are immutable, but the  * underlying byte array is not.  */
end_comment

begin_class
specifier|public
class|class
name|Value
implements|implements
name|Comparable
block|{
specifier|public
specifier|final
specifier|static
name|Value
name|EMPTY_VALUE
init|=
operator|new
name|Value
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Value
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|address
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Value
parameter_list|()
block|{
block|}
specifier|public
name|Value
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
name|data
operator|=
name|value
operator|.
name|data
expr_stmt|;
name|pos
operator|=
name|value
operator|.
name|pos
expr_stmt|;
name|len
operator|=
name|value
operator|.
name|len
expr_stmt|;
block|}
specifier|public
name|Value
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
expr_stmt|;
block|}
specifier|public
name|Value
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
block|}
specifier|public
name|Value
parameter_list|(
name|String
name|data
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|data
operator|=
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|uee
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|len
operator|=
name|this
operator|.
name|data
operator|.
name|length
expr_stmt|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|long
name|addr
parameter_list|)
block|{
name|address
operator|=
name|addr
expr_stmt|;
block|}
specifier|public
name|long
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/** 	 * getData retrieves the data being stored by the Value as a byte array. 	 * 	 * @return The Data 	 */
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|>
literal|0
operator|||
name|len
operator|<
name|data
operator|.
name|length
condition|)
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
return|return
name|data
return|;
block|}
specifier|public
specifier|final
name|byte
index|[]
name|data
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
specifier|final
name|int
name|start
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
comment|/** 	 * getLength retrieves the length of the data being stored by the Value. 	 * 	 * @return The Value length 	 */
specifier|public
specifier|final
name|int
name|getLength
parameter_list|()
block|{
return|return
name|len
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|dump
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
return|return
name|len
operator|==
name|value
operator|.
name|len
condition|?
name|compareTo
argument_list|(
name|value
argument_list|)
operator|==
literal|0
else|:
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|instanceof
name|Value
condition|)
return|return
name|equals
argument_list|(
operator|(
name|Value
operator|)
name|obj
argument_list|)
return|;
else|else
return|return
name|equals
argument_list|(
operator|new
name|Value
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
specifier|final
name|int
name|dlen
init|=
name|value
operator|.
name|len
decl_stmt|;
specifier|final
name|int
name|stop
init|=
name|len
operator|>
name|dlen
condition|?
name|dlen
else|:
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stop
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|b1
init|=
name|data
index|[
name|pos
operator|+
name|i
index|]
decl_stmt|;
specifier|final
name|byte
name|b2
init|=
name|value
operator|.
name|data
index|[
name|value
operator|.
name|pos
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
specifier|final
name|short
name|s1
init|=
operator|(
name|short
operator|)
operator|(
name|b1
operator|&
literal|0xFF
operator|)
decl_stmt|;
specifier|final
name|short
name|s2
init|=
operator|(
name|short
operator|)
operator|(
name|b2
operator|&
literal|0xFF
operator|)
decl_stmt|;
return|return
name|s1
operator|>
name|s2
condition|?
operator|(
name|i
operator|+
literal|1
operator|)
else|:
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
if|if
condition|(
name|len
operator|==
name|dlen
condition|)
return|return
literal|0
return|;
else|else
return|return
name|len
operator|>
name|dlen
condition|?
name|stop
operator|+
literal|1
else|:
operator|-
operator|(
name|stop
operator|+
literal|1
operator|)
return|;
block|}
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Value
condition|)
return|return
name|compareTo
argument_list|(
operator|(
name|Value
operator|)
name|obj
argument_list|)
return|;
else|else
return|return
name|compareTo
argument_list|(
operator|new
name|Value
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|int
name|comparePrefix
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|value
operator|.
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|b1
init|=
name|data
index|[
name|pos
operator|+
name|i
index|]
decl_stmt|;
specifier|final
name|byte
name|b2
init|=
name|value
operator|.
name|data
index|[
name|value
operator|.
name|pos
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
specifier|final
name|short
name|s1
init|=
operator|(
name|short
operator|)
operator|(
name|b1
operator|&
literal|0xFF
operator|)
decl_stmt|;
specifier|final
name|short
name|s2
init|=
operator|(
name|short
operator|)
operator|(
name|b2
operator|&
literal|0xFF
operator|)
decl_stmt|;
return|return
name|s1
operator|>
name|s2
condition|?
operator|(
name|i
operator|+
literal|1
operator|)
else|:
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|final
name|int
name|comparePrefix
parameter_list|(
name|Value
name|prefix
parameter_list|,
name|Value
name|keyPrefix
parameter_list|)
block|{
if|if
condition|(
name|keyPrefix
operator|.
name|getLength
argument_list|()
operator|>=
name|prefix
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|keyPrefix
operator|.
name|comparePrefix
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
operator|||
name|keyPrefix
operator|.
name|getLength
argument_list|()
operator|==
name|prefix
operator|.
name|getLength
argument_list|()
condition|)
return|return
name|cmp
return|;
for|for
control|(
name|int
name|i
init|=
name|prefix
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|keyPrefix
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|b1
init|=
name|data
index|[
name|pos
operator|+
name|i
index|]
decl_stmt|;
specifier|final
name|byte
name|b2
init|=
name|keyPrefix
operator|.
name|data
index|[
name|keyPrefix
operator|.
name|pos
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
specifier|final
name|short
name|s1
init|=
operator|(
name|short
operator|)
operator|(
name|b1
operator|&
literal|0xFF
operator|)
decl_stmt|;
specifier|final
name|short
name|s2
init|=
operator|(
name|short
operator|)
operator|(
name|b2
operator|&
literal|0xFF
operator|)
decl_stmt|;
return|return
name|s1
operator|>
name|s2
condition|?
operator|(
name|i
operator|+
literal|1
operator|)
else|:
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|prefix
operator|.
name|comparePrefix
argument_list|(
name|keyPrefix
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
name|boolean
name|startsWith
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
name|value
operator|.
name|len
condition|)
return|return
literal|false
return|;
name|byte
index|[]
name|vdata
init|=
name|value
operator|.
name|data
decl_stmt|;
name|int
name|vpos
init|=
name|value
operator|.
name|pos
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|len
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|data
index|[
name|i
operator|+
name|pos
index|]
operator|!=
name|vdata
index|[
name|i
operator|+
name|vpos
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|final
name|boolean
name|endsWith
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
name|value
operator|.
name|len
condition|)
return|return
literal|false
return|;
name|byte
index|[]
name|vdata
init|=
name|value
operator|.
name|data
decl_stmt|;
name|int
name|vpos
init|=
name|value
operator|.
name|pos
decl_stmt|;
name|int
name|d
init|=
name|len
operator|-
name|value
operator|.
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|data
index|[
name|d
operator|+
name|i
operator|+
name|pos
index|]
operator|!=
name|vdata
index|[
name|i
operator|+
name|vpos
index|]
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns the length of the common prefix this value      * shares with the specified other value (if any).      *      * @param other the other value      * @return length of the common prefix, 0 if there is none      */
specifier|public
name|int
name|commonPrefix
parameter_list|(
name|Value
name|other
parameter_list|)
block|{
specifier|final
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|other
operator|.
name|len
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|data
index|[
name|pos
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|other
operator|.
name|data
index|[
name|other
operator|.
name|pos
operator|+
name|i
index|]
condition|)
break|break;
block|}
return|return
name|i
return|;
block|}
specifier|public
name|int
name|checkPrefix
parameter_list|(
name|Value
name|prefix
parameter_list|)
block|{
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|prefix
operator|.
name|len
argument_list|,
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|prefix
operator|.
name|data
index|[
name|prefix
operator|.
name|pos
operator|+
name|i
index|]
operator|!=
name|data
index|[
name|pos
operator|+
name|i
index|]
condition|)
return|return
name|i
return|;
block|}
return|return
name|l
return|;
block|}
specifier|public
name|Value
name|getSeparator
parameter_list|(
name|Value
name|other
parameter_list|)
block|{
name|int
name|offset
init|=
name|commonPrefix
argument_list|(
name|other
argument_list|)
operator|+
literal|1
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|abs
argument_list|(
name|offset
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|Value
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|String
name|dump
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|data
index|[
name|pos
operator|+
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//            buf.append(' ');
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

