begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-05 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  *    *  This file is in part based on code from the dbXML Group. The original license  *  statement is included below:  *    *  -------------------------------------------------------------------------------------------------  *  dbXML License, Version 1.0  *  *  Copyright (c) 1999-2001 The dbXML Group, L.L.C.  *  All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by  *  The dbXML Group (http://www.dbxml.com/)."  *  Alternately, this acknowledgment may appear in the software  *  itself, if and wherever such third-party acknowledgments normally  *  appear.  *  *  4. The names "dbXML" and "The dbXML Group" must not be used to  *  endorse or promote products derived from this software without  *  prior written permission. For written permission, please contact  *  info@dbxml.com.  *  *  5. Products derived from this software may not be called "dbXML",  *  nor may "dbXML" appear in their name, without prior written  *  permission of The dbXML Group.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE DBXML GROUP OR ITS CONTRIBUTORS  *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,  *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BufferStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|cache
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Lockable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  *  A general purpose B+-tree which stores binary keys as instances of  *  {@link org.exist.storage.btree.Value}. The actual value data is not  *  stored in the B+tree itself. Instead, we use long pointers to record the  *  storage address of the value. This class has no methods to locate or  *  modify data records. Data handling is in the responsibilty of the   *  proper subclasses: {@link org.exist.storage.index.BFile} and  *  {@link org.exist.storage.dom.DOMFile}.  *    *  Both, branch and leaf nodes are represented by the inner class   *  {@link org.exist.storage.btree.BTree.BTreeNode}.  */
end_comment

begin_class
specifier|public
class|class
name|BTree
extends|extends
name|Paged
implements|implements
name|Lockable
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOGSTATS
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|NativeBroker
operator|.
name|EXIST_STATISTICS_LOGGER
argument_list|)
decl_stmt|;
comment|/** Used as return value, if a value was not found */
specifier|public
specifier|final
specifier|static
name|long
name|KEY_NOT_FOUND
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Type of BTreeNode/Page */
specifier|protected
specifier|final
specifier|static
name|byte
name|LEAF
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
name|BRANCH
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MIN_SPACE_PER_KEY
init|=
literal|32
decl_stmt|;
comment|/** Log entry type for an insert value operation */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_INSERT_VALUE
init|=
literal|0x20
decl_stmt|;
comment|/** Log entry type for creation of a new BTree node */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_CREATE_BNODE
init|=
literal|0x21
decl_stmt|;
comment|/** Log entry type for a page update resulting from a page split */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_UPDATE_PAGE
init|=
literal|0x22
decl_stmt|;
comment|/** Log entry type for a parent page change resulting from a page split */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_SET_PARENT
init|=
literal|0x23
decl_stmt|;
comment|/** Log entry type for a value update */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_UPDATE_VALUE
init|=
literal|0x24
decl_stmt|;
comment|/** Log entry type for removing a value */
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_REMOVE_VALUE
init|=
literal|0x25
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|LOG_SET_LINK
init|=
literal|0x26
decl_stmt|;
static|static
block|{
comment|// register the log entry types used for the BTree
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_INSERT_VALUE
argument_list|,
name|InsertValueLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_UPDATE_VALUE
argument_list|,
name|UpdateValueLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_REMOVE_VALUE
argument_list|,
name|RemoveValueLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_CREATE_BNODE
argument_list|,
name|CreateBTNodeLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_UPDATE_PAGE
argument_list|,
name|UpdatePageLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_SET_PARENT
argument_list|,
name|SetParentLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
name|LogEntryTypes
operator|.
name|addEntryType
argument_list|(
name|LOG_SET_LINK
argument_list|,
name|SetPageLinkLoggable
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|BrokerPool
name|pool
decl_stmt|;
specifier|protected
specifier|final
name|DefaultCacheManager
name|cacheManager
decl_stmt|;
comment|/** Cache of BTreeNode(s) */
specifier|protected
name|Cache
argument_list|<
name|BTreeNode
argument_list|>
name|cache
decl_stmt|;
comment|/** File header of a BTree file */
specifier|private
specifier|final
name|BTreeFileHeader
name|fileHeader
decl_stmt|;
comment|/** The LogManager for writing the transaction log */
specifier|protected
specifier|final
name|Optional
argument_list|<
name|JournalManager
argument_list|>
name|logManager
decl_stmt|;
specifier|protected
specifier|final
name|byte
name|fileId
decl_stmt|;
specifier|private
name|double
name|splitFactor
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|BTree
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|byte
name|fileId
parameter_list|,
specifier|final
name|boolean
name|recoveryEnabled
parameter_list|,
specifier|final
name|DefaultCacheManager
name|cacheManager
parameter_list|)
throws|throws
name|DBException
block|{
name|super
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|fileHeader
operator|=
operator|(
name|BTreeFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
name|fileHeader
operator|.
name|setPageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|setTotalCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveryEnabled
operator|&&
name|pool
operator|.
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|logManager
operator|=
name|pool
operator|.
name|getJournalManager
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|logManager
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isRecoveryEnabled
parameter_list|()
block|{
return|return
name|logManager
operator|.
name|isPresent
argument_list|()
operator|&&
name|pool
operator|.
name|isRecoveryEnabled
argument_list|()
return|;
block|}
specifier|public
name|BTree
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|byte
name|fileId
parameter_list|,
specifier|final
name|boolean
name|recoveryEnabled
parameter_list|,
specifier|final
name|DefaultCacheManager
name|cacheManager
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|DBException
block|{
name|this
argument_list|(
name|pool
argument_list|,
name|fileId
argument_list|,
name|recoveryEnabled
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getFileVersion
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|create
parameter_list|(
specifier|final
name|short
name|fixedKeyLen
parameter_list|)
throws|throws
name|DBException
block|{
if|if
condition|(
name|super
operator|.
name|create
argument_list|()
condition|)
block|{
name|initCache
argument_list|()
expr_stmt|;
try|try
block|{
name|createRootNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not create database file "
operator|+
name|getFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|fileHeader
operator|.
name|setFixedKeyLen
argument_list|(
name|fixedKeyLen
argument_list|)
expr_stmt|;
try|try
block|{
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
literal|"Error while writing file header: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|open
parameter_list|(
specifier|final
name|short
name|expectedVersion
parameter_list|)
throws|throws
name|DBException
block|{
if|if
condition|(
name|super
operator|.
name|open
argument_list|(
name|expectedVersion
argument_list|)
condition|)
block|{
name|initCache
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeAndRemove
parameter_list|()
block|{
name|super
operator|.
name|closeAndRemove
argument_list|()
expr_stmt|;
name|cacheManager
operator|.
name|deregisterCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the active Lock object for this file.      *      * @see org.exist.util.Lockable#getLock()      */
annotation|@
name|Override
specifier|public
name|Lock
name|getLock
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|initCache
parameter_list|()
block|{
name|this
operator|.
name|cache
operator|=
operator|new
name|BTreeCache
argument_list|<>
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
argument_list|,
name|cacheManager
operator|.
name|getDefaultInitialSize
argument_list|()
argument_list|,
literal|1.5
argument_list|,
literal|0
argument_list|,
name|CacheManager
operator|.
name|BTREE_CACHE
argument_list|)
expr_stmt|;
name|cacheManager
operator|.
name|registerCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setSplitFactor
parameter_list|(
specifier|final
name|double
name|factor
parameter_list|)
block|{
if|if
condition|(
name|factor
operator|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"splitFactor should be<= 1> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|splitFactor
operator|=
name|factor
expr_stmt|;
block|}
comment|/**      * addValue adds a Value to the BTree and associates a pointer with it. The      * pointer can be used for referencing any type of data, it just so happens      * that dbXML uses it for referencing pages of associated data in the BTree      * file or other files.      *      * @param  value               The Value to add      * @param  pointer             The pointer to associate with it      * @return                     The previous value for the pointer (or -1)      * @exception  IOException     Description of the Exception      * @exception  BTreeException  Description of the Exception      */
specifier|public
name|long
name|addValue
parameter_list|(
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|long
name|pointer
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
return|return
name|addValue
argument_list|(
literal|null
argument_list|,
name|value
argument_list|,
name|pointer
argument_list|)
return|;
block|}
specifier|public
name|long
name|addValue
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|long
name|pointer
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
return|return
name|getRootNode
argument_list|()
operator|.
name|addValue
argument_list|(
name|transaction
argument_list|,
name|value
argument_list|,
name|pointer
argument_list|)
return|;
block|}
comment|/**      * removeValue removes a Value from the BTree and returns the associated      * pointer for it.      *      * @param  value               The Value to remove      * @return                     The pointer that was associated with it      * @exception  IOException     Description of the Exception      * @exception  BTreeException  Description of the Exception      */
specifier|public
name|long
name|removeValue
parameter_list|(
specifier|final
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
return|return
name|removeValue
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|long
name|removeValue
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
return|return
name|getRootNode
argument_list|()
operator|.
name|removeValue
argument_list|(
name|transaction
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
name|remove
argument_list|(
literal|null
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
comment|/**      * Search for keys matching the given {@link IndexQuery} and      * remove them from the node. Every match is reported       * to the specified {@link BTreeCallback}.      *       * @param query      * @param callback      * @throws IOException      * @throws BTreeException      * @throws TerminatedException      */
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
condition|)
block|{
specifier|final
name|Value
name|val1
init|=
name|query
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|data1
index|[]
init|=
name|val1
operator|.
name|getData
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|data2
index|[]
init|=
operator|new
name|byte
index|[
name|data1
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data1
argument_list|,
literal|0
argument_list|,
name|data2
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|data2
index|[
name|data2
operator|.
name|length
operator|-
literal|1
index|]
operator|+=
literal|1
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|query
operator|.
name|getOperator
argument_list|()
argument_list|,
name|val1
argument_list|,
operator|new
name|Value
argument_list|(
name|data2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getRootNode
argument_list|()
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeSequential
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|BTreeNode
name|page
parameter_list|,
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|long
name|next
init|=
name|page
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
specifier|final
name|BTreeNode
name|nextPage
init|=
name|getBTreeNode
argument_list|(
name|next
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nextPage
operator|.
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|boolean
name|test
init|=
name|query
operator|.
name|testValue
argument_list|(
name|nextPage
operator|.
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|NEQ
operator|&&
operator|!
name|test
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|test
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|nextPage
operator|.
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|nextPage
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|nextPage
operator|.
name|keys
index|[
name|i
index|]
argument_list|,
name|nextPage
operator|.
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|nextPage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|nextPage
operator|.
name|keys
index|[
name|i
index|]
argument_list|,
name|nextPage
operator|.
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|nextPage
operator|.
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
name|next
operator|=
name|nextPage
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * findValue finds a Value in the BTree and returns the associated pointer      * for it.      *      * @param  value               The Value to find      * @return                     The pointer that was associated with it      * @exception  IOException     Description of the Exception      * @exception  BTreeException  Description of the Exception      */
specifier|public
name|long
name|findValue
parameter_list|(
specifier|final
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
return|return
name|getRootNode
argument_list|()
operator|.
name|findValue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * query performs a query against the BTree and performs callback      * operations to report the search results.      *      * @param  query               The IndexQuery to use (or null for everything)      * @param  callback            The callback instance      * @exception  IOException     Description of the Exception      * @exception  BTreeException  Description of the Exception      */
specifier|public
name|void
name|query
parameter_list|(
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
condition|)
block|{
specifier|final
name|Value
name|val1
init|=
name|query
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|data1
index|[]
init|=
name|val1
operator|.
name|getData
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|data2
index|[]
init|=
operator|new
name|byte
index|[
name|data1
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data1
argument_list|,
literal|0
argument_list|,
name|data2
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|data2
index|[
name|data2
operator|.
name|length
operator|-
literal|1
index|]
operator|+=
literal|1
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|query
operator|.
name|getOperator
argument_list|()
argument_list|,
name|val1
argument_list|,
operator|new
name|Value
argument_list|(
name|data2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getRootNode
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes a query against the BTree and performs callback      * operations to report the search results. This method takes an      * additional prefix value. Only BTree keys starting with the specified      * prefix are considered. Search through the tree is thus restricted to      * a given key range.      *      * @param  query The IndexQuery to use (or null for everything)      * @param prefix a prefix value      * @param  callback The callback instance      * @exception  IOException      * @exception  BTreeException      */
specifier|public
name|void
name|query
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|Value
name|prefix
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
name|getRootNode
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanSequential
parameter_list|(
name|BTreeNode
name|page
parameter_list|,
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|Value
name|keyPrefix
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|TerminatedException
block|{
while|while
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|page
operator|.
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyPrefix
operator|!=
literal|null
operator|&&
name|page
operator|.
name|keys
index|[
name|i
index|]
operator|.
name|comparePrefix
argument_list|(
name|keyPrefix
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|boolean
name|test
init|=
name|query
operator|.
name|testValue
argument_list|(
name|page
operator|.
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|NEQ
operator|&&
operator|!
name|test
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|test
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|page
operator|.
name|keys
index|[
name|i
index|]
argument_list|,
name|page
operator|.
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|long
name|next
init|=
name|page
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
name|page
operator|=
name|getBTreeNode
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create a new node with the given status and parent.      *       * @param transaction      * @param status      * @param parent      * @return The BTree node      */
specifier|private
name|BTreeNode
name|createBTreeNode
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|byte
name|status
parameter_list|,
specifier|final
name|BTreeNode
name|parent
parameter_list|,
specifier|final
name|boolean
name|reuseDeleted
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Page
name|page
init|=
name|getFreePage
argument_list|(
name|reuseDeleted
argument_list|)
decl_stmt|;
specifier|final
name|BTreeNode
name|node
init|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|status
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|Loggable
name|loggable
init|=
operator|new
name|CreateBTNodeLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|status
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
else|:
name|Page
operator|.
name|NO_PAGE
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|loggable
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|pageHeader
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPointers
argument_list|(
operator|new
name|long
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|node
operator|.
name|write
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create a BTree node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Read a node from the given page.      *       * @param pageNum      * @return The BTree node      */
specifier|private
name|BTreeNode
name|getBTreeNode
parameter_list|(
specifier|final
name|long
name|pageNum
parameter_list|)
block|{
try|try
block|{
name|BTreeNode
name|node
init|=
name|cache
operator|.
name|get
argument_list|(
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|pageNum
argument_list|)
decl_stmt|;
name|node
operator|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|increment
init|=
name|node
operator|.
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|?
literal|2
else|:
literal|1
decl_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|,
name|increment
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get BTree node on page "
operator|+
name|pageNum
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Set the root node of the tree.      *       * @param rootNode      * @throws IOException      */
specifier|protected
name|void
name|setRootNode
parameter_list|(
specifier|final
name|BTreeNode
name|rootNode
parameter_list|)
throws|throws
name|IOException
block|{
name|fileHeader
operator|.
name|setRootPage
argument_list|(
name|rootNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|rootNode
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the root node.      *       * @param transaction      * @return The root node      * @throws IOException      */
specifier|protected
name|long
name|createRootNode
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BTreeNode
name|root
init|=
name|createBTreeNode
argument_list|(
name|transaction
argument_list|,
name|LEAF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|setRootNode
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|root
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
return|;
block|}
comment|/**      * @return the root node.      */
specifier|protected
name|BTreeNode
name|getRootNode
parameter_list|()
block|{
try|try
block|{
name|BTreeNode
name|node
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileHeader
operator|.
name|getRootPage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|fileHeader
operator|.
name|getRootPage
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get root btree node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Print a dump of the tree to the given writer. For debug only!      * @param writer      * @throws IOException      * @throws BTreeException      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
specifier|final
name|BTreeNode
name|root
init|=
name|getRootNode
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ROOT = "
operator|+
name|root
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeMetrics
name|treeStatistics
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TreeMetrics
name|metrics
init|=
operator|new
name|TreeMetrics
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BTreeNode
name|root
init|=
name|getRootNode
argument_list|()
decl_stmt|;
name|root
operator|.
name|treeStatistics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|flush
parameter_list|()
throws|throws
name|DBException
block|{
name|boolean
name|flushed
init|=
name|cache
operator|.
name|flush
argument_list|()
decl_stmt|;
name|flushed
operator|=
name|flushed
operator||
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|flushed
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DBException
block|{
if|if
condition|(
operator|!
name|isReadOnly
argument_list|()
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|dumpValue
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|int
name|status
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|value
operator|.
name|getData
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Paged
operator|.
name|hexDump
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//        for (int i = 0; i< data.length; i++) {
comment|//            writer.write(Integer.toHexString(data[i]));
comment|//        }
name|writer
operator|.
name|write
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rawScan
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|TerminatedException
block|{
specifier|final
name|long
name|pages
init|=
name|getFileHeader
argument_list|()
operator|.
name|getTotalCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pages
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|page
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|BTreeNode
name|node
init|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
name|node
operator|.
name|scanRaw
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
class|class
name|TreeInfo
block|{
specifier|final
name|long
name|firstPage
decl_stmt|;
specifier|final
name|int
name|leafPages
decl_stmt|;
name|TreeInfo
parameter_list|(
specifier|final
name|long
name|firstPage
parameter_list|,
specifier|final
name|int
name|leafs
parameter_list|)
block|{
name|this
operator|.
name|firstPage
operator|=
name|firstPage
expr_stmt|;
name|this
operator|.
name|leafPages
operator|=
name|leafs
expr_stmt|;
block|}
block|}
comment|/**      * Scan pages by walking through the file sequentially.      * Optionally remove all inner (branch) pages and return the first leaf page (in order).      * This method is used to rebuild the btree from the leaf pages.      *      * @return      * @throws IOException      * @throws TerminatedException      * @throws DBException      */
specifier|private
name|TreeInfo
name|scanTree
parameter_list|(
specifier|final
name|boolean
name|removeBranches
parameter_list|)
throws|throws
name|IOException
throws|,
name|TerminatedException
throws|,
name|DBException
block|{
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|pagePointers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|nextPages
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|branchPages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pageCount
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|pages
init|=
name|getFileHeader
argument_list|()
operator|.
name|getTotalCount
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pages
condition|;
name|i
operator|++
control|)
block|{
comment|// first check if page is in cache. if yes, use it.
name|BTreeNode
name|node
init|=
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Page
name|page
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|page
operator|=
name|node
operator|.
name|page
expr_stmt|;
block|}
else|else
block|{
name|page
operator|=
name|getPage
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|page
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
name|pageCount
operator|++
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|pagePointers
operator|.
name|add
argument_list|(
name|node
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
name|nextPages
operator|.
name|add
argument_list|(
name|node
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|branchPages
operator|.
name|add
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|pagePointers
operator|.
name|removeAll
argument_list|(
name|nextPages
argument_list|)
expr_stmt|;
if|if
condition|(
name|pagePointers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Found multiple start pages: ["
operator|+
name|pagePointers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|l
lambda|->
name|Long
operator|.
name|toString
argument_list|(
name|l
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DBException
argument_list|(
literal|"More than one start page found for btree: "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|removeBranches
condition|)
block|{
for|for
control|(
specifier|final
name|long
name|p
range|:
name|branchPages
control|)
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|page
operator|.
name|read
argument_list|()
expr_stmt|;
specifier|final
name|BTreeNode
name|node
init|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|unlinkPages
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TreeInfo
argument_list|(
name|pagePointers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|pageCount
argument_list|)
return|;
block|}
specifier|public
name|void
name|scanSequential
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|,
name|long
name|pageNum
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|TerminatedException
block|{
while|while
condition|(
name|pageNum
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|pageNum
operator|+
literal|" "
argument_list|)
expr_stmt|;
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|pageNum
argument_list|)
decl_stmt|;
name|node
operator|.
name|scanRaw
argument_list|(
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|pageNum
operator|=
name|node
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|scanSequential
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|)
throws|throws
name|TerminatedException
throws|,
name|IOException
throws|,
name|DBException
block|{
specifier|final
name|TreeInfo
name|info
init|=
name|scanTree
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Sequential scan..."
argument_list|)
expr_stmt|;
name|scanSequential
argument_list|(
name|out
argument_list|,
name|info
operator|.
name|firstPage
argument_list|,
parameter_list|(
name|value
parameter_list|,
name|pointer
parameter_list|)
lambda|->
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rebuild the btree: removes all branches and rebuilds the tree by scanning      * through leaf pages.      *      * @throws TerminatedException      * @throws IOException      * @throws DBException      */
specifier|public
name|void
name|rebuild
parameter_list|()
throws|throws
name|TerminatedException
throws|,
name|IOException
throws|,
name|DBException
block|{
specifier|final
name|TreeInfo
name|info
init|=
name|scanTree
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|leafPages
operator|==
literal|1
condition|)
block|{
specifier|final
name|BTreeNode
name|root
init|=
name|getBTreeNode
argument_list|(
name|info
operator|.
name|firstPage
argument_list|)
decl_stmt|;
name|setRootNode
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a new root node
specifier|final
name|BTreeNode
name|root
init|=
name|createBTreeNode
argument_list|(
literal|null
argument_list|,
name|BRANCH
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|setRootNode
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// insert a pointer to the first page into the root
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|info
operator|.
name|firstPage
argument_list|)
decl_stmt|;
name|root
operator|.
name|insertPointer
argument_list|(
name|info
operator|.
name|firstPage
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|node
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// scan through chain of pages and add them to the tree
name|long
name|rightPageNum
init|=
name|node
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
decl_stmt|;
while|while
condition|(
name|rightPageNum
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
name|node
operator|=
name|getBTreeNode
argument_list|(
name|rightPageNum
argument_list|)
expr_stmt|;
name|rightPageNum
operator|=
name|node
operator|.
name|pageHeader
operator|.
name|getNextPage
argument_list|()
expr_stmt|;
comment|// promote first key of page to parent
if|if
condition|(
name|node
operator|.
name|nKeys
operator|<
literal|1
condition|)
block|{
comment|//                throw new IOException("No keys found in page " + node.page.getPageNum());
continue|continue;
block|}
specifier|final
name|Value
name|key
init|=
name|node
operator|.
name|keys
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|BTreeNode
name|parent
init|=
name|findParent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parent is null for page "
operator|+
name|node
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|parent
operator|.
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|!=
name|BRANCH
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a branch page: "
operator|+
name|parent
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
throw|;
block|}
name|parent
operator|.
name|promoteValue
argument_list|(
literal|null
argument_list|,
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Walk the tree to find the parent page to which key should      * be promoted.      *      * @param key      * @return      * @throws IOException      */
specifier|private
name|BTreeNode
name|findParent
parameter_list|(
specifier|final
name|Value
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
name|node
init|=
name|getRootNode
argument_list|()
decl_stmt|;
name|BTreeNode
name|last
init|=
name|node
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|!=
name|LEAF
condition|)
block|{
name|last
operator|=
name|node
expr_stmt|;
try|try
block|{
name|int
name|idx
init|=
name|node
operator|.
name|searchKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while scanning page "
operator|+
name|node
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|last
return|;
block|}
comment|/* -------------------------------------------------------------------------      * Methods used by recovery and transaction management      * ---------------------------------------------------------------------- */
specifier|private
name|void
name|writeToLog
parameter_list|(
specifier|final
name|Loggable
name|loggable
parameter_list|,
specifier|final
name|BTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|logManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|logManager
operator|.
name|get
argument_list|()
operator|.
name|journal
argument_list|(
name|loggable
argument_list|)
expr_stmt|;
name|node
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JournalException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|requiresRedo
parameter_list|(
specifier|final
name|Loggable
name|loggable
parameter_list|,
specifier|final
name|Page
name|page
parameter_list|)
block|{
return|return
name|loggable
operator|.
name|getLsn
argument_list|()
operator|>
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getLsn
argument_list|()
return|;
block|}
specifier|protected
name|void
name|redoCreateBTNode
parameter_list|(
specifier|final
name|CreateBTNodeLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
name|BTreeNode
name|node
init|=
name|cache
operator|.
name|get
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// node is not yet loaded. Load it
try|try
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
name|page
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
operator|||
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|)
operator|&&
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getLsn
argument_list|()
operator|!=
name|Lsn
operator|.
name|LSN_INVALID
operator|&&
operator|!
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|page
argument_list|)
condition|)
block|{
comment|// node already found on disk: read it
name|node
operator|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|read
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// create a new node
name|node
operator|=
operator|new
name|BTreeNode
argument_list|(
name|page
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setStatus
argument_list|(
name|loggable
operator|.
name|status
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPointers
argument_list|(
operator|new
name|long
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|node
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|parentPage
operator|=
name|loggable
operator|.
name|parentNum
expr_stmt|;
specifier|final
name|int
name|increment
init|=
name|node
operator|.
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|?
literal|2
else|:
literal|1
decl_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|,
name|increment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|redoInsertValue
parameter_list|(
specifier|final
name|InsertValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
name|node
operator|.
name|insertKey
argument_list|(
name|loggable
operator|.
name|key
argument_list|,
name|loggable
operator|.
name|idx
argument_list|)
expr_stmt|;
name|node
operator|.
name|insertPointer
argument_list|(
name|loggable
operator|.
name|pointer
argument_list|,
name|loggable
operator|.
name|pointerIdx
argument_list|)
expr_stmt|;
name|node
operator|.
name|adjustDataLen
argument_list|(
name|loggable
operator|.
name|idx
argument_list|)
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|undoInsertValue
parameter_list|(
specifier|final
name|InsertValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
try|try
block|{
name|removeValue
argument_list|(
literal|null
argument_list|,
name|loggable
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BTreeException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to undo: "
operator|+
name|loggable
operator|.
name|dump
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|redoUpdateValue
parameter_list|(
specifier|final
name|UpdateValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getLsn
argument_list|()
operator|!=
name|Page
operator|.
name|NO_PAGE
operator|&&
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
if|if
condition|(
name|loggable
operator|.
name|idx
operator|>
name|node
operator|.
name|ptrs
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|node
operator|.
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|"; loggable.idx = "
operator|+
name|loggable
operator|.
name|idx
operator|+
literal|"; node.ptrs.length = "
operator|+
name|node
operator|.
name|ptrs
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Critical error during recovery"
argument_list|)
throw|;
block|}
name|node
operator|.
name|ptrs
index|[
name|loggable
operator|.
name|idx
index|]
operator|=
name|loggable
operator|.
name|pointer
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|undoUpdateValue
parameter_list|(
specifier|final
name|UpdateValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
try|try
block|{
name|addValue
argument_list|(
literal|null
argument_list|,
name|loggable
operator|.
name|key
argument_list|,
name|loggable
operator|.
name|oldPointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BTreeException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to undo: "
operator|+
name|loggable
operator|.
name|dump
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|redoRemoveValue
parameter_list|(
specifier|final
name|RemoveValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getLsn
argument_list|()
operator|!=
name|Page
operator|.
name|NO_PAGE
operator|&&
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
name|node
operator|.
name|removeKey
argument_list|(
name|loggable
operator|.
name|idx
argument_list|)
expr_stmt|;
name|node
operator|.
name|removePointer
argument_list|(
name|loggable
operator|.
name|idx
argument_list|)
expr_stmt|;
name|node
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|undoRemoveValue
parameter_list|(
specifier|final
name|RemoveValueLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
try|try
block|{
name|addValue
argument_list|(
literal|null
argument_list|,
name|loggable
operator|.
name|oldValue
argument_list|,
name|loggable
operator|.
name|oldPointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BTreeException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to undo: "
operator|+
name|loggable
operator|.
name|dump
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|redoUpdatePage
parameter_list|(
specifier|final
name|UpdatePageLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
name|node
operator|.
name|prefix
operator|=
name|loggable
operator|.
name|prefix
expr_stmt|;
name|node
operator|.
name|keys
operator|=
name|loggable
operator|.
name|values
expr_stmt|;
name|node
operator|.
name|nKeys
operator|=
name|loggable
operator|.
name|values
operator|.
name|length
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setValueCount
argument_list|(
operator|(
name|short
operator|)
name|node
operator|.
name|nKeys
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPointers
argument_list|(
name|loggable
operator|.
name|pointers
argument_list|)
expr_stmt|;
name|node
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|redoSetParent
parameter_list|(
specifier|final
name|SetParentLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
name|node
operator|.
name|pageHeader
operator|.
name|parentPage
operator|=
name|loggable
operator|.
name|parentNum
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|redoSetPageLink
parameter_list|(
specifier|final
name|SetPageLinkLoggable
name|loggable
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|loggable
operator|.
name|pageNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiresRedo
argument_list|(
name|loggable
argument_list|,
name|node
operator|.
name|page
argument_list|)
condition|)
block|{
name|node
operator|.
name|pageHeader
operator|.
name|setNextPage
argument_list|(
name|loggable
operator|.
name|nextPage
argument_list|)
expr_stmt|;
name|node
operator|.
name|pageHeader
operator|.
name|setLsn
argument_list|(
name|loggable
operator|.
name|getLsn
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * A node in the B+-tree. Every node is backed by a Page for      * storing the node's data. Both, branch and leaf nodes are represented      * by this class. Each node stores its keys as instances of {@link Value}      * and its values as pointers of type long.      *       *  If the node is a branch, the long pointers point to the child nodes      *  of the branch. If it is a leaf, the pointers contain the virtual storage      *  of the data section associated to the key.      *        * @author wolf      *      */
specifier|protected
specifier|final
class|class
name|BTreeNode
implements|implements
name|BTreeCacheable
block|{
comment|/** defines the default size for the keys array */
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_INITIAL_ENTRIES
init|=
literal|32
decl_stmt|;
comment|/** the underlying Page object that stores the node's data */
specifier|private
specifier|final
name|Page
name|page
decl_stmt|;
specifier|private
specifier|final
name|BTreePageHeader
name|pageHeader
decl_stmt|;
comment|/** stores the keys in this page */
specifier|private
name|Value
index|[]
name|keys
decl_stmt|;
specifier|private
name|Value
name|prefix
init|=
name|Value
operator|.
name|EMPTY_VALUE
decl_stmt|;
comment|/** the number of keys currently stored */
specifier|private
name|int
name|nKeys
init|=
literal|0
decl_stmt|;
comment|/**           * stores the page pointers to child nodes (for branches)          * or the storage address (for leaf nodes).          */
specifier|private
name|long
index|[]
name|ptrs
decl_stmt|;
comment|/** the number of pointers currently used */
specifier|private
name|int
name|nPtrs
init|=
literal|0
decl_stmt|;
comment|/** fields used by the Cacheable interface */
specifier|private
name|int
name|refCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|timestamp
init|=
literal|0
decl_stmt|;
comment|/** does this node need to be saved? */
specifier|private
name|boolean
name|saved
init|=
literal|true
decl_stmt|;
comment|/** the computed raw data size required by this node */
specifier|private
name|int
name|currentDataLen
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|allowUnload
init|=
literal|true
decl_stmt|;
specifier|public
name|BTreeNode
parameter_list|(
specifier|final
name|Page
name|page
parameter_list|,
specifier|final
name|boolean
name|newPage
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|this
operator|.
name|pageHeader
operator|=
operator|(
name|BTreePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|newPage
condition|)
block|{
name|keys
operator|=
operator|new
name|Value
index|[
name|DEFAULT_INITIAL_ENTRIES
index|]
expr_stmt|;
name|ptrs
operator|=
operator|new
name|long
index|[
name|DEFAULT_INITIAL_ENTRIES
operator|+
literal|1
index|]
expr_stmt|;
name|pageHeader
operator|.
name|setValueCount
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**          * Set the link to the parent of this node.          *           * @param parent          */
specifier|public
name|void
name|setParent
parameter_list|(
specifier|final
name|BTreeNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|pageHeader
operator|.
name|parentPage
operator|=
name|parent
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pageHeader
operator|.
name|parentPage
operator|=
name|Page
operator|.
name|NO_PAGE
expr_stmt|;
block|}
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * @return the parent of this node.          */
specifier|public
name|BTreeNode
name|getParent
parameter_list|()
block|{
if|if
condition|(
name|pageHeader
operator|.
name|parentPage
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
return|return
name|getBTreeNode
argument_list|(
name|pageHeader
operator|.
name|parentPage
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReferenceCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|incReferenceCount
parameter_list|()
block|{
if|if
condition|(
name|refCount
operator|<
name|Cacheable
operator|.
name|MAX_REF
condition|)
block|{
name|refCount
operator|++
expr_stmt|;
block|}
return|return
name|refCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReferenceCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
name|refCount
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
specifier|final
name|int
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowUnload
parameter_list|()
block|{
return|return
name|allowUnload
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInnerPage
parameter_list|()
block|{
return|return
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sync
parameter_list|(
specifier|final
name|boolean
name|syncJournal
parameter_list|)
block|{
if|if
condition|(
name|isDirty
argument_list|()
condition|)
block|{
try|try
block|{
name|write
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRecoveryEnabled
argument_list|()
operator|&&
name|syncJournal
condition|)
block|{
name|logManager
operator|.
name|get
argument_list|()
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IO error while writing page: "
operator|+
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getKey
parameter_list|()
block|{
return|return
name|page
operator|.
name|getPageNum
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|decReferenceCount
parameter_list|()
block|{
return|return
name|refCount
operator|>
literal|0
condition|?
operator|--
name|refCount
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
operator|!
name|saved
return|;
block|}
comment|/**          * Set the keys of this node.          *           * @param vals          */
specifier|private
name|void
name|setValues
parameter_list|(
specifier|final
name|Value
index|[]
name|vals
parameter_list|)
block|{
name|keys
operator|=
name|vals
expr_stmt|;
name|nKeys
operator|=
name|vals
operator|.
name|length
expr_stmt|;
name|pageHeader
operator|.
name|setValueCount
argument_list|(
operator|(
name|short
operator|)
name|nKeys
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Set the array of pointers of this node.          *           * @param pointers          */
specifier|private
name|void
name|setPointers
parameter_list|(
specifier|final
name|long
index|[]
name|pointers
parameter_list|)
block|{
name|ptrs
operator|=
name|pointers
expr_stmt|;
name|nPtrs
operator|=
name|pointers
operator|.
name|length
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Returns the raw data size (in bytes) required by this node.          *           * @return The data length          */
specifier|private
name|int
name|getDataLen
parameter_list|()
block|{
return|return
name|currentDataLen
operator|<
literal|0
condition|?
name|recalculateDataLen
argument_list|()
else|:
name|currentDataLen
return|;
block|}
comment|/**          * Recalculates the raw data size (in bytes) required by this node.          *           * @return the data length          */
specifier|private
name|int
name|recalculateDataLen
parameter_list|()
block|{
name|currentDataLen
operator|=
name|ptrs
operator|==
literal|null
condition|?
literal|0
else|:
name|nPtrs
operator|*
literal|8
expr_stmt|;
if|if
condition|(
name|fileHeader
operator|.
name|getFixedKeyLen
argument_list|()
operator|<
literal|0
condition|)
block|{
name|currentDataLen
operator|+=
literal|2
operator|*
name|nKeys
expr_stmt|;
block|}
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|currentDataLen
operator|+=
name|prefix
operator|.
name|getLength
argument_list|()
operator|+
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
name|currentDataLen
operator|+=
name|nKeys
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// if this is a leaf page, we use prefix compression to store the keys,
comment|// so subtract the size of the prefix
name|int
name|prefix
init|=
name|keys
index|[
name|i
index|]
operator|.
name|commonPrefix
argument_list|(
name|keys
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|<
literal|0
operator|||
name|prefix
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|prefix
operator|=
literal|0
expr_stmt|;
block|}
name|currentDataLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|currentDataLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|currentDataLen
return|;
block|}
comment|/**          * Add the raw data size required to store the value to the internal          * data size of this node.          *            */
specifier|private
name|void
name|adjustDataLen
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|currentDataLen
operator|<
literal|0
condition|)
block|{
name|recalculateDataLen
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|idx
operator|>
literal|0
condition|)
block|{
comment|// if this is a leaf page, we use prefix compression to store the keys,
comment|// so subtract the size of the prefix
name|int
name|prefix
decl_stmt|;
if|if
condition|(
name|idx
operator|+
literal|1
operator|<
name|nKeys
condition|)
block|{
comment|// recalculate the prefix length for the following value
name|prefix
operator|=
name|calculatePrefixLen
argument_list|(
name|idx
operator|+
literal|1
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
name|currentDataLen
operator|-=
name|keys
index|[
name|idx
operator|+
literal|1
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
name|prefix
operator|=
name|calculatePrefixLen
argument_list|(
name|idx
operator|+
literal|1
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|currentDataLen
operator|+=
name|keys
index|[
name|idx
operator|+
literal|1
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
block|}
comment|// calculate the prefix length for the new value
name|prefix
operator|=
name|calculatePrefixLen
argument_list|(
name|idx
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
name|currentDataLen
operator|+=
name|keys
index|[
name|idx
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
name|currentDataLen
operator|++
expr_stmt|;
comment|// add one byte for the prefix length
block|}
else|else
block|{
name|currentDataLen
operator|+=
name|keys
index|[
name|idx
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
name|currentDataLen
operator|++
expr_stmt|;
block|}
block|}
name|currentDataLen
operator|+=
literal|8
expr_stmt|;
if|if
condition|(
name|fileHeader
operator|.
name|getFixedKeyLen
argument_list|()
operator|<
literal|0
condition|)
block|{
name|currentDataLen
operator|+=
literal|2
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|calculatePrefixLen
parameter_list|(
specifier|final
name|int
name|idx0
parameter_list|,
specifier|final
name|int
name|idx1
parameter_list|)
block|{
name|int
name|prefix
init|=
name|keys
index|[
name|idx0
index|]
operator|.
name|commonPrefix
argument_list|(
name|keys
index|[
name|idx1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|<
literal|0
operator|||
name|prefix
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|prefix
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
comment|/**          * Compute where to split a page: tries to split at half the data size          *          * @return          */
specifier|private
name|int
name|getPivot
parameter_list|(
specifier|final
name|int
name|preferred
parameter_list|)
block|{
if|if
condition|(
name|nKeys
operator|==
literal|2
condition|)
block|{
return|return
literal|1
return|;
block|}
specifier|final
name|int
name|totalLen
init|=
name|getKeyDataLen
argument_list|()
decl_stmt|;
name|int
name|currentLen
init|=
literal|0
decl_stmt|;
name|int
name|pivot
init|=
name|nKeys
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// if this is a leaf page, we use prefix compression to store the keys,
comment|// so subtract the size of the prefix
name|int
name|prefix
init|=
name|keys
index|[
name|i
index|]
operator|.
name|commonPrefix
argument_list|(
name|keys
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|<
literal|0
operator|||
name|prefix
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|prefix
operator|=
literal|0
expr_stmt|;
block|}
name|currentLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|currentLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentLen
operator|>
name|totalLen
operator|/
literal|2
operator|||
name|i
operator|+
literal|1
operator|==
name|preferred
condition|)
block|{
name|pivot
operator|=
name|currentLen
operator|>
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
condition|?
name|i
else|:
name|i
operator|+
literal|1
expr_stmt|;
break|break;
block|}
block|}
return|return
name|pivot
return|;
block|}
specifier|private
name|int
name|getKeyDataLen
parameter_list|()
block|{
name|int
name|totalLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// if this is a leaf page, we use prefix compression to store the keys,
comment|// so subtract the size of the prefix
name|int
name|prefix
init|=
name|keys
index|[
name|i
index|]
operator|.
name|commonPrefix
argument_list|(
name|keys
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|<
literal|0
operator|||
name|prefix
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|prefix
operator|=
literal|0
expr_stmt|;
block|}
name|totalLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|totalLen
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|totalLen
return|;
block|}
specifier|private
name|boolean
name|mustSplit
parameter_list|()
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getValueCount
argument_list|()
operator|!=
name|nKeys
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrong value count"
argument_list|)
throw|;
block|}
return|return
name|getDataLen
argument_list|()
operator|>
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
return|;
block|}
comment|/**          * Read the node from the underlying page.          *           * @throws IOException          */
specifier|private
name|void
name|read
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|read
argument_list|()
decl_stmt|;
specifier|final
name|short
name|keyLen
init|=
name|fileHeader
operator|.
name|getFixedKeyLen
argument_list|()
decl_stmt|;
name|short
name|valSize
init|=
name|keyLen
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
comment|// it this is a branch node, read the common prefix
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
specifier|final
name|short
name|prefixSize
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|prefixSize
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
name|Value
operator|.
name|EMPTY_VALUE
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|p
argument_list|,
name|prefixSize
argument_list|)
expr_stmt|;
name|p
operator|+=
name|prefixSize
expr_stmt|;
block|}
block|}
name|nKeys
operator|=
name|pageHeader
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|new
name|Value
index|[
operator|(
name|nKeys
operator|*
literal|3
operator|)
operator|/
literal|2
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyLen
operator|<
literal|0
condition|)
block|{
name|valSize
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// for leaf pages, we use prefix compression to increase the number of
comment|// keys that can be stored on one page. Each key is stored as follows:
comment|// [valSize, prefixLen, value], where prefixLen specifies the number of
comment|// leading bytes the key has in common with the previous key.
specifier|final
name|int
name|prefixLen
init|=
operator|(
name|data
index|[
name|p
operator|++
index|]
operator|&
literal|0xFF
operator|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|t
init|=
operator|new
name|byte
index|[
name|valSize
index|]
decl_stmt|;
if|if
condition|(
name|prefixLen
operator|>
literal|0
condition|)
block|{
comment|// copy prefixLen leading bytes from the previous key
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|keys
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|start
argument_list|()
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|prefixLen
argument_list|)
expr_stmt|;
block|}
comment|// read the remaining bytes
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|p
argument_list|,
name|t
argument_list|,
name|prefixLen
argument_list|,
name|valSize
operator|-
name|prefixLen
argument_list|)
expr_stmt|;
name|p
operator|+=
name|valSize
operator|-
name|prefixLen
expr_stmt|;
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|Value
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"prefixLen = "
operator|+
name|prefixLen
operator|+
literal|"; i = "
operator|+
name|i
operator|+
literal|"; nKeys = "
operator|+
name|nKeys
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|p
argument_list|,
name|valSize
argument_list|)
expr_stmt|;
name|p
operator|+=
name|valSize
expr_stmt|;
block|}
block|}
comment|//	Read in the pointers
name|nPtrs
operator|=
name|pageHeader
operator|.
name|getPointerCount
argument_list|()
expr_stmt|;
name|ptrs
operator|=
operator|new
name|long
index|[
operator|(
name|nPtrs
operator|*
literal|3
operator|)
operator|/
literal|2
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|ptrs
index|[
name|i
index|]
operator|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|8
expr_stmt|;
block|}
block|}
comment|/**          * Write the node to the underlying page.          *           * @throws IOException          */
specifier|private
name|void
name|write
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nKeys
operator|!=
name|pageHeader
operator|.
name|getValueCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"nkeys: "
operator|+
name|nKeys
operator|+
literal|" valueCount: "
operator|+
name|pageHeader
operator|.
name|getValueCount
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|temp
init|=
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
comment|// if this is a branch node, write out the common prefix
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|,
name|temp
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
argument_list|,
name|temp
argument_list|,
name|p
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|+=
name|prefix
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|keyLen
init|=
name|fileHeader
operator|.
name|getFixedKeyLen
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyLen
operator|<
literal|0
condition|)
block|{
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
name|temp
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// for leaf pages, we use prefix compression to increase the number of
comment|// keys that can be stored on one page. Each key is stored as follows:
comment|// [valSize, prefixLen, value], where prefixLen specifies the number of
comment|// leading bytes the key has in common with the previous key.
name|int
name|prefixLen
init|=
name|keys
index|[
name|i
index|]
operator|.
name|commonPrefix
argument_list|(
name|keys
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// determine the common prefix
if|if
condition|(
name|prefixLen
operator|<
literal|0
operator|||
name|prefixLen
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|prefixLen
operator|=
literal|0
expr_stmt|;
block|}
comment|// store the length of the prefix
name|temp
index|[
name|p
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|prefixLen
expr_stmt|;
comment|// copy the remaining bytes, starting at prefixLen
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
index|[
name|i
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|keys
index|[
name|i
index|]
operator|.
name|start
argument_list|()
operator|+
name|prefixLen
argument_list|,
name|temp
argument_list|,
name|p
argument_list|,
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefixLen
argument_list|)
expr_stmt|;
name|p
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
operator|-
name|prefixLen
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|keys
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|+
name|data
operator|.
name|length
operator|>
name|temp
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"calculated: "
operator|+
name|getDataLen
argument_list|()
operator|+
literal|"; required: "
operator|+
operator|(
name|p
operator|+
name|data
operator|.
name|length
operator|)
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
name|p
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|p
operator|+=
name|data
operator|.
name|length
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|ptrs
index|[
name|i
index|]
argument_list|,
name|temp
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
literal|8
expr_stmt|;
block|}
name|writeValue
argument_list|(
name|page
argument_list|,
operator|new
name|Value
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|true
expr_stmt|;
block|}
comment|/**          * Retrieve the child node at guven index.          *           * @param idx The index          * @return The BTree node          * @throws IOException          */
specifier|private
name|BTreeNode
name|getChildNode
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
operator|&&
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<
name|nPtrs
condition|)
block|{
return|return
name|getBTreeNode
argument_list|(
name|ptrs
index|[
name|idx
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**          * Remove a key.          */
specifier|private
name|long
name|removeValue
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Value
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|int
name|idx
init|=
name|searchKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
return|return
name|getChildNode
argument_list|(
name|idx
argument_list|)
operator|.
name|removeValue
argument_list|(
name|transaction
argument_list|,
name|key
argument_list|)
return|;
case|case
name|LEAF
case|:
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
name|KEY_NOT_FOUND
return|;
block|}
else|else
block|{
try|try
block|{
name|allowUnload
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|idx
argument_list|,
name|keys
index|[
name|idx
index|]
argument_list|,
name|ptrs
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|oldPtr
init|=
name|ptrs
index|[
name|idx
index|]
decl_stmt|;
name|removeKey
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
return|return
name|oldPtr
return|;
block|}
finally|finally
block|{
name|allowUnload
operator|=
literal|true
expr_stmt|;
block|}
block|}
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In removeValue"
argument_list|)
throw|;
block|}
block|}
comment|/**          * Add a key and the corresponding pointer to the node.          */
specifier|private
name|long
name|addValue
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|long
name|pointer
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|idx
init|=
name|searchKey
argument_list|(
name|value
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
return|return
name|getChildNode
argument_list|(
name|idx
argument_list|)
operator|.
name|addValue
argument_list|(
name|transaction
argument_list|,
name|value
argument_list|,
name|pointer
argument_list|)
return|;
case|case
name|LEAF
case|:
try|try
block|{
name|allowUnload
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
comment|// Value was found... Overwrite
specifier|final
name|long
name|oldPtr
init|=
name|ptrs
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|UpdateValueLoggable
name|loggable
init|=
operator|new
name|UpdateValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|idx
argument_list|,
name|value
argument_list|,
name|pointer
argument_list|,
name|oldPtr
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|loggable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|ptrs
index|[
name|idx
index|]
operator|=
name|pointer
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
return|return
name|oldPtr
return|;
block|}
else|else
block|{
comment|// Value was not found
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|InsertValueLoggable
name|loggable
init|=
operator|new
name|InsertValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|idx
argument_list|,
name|value
argument_list|,
name|idx
argument_list|,
name|pointer
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|loggable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|insertKey
argument_list|(
name|value
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|insertPointer
argument_list|(
name|pointer
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|adjustDataLen
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|mustSplit
argument_list|()
condition|)
block|{
comment|// we normally split a node at its median value.
comment|// however, if the inserted key is in the upper or lower
comment|// section of the node, we split directly at the key. this
comment|// has advantages if keys are inserted in ascending order
if|if
condition|(
name|splitFactor
operator|>
literal|0
operator|&&
name|idx
operator|>
operator|(
name|nKeys
operator|*
name|splitFactor
operator|)
operator|&&
name|value
operator|.
name|getLength
argument_list|()
operator|<
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|/
literal|4
condition|)
block|{
name|split
argument_list|(
name|transaction
argument_list|,
name|idx
operator|==
literal|0
condition|?
literal|1
else|:
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|split
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|allowUnload
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In addValue: "
operator|+
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|+
literal|"; "
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**          * Promote a key to the parent node. Called by {@link #split(Txn)}.          */
specifier|private
name|void
name|promoteValue
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|BTreeNode
name|rightNode
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|int
name|idx
init|=
name|searchKey
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
name|insertKey
argument_list|(
name|value
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|insertPointer
argument_list|(
name|rightNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rightNode
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rightNode
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|rightNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|saved
operator|=
literal|false
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|split
init|=
name|recalculateDataLen
argument_list|()
operator|>
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|split
condition|)
block|{
name|split
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|split
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|split
argument_list|(
name|transaction
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**          * Split the node.          *          * @param transaction the current transaction          */
specifier|private
name|void
name|split
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
name|int
name|pivot
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
specifier|final
name|Value
index|[]
name|leftVals
decl_stmt|;
specifier|final
name|Value
index|[]
name|rightVals
decl_stmt|;
specifier|final
name|long
index|[]
name|leftPtrs
decl_stmt|;
specifier|final
name|long
index|[]
name|rightPtrs
decl_stmt|;
name|Value
name|separator
decl_stmt|;
specifier|final
name|short
name|vc
init|=
name|pageHeader
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|pivot
operator|=
name|getPivot
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
comment|// Split the node into two nodes
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|leftVals
operator|=
operator|new
name|Value
index|[
name|pivot
index|]
expr_stmt|;
name|leftPtrs
operator|=
operator|new
name|long
index|[
name|leftVals
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|rightVals
operator|=
operator|new
name|Value
index|[
name|vc
operator|-
operator|(
name|pivot
operator|+
literal|1
operator|)
index|]
expr_stmt|;
name|rightPtrs
operator|=
operator|new
name|long
index|[
name|rightVals
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|leftVals
argument_list|,
literal|0
argument_list|,
name|leftVals
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
literal|0
argument_list|,
name|leftPtrs
argument_list|,
literal|0
argument_list|,
name|leftPtrs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|leftVals
operator|.
name|length
operator|+
literal|1
argument_list|,
name|rightVals
argument_list|,
literal|0
argument_list|,
name|rightVals
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
name|leftPtrs
operator|.
name|length
argument_list|,
name|rightPtrs
argument_list|,
literal|0
argument_list|,
name|rightPtrs
operator|.
name|length
argument_list|)
expr_stmt|;
name|separator
operator|=
name|keys
index|[
name|leftVals
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|t
init|=
operator|new
name|byte
index|[
name|prefix
operator|.
name|getLength
argument_list|()
operator|+
name|separator
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|separator
operator|.
name|data
argument_list|()
argument_list|,
name|separator
operator|.
name|start
argument_list|()
argument_list|,
name|t
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|,
name|separator
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|separator
operator|=
operator|new
name|Value
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LEAF
case|:
name|leftVals
operator|=
operator|new
name|Value
index|[
name|pivot
index|]
expr_stmt|;
name|leftPtrs
operator|=
operator|new
name|long
index|[
name|leftVals
operator|.
name|length
index|]
expr_stmt|;
name|rightVals
operator|=
operator|new
name|Value
index|[
name|vc
operator|-
name|pivot
index|]
expr_stmt|;
name|rightPtrs
operator|=
operator|new
name|long
index|[
name|rightVals
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|leftVals
argument_list|,
literal|0
argument_list|,
name|leftVals
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
literal|0
argument_list|,
name|leftPtrs
argument_list|,
literal|0
argument_list|,
name|leftPtrs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|leftVals
operator|.
name|length
argument_list|,
name|rightVals
argument_list|,
literal|0
argument_list|,
name|rightVals
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
name|leftPtrs
operator|.
name|length
argument_list|,
name|rightPtrs
argument_list|,
literal|0
argument_list|,
name|rightPtrs
operator|.
name|length
argument_list|)
expr_stmt|;
name|separator
operator|=
name|keys
index|[
name|leftVals
operator|.
name|length
index|]
expr_stmt|;
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In split"
argument_list|)
throw|;
block|}
comment|// Log the update of the current page
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|Loggable
name|log
init|=
operator|new
name|UpdatePageLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|prefix
argument_list|,
name|leftVals
argument_list|,
name|leftVals
operator|.
name|length
argument_list|,
name|leftPtrs
argument_list|,
name|leftPtrs
operator|.
name|length
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|setValues
argument_list|(
name|leftVals
argument_list|)
expr_stmt|;
name|setPointers
argument_list|(
name|leftPtrs
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
comment|// Promote the pivot to the parent branch
name|BTreeNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// This can only happen if this is the root
name|parent
operator|=
name|createBTreeNode
argument_list|(
name|transaction
argument_list|,
name|BRANCH
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Log change of the parent page
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|Loggable
name|log
init|=
operator|new
name|SetParentLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|parent
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
specifier|final
name|BTreeNode
name|rNode
init|=
name|createBTreeNode
argument_list|(
name|transaction
argument_list|,
name|pageHeader
operator|.
name|getStatus
argument_list|()
argument_list|,
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setValues
argument_list|(
name|rightVals
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setPointers
argument_list|(
name|rightPtrs
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setAsParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|rNode
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|rNode
operator|.
name|growPrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|Loggable
name|log
init|=
operator|new
name|SetPageLinkLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|pageHeader
operator|.
name|setNextPage
argument_list|(
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Log update of the right node
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|Loggable
name|log
init|=
operator|new
name|UpdatePageLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|rNode
operator|.
name|prefix
argument_list|,
name|rNode
operator|.
name|keys
argument_list|,
name|rNode
operator|.
name|nKeys
argument_list|,
name|rightPtrs
argument_list|,
name|rightPtrs
operator|.
name|length
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|rNode
argument_list|)
expr_stmt|;
block|}
name|rNode
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
name|parent
operator|.
name|prefix
operator|=
name|separator
expr_stmt|;
name|parent
operator|.
name|setValues
argument_list|(
operator|new
name|Value
index|[]
block|{
name|Value
operator|.
name|EMPTY_VALUE
block|}
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setPointers
argument_list|(
operator|new
name|long
index|[]
block|{
name|page
operator|.
name|getPageNum
argument_list|()
block|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|parent
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setRootNode
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|rNode
operator|.
name|mustSplit
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
operator|+
literal|" right node requires second split: "
operator|+
name|rNode
operator|.
name|getDataLen
argument_list|()
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|split
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|add
argument_list|(
name|rNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BTreeNode
name|rNode
init|=
name|createBTreeNode
argument_list|(
name|transaction
argument_list|,
name|pageHeader
operator|.
name|getStatus
argument_list|()
argument_list|,
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setValues
argument_list|(
name|rightVals
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setPointers
argument_list|(
name|rightPtrs
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setAsParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|rNode
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|rNode
operator|.
name|growPrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
name|Loggable
name|log
init|=
operator|new
name|SetPageLinkLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|pageHeader
operator|.
name|getNextPage
argument_list|()
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|log
operator|=
operator|new
name|SetPageLinkLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|rNode
operator|.
name|pageHeader
operator|.
name|setNextPage
argument_list|(
name|pageHeader
operator|.
name|getNextPage
argument_list|()
argument_list|)
expr_stmt|;
name|pageHeader
operator|.
name|setNextPage
argument_list|(
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Log update of the right node
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
operator|&&
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|LEAF
condition|)
block|{
specifier|final
name|Loggable
name|log
init|=
operator|new
name|UpdatePageLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|rNode
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|rNode
operator|.
name|prefix
argument_list|,
name|rNode
operator|.
name|keys
argument_list|,
name|rNode
operator|.
name|nKeys
argument_list|,
name|rightPtrs
argument_list|,
name|rightPtrs
operator|.
name|length
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|rNode
argument_list|)
expr_stmt|;
block|}
name|rNode
operator|.
name|recalculateDataLen
argument_list|()
expr_stmt|;
if|if
condition|(
name|rNode
operator|.
name|mustSplit
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
operator|+
literal|" right node requires second split: "
operator|+
name|rNode
operator|.
name|getDataLen
argument_list|()
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|split
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|add
argument_list|(
name|rNode
argument_list|)
expr_stmt|;
name|parent
operator|.
name|promoteValue
argument_list|(
name|transaction
argument_list|,
name|separator
argument_list|,
name|rNode
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|mustSplit
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
operator|+
literal|"left node requires second split: "
operator|+
name|getDataLen
argument_list|()
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Set the parent-link in all child nodes to point to this node */
specifier|private
name|void
name|setAsParent
parameter_list|()
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BTreeNode
name|node
init|=
name|getBTreeNode
argument_list|(
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Locate the given value in the keys and return the          * associated pointer.          */
specifier|private
name|long
name|findValue
parameter_list|(
specifier|final
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|int
name|idx
init|=
name|searchKey
argument_list|(
name|value
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
specifier|final
name|BTreeNode
name|child
init|=
name|getChildNode
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Unexpected "
operator|+
name|idx
operator|+
literal|", "
operator|+
name|page
operator|.
name|getPageNum
argument_list|()
operator|+
literal|": value '"
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|"' doesn't exist"
argument_list|)
throw|;
block|}
return|return
name|child
operator|.
name|findValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|LEAF
case|:
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
name|KEY_NOT_FOUND
return|;
block|}
else|else
block|{
return|return
name|ptrs
index|[
name|idx
index|]
return|;
block|}
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In findValue"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//TODO : add something here ! -pb
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|treeStatistics
parameter_list|(
specifier|final
name|TreeMetrics
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|addPage
argument_list|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BTreeNode
name|child
init|=
name|getChildNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|treeStatistics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Prints out a debug view of the node to the given writer.          */
specifier|private
name|void
name|dump
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
comment|//if (pageHeader.getStatus() == LEAF)
comment|//    return;
if|if
condition|(
name|page
operator|.
name|getPageNum
argument_list|()
operator|==
name|fileHeader
operator|.
name|getRootPage
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"ROOT: "
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|?
literal|"BRANCH: "
else|:
literal|"LEAF: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|saved
condition|?
literal|"SAVED: "
else|:
literal|"DIRTY: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"PREFIX: "
argument_list|)
expr_stmt|;
name|dumpValue
argument_list|(
name|writer
argument_list|,
name|prefix
argument_list|,
name|pageHeader
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"NEXT: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|pageHeader
operator|.
name|getNextPage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|dumpValue
argument_list|(
name|writer
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|pageHeader
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"-----------------------------------------------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
operator|+
literal|" POINTERS: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|ptrs
index|[
name|i
index|]
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"-----------------------------------------------------------------------------------------\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BTreeNode
name|child
init|=
name|getChildNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Search for keys matching the given {@link IndexQuery} and          * report the to the specified {@link BTreeCallback}.          *           * @param query          * @param callback          * @throws IOException          * @throws BTreeException          * @throws TerminatedException          */
specifier|private
name|void
name|query
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|ANY
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
condition|)
block|{
specifier|final
name|Value
index|[]
name|qvals
init|=
name|query
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|int
name|leftIdx
init|=
name|searchKey
argument_list|(
name|qvals
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|rightIdx
init|=
name|qvals
operator|.
name|length
operator|>
literal|1
condition|?
name|searchKey
argument_list|(
name|qvals
index|[
name|qvals
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
else|:
name|leftIdx
decl_stmt|;
specifier|final
name|boolean
name|pos
init|=
name|query
operator|.
name|getOperator
argument_list|()
operator|>=
literal|0
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|leftIdx
operator|=
name|leftIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
else|:
name|leftIdx
operator|+
literal|1
expr_stmt|;
name|rightIdx
operator|=
name|rightIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
else|:
name|rightIdx
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|BWX
case|:
case|case
name|IndexQuery
operator|.
name|NBWX
case|:
case|case
name|IndexQuery
operator|.
name|BW
case|:
case|case
name|IndexQuery
operator|.
name|NBW
case|:
case|case
name|IndexQuery
operator|.
name|IN
case|:
case|case
name|IndexQuery
operator|.
name|NIN
case|:
case|case
name|IndexQuery
operator|.
name|TRUNC_RIGHT
case|:
case|case
name|IndexQuery
operator|.
name|RANGE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
operator|==
name|pos
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
operator|||
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|RANGE
condition|)
block|{
break|break;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
name|getChildNode
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|EQ
case|:
name|getChildNode
argument_list|(
name|leftIdx
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|LT
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
case|case
name|IndexQuery
operator|.
name|GT
case|:
name|getChildNode
argument_list|(
name|leftIdx
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default :
comment|// If it's not implemented, we walk the tree
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
break|break;
case|case
name|LEAF
case|:
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|EQ
case|:
if|if
condition|(
name|leftIdx
operator|>=
literal|0
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|leftIdx
index|]
argument_list|,
name|ptrs
index|[
name|leftIdx
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|leftIdx
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|scanNextPage
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|BWX
case|:
case|case
name|IndexQuery
operator|.
name|NBWX
case|:
case|case
name|IndexQuery
operator|.
name|BW
case|:
case|case
name|IndexQuery
operator|.
name|NBW
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|||
name|i
operator|>=
name|rightIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|RANGE
case|:
case|case
name|IndexQuery
operator|.
name|TRUNC_RIGHT
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|leftIdx
init|;
name|i
operator|<
name|rightIdx
operator|&&
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rightIdx
operator|>=
name|nPtrs
condition|)
block|{
name|scanNextPage
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|IN
case|:
case|case
name|IndexQuery
operator|.
name|NIN
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|pos
operator|||
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|LT
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
case|case
name|IndexQuery
operator|.
name|GT
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|leftIdx
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|scanNextPage
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
condition|)
block|{
break|break;
block|}
block|}
block|}
break|break;
default|default :
comment|// If it's not implemented, it falls right through
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No Query - Just Walk The Tree
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LEAF
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
operator|||
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**          * Search for keys matching the given {@link IndexQuery} and          * report the to the specified {@link BTreeCallback}. This specialized          * method only considers keys whose value starts with the specified keyPrefix.          *           * @param query          * @param callback          * @throws IOException          * @throws BTreeException          * @throws TerminatedException          */
specifier|private
name|void
name|query
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|Value
name|keyPrefix
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|ANY
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
condition|)
block|{
specifier|final
name|Value
index|[]
name|qvals
init|=
name|query
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|int
name|leftIdx
init|=
name|searchKey
argument_list|(
name|qvals
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|pfxIdx
init|=
name|searchKey
argument_list|(
name|keyPrefix
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|leftIdx
operator|=
name|leftIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
else|:
name|leftIdx
operator|+
literal|1
expr_stmt|;
name|pfxIdx
operator|=
name|pfxIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|pfxIdx
operator|+
literal|1
operator|)
else|:
name|pfxIdx
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|EQ
case|:
name|getChildNode
argument_list|(
name|leftIdx
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
name|getChildNode
argument_list|(
name|pfxIdx
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|LT
case|:
for|for
control|(
name|int
name|i
init|=
name|pfxIdx
init|;
name|i
operator|<=
name|leftIdx
operator|&&
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
for|for
control|(
name|int
name|i
init|=
name|pfxIdx
init|;
name|i
operator|<=
name|leftIdx
operator|&&
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
case|case
name|IndexQuery
operator|.
name|GT
case|:
name|getChildNode
argument_list|(
name|leftIdx
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|LEAF
case|:
name|pfxIdx
operator|=
name|pfxIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|pfxIdx
operator|+
literal|1
operator|)
else|:
name|pfxIdx
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|EQ
case|:
if|if
condition|(
name|leftIdx
operator|>=
literal|0
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|leftIdx
index|]
argument_list|,
name|ptrs
index|[
name|leftIdx
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
for|for
control|(
name|int
name|i
init|=
name|pfxIdx
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|comparePrefix
argument_list|(
name|keyPrefix
argument_list|)
operator|>
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|i
operator|!=
name|leftIdx
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|scanNextPage
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|IndexQuery
operator|.
name|LT
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|pfxIdx
init|;
name|i
operator|<
name|leftIdx
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|pfxIdx
init|;
name|i
operator|<=
name|leftIdx
operator|&&
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GT
case|:
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|leftIdx
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|comparePrefix
argument_list|(
name|keyPrefix
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|scanNextPage
argument_list|(
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No Query - Just Walk The Tree
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LEAF
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
operator|||
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|scanRaw
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|TerminatedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|scanNextPage
parameter_list|(
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|Value
name|keyPrefix
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|TerminatedException
block|{
specifier|final
name|long
name|next
init|=
name|pageHeader
operator|.
name|getNextPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
name|Page
operator|.
name|NO_PAGE
condition|)
block|{
specifier|final
name|BTreeNode
name|nextPage
init|=
name|getBTreeNode
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|scanSequential
argument_list|(
name|nextPage
argument_list|,
name|query
argument_list|,
name|keyPrefix
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Search for keys matching the given {@link IndexQuery} and          * remove them from the node. Every match is reported           * to the specified {@link BTreeCallback}.          *           * @param query          * @param callback          * @throws IOException          * @throws BTreeException          * @throws TerminatedException          */
specifier|private
name|void
name|remove
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|IndexQuery
name|query
parameter_list|,
specifier|final
name|BTreeCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|ANY
operator|&&
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
condition|)
block|{
specifier|final
name|Value
index|[]
name|qvals
init|=
name|query
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|int
name|leftIdx
init|=
name|searchKey
argument_list|(
name|qvals
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|rightIdx
init|=
name|qvals
operator|.
name|length
operator|>
literal|1
condition|?
name|searchKey
argument_list|(
name|qvals
index|[
name|qvals
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
else|:
name|leftIdx
decl_stmt|;
specifier|final
name|boolean
name|pos
init|=
name|query
operator|.
name|getOperator
argument_list|()
operator|>=
literal|0
decl_stmt|;
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
name|leftIdx
operator|=
name|leftIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
else|:
name|leftIdx
operator|+
literal|1
expr_stmt|;
name|rightIdx
operator|=
name|rightIdx
operator|<
literal|0
condition|?
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
else|:
name|rightIdx
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|BWX
case|:
case|case
name|IndexQuery
operator|.
name|NBWX
case|:
case|case
name|IndexQuery
operator|.
name|BW
case|:
case|case
name|IndexQuery
operator|.
name|NBW
case|:
case|case
name|IndexQuery
operator|.
name|IN
case|:
case|case
name|IndexQuery
operator|.
name|NIN
case|:
case|case
name|IndexQuery
operator|.
name|TRUNC_RIGHT
case|:
case|case
name|IndexQuery
operator|.
name|RANGE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
operator|==
name|pos
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
condition|)
block|{
break|break;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|EQ
case|:
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|pos
operator|||
name|i
operator|==
name|leftIdx
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
case|case
name|IndexQuery
operator|.
name|LT
case|:
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GT
case|:
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
condition|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default :
comment|// If it's not implemented, we walk the tree
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
name|getChildNode
argument_list|(
name|i
argument_list|)
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
break|break;
case|case
name|LEAF
case|:
try|try
block|{
name|allowUnload
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|query
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|IndexQuery
operator|.
name|EQ
case|:
if|if
condition|(
name|leftIdx
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|leftIdx
argument_list|,
name|keys
index|[
name|leftIdx
index|]
argument_list|,
name|ptrs
index|[
name|leftIdx
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|leftIdx
index|]
argument_list|,
name|ptrs
index|[
name|leftIdx
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|leftIdx
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|leftIdx
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|NEQ
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|leftIdx
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|BWX
case|:
case|case
name|IndexQuery
operator|.
name|NBWX
case|:
case|case
name|IndexQuery
operator|.
name|BW
case|:
case|case
name|IndexQuery
operator|.
name|NBW
case|:
case|case
name|IndexQuery
operator|.
name|RANGE
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|||
name|i
operator|>=
name|rightIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|TRUNC_RIGHT
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|leftIdx
init|;
name|i
operator|<
name|rightIdx
operator|&&
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rightIdx
operator|>=
name|nPtrs
condition|)
block|{
name|removeSequential
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|IN
case|:
case|case
name|IndexQuery
operator|.
name|NIN
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|rightIdx
operator|<
literal|0
condition|)
block|{
name|rightIdx
operator|=
operator|-
operator|(
name|rightIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|pos
operator|||
operator|(
name|i
operator|>=
name|leftIdx
operator|&&
name|i
operator|<=
name|rightIdx
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|LT
case|:
case|case
name|IndexQuery
operator|.
name|GEQ
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|IndexQuery
operator|.
name|GT
case|:
case|case
name|IndexQuery
operator|.
name|LEQ
case|:
if|if
condition|(
name|leftIdx
operator|<
literal|0
condition|)
block|{
name|leftIdx
operator|=
operator|-
operator|(
name|leftIdx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|pos
operator|&&
operator|(
name|i
operator|>=
name|leftIdx
operator|)
operator|)
operator|||
operator|(
operator|!
name|pos
operator|&&
operator|(
name|i
operator|<=
name|leftIdx
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
if|else if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|==
name|IndexQuery
operator|.
name|TRUNC_RIGHT
condition|)
block|{
break|break;
block|}
block|}
block|}
break|break;
default|default :
comment|// If it's not implemented, it falls right through
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
finally|finally
block|{
name|allowUnload
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No Query - Just Walk The Tree
switch|switch
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|BRANCH
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPtrs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
break|break;
case|case
name|LEAF
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|query
operator|.
name|getOperator
argument_list|()
operator|!=
name|IndexQuery
operator|.
name|TRUNC_LEFT
operator|||
name|query
operator|.
name|testValue
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
specifier|final
name|RemoveValueLoggable
name|log
init|=
operator|new
name|RemoveValueLoggable
argument_list|(
name|transaction
argument_list|,
name|fileId
argument_list|,
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|i
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|writeToLog
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|indexInfo
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|removeKey
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removePointer
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|recalculateDataLen
argument_list|()
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
break|break;
default|default :
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"Invalid Page Type In query"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|growPrefix
parameter_list|()
block|{
if|if
condition|(
name|nKeys
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nKeys
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|keys
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|newPrefix
init|=
operator|new
name|byte
index|[
name|prefix
operator|.
name|getLength
argument_list|()
operator|+
name|keys
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
argument_list|,
name|newPrefix
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
index|[
literal|0
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|keys
index|[
literal|0
index|]
operator|.
name|start
argument_list|()
argument_list|,
name|newPrefix
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|,
name|keys
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
operator|new
name|Value
argument_list|(
name|newPrefix
argument_list|)
expr_stmt|;
name|keys
index|[
literal|0
index|]
operator|=
name|Value
operator|.
name|EMPTY_VALUE
expr_stmt|;
block|}
return|return;
block|}
comment|//int idx;
name|int
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|Value
name|first
init|=
name|keys
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Value
name|value
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|idx
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|.
name|compareTo
argument_list|(
name|first
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
name|max
condition|)
block|{
name|max
operator|=
name|idx
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|addChars
init|=
name|max
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|addChars
operator|>
literal|0
condition|)
block|{
comment|// create new prefix with the additional characters
specifier|final
name|byte
index|[]
name|pdata
init|=
operator|new
name|byte
index|[
name|prefix
operator|.
name|getLength
argument_list|()
operator|+
name|addChars
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
argument_list|,
name|pdata
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
index|[
literal|0
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|keys
index|[
literal|0
index|]
operator|.
name|start
argument_list|()
argument_list|,
name|pdata
argument_list|,
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|,
name|addChars
argument_list|)
expr_stmt|;
name|prefix
operator|=
operator|new
name|Value
argument_list|(
name|pdata
argument_list|)
expr_stmt|;
comment|// shrink the keys by addChars characters
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Value
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|Value
argument_list|(
name|key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|start
argument_list|()
operator|+
name|addChars
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
operator|-
name|addChars
argument_list|)
expr_stmt|;
block|}
name|recalculateDataLen
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shrinkPrefix
parameter_list|(
specifier|final
name|int
name|newLen
parameter_list|)
block|{
specifier|final
name|int
name|diff
init|=
name|prefix
operator|.
name|getLength
argument_list|()
operator|-
name|newLen
decl_stmt|;
name|Value
index|[]
name|nv
init|=
operator|new
name|Value
index|[
name|nKeys
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKeys
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Value
name|value
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|ndata
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getLength
argument_list|()
operator|+
name|diff
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
operator|+
name|newLen
argument_list|,
name|ndata
argument_list|,
literal|0
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
argument_list|,
name|ndata
argument_list|,
name|diff
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nv
index|[
name|i
index|]
operator|=
operator|new
name|Value
argument_list|(
name|ndata
argument_list|)
expr_stmt|;
block|}
name|keys
operator|=
name|nv
expr_stmt|;
name|prefix
operator|=
operator|new
name|Value
argument_list|(
name|prefix
operator|.
name|data
argument_list|()
argument_list|,
name|prefix
operator|.
name|start
argument_list|()
argument_list|,
name|newLen
argument_list|)
expr_stmt|;
block|}
comment|/**          * Insert a key into the array of keys.          * @param val          * @param idx          */
specifier|private
name|void
name|insertKey
parameter_list|(
name|Value
name|val
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
comment|// in a leaf page we might have to adjust the prefix
if|if
condition|(
name|nKeys
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
name|val
expr_stmt|;
name|val
operator|=
name|Value
operator|.
name|EMPTY_VALUE
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|pfxLen
init|=
name|val
operator|.
name|checkPrefix
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfxLen
operator|<
name|prefix
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|shrinkPrefix
argument_list|(
name|pfxLen
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
operator|new
name|Value
argument_list|(
name|val
operator|.
name|data
argument_list|()
argument_list|,
name|val
operator|.
name|start
argument_list|()
operator|+
name|pfxLen
argument_list|,
name|val
operator|.
name|getLength
argument_list|()
operator|-
name|pfxLen
argument_list|)
expr_stmt|;
block|}
block|}
name|resizeKeys
argument_list|(
name|nKeys
operator|+
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|idx
argument_list|,
name|keys
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|nKeys
operator|-
name|idx
argument_list|)
expr_stmt|;
name|keys
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
name|pageHeader
operator|.
name|setValueCount
argument_list|(
operator|(
name|short
operator|)
operator|++
name|nKeys
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Remove a key from the array of keys.          * @param idx          */
specifier|private
name|void
name|removeKey
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|keys
argument_list|,
name|idx
argument_list|,
name|nKeys
operator|-
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"keys: "
operator|+
name|nKeys
operator|+
literal|" idx: "
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
name|pageHeader
operator|.
name|setValueCount
argument_list|(
operator|(
name|short
operator|)
operator|--
name|nKeys
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Insert a pointer into the array of pointers.          *           * @param ptr          * @param idx          */
specifier|private
name|void
name|insertPointer
parameter_list|(
specifier|final
name|long
name|ptr
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
name|resizePtrs
argument_list|(
name|nPtrs
operator|+
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
name|idx
argument_list|,
name|ptrs
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|nPtrs
operator|-
name|idx
argument_list|)
expr_stmt|;
name|ptrs
index|[
name|idx
index|]
operator|=
name|ptr
expr_stmt|;
name|nPtrs
operator|++
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Remove a pointer from the array of pointers.          * @param idx          */
specifier|private
name|void
name|removePointer
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|ptrs
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|ptrs
argument_list|,
name|idx
argument_list|,
name|nPtrs
operator|-
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nPtrs
operator|--
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/**          * Search for the given key in the keys of this node.          */
specifier|private
name|int
name|searchKey
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
if|if
condition|(
name|pageHeader
operator|.
name|getStatus
argument_list|()
operator|==
name|BRANCH
operator|&&
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// if this is a leaf page, check the common prefix first
if|if
condition|(
name|key
operator|.
name|getLength
argument_list|()
operator|<
name|prefix
operator|.
name|getLength
argument_list|()
condition|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|prefix
argument_list|)
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
operator|-
operator|(
name|nKeys
operator|+
literal|1
operator|)
return|;
block|}
specifier|final
name|int
name|pfxCmp
init|=
name|key
operator|.
name|comparePrefix
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfxCmp
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|pfxCmp
operator|>
literal|0
condition|)
block|{
return|return
operator|-
operator|(
name|nKeys
operator|+
literal|1
operator|)
return|;
block|}
name|key
operator|=
operator|new
name|Value
argument_list|(
name|key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|start
argument_list|()
operator|+
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|nKeys
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
specifier|final
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>
literal|1
decl_stmt|;
specifier|final
name|Value
name|midVal
init|=
name|keys
index|[
name|mid
index|]
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|midVal
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|mid
return|;
comment|// key found
block|}
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
comment|// key not found.
block|}
specifier|private
name|void
name|resizeKeys
parameter_list|(
specifier|final
name|int
name|minCapacity
parameter_list|)
block|{
specifier|final
name|int
name|oldCapacity
init|=
name|keys
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|minCapacity
operator|>
name|oldCapacity
condition|)
block|{
specifier|final
name|Value
name|oldData
index|[]
init|=
name|keys
decl_stmt|;
name|int
name|newCapacity
init|=
operator|(
name|oldCapacity
operator|*
literal|3
operator|)
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|<
name|minCapacity
condition|)
block|{
name|newCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
name|keys
operator|=
operator|new
name|Value
index|[
name|newCapacity
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldData
argument_list|,
literal|0
argument_list|,
name|keys
argument_list|,
literal|0
argument_list|,
name|nKeys
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resizePtrs
parameter_list|(
specifier|final
name|int
name|minCapacity
parameter_list|)
block|{
specifier|final
name|int
name|oldCapacity
init|=
name|ptrs
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|minCapacity
operator|>
name|oldCapacity
condition|)
block|{
specifier|final
name|long
index|[]
name|oldData
init|=
name|ptrs
decl_stmt|;
name|int
name|newCapacity
init|=
operator|(
name|oldCapacity
operator|*
literal|3
operator|)
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|<
name|minCapacity
condition|)
block|{
name|newCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
name|ptrs
operator|=
operator|new
name|long
index|[
name|newCapacity
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldData
argument_list|,
literal|0
argument_list|,
name|ptrs
argument_list|,
literal|0
argument_list|,
name|nPtrs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
specifier|final
name|int
name|pageSize
parameter_list|)
block|{
return|return
operator|new
name|BTreeFileHeader
argument_list|(
name|pageSize
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PageHeader
name|createPageHeader
parameter_list|()
block|{
return|return
operator|new
name|BTreePageHeader
argument_list|()
return|;
block|}
specifier|public
name|BufferStats
name|getIndexBufferStats
parameter_list|()
block|{
return|return
operator|new
name|BufferStats
argument_list|(
name|cache
operator|.
name|getBuffers
argument_list|()
argument_list|,
name|cache
operator|.
name|getUsedBuffers
argument_list|()
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|,
name|cache
operator|.
name|getFails
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
specifier|final
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getPercentInstance
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|getFile
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" INDEX "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Buffers occupation : "
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|getBuffers
argument_list|()
operator|==
literal|0
operator|&&
name|cache
operator|.
name|getUsedBuffers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"N/A"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getUsedBuffers
argument_list|()
operator|/
operator|(
name|float
operator|)
name|cache
operator|.
name|getBuffers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|cache
operator|.
name|getUsedBuffers
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" out of "
argument_list|)
operator|.
name|append
argument_list|(
name|cache
operator|.
name|getBuffers
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" Cache efficiency : "
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|getHits
argument_list|()
operator|==
literal|0
operator|&&
name|cache
operator|.
name|getFails
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"N/A"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getHits
argument_list|()
operator|/
operator|(
name|float
operator|)
operator|(
name|cache
operator|.
name|getFails
argument_list|()
operator|+
name|cache
operator|.
name|getHits
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOGSTATS
operator|.
name|info
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
class|class
name|BTreeFileHeader
extends|extends
name|FileHeader
block|{
specifier|private
name|long
name|rootPage
init|=
literal|0
decl_stmt|;
specifier|private
name|short
name|fixedLen
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|BTreeFileHeader
parameter_list|(
specifier|final
name|long
name|pageCount
parameter_list|,
specifier|final
name|int
name|pageSize
parameter_list|)
block|{
name|super
argument_list|(
name|pageCount
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BTreeFileHeader
parameter_list|(
specifier|final
name|int
name|pageSize
parameter_list|)
block|{
name|super
argument_list|(
literal|1024
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|offset
init|=
name|super
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|rootPage
operator|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
name|fixedLen
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|offset
init|=
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|rootPage
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|fixedLen
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
return|return
name|offset
return|;
block|}
comment|/**          *  Set the root page of the storage tree          *          *@param  rootPage The new rootPage value          */
specifier|public
specifier|final
name|void
name|setRootPage
parameter_list|(
specifier|final
name|long
name|rootPage
parameter_list|)
block|{
name|this
operator|.
name|rootPage
operator|=
name|rootPage
expr_stmt|;
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Get the root page of the storage tree          *          *@return The rootPage value          */
specifier|public
specifier|final
name|long
name|getRootPage
parameter_list|()
block|{
return|return
name|rootPage
return|;
block|}
specifier|public
name|short
name|getFixedKeyLen
parameter_list|()
block|{
return|return
name|fixedLen
return|;
block|}
specifier|public
name|void
name|setFixedKeyLen
parameter_list|(
name|short
name|keyLen
parameter_list|)
block|{
name|this
operator|.
name|fixedLen
operator|=
name|keyLen
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxKeySize
parameter_list|()
block|{
return|return
operator|(
name|getWorkSize
argument_list|()
operator|/
literal|2
operator|)
operator|-
name|MIN_SPACE_PER_KEY
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|BTreePageHeader
extends|extends
name|PageHeader
block|{
specifier|private
name|short
name|valueCount
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|parentPage
init|=
name|Page
operator|.
name|NO_PAGE
decl_stmt|;
specifier|public
name|BTreePageHeader
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BTreePageHeader
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|offset
operator|=
name|super
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|parentPage
operator|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
name|valueCount
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|offset
operator|=
name|super
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|parentPage
argument_list|,
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|valueCount
argument_list|,
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
literal|2
return|;
block|}
specifier|public
specifier|final
name|void
name|setValueCount
parameter_list|(
specifier|final
name|short
name|valueCount
parameter_list|)
block|{
name|this
operator|.
name|valueCount
operator|=
name|valueCount
expr_stmt|;
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**          *  The number of values stored by this page          *          *@return    The valueCount value          */
specifier|public
specifier|final
name|short
name|getValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
comment|/**          *  The number of pointers stored by this page          *          *@return    The pointerCount value          */
specifier|public
specifier|final
name|short
name|getPointerCount
parameter_list|()
block|{
if|if
condition|(
name|getStatus
argument_list|()
operator|==
name|BRANCH
condition|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
name|valueCount
operator|+
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
name|valueCount
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

