begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|RangeIndexSpec
block|{
comment|/* 	 * Constants to define the type of the index. 	 * These constants are used to encode the 	 * index type in the storage pointer. 	 */
comment|/** No index specified **/
specifier|public
specifier|static
specifier|final
name|int
name|NO_INDEX
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|INTEGER
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FLOAT
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BOOLEAN
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DATE_TIME
init|=
literal|6
decl_stmt|;
comment|/** 	 * Indicates that the node has a qname-value index defined 	 * on it. 	 */
specifier|public
specifier|static
specifier|final
name|int
name|QNAME_INDEX
init|=
literal|0x10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TEXT_MIXED_CONTENT
init|=
literal|0x20
decl_stmt|;
comment|/** 	 * Bit is set if the node has mixed content. 	 */
specifier|public
specifier|static
specifier|final
name|int
name|MIXED_CONTENT
init|=
literal|0x40
decl_stmt|;
comment|/** 	 * Bit is set if the node is fulltext indexed. 	 */
specifier|public
specifier|static
specifier|final
name|int
name|TEXT
init|=
literal|0x80
decl_stmt|;
comment|/** 	 * Bit mask to extract the type of the range index. 	 */
specifier|public
specifier|static
specifier|final
name|int
name|RANGE_INDEX_MASK
init|=
literal|0x0F
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HAS_VALUE_INDEX_MASK
init|=
literal|0x1F
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HAS_VALUE_OR_MIXED_INDEX_MASK
init|=
literal|0x3F
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|xpathTypes
init|=
block|{
name|Type
operator|.
name|ITEM
block|,
name|Type
operator|.
name|STRING
block|,
name|Type
operator|.
name|INTEGER
block|,
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|BOOLEAN
block|,
name|Type
operator|.
name|DATE_TIME
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
index|[]
name|indexTypes
init|=
operator|new
name|int
index|[
literal|64
index|]
decl_stmt|;
static|static
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|indexTypes
argument_list|,
name|NO_INDEX
argument_list|)
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|STRING
index|]
operator|=
name|STRING
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|INTEGER
index|]
operator|=
name|INTEGER
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|DOUBLE
index|]
operator|=
name|DOUBLE
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|FLOAT
index|]
operator|=
name|FLOAT
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|BOOLEAN
index|]
operator|=
name|BOOLEAN
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|DATE_TIME
index|]
operator|=
name|DATE_TIME
expr_stmt|;
block|}
comment|/** 	 * For a given index type bit, return the corresponding 	 * atomic XPath type (as defined in {@link org.exist.xquery.value.Type}). 	 *  	 * @param type a bit set indicating the type 	 * @return atomic XPath type 	 */
specifier|public
specifier|static
specifier|final
name|int
name|indexTypeToXPath
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|xpathTypes
index|[
name|type
operator|&
name|RANGE_INDEX_MASK
index|]
return|;
block|}
comment|/** 	 * Returns true if the index type specifier has the fulltext index flag 	 * set. 	 *  	 * @param type a bit set indicating the type 	 * @return true if the index type specifier has the fulltext index flag set. 	 */
specifier|public
specifier|static
specifier|final
name|boolean
name|hasFulltextIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|TEXT
operator|)
operator|!=
literal|0
return|;
block|}
comment|/** 	 * Returns true if the index type specifier has the mixed content 	 * flag set. 	 *  	 * @param type a bit set indicating the type 	 * @return true if the index type specifier has the mixed content 	 * flag set. 	 */
specifier|public
specifier|static
specifier|final
name|boolean
name|hasMixedContent
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|MIXED_CONTENT
operator|)
operator|!=
literal|0
return|;
block|}
comment|/** 	 * Returns the index type bit mask corresponding to a given 	 * XPath type (as defined in {@link org.exist.xquery.value.Type}). 	 *  	 * @param type XPath type 	 * @return the index type bit mask 	 */
specifier|public
specifier|static
specifier|final
name|int
name|xpathTypeToIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|indexTypes
index|[
name|type
index|]
return|;
block|}
comment|/** 	 * Returns true if the index type bit mask has a range index 	 * bit set. 	 *  	 * @param type a bit set indicating the type 	 * @return True if the index type bit mask has a range index bit set. 	 */
specifier|public
specifier|static
specifier|final
name|boolean
name|hasRangeIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|RANGE_INDEX_MASK
operator|)
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
specifier|final
name|boolean
name|hasQNameIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|QNAME_INDEX
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|static
specifier|final
name|boolean
name|hasQNameOrValueIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|HAS_VALUE_OR_MIXED_INDEX_MASK
operator|)
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
specifier|final
name|boolean
name|hasMixedTextIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|TEXT_MIXED_CONTENT
operator|)
operator|>
literal|0
return|;
block|}
specifier|protected
name|int
name|type
decl_stmt|;
specifier|protected
name|RangeIndexSpec
parameter_list|()
block|{
block|}
comment|/** 	 * Returns the XPath type code for this index 	 * (as defined in {@link org.exist.xquery.value.Type}). 	 *  	 * @return XPath type code 	 */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/** 	 * Returns the index type for this index, corresponding 	 * to the constants defined in this class. 	 *  	 * @return index type 	 */
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
return|return
name|indexTypes
index|[
name|type
index|]
return|;
block|}
comment|/**      * Returns the QName for which this index is created. Might be      * null if it is a generic index.      *       * @return      */
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

