begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Meier (wolfgang@exist-db.org)  *   * This library is free software; you can redistribute it and/or modify it under  * the terms of the GNU Library General Public License as published by the Free  * Software Foundation; either version 2 of the License, or (at your option) any  * later version.  *   * This library is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more  * details.  *   * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software Foundation, Inc.,  * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSetHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteArrayInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ProgressIndicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/** The indexing occurs in this class. That is, during the loading of a document  * into the database, the process of associating a long gid with each element,  * and the subsequent storing of the {@link NodeProxy} on disk.  */
end_comment

begin_class
specifier|public
class|class
name|NativeElementIndex
extends|extends
name|ElementIndex
implements|implements
name|ContentLoadingObserver
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NativeElementIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** The datastore for this node index */
specifier|protected
name|BFile
name|dbNodes
decl_stmt|;
comment|/** Work output Stream taht should be cleared before every use */
specifier|private
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
specifier|public
name|NativeElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|BFile
name|dbNodes
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbNodes
operator|=
name|dbNodes
expr_stmt|;
block|}
comment|/** Store the given node in the node index.      * @param qname The node's identity      * @param proxy The node's proxy      */
specifier|public
name|void
name|addNode
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|p
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id and proxy id differ !"
argument_list|)
throw|;
block|}
comment|//Is this qname already pending ?
name|ArrayList
name|buf
init|=
operator|(
name|ArrayList
operator|)
name|pending
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
comment|//Create a node list
name|buf
operator|=
operator|new
name|ArrayList
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|//Add node's proxy to the list
name|buf
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|storeAttribute
parameter_list|(
name|AttrImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|boolean
name|fullTextIndexSwitch
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|storeText
parameter_list|(
name|TextImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|boolean
name|fullTextIndexSwitch
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|ElementImpl
name|impl
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|boolean
name|index
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|int
name|xpathType
parameter_list|,
name|ElementImpl
name|node
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|removeElement
parameter_list|(
name|ElementImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.ContentLoadingObserver#sync()      */
specifier|public
name|void
name|sync
parameter_list|()
block|{
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|dbNodes
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.ContentLoadingObserver#flush()      */
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|//TODO : return if doc == null? -pb
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
specifier|final
name|ProgressIndicator
name|progress
init|=
operator|new
name|ProgressIndicator
argument_list|(
name|pending
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|short
name|collectionId
init|=
name|this
operator|.
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pending
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//TODO : NativeValueIndex uses LongLinkedLists -pb
name|ArrayList
name|proxies
init|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|proxies
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Don't forget this one
name|FastQSort
operator|.
name|sort
argument_list|(
name|proxies
argument_list|,
literal|0
argument_list|,
name|gidsCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//Compute the GIDs list
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|proxies
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id and proxy id differ !"
argument_list|)
throw|;
block|}
name|long
name|delta
init|=
name|proxy
operator|.
name|getGID
argument_list|()
operator|-
name|previousGID
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|StorageAddress
operator|.
name|write
argument_list|(
name|proxy
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|previousGID
operator|=
name|proxy
operator|.
name|getGID
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//Store the data
specifier|final
name|Value
name|key
init|=
name|computeKey
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbNodes
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for node '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error on '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Return without clearing the pending entries
return|return;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|progress
operator|.
name|setValue
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|progress
operator|.
name|changed
argument_list|()
condition|)
block|{
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO : flush dbNodes ?
name|progress
operator|.
name|finish
argument_list|()
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|//TODO : return if doc == null? -pb
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
specifier|final
name|short
name|collectionId
init|=
name|this
operator|.
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pending
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|List
name|storedProxies
init|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|List
name|newProxies
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Value
name|key
init|=
name|computeKey
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
name|dbNodes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//Does the node already exist in the index ?
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|//Add its data to the new list
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|proxyCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// append them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|proxyCount
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|//TODO : data will be saved although os is probably corrupted ! -pb
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// data are related to our document:
comment|// feed the new list with the GIDs
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|proxyCount
condition|;
name|j
operator|++
control|)
block|{
name|long
name|delta
init|=
name|is
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|storedGID
init|=
name|previousGID
operator|+
name|delta
decl_stmt|;
name|long
name|address
init|=
name|StorageAddress
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
comment|// add the node to the new list if it is not
comment|// in the list of removed nodes
if|if
condition|(
operator|!
name|containsNode
argument_list|(
name|storedProxies
argument_list|,
name|storedGID
argument_list|)
condition|)
block|{
name|newProxies
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|storedGID
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previousGID
operator|=
name|storedGID
expr_stmt|;
block|}
block|}
block|}
comment|//append the data from the new list
if|if
condition|(
name|newProxies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|proxyCount
init|=
name|newProxies
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Don't forget this one
name|FastQSort
operator|.
name|sort
argument_list|(
name|newProxies
argument_list|,
literal|0
argument_list|,
name|proxyCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|proxyCount
argument_list|)
expr_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|proxyCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|newProxies
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id and proxy id differ !"
argument_list|)
throw|;
block|}
name|long
name|delta
init|=
name|proxy
operator|.
name|getGID
argument_list|()
operator|-
name|previousGID
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|StorageAddress
operator|.
name|write
argument_list|(
name|proxy
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|previousGID
operator|=
name|proxy
operator|.
name|getGID
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Store the data
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dbNodes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for node '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dbNodes
operator|.
name|update
argument_list|(
name|value
operator|.
name|getAddress
argument_list|()
argument_list|,
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for node '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error on '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|//TODO : flush dbNodes ?
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/* Drop all index entries for the given collection.      * @see org.exist.storage.ContentLoadingObserver#dropIndex(org.exist.collections.Collection)      */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
specifier|final
name|Value
name|searchKey
init|=
operator|new
name|ElementValue
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|dbNodes
operator|.
name|removeAll
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Drop all index entries for the given document.      * @see org.exist.storage.ContentLoadingObserver#dropIndex(org.exist.dom.DocumentImpl)      */
comment|//TODO : note that this is *not* this.doc -pb
specifier|public
name|void
name|dropIndex
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
specifier|final
name|short
name|collectionId
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Value
name|searchKey
init|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|ArrayList
name|elements
init|=
name|dbNodes
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Value
name|key
init|=
operator|(
name|Value
operator|)
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|VariableByteInput
name|is
init|=
name|dbNodes
operator|.
name|getAsStream
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|document
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// copy them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
comment|// skip them
name|changed
operator|=
literal|true
expr_stmt|;
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
comment|//TODO : no call to dbNodes.remove if no data ? -pb
comment|//TODO : why not use the same construct as above :
comment|//dbNodes.update(value.getAddress(), ref, os.data()) -pb
if|if
condition|(
name|dbNodes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for key '"
operator|+
name|key
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.ContentLoadingObserver#reindex(org.exist.dom.DocumentImpl, org.exist.dom.NodeImpl)      */
comment|//TODO : note that this is *not* this.doc -pb
specifier|public
name|void
name|reindex
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|StoredNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
specifier|final
name|short
name|collectionId
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pending
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//TODO : NativeValueIndex uses LongLinkedLists -pb
name|List
name|newGIDList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|//Compute a key for the node
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//TODO : NativeValueIndex uses LongLinkedLists -pb
name|List
name|proxies
init|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Value
name|key
init|=
name|computeKey
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|)
decl_stmt|;
specifier|final
name|VariableByteInput
name|is
init|=
name|dbNodes
operator|.
name|getAsStream
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//Does the node already exist in the index ?
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
comment|//Add its data to the new list
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|document
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// append them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyTo
argument_list|(
name|os
argument_list|,
name|gidsCount
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
comment|// feed the new list with the GIDs
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|long
name|delta
init|=
name|is
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|storedGID
init|=
name|previousGID
operator|+
name|delta
decl_stmt|;
name|long
name|address
init|=
name|StorageAddress
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|document
operator|.
name|getTreeLevel
argument_list|(
name|storedGID
argument_list|)
operator|<
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|reindexRequired
argument_list|()
condition|)
block|{
comment|//TOUNDERSTAND : given what is below, why not use newGIDList ? -pb
name|proxies
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|storedGID
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|NodeSetHelper
operator|.
name|isDescendant
argument_list|(
name|document
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|,
name|storedGID
argument_list|)
condition|)
block|{
comment|//TOUNDERSTAND : given what is below, why not use storedGIDList ? -pb
name|newGIDList
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|storedGID
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|previousGID
operator|=
name|storedGID
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TOUNDERSTAND : given what is above :-), why not rationalize ? -pb
comment|// append the new list to any existing data
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|proxies
operator|.
name|addAll
argument_list|(
name|newGIDList
argument_list|)
expr_stmt|;
comment|// append the data
if|if
condition|(
name|proxies
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|gidsCount
init|=
name|proxies
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Don't forget this one
name|FastQSort
operator|.
name|sort
argument_list|(
name|proxies
argument_list|,
literal|0
argument_list|,
name|gidsCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|proxies
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id and proxy id differ !"
argument_list|)
throw|;
block|}
name|long
name|delta
init|=
name|proxy
operator|.
name|getGID
argument_list|()
operator|-
name|previousGID
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|StorageAddress
operator|.
name|write
argument_list|(
name|proxy
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|previousGID
operator|=
name|proxy
operator|.
name|getGID
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
comment|//TOUNDERSTAND : Should is be null, what will there be in os.data() ? -pb
if|if
condition|(
name|dbNodes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for node '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|address
init|=
operator|(
operator|(
name|BFile
operator|.
name|PageInputStream
operator|)
name|is
operator|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbNodes
operator|.
name|update
argument_list|(
name|address
argument_list|,
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not update index data for node '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read only"
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|NodeSet
name|getAttributesByName
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodeSelector
name|selector
parameter_list|)
block|{
comment|//TODO : should we consider ElementValue.ATTRIBUTE_ID as well ? -pb
return|return
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|qname
argument_list|,
name|selector
argument_list|)
return|;
block|}
comment|/**      * Find elements by their tag name. This method is comparable to the DOM's      * method call getElementsByTagName. All elements matching tagName and      * belonging to one of the documents in the DocumentSet docs are returned.      *       * @param docs      *                  Description of the Parameter      * @param tagName      *                  Description of the Parameter      * @return      */
specifier|public
name|NodeSet
name|findElementsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodeSelector
name|selector
parameter_list|)
block|{
name|short
name|nodeType
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ElementValue
operator|.
name|ATTRIBUTE_ID
case|:
comment|//is this correct ? -pb
case|case
name|ElementValue
operator|.
name|ATTRIBUTE
case|:
name|nodeType
operator|=
name|Node
operator|.
name|ATTRIBUTE_NODE
expr_stmt|;
break|break;
case|case
name|ElementValue
operator|.
name|ELEMENT
case|:
name|nodeType
operator|=
name|Node
operator|.
name|ELEMENT_NODE
expr_stmt|;
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid type"
argument_list|)
throw|;
block|}
specifier|final
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|docs
operator|.
name|getLength
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
comment|// true if the output document set is the same as the input document set
name|boolean
name|sameDocSet
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Value
name|key
init|=
name|computeTypedKey
argument_list|(
operator|(
name|byte
operator|)
name|type
argument_list|,
name|collectionId
argument_list|,
name|qname
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|VariableByteInput
name|is
init|=
name|dbNodes
operator|.
name|getAsStream
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//Does the node already has data in the index ?
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|sameDocSet
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//Process the nodes
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|gidsCount
condition|;
name|k
operator|++
control|)
block|{
name|long
name|delta
init|=
name|is
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|storedGID
init|=
name|previousGID
operator|+
name|delta
decl_stmt|;
name|long
name|address
init|=
name|StorageAddress
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|StoredNode
name|storedNode
init|=
operator|new
name|StoredNode
argument_list|(
name|storedDocument
argument_list|,
name|storedGID
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|selector
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|storedNode
argument_list|)
argument_list|,
name|gidsCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Filter out the node if requested to do so
name|NodeProxy
name|proxy
init|=
name|selector
operator|.
name|match
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|storedNode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|.
name|setInternalAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setNodeType
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|,
name|gidsCount
argument_list|)
expr_stmt|;
block|}
else|else
name|sameDocSet
operator|=
literal|false
expr_stmt|;
block|}
name|previousGID
operator|=
name|storedGID
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sameDocSet
condition|)
block|{
name|result
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndexedElements
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|boolean
name|includeDescendants
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|User
name|user
init|=
name|broker
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User '"
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|"' has no permission to read collection '"
operator|+
name|collection
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
name|List
name|collections
decl_stmt|;
if|if
condition|(
name|includeDescendants
condition|)
name|collections
operator|=
name|collection
operator|.
name|getDescendants
argument_list|(
name|broker
argument_list|,
name|broker
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|collections
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|collections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
specifier|final
name|SymbolTable
name|symbols
init|=
name|broker
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
specifier|final
name|TreeMap
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|ElementValue
name|searchKey
init|=
operator|new
name|ElementValue
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|collectionId
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
comment|//TODO : NativeValueIndex uses LongLinkedLists -pb
name|ArrayList
name|values
init|=
name|dbNodes
operator|.
name|findEntries
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|//TOUNDERSTAND : what's in there ?
name|Value
name|val
index|[]
init|=
operator|(
name|Value
index|[]
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|short
name|sym
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|val
index|[
literal|0
index|]
operator|.
name|getData
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|short
name|nsSymbol
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|val
index|[
literal|0
index|]
operator|.
name|getData
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|symbols
operator|.
name|getName
argument_list|(
name|sym
argument_list|)
decl_stmt|;
name|String
name|namespace
decl_stmt|;
if|if
condition|(
name|nsSymbol
operator|==
literal|0
condition|)
block|{
name|namespace
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|namespace
operator|=
name|symbols
operator|.
name|getNamespace
argument_list|(
name|nsSymbol
argument_list|)
expr_stmt|;
block|}
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Occurrences
name|oc
init|=
operator|(
name|Occurrences
operator|)
name|map
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
comment|// required for namespace lookups
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
argument_list|,
name|AccessContext
operator|.
name|INTERNAL_PREFIX_LOOKUP
argument_list|)
decl_stmt|;
name|qname
operator|.
name|setPrefix
argument_list|(
name|context
operator|.
name|getPrefixForURI
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|val
index|[
literal|1
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|val
index|[
literal|1
index|]
operator|.
name|start
argument_list|()
argument_list|,
name|val
index|[
literal|1
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|oc
operator|.
name|addOccurrences
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|Occurrences
index|[]
name|result
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|Occurrences
index|[]
operator|)
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|//TODO : note that this is *not* this.doc -pb
specifier|public
name|void
name|consistencyCheck
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|EXistException
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|broker
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
specifier|final
name|short
name|collectionId
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Value
name|searchKey
init|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbNodes
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//TODO : NativeValueIndex uses LongLinkedLists -pb
name|ArrayList
name|elements
init|=
name|dbNodes
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|key
init|=
operator|(
name|Value
operator|)
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Value
name|value
init|=
name|dbNodes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|short
name|sym
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|start
argument_list|()
operator|+
literal|3
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|symbols
operator|.
name|getName
argument_list|(
name|sym
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Checking "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TOUNDERSTAND -pb
comment|/*int size = */
name|is
operator|.
name|readFixedInt
argument_list|()
expr_stmt|;
comment|//unused
if|if
condition|(
name|storedDocId
operator|!=
name|document
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// ignore them
name|is
operator|.
name|skip
argument_list|(
name|gidsCount
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
comment|// check
name|long
name|previousGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|long
name|delta
init|=
name|is
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|storedGID
init|=
name|previousGID
operator|+
name|delta
decl_stmt|;
name|long
name|address
init|=
name|StorageAddress
operator|.
name|read
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Node
name|storedNode
init|=
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|storedGID
argument_list|,
name|address
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Node "
operator|+
name|storedGID
operator|+
literal|" in document "
operator|+
name|document
operator|.
name|getFileName
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|storedNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|storedNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Node "
operator|+
name|storedGID
operator|+
literal|" in document "
operator|+
name|document
operator|.
name|getFileName
argument_list|()
operator|+
literal|" is not an element or attribute node."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Type = "
operator|+
name|storedNode
operator|.
name|getNodeType
argument_list|()
operator|+
literal|"; name = "
operator|+
name|storedNode
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"; value = "
operator|+
name|storedNode
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Node "
operator|+
name|storedGID
operator|+
literal|" in document "
operator|+
name|document
operator|.
name|getFileName
argument_list|()
operator|+
literal|" is not an element or attribute node."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|storedNode
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Node name does not correspond to index entry. Expected "
operator|+
name|nodeName
operator|+
literal|"; found "
operator|+
name|storedNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : also throw an exception here ?
block|}
comment|//TODO : better message (see above) -pb
name|msg
operator|.
name|append
argument_list|(
name|StorageAddress
operator|.
name|toString
argument_list|(
name|address
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|previousGID
operator|=
name|storedGID
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Value
name|computeKey
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
return|return
name|computeTypedKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|collectionId
argument_list|,
name|qname
argument_list|)
return|;
block|}
specifier|private
name|Value
name|computeTypedKey
parameter_list|(
name|byte
name|type
parameter_list|,
name|short
name|collectionId
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE_ID
condition|)
block|{
return|return
operator|new
name|ElementValue
argument_list|(
name|type
argument_list|,
name|collectionId
argument_list|,
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|broker
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|sym
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|nsSym
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ElementValue
argument_list|(
name|type
argument_list|,
name|collectionId
argument_list|,
name|sym
argument_list|,
name|nsSym
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|boolean
name|containsNode
parameter_list|(
name|List
name|list
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeProxy
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getGID
argument_list|()
operator|==
name|gid
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|close
parameter_list|()
throws|throws
name|DBException
block|{
return|return
name|dbNodes
operator|.
name|close
argument_list|()
return|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|dbNodes
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|dbNodes
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" owned by "
operator|+
name|broker
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

