begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Checkpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnAbort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Int2ObjectHashMap
import|;
end_import

begin_comment
comment|/**  * Registry for log entry types. All classes that can be read from or written to the journal  * have to be registered here. The recovery manager uses this information to create  * the correct {@link org.exist.storage.journal.Loggable} object when reading the log.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|LogEntryTypes
block|{
comment|/**      * Used to register a class for a given log entry type.      */
specifier|private
specifier|static
class|class
name|LogEntry
block|{
specifier|private
specifier|static
name|Class
name|constructorArgs
index|[]
init|=
block|{
name|DBBroker
operator|.
name|class
block|,
name|long
operator|.
name|class
block|}
decl_stmt|;
specifier|private
name|byte
name|type
decl_stmt|;
specifier|private
name|Class
name|clazz
decl_stmt|;
specifier|public
name|LogEntry
parameter_list|(
name|byte
name|type
parameter_list|,
name|Class
name|myClass
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|myClass
expr_stmt|;
block|}
specifier|public
name|Loggable
name|newInstance
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|long
name|transactId
parameter_list|)
throws|throws
name|Exception
block|{
name|Constructor
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|constructorArgs
argument_list|)
decl_stmt|;
return|return
operator|(
name|Loggable
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|broker
block|,
operator|new
name|Long
argument_list|(
name|transactId
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_START
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_COMMIT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|CHECKPOINT
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_ABORT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Int2ObjectHashMap
name|entryTypes
init|=
operator|new
name|Int2ObjectHashMap
argument_list|()
decl_stmt|;
comment|// register the common entry types
static|static
block|{
name|addEntryType
argument_list|(
name|TXN_START
argument_list|,
name|TxnStart
operator|.
name|class
argument_list|)
expr_stmt|;
name|addEntryType
argument_list|(
name|TXN_COMMIT
argument_list|,
name|TxnCommit
operator|.
name|class
argument_list|)
expr_stmt|;
name|addEntryType
argument_list|(
name|CHECKPOINT
argument_list|,
name|Checkpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|addEntryType
argument_list|(
name|TXN_ABORT
argument_list|,
name|TxnAbort
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add an entry type to the registry.      *       * @param type      * @param clazz the class implementing {@link Loggable}.      */
specifier|public
specifier|final
specifier|static
name|void
name|addEntryType
parameter_list|(
name|byte
name|type
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|LogEntry
name|entry
init|=
operator|new
name|LogEntry
argument_list|(
name|type
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|entryTypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new loggable object for the given type.      *       * @param type      * @param transactId the id of the current transaction.      * @throws LogException      */
specifier|public
specifier|final
specifier|static
name|Loggable
name|create
parameter_list|(
name|byte
name|type
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|long
name|transactId
parameter_list|)
throws|throws
name|LogException
block|{
name|LogEntry
name|entry
init|=
operator|(
name|LogEntry
operator|)
name|entryTypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|entry
operator|.
name|newInstance
argument_list|(
name|broker
argument_list|,
name|transactId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Failed to create log entry object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

