begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_comment
comment|/**  * Log Sequence Number: identifies a log record within the journal file.  * A LSN is represented by a Java long and consists of the file number  * of the journal file and an offset into the file.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|Lsn
block|{
specifier|public
specifier|static
specifier|final
name|long
name|LSN_INVALID
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|INT_MASK
init|=
literal|0xFFFFFFFFL
decl_stmt|;
specifier|public
specifier|static
name|long
name|create
parameter_list|(
name|int
name|fileNumber
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|offset
operator|&
name|INT_MASK
operator||
operator|(
operator|(
name|fileNumber
operator|&
name|INT_MASK
operator|)
operator|<<
literal|32
operator|)
return|;
block|}
comment|/**      * Returns the file number encoded in the passed LSN.      *       * @param lsn      * @return      */
specifier|public
specifier|static
name|long
name|getFileNumber
parameter_list|(
name|long
name|lsn
parameter_list|)
block|{
return|return
operator|(
name|lsn
operator|>>
literal|32
operator|)
operator|&
name|INT_MASK
return|;
block|}
comment|/**      * Returns the file offset encoded in the passed LSN.      *       * @param lsn      * @return      */
specifier|public
specifier|static
name|long
name|getOffset
parameter_list|(
name|long
name|lsn
parameter_list|)
block|{
return|return
operator|(
name|lsn
operator|&
name|INT_MASK
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dump
parameter_list|(
name|long
name|lsn
parameter_list|)
block|{
return|return
name|getFileNumber
argument_list|(
name|lsn
argument_list|)
operator|+
literal|", "
operator|+
name|getOffset
argument_list|(
name|lsn
argument_list|)
return|;
block|}
block|}
end_class

end_unit

