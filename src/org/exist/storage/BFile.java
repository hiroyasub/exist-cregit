begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  meier@ifs.tu-darmstadt.de  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Long2ObjectLinkedOpenHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|indexer
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|IndexCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|OrderedLinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SimpleTimeOutLock
import|;
end_import

begin_comment
comment|/**  *  Data store for variable size values.  *   * This class maps keys to values of variable size. Keys are stored  * in the b+-tree. B+-tree values are pointers to the logical storage address  * of the value in the data section. The pointer consists of the page number  * and a logical tuple identifier.   *  * If a value is larger than the internal page size (4K), it is split into  * overflow pages. Appending data to a overflow page is very fast.  * Only the first and the last data page are loaded.  *   * Data pages are buffered.  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    25. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|BFile
extends|extends
name|BTree
block|{
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|byte
name|FREE_LIST
init|=
literal|22
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|byte
name|LOB
init|=
literal|21
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|BFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|byte
name|MULTI_PAGE
init|=
literal|23
decl_stmt|;
comment|// minimum free space a page should have to be
comment|// considered for reusing
specifier|public
specifier|final
specifier|static
name|int
name|PAGE_MIN_FREE
init|=
literal|64
decl_stmt|;
comment|// page signatures
specifier|public
specifier|final
specifier|static
name|byte
name|RECORD
init|=
literal|20
decl_stmt|;
specifier|protected
name|boolean
name|compressPages
init|=
literal|false
decl_stmt|;
specifier|protected
name|BFileHeader
name|fileHeader
decl_stmt|;
specifier|protected
name|int
name|minFree
decl_stmt|;
specifier|protected
name|ClockPageBuffer
name|pages
decl_stmt|;
specifier|protected
name|Lock
name|lock
init|=
operator|new
name|SimpleTimeOutLock
argument_list|()
decl_stmt|;
specifier|public
name|int
name|fixedKeyLen
init|=
operator|-
literal|1
decl_stmt|;
comment|/**  Constructor for the BFile object */
specifier|public
name|BFile
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|fileHeader
operator|=
operator|(
name|BFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
name|minFree
operator|=
name|PAGE_MIN_FREE
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the BFile object 	 * 	 *@param  file  Description of the Parameter 	 */
specifier|public
name|BFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fileHeader
operator|=
operator|(
name|BFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
comment|//		pages = new LRUPageBuffer();
name|pages
operator|=
operator|new
name|ClockPageBuffer
argument_list|()
expr_stmt|;
name|minFree
operator|=
name|PAGE_MIN_FREE
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the BFile object 	 * 	 *@param  file     Description of the Parameter 	 *@param  buffers  Description of the Parameter 	 */
specifier|public
name|BFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|buffers
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|fileHeader
operator|=
operator|(
name|BFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
comment|//		pages = new LRUPageBuffer(buffers / 2);
name|pages
operator|=
operator|new
name|ClockPageBuffer
argument_list|(
name|buffers
argument_list|)
expr_stmt|;
name|minFree
operator|=
name|PAGE_MIN_FREE
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the BFile object 	 * 	 *@param  file          Description of the Parameter 	 *@param  btreeBuffers  Description of the Parameter 	 *@param  dataBuffers   Description of the Parameter 	 */
specifier|public
name|BFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|btreeBuffers
parameter_list|,
name|int
name|dataBuffers
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|btreeBuffers
argument_list|)
expr_stmt|;
name|fileHeader
operator|=
operator|(
name|BFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
comment|//		pages = new LRUPageBuffer(dataBuffers);
name|pages
operator|=
operator|new
name|ClockPageBuffer
argument_list|(
name|dataBuffers
argument_list|)
expr_stmt|;
name|minFree
operator|=
name|PAGE_MIN_FREE
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|long
name|createPointer
parameter_list|(
name|int
name|page
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|p
init|=
operator|(
name|page
operator|&
literal|0xffff
operator|)
decl_stmt|;
name|long
name|o
init|=
operator|(
name|offset
operator|&
literal|0xffff
operator|)
decl_stmt|;
return|return
name|page
operator||
operator|(
name|o
operator|<<
literal|32
operator|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|int
name|offsetFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
operator|(
name|pointer
operator|>>>
literal|32
operator|)
operator|&
literal|0xffff
operator|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|int
name|pageFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|pointer
operator|&
literal|0xffff
operator|)
return|;
block|}
comment|/** 	 * Returns the Lock object responsible for this BFile. 	 *  	 * @return Lock 	 */
specifier|public
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
specifier|public
name|boolean
name|append
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key is null"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
try|try
block|{
comment|// check if key exists already
specifier|final
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// key exists: get old data
specifier|final
name|long
name|pnum
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|short
name|tid
init|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|instanceof
name|OverflowPage
condition|)
operator|(
operator|(
name|OverflowPage
operator|)
name|page
operator|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
decl_stmt|;
specifier|final
name|int
name|l
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|data
operator|.
name|length
operator|||
name|offset
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"wrong pointer (tid: "
operator|+
name|tid
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|") in file "
operator|+
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; offset = "
operator|+
name|offset
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|offset
operator|+
literal|4
operator|+
name|l
operator|>
name|data
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"found invalid data record ("
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|"): "
operator|+
literal|"length="
operator|+
name|data
operator|.
name|length
operator|+
literal|"; required="
operator|+
operator|(
name|offset
operator|+
literal|4
operator|+
name|l
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|byte
index|[]
name|newData
init|=
operator|new
name|byte
index|[
name|l
operator|+
name|value
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|newData
argument_list|,
name|l
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|p
argument_list|,
name|page
argument_list|,
name|key
argument_list|,
name|newData
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
comment|// key does not exist:
name|long
name|p
init|=
name|storeValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|addValue
argument_list|(
name|key
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|bte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|close
parameter_list|()
throws|throws
name|DBException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  key  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
try|try
block|{
name|findValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|create
parameter_list|()
throws|throws
name|DBException
block|{
if|if
condition|(
name|super
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
name|fixedKeyLen
argument_list|)
condition|)
block|{
name|fileHeader
operator|.
name|setLastDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
specifier|private
name|SinglePage
name|createDataPage
parameter_list|()
block|{
try|try
block|{
name|SinglePage
name|page
init|=
operator|new
name|SinglePage
argument_list|(
name|compressPages
argument_list|)
decl_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|()
block|{
return|return
operator|new
name|BFileHeader
argument_list|(
name|PAGE_SIZE
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  read             Description of the Parameter 	 *@return                  Description of the Return Value 	 *@exception  IOException  Description of the Exception 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|boolean
name|read
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BFileHeader
argument_list|(
name|PAGE_SIZE
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pageCount  Description of the Parameter 	 *@return            Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|)
block|{
return|return
operator|new
name|BFileHeader
argument_list|(
name|PAGE_SIZE
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pageCount  Description of the Parameter 	 *@param  pageSize   Description of the Parameter 	 *@return            Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
return|return
operator|new
name|BFileHeader
argument_list|(
name|pageSize
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|PageHeader
name|createPageHeader
parameter_list|()
block|{
return|return
operator|new
name|BFilePageHeader
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  query               Description of the Parameter 	 *@param  callback            Description of the Parameter 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|void
name|filter
parameter_list|(
name|IndexQuery
name|query
parameter_list|,
name|BFileCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FilterCallback
name|cb
init|=
operator|new
name|FilterCallback
argument_list|(
name|callback
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  query               Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|findEntries
parameter_list|(
name|IndexQuery
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|BOTH
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  query               Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|findKeys
parameter_list|(
name|IndexQuery
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|KEYS
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|public
name|void
name|find
parameter_list|(
name|IndexQuery
name|query
parameter_list|,
name|IndexCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|callback
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|int
name|findValuePosition
parameter_list|(
name|DataPage
name|page
parameter_list|,
name|short
name|tid
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|l
decl_stmt|;
name|short
name|current
init|=
operator|-
literal|1
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
condition|)
block|{
name|current
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
name|tid
condition|)
return|return
name|pos
operator|+
literal|2
return|;
name|l
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|pos
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|+
name|l
operator|+
literal|6
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"tid "
operator|+
name|tid
operator|+
literal|" not found. "
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|"; pos: "
operator|+
name|pos
operator|+
literal|"; last-tid: "
operator|+
name|current
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|ArrayList
name|findValues
parameter_list|(
name|IndexQuery
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|VALUES
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|flush
parameter_list|()
throws|throws
name|DBException
block|{
name|pages
operator|.
name|flush
argument_list|()
expr_stmt|;
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|super
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" DATA "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|pages
operator|.
name|getBuffers
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|pages
operator|.
name|getUsedBuffers
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|pages
operator|.
name|getHits
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|pages
operator|.
name|getFails
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Value
name|get
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|pnum
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|b
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getValueSize
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|pnum
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
condition|)
return|return
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
return|;
else|else
block|{
name|short
name|tid
init|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
return|return
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BTreeException
name|b
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  p  Description of the Parameter 	 *@return    Description of the Return Value 	 */
specifier|public
name|Value
name|get
parameter_list|(
name|long
name|p
parameter_list|)
block|{
try|try
block|{
name|long
name|pnum
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|b
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 *  Retrieve value at logical address p from page 	 * 	 *@param  page                Description of the Parameter 	 *@param  p                   Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  BTreeException  Description of the Exception 	 *@exception  IOException     Description of the Exception 	 */
specifier|protected
name|Value
name|get
parameter_list|(
name|DataPage
name|page
parameter_list|,
name|long
name|p
parameter_list|)
throws|throws
name|BTreeException
throws|,
name|IOException
block|{
name|short
name|tid
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|int
name|l
decl_stmt|;
name|tid
operator|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|offset
operator|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|data
operator|=
name|page
operator|.
name|getData
argument_list|()
expr_stmt|;
if|if
condition|(
name|offset
operator|>
name|data
operator|.
name|length
operator|||
name|offset
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"wrong pointer (tid: "
operator|+
name|tid
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|") in file "
operator|+
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; offset = "
operator|+
name|offset
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|l
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|+
literal|6
operator|>
name|data
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" wrong data length in page "
operator|+
name|page
operator|.
name|getPageNum
argument_list|()
operator|+
literal|": expected="
operator|+
operator|(
name|l
operator|+
literal|6
operator|)
operator|+
literal|"; found="
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
return|return
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|l
argument_list|)
return|;
block|}
specifier|private
name|DataPage
name|getDataPage
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
try|try
block|{
name|DataPage
name|wp
decl_stmt|;
if|if
condition|(
operator|(
name|wp
operator|=
name|pages
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|Page
name|page
init|=
name|getPage
argument_list|(
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"page "
operator|+
name|pos
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
condition|)
return|return
operator|new
name|OverflowPage
argument_list|(
name|page
argument_list|,
name|data
argument_list|,
name|compressPages
argument_list|)
return|;
else|else
return|return
operator|new
name|SinglePage
argument_list|(
name|page
argument_list|,
name|data
argument_list|,
name|compressPages
argument_list|)
return|;
block|}
if|else if
condition|(
name|wp
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
condition|)
return|return
operator|new
name|OverflowPage
argument_list|(
name|wp
argument_list|)
return|;
else|else
return|return
name|wp
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cannot read page: "
operator|+
name|pos
operator|+
literal|": "
operator|+
name|ioe
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Gets the entries attribute of the BFile object 	 * 	 *@return                     The entries value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|getEntries
parameter_list|()
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|ANY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|BOTH
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/** 	 *  Gets the keys attribute of the BFile object 	 * 	 *@return                     The keys value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|getKeys
parameter_list|()
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|ANY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|KEYS
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/** 	 *  Gets the values attribute of the BFile object 	 * 	 *@return                     The values value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|getValues
parameter_list|()
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|ANY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|VALUES
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|open
parameter_list|()
throws|throws
name|DBException
block|{
return|return
name|super
operator|.
name|open
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  key    Description of the Parameter 	 *@param  value  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|public
name|boolean
name|put
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  key        Description of the Parameter 	 *@param  value      Description of the Parameter 	 *@param  overwrite  Description of the Parameter 	 *@return            Description of the Return Value 	 */
specifier|public
name|boolean
name|put
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key is null"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
try|try
block|{
comment|// check if key exists already
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// if exists, update value
if|if
condition|(
name|overwrite
condition|)
block|{
return|return
name|update
argument_list|(
name|p
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
comment|// key does not exist:
name|long
name|p
init|=
name|storeValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|addValue
argument_list|(
name|key
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|bte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  key  Description of the Parameter 	 */
specifier|public
name|void
name|remove
parameter_list|(
name|Value
name|key
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|pos
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|long
name|p
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
try|try
block|{
name|long
name|pos
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"btree problem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"io problem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  page                Description of the Parameter 	 *@param  p                   Description of the Parameter 	 *@exception  BTreeException  Description of the Exception 	 *@exception  IOException     Description of the Exception 	 */
specifier|protected
name|void
name|remove
parameter_list|(
name|DataPage
name|page
parameter_list|,
name|long
name|p
parameter_list|)
throws|throws
name|BTreeException
throws|,
name|IOException
throws|,
name|ReadOnlyException
block|{
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
condition|)
block|{
comment|// overflow page: simply delete the whole page
name|page
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pages
operator|.
name|remove
argument_list|(
name|page
argument_list|)
expr_stmt|;
return|return;
block|}
name|short
name|tid
init|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|data
operator|.
name|length
operator|||
name|offset
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"wrong pointer (tid: "
operator|+
name|tid
operator|+
literal|", "
operator|+
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|l
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
literal|4
operator|+
name|l
decl_stmt|;
name|int
name|len
init|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
comment|// remove old value
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|end
argument_list|,
name|data
argument_list|,
name|offset
operator|-
literal|2
argument_list|,
name|len
operator|-
name|end
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|decRecordCount
argument_list|()
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|l
operator|-
literal|6
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// adjust free space data
name|FreeSpace
name|free
init|=
name|fileHeader
operator|.
name|getFreeSpace
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
name|free
operator|=
operator|new
name|FreeSpace
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|len
argument_list|)
expr_stmt|;
name|free
operator|.
name|setFree
argument_list|(
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|len
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|removeFreeSpace
argument_list|(
name|free
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
comment|// if this page is empty, remove it
name|pages
operator|.
name|remove
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileHeader
operator|.
name|addFreeSpace
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|saveFreeSpace
parameter_list|(
name|FreeSpace
name|space
parameter_list|,
name|DataPage
name|page
parameter_list|)
block|{
name|int
name|free
init|=
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|space
operator|.
name|setFree
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|removeFreeSpace
argument_list|(
name|space
argument_list|)
expr_stmt|;
if|if
condition|(
name|free
operator|>
name|minFree
condition|)
name|fileHeader
operator|.
name|addFreeSpace
argument_list|(
name|space
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Sets the compression attribute of the BFile object 	 * 	 *@param  compress  The new compression value 	 */
specifier|public
name|void
name|setCompression
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|compressPages
operator|=
name|compress
expr_stmt|;
block|}
comment|/** 	 *  Sets the location attribute of the BFile object 	 * 	 *@param  location  The new location value 	 */
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|location
operator|+
literal|".dbx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|storeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReadOnlyException
block|{
comment|// does value fit into a single page?
if|if
condition|(
literal|6
operator|+
name|value
operator|.
name|length
operator|>
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
condition|)
block|{
name|OverflowPage
name|page
init|=
operator|new
name|OverflowPage
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|length
operator|+
literal|6
index|]
decl_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|value
operator|.
name|length
operator|+
literal|6
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|value
operator|.
name|length
argument_list|,
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|6
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|page
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//pages.add( page );
return|return
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|DataPage
name|page
init|=
literal|null
decl_stmt|;
name|short
name|tid
init|=
operator|-
literal|1
decl_stmt|;
name|FreeSpace
name|free
init|=
literal|null
decl_stmt|;
name|int
name|realSpace
init|=
literal|0
decl_stmt|;
comment|// check for available tid
while|while
condition|(
name|tid
operator|<
literal|0
condition|)
block|{
name|free
operator|=
name|fileHeader
operator|.
name|findFreeSpace
argument_list|(
name|value
operator|.
name|length
operator|+
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|page
operator|=
name|createDataPage
argument_list|()
expr_stmt|;
name|page
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|free
operator|=
operator|new
name|FreeSpace
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|=
name|getDataPage
argument_list|(
name|free
operator|.
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the information about free space is really correct
name|realSpace
operator|=
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|realSpace
operator|<
literal|6
operator|+
name|value
operator|.
name|length
condition|)
block|{
comment|// not correct: adjust and continue
name|LOG
operator|.
name|debug
argument_list|(
literal|"wrong data length in list of free pages: adjusting ..."
argument_list|)
expr_stmt|;
name|free
operator|.
name|setFree
argument_list|(
name|realSpace
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|removeFreeSpace
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|addFreeSpace
argument_list|(
name|free
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|tid
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextTID
argument_list|()
expr_stmt|;
if|if
condition|(
name|tid
operator|<
literal|0
condition|)
name|fileHeader
operator|.
name|removeFreeSpace
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
comment|// create pointer from pageNum and offset into page
name|long
name|p
init|=
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|tid
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// save tid
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|tid
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|+=
literal|2
expr_stmt|;
comment|// save data length
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|value
operator|.
name|length
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|+=
literal|4
expr_stmt|;
comment|// save data
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|len
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|len
operator|+=
name|value
operator|.
name|length
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|incRecordCount
argument_list|()
expr_stmt|;
name|saveFreeSpace
argument_list|(
name|free
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/** 	 *  Update a key/value pair. 	 * 	 *@param  key    Description of the Parameter 	 *@param  value  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|public
name|boolean
name|update
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|update
argument_list|(
name|p
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 *  Update the key/value pair found at the logical address p. 	 * 	 *@param  p      Description of the Parameter 	 *@param  key    Description of the Parameter 	 *@param  value  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|protected
name|boolean
name|update
parameter_list|(
name|long
name|p
parameter_list|,
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
try|try
block|{
name|long
name|pos
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DataPage
name|page
init|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|p
argument_list|,
name|page
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 *  Update the key/value pair with logical address p and 	 *  stored in page. 	 * 	 *@param  p                   Description of the Parameter 	 *@param  page                Description of the Parameter 	 *@param  key                 Description of the Parameter 	 *@param  value               Description of the Parameter 	 *@exception  BTreeException  Description of the Exception 	 *@exception  IOException     Description of the Exception 	 */
specifier|protected
name|void
name|update
parameter_list|(
name|long
name|p
parameter_list|,
name|DataPage
name|page
parameter_list|,
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|BTreeException
throws|,
name|IOException
throws|,
name|ReadOnlyException
block|{
if|if
condition|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
condition|)
block|{
comment|// does value fit into a single page?
if|if
condition|(
name|value
operator|.
name|length
operator|+
literal|6
operator|<
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
condition|)
block|{
comment|// yes: remove the overflow page
name|remove
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|long
name|np
init|=
name|storeValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|addValue
argument_list|(
name|key
argument_list|,
name|np
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is an overflow page: simply replace the value
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|length
operator|+
literal|6
index|]
decl_stmt|;
comment|// save tid
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// save length
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|value
operator|.
name|length
argument_list|,
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// save data
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|6
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|page
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|remove
argument_list|(
name|page
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|long
name|np
init|=
name|storeValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|addValue
argument_list|(
name|key
argument_list|,
name|np
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
specifier|private
specifier|final
specifier|static
class|class
name|FreeSpace
implements|implements
name|Comparable
block|{
specifier|private
name|int
name|free
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|page
init|=
operator|-
literal|1
decl_stmt|;
comment|/** 		 *  Constructor for the FreeSpace object 		 * 		 *@param  pageNum  Description of the Parameter 		 *@param  space    Description of the Parameter 		 */
specifier|public
name|FreeSpace
parameter_list|(
name|long
name|pageNum
parameter_list|,
name|int
name|space
parameter_list|)
block|{
name|page
operator|=
name|pageNum
expr_stmt|;
name|free
operator|=
name|space
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  obj  Description of the Parameter 		 *@return      Description of the Return Value 		 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|FreeSpace
name|other
init|=
operator|(
name|FreeSpace
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|free
operator|<
name|other
operator|.
name|free
condition|)
return|return
operator|-
literal|1
return|;
if|else if
condition|(
name|free
operator|>
name|other
operator|.
name|free
condition|)
return|return
literal|1
return|;
else|else
return|return
literal|0
return|;
block|}
comment|/** 		 *  Gets the free attribute of the FreeSpace object 		 * 		 *@return    The free value 		 */
specifier|public
name|int
name|getFree
parameter_list|()
block|{
return|return
name|free
return|;
block|}
comment|/** 		 *  Gets the page attribute of the FreeSpace object 		 * 		 *@return    The page value 		 */
specifier|public
name|long
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/** 		 *  Sets the free attribute of the FreeSpace object 		 * 		 *@param  space  The new free value 		 */
specifier|public
name|void
name|setFree
parameter_list|(
name|int
name|space
parameter_list|)
block|{
name|free
operator|=
name|space
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@return    Description of the Return Value 		 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|free
argument_list|)
return|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
specifier|private
specifier|final
class|class
name|BFileHeader
extends|extends
name|BTreeFileHeader
block|{
specifier|private
name|OrderedLinkedList
name|freeList
init|=
operator|new
name|OrderedLinkedList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|freeSpacePage
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|lastDataPage
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MAX_FREE_LIST_LEN
init|=
literal|128
decl_stmt|;
comment|/**  Constructor for the BFileHeader object */
specifier|public
name|BFileHeader
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Adds a feature to the FreeSpace attribute of the BFileHeader object 		 * 		 *@param  freeSpace  The feature to be added to the FreeSpace attribute 		 */
specifier|public
name|void
name|addFreeSpace
parameter_list|(
name|FreeSpace
name|freeSpace
parameter_list|)
block|{
name|freeList
operator|.
name|add
argument_list|(
name|freeSpace
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  needed  Description of the Parameter 		 *@return         Description of the Return Value 		 */
specifier|public
name|FreeSpace
name|findFreeSpace
parameter_list|(
name|int
name|needed
parameter_list|)
block|{
name|FreeSpace
name|freeSpace
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|freeList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|freeSpace
operator|=
operator|(
name|FreeSpace
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|freeSpace
operator|.
name|getFree
argument_list|()
operator|>=
name|needed
condition|)
return|return
name|freeSpace
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 		 *  Gets the freeSpace attribute of the BFileHeader object 		 * 		 *@param  page  Description of the Parameter 		 *@return       The freeSpace value 		 */
specifier|public
name|FreeSpace
name|getFreeSpace
parameter_list|(
name|long
name|page
parameter_list|)
block|{
name|FreeSpace
name|freeSpace
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|freeList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|freeSpace
operator|=
operator|(
name|FreeSpace
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|freeSpace
operator|.
name|getPage
argument_list|()
operator|==
name|page
condition|)
return|return
name|freeSpace
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 		 *  Gets the lastDataPage attribute of the BFileHeader object 		 * 		 *@return    The lastDataPage value 		 */
specifier|public
name|long
name|getLastDataPage
parameter_list|()
block|{
return|return
name|lastDataPage
return|;
block|}
comment|/** 		 *  Gets the maxFreeSpace attribute of the BFileHeader object 		 * 		 *@return    The maxFreeSpace value 		 */
specifier|public
name|FreeSpace
name|getMaxFreeSpace
parameter_list|()
block|{
name|FreeSpace
name|space
decl_stmt|;
name|FreeSpace
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|freeList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|space
operator|=
operator|(
name|FreeSpace
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|.
name|getFree
argument_list|()
operator|<
name|space
operator|.
name|getFree
argument_list|()
condition|)
name|max
operator|=
name|space
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|printFreeSpace
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|FreeSpace
name|freeSpace
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|freeList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|freeSpace
operator|=
operator|(
name|FreeSpace
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"["
operator|+
name|freeSpace
operator|.
name|getPage
argument_list|()
operator|+
literal|", "
operator|+
name|freeSpace
operator|.
name|getFree
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  raf              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|read
parameter_list|(
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|read
argument_list|(
name|raf
argument_list|)
expr_stmt|;
name|lastDataPage
operator|=
name|raf
operator|.
name|readLong
argument_list|()
expr_stmt|;
specifier|final
name|int
name|fsize
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|long
name|page
decl_stmt|;
name|int
name|space
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsize
condition|;
name|i
operator|++
control|)
block|{
name|page
operator|=
name|raf
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|space
operator|=
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|freeList
operator|.
name|add
argument_list|(
operator|new
name|FreeSpace
argument_list|(
name|page
argument_list|,
name|space
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  space  Description of the Parameter 		 */
specifier|public
name|void
name|removeFreeSpace
parameter_list|(
name|FreeSpace
name|space
parameter_list|)
block|{
name|freeList
operator|.
name|remove
argument_list|(
name|space
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Sets the lastDataPage attribute of the BFileHeader object 		 * 		 *@param  last  The new lastDataPage value 		 */
specifier|public
name|void
name|setLastDataPage
parameter_list|(
name|long
name|last
parameter_list|)
block|{
name|lastDataPage
operator|=
name|last
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  raf              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|(
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// does the free-space list fit into the file header?
if|if
condition|(
name|freeList
operator|.
name|size
argument_list|()
operator|>
name|MAX_FREE_LIST_LEN
condition|)
block|{
comment|// no: remove some smaller entries to make it fit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeList
operator|.
name|size
argument_list|()
operator|-
name|MAX_FREE_LIST_LEN
condition|;
name|i
operator|++
control|)
name|freeList
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
name|raf
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeLong
argument_list|(
name|lastDataPage
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|freeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FreeSpace
name|freeSpace
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|freeList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|freeSpace
operator|=
operator|(
name|FreeSpace
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|raf
operator|.
name|writeLong
argument_list|(
name|freeSpace
operator|.
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|freeSpace
operator|.
name|getFree
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
specifier|private
specifier|final
class|class
name|BFilePageHeader
extends|extends
name|BTreePageHeader
block|{
specifier|private
name|int
name|dataLen
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|lastInChain
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|long
name|nextInChain
init|=
operator|-
literal|1L
decl_stmt|;
comment|// tuple identifier: used to identify distinct
comment|// values inside a page
specifier|private
name|short
name|nextTID
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|short
name|records
init|=
literal|0
decl_stmt|;
comment|/**  Constructor for the BFilePageHeader object */
specifier|public
name|BFilePageHeader
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the BFilePageHeader object 		 * 		 *@param  dis              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|BFilePageHeader
parameter_list|(
name|DataInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|decRecordCount
parameter_list|()
block|{
name|records
operator|--
expr_stmt|;
block|}
comment|/** 		 *  Gets the dataLength attribute of the BFilePageHeader object 		 * 		 *@return    The dataLength value 		 */
specifier|public
name|int
name|getDataLength
parameter_list|()
block|{
return|return
name|dataLen
return|;
block|}
comment|/** 		 *  Gets the lastChunk attribute of the BFilePageHeader object 		 * 		 *@return    The lastChunk value 		 */
specifier|public
name|long
name|getLastInChain
parameter_list|()
block|{
return|return
name|lastInChain
return|;
block|}
comment|/** 		 *  Gets the nextPageBlock attribute of the BFilePageHeader object 		 * 		 *@return    The nextPageBlock value 		 */
specifier|public
name|long
name|getNextInChain
parameter_list|()
block|{
return|return
name|nextInChain
return|;
block|}
comment|/** 		 *  Gets the nextTID attribute of the BFilePageHeader object 		 * 		 *@return    The nextTID value 		 */
specifier|public
name|short
name|getNextTID
parameter_list|()
block|{
operator|++
name|nextTID
expr_stmt|;
if|if
condition|(
name|nextTID
operator|>
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tid limit reached"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|nextTID
return|;
block|}
comment|/** 		 *  Gets the recordCount attribute of the BFilePageHeader object 		 * 		 *@return    The recordCount value 		 */
specifier|public
name|short
name|getRecordCount
parameter_list|()
block|{
return|return
name|records
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|incRecordCount
parameter_list|()
block|{
name|records
operator|++
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  dis              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|read
parameter_list|(
name|DataInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|read
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|records
operator|=
name|dis
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|dataLen
operator|=
name|dis
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|nextTID
operator|=
name|dis
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|nextInChain
operator|=
name|dis
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|lastInChain
operator|=
name|dis
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Sets the dataLength attribute of the BFilePageHeader object 		 * 		 *@param  len  The new dataLength value 		 */
specifier|public
name|void
name|setDataLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|dataLen
operator|=
name|len
expr_stmt|;
block|}
comment|/** 		 *  Sets the lastChunk attribute of the BFilePageHeader object 		 * 		 *@param  p  The new lastChunk value 		 */
specifier|public
name|void
name|setLastInChain
parameter_list|(
name|long
name|p
parameter_list|)
block|{
name|lastInChain
operator|=
name|p
expr_stmt|;
block|}
comment|/** 		 *  Sets the nextPageBlock attribute of the BFilePageHeader object 		 * 		 *@param  b  The new nextPageBlock value 		 */
specifier|public
name|void
name|setNextInChain
parameter_list|(
name|long
name|b
parameter_list|)
block|{
name|nextInChain
operator|=
name|b
expr_stmt|;
block|}
comment|/** 		 *  Sets the recordCount attribute of the BFilePageHeader object 		 * 		 *@param  recs  The new recordCount value 		 */
specifier|public
name|void
name|setRecordCount
parameter_list|(
name|short
name|recs
parameter_list|)
block|{
name|records
operator|=
name|recs
expr_stmt|;
block|}
comment|/** 		 *  Sets the tID attribute of the BFilePageHeader object 		 * 		 *@param  tid  The new tID value 		 */
specifier|public
name|void
name|setTID
parameter_list|(
name|short
name|tid
parameter_list|)
block|{
name|this
operator|.
name|nextTID
operator|=
name|tid
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  dos              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|dataLen
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|nextTID
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|nextInChain
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|lastInChain
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|DataPage
implements|implements
name|Comparable
block|{
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|boolean
name|saved
init|=
literal|true
decl_stmt|;
comment|/**  Description of the Method */
specifier|public
name|void
name|decRefCount
parameter_list|()
block|{
name|refCount
operator|--
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** 		 *  Gets the data attribute of the DataPage object 		 * 		 *@return    The data value 		 */
specifier|public
specifier|abstract
name|byte
index|[]
name|getData
parameter_list|()
function_decl|;
comment|/** 		 *  Gets the pageHeader attribute of the DataPage object 		 * 		 *@return    The pageHeader value 		 */
specifier|public
specifier|abstract
name|BFilePageHeader
name|getPageHeader
parameter_list|()
function_decl|;
comment|/** 		 *  Gets the pageInfo attribute of the DataPage object 		 * 		 *@return    The pageInfo value 		 */
specifier|public
specifier|abstract
name|String
name|getPageInfo
parameter_list|()
function_decl|;
comment|/** 		 *  Gets the pageNum attribute of the DataPage object 		 * 		 *@return    The pageNum value 		 */
specifier|public
specifier|abstract
name|long
name|getPageNum
parameter_list|()
function_decl|;
comment|/** 		 *  Gets the refCount attribute of the DataPage object 		 * 		 *@return    The refCount value 		 */
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|incRefCount
parameter_list|()
block|{
name|refCount
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|setRefCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|refCount
operator|=
name|count
expr_stmt|;
block|}
comment|/** 		 *  Gets the dirty attribute of the DataPage object 		 * 		 *@return    The dirty value 		 */
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
operator|!
name|saved
return|;
block|}
comment|/** 		 *  Sets the data attribute of the DataPage object 		 * 		 *@param  buf  The new data value 		 */
specifier|public
specifier|abstract
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
function_decl|;
comment|/** 		 *  Sets the dirty attribute of the DataPage object 		 * 		 *@param  dirty  The new dirty value 		 */
specifier|public
name|void
name|setDirty
parameter_list|(
name|boolean
name|dirty
parameter_list|)
block|{
name|saved
operator|=
operator|!
name|dirty
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
specifier|abstract
name|void
name|write
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|getPageNum
argument_list|()
operator|==
operator|(
operator|(
name|DataPage
operator|)
name|other
operator|)
operator|.
name|getPageNum
argument_list|()
condition|)
return|return
literal|0
return|;
if|else if
condition|(
name|getPageNum
argument_list|()
operator|>
operator|(
operator|(
name|DataPage
operator|)
name|other
operator|)
operator|.
name|getPageNum
argument_list|()
condition|)
return|return
literal|1
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
specifier|private
specifier|final
class|class
name|FilterCallback
implements|implements
name|BTreeCallback
block|{
name|BFileCallback
name|callback
decl_stmt|;
comment|/** 		 *  Constructor for the FilterCallback object 		 * 		 *@param  callback  Description of the Parameter 		 */
specifier|public
name|FilterCallback
parameter_list|(
name|BFileCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  value    Description of the Parameter 		 *@param  pointer  Description of the Parameter 		 *@return          Description of the Return Value 		 */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
block|{
name|long
name|pos
decl_stmt|;
name|short
name|tid
decl_stmt|;
name|DataPage
name|page
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|l
decl_stmt|;
name|Value
name|v
decl_stmt|;
name|pos
operator|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|tid
operator|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|page
operator|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|offset
operator|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|page
operator|.
name|getData
argument_list|()
decl_stmt|;
name|l
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|v
operator|=
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|callback
operator|.
name|info
argument_list|(
name|value
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
specifier|private
specifier|final
class|class
name|FindCallback
implements|implements
name|BTreeCallback
block|{
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|BOTH
init|=
literal|2
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|KEYS
init|=
literal|1
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|VALUES
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|mode
init|=
name|VALUES
decl_stmt|;
specifier|private
name|IndexCallback
name|callback
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
name|values
init|=
literal|null
decl_stmt|;
comment|/** 		 *  Constructor for the FindCallback object 		 * 		 *@param  mode  Description of the Parameter 		 */
specifier|public
name|FindCallback
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FindCallback
parameter_list|(
name|IndexCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|BOTH
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
comment|/** 		 *  Gets the values attribute of the FindCallback object 		 * 		 *@return    The values value 		 */
specifier|public
name|ArrayList
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  value    Description of the Parameter 		 *@param  pointer  Description of the Parameter 		 *@return          Description of the Return Value 		 */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
block|{
name|long
name|pos
decl_stmt|;
name|short
name|tid
decl_stmt|;
name|DataPage
name|page
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|l
decl_stmt|;
name|Value
name|v
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|VALUES
case|:
name|pos
operator|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|tid
operator|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|page
operator|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|offset
operator|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|data
operator|=
name|page
operator|.
name|getData
argument_list|()
expr_stmt|;
name|l
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|v
operator|=
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|v
operator|.
name|setAddress
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
else|else
return|return
name|callback
operator|.
name|indexInfo
argument_list|(
name|value
argument_list|,
name|v
argument_list|)
return|;
return|return
literal|true
return|;
case|case
name|KEYS
case|:
name|value
operator|.
name|setAddress
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
return|return
name|callback
operator|.
name|indexInfo
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
return|;
return|return
literal|true
return|;
case|case
name|BOTH
case|:
name|Value
index|[]
name|entry
init|=
operator|new
name|Value
index|[
literal|2
index|]
decl_stmt|;
name|entry
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
name|pos
operator|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|tid
operator|=
operator|(
name|short
operator|)
name|offsetFromPointer
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|page
operator|=
name|getDataPage
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|offset
operator|=
name|findValuePosition
argument_list|(
name|page
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|data
operator|=
name|page
operator|.
name|getData
argument_list|()
expr_stmt|;
name|l
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|v
operator|=
operator|new
name|Value
argument_list|(
name|data
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|v
operator|.
name|setAddress
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|entry
index|[
literal|1
index|]
operator|=
name|v
expr_stmt|;
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
else|else
return|return
name|callback
operator|.
name|indexInfo
argument_list|(
name|value
argument_list|,
name|v
argument_list|)
return|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|OverflowPage
extends|extends
name|DataPage
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
name|SinglePage
name|firstPage
decl_stmt|;
comment|/** 		 *  Constructor for the SinglePage object 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|OverflowPage
parameter_list|()
throws|throws
name|IOException
block|{
name|firstPage
operator|=
operator|new
name|SinglePage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BFilePageHeader
name|ph
init|=
name|firstPage
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|ph
operator|.
name|setStatus
argument_list|(
name|MULTI_PAGE
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setNextInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setLastInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|firstPage
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|firstPage
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the OverflowPage object 		 * 		 *@param  page  Description of the Parameter 		 */
specifier|public
name|OverflowPage
parameter_list|(
name|DataPage
name|page
parameter_list|)
block|{
name|firstPage
operator|=
operator|(
name|SinglePage
operator|)
name|page
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the SinglePage object 		 * 		 *@param  p                Description of the Parameter 		 *@param  compress         Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|OverflowPage
parameter_list|(
name|Page
name|p
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|firstPage
operator|=
operator|new
name|SinglePage
argument_list|(
name|p
argument_list|,
name|data
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setStatus
argument_list|(
name|MULTI_PAGE
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Append a new chunk of data to the page 		 * 		 *@param  chunk  chunk of data to append 		 */
specifier|public
name|void
name|append
parameter_list|(
name|byte
index|[]
name|chunk
parameter_list|)
block|{
name|SinglePage
name|nextPage
decl_stmt|;
name|BFilePageHeader
name|ph
init|=
name|firstPage
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
comment|// get the last page and fill it
name|long
name|next
init|=
name|ph
operator|.
name|getLastInChain
argument_list|()
decl_stmt|;
name|DataPage
name|page
decl_stmt|;
if|if
condition|(
name|next
operator|>
literal|0
condition|)
name|page
operator|=
operator|(
name|DataPage
operator|)
name|getDataPage
argument_list|(
name|next
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|firstPage
expr_stmt|;
name|ph
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
expr_stmt|;
name|int
name|chunkSize
init|=
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
operator|-
name|ph
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|length
operator|<
name|chunkSize
condition|)
name|chunkSize
operator|=
name|chunk
operator|.
name|length
expr_stmt|;
comment|// fill last page
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|page
operator|.
name|getData
argument_list|()
argument_list|,
name|ph
operator|.
name|getDataLength
argument_list|()
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
name|ph
operator|.
name|getDataLength
argument_list|()
operator|+
name|chunkSize
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// write the remaining chunks to new pages
name|int
name|remaining
init|=
name|chunk
operator|.
name|length
operator|-
name|chunkSize
decl_stmt|;
name|int
name|current
init|=
name|chunkSize
decl_stmt|;
name|chunkSize
operator|=
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
comment|// walk through chain of pages
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
comment|// add a new page to the chain
name|nextPage
operator|=
operator|(
name|SinglePage
operator|)
name|createDataPage
argument_list|()
expr_stmt|;
name|nextPage
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextInChain
argument_list|(
name|nextPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|=
name|nextPage
expr_stmt|;
if|if
condition|(
name|remaining
operator|<
name|chunkSize
condition|)
name|chunkSize
operator|=
name|remaining
expr_stmt|;
comment|// copy next chunk of data to the page
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
argument_list|,
name|current
argument_list|,
name|page
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|!=
name|firstPage
condition|)
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|remaining
operator|-
name|chunkSize
expr_stmt|;
name|current
operator|+=
name|chunkSize
expr_stmt|;
block|}
block|}
name|ph
operator|=
name|firstPage
operator|.
name|getPageHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|page
operator|!=
name|firstPage
condition|)
block|{
comment|// add link to last page
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setLastInChain
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
name|ph
operator|.
name|getDataLength
argument_list|()
operator|+
name|chunk
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
name|ph
operator|.
name|setLastInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
comment|// adjust length field in first page
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
operator|-
literal|6
argument_list|,
name|firstPage
operator|.
name|getData
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|firstPage
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|firstPage
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|next
init|=
name|firstPage
operator|.
name|getPageNum
argument_list|()
decl_stmt|;
name|SinglePage
name|page
init|=
name|firstPage
decl_stmt|;
do|do
block|{
name|next
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextInChain
argument_list|()
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextInChain
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|remove
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|>
literal|0
condition|)
name|page
operator|=
operator|(
name|SinglePage
operator|)
name|getDataPage
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|>
literal|0
condition|)
do|;
block|}
comment|/** 		 *  Gets the data attribute of the OverflowPage object 		 * 		 *@return    The data value 		 */
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
return|return
name|data
return|;
name|SinglePage
name|page
init|=
name|firstPage
decl_stmt|;
name|Value
name|v
decl_stmt|;
name|long
name|pnum
decl_stmt|;
name|long
name|next
decl_stmt|;
name|byte
index|[]
name|temp
decl_stmt|;
name|int
name|len
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|temp
operator|=
name|page
operator|.
name|getData
argument_list|()
expr_stmt|;
name|next
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextInChain
argument_list|()
expr_stmt|;
name|len
operator|=
name|next
operator|>
literal|0
condition|?
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
else|:
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|>
literal|0
condition|)
block|{
name|page
operator|=
operator|(
name|SinglePage
operator|)
name|getDataPage
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|next
operator|>
literal|0
condition|)
do|;
name|data
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|!=
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" read="
operator|+
name|data
operator|.
name|length
operator|+
literal|"; expected="
operator|+
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|//                firstPage.getPageHeader().setDataLength( data.length );
comment|//                firstPage.setDirty(true);
comment|//                throw new RuntimeException(getFile().getName() + " data page corrupt!");
block|}
return|return
name|data
return|;
block|}
comment|/** 		 *  Gets the firstPage attribute of the OverflowPage object 		 * 		 *@return    The firstPage value 		 */
specifier|public
name|SinglePage
name|getFirstPage
parameter_list|()
block|{
return|return
name|firstPage
return|;
block|}
comment|/** 		 *  Gets the pageHeader attribute of the OverflowPage object 		 * 		 *@return    The pageHeader value 		 */
specifier|public
name|BFilePageHeader
name|getPageHeader
parameter_list|()
block|{
return|return
name|firstPage
operator|.
name|getPageHeader
argument_list|()
return|;
block|}
comment|/** 		 *  Gets the pageInfo attribute of the OverflowPage object 		 * 		 *@return    The pageInfo value 		 */
specifier|public
name|String
name|getPageInfo
parameter_list|()
block|{
return|return
literal|"MULTI_PAGE: "
operator|+
name|firstPage
operator|.
name|getPageInfo
argument_list|()
return|;
block|}
comment|/** 		 *  Gets the pageNum attribute of the SinglePage object 		 * 		 *@return    The pageNum value 		 */
specifier|public
name|long
name|getPageNum
parameter_list|()
block|{
return|return
name|firstPage
operator|.
name|getPageNum
argument_list|()
return|;
block|}
comment|/** 		 *  Sets the data attribute of the OverflowPage object 		 * 		 *@param  data  The new data value 		 */
specifier|public
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
try|try
block|{
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return;
name|int
name|chunkSize
init|=
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
decl_stmt|;
name|int
name|remaining
init|=
name|data
operator|.
name|length
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
name|long
name|next
init|=
literal|0L
decl_stmt|;
name|byte
index|[]
name|chunk
decl_stmt|;
name|SinglePage
name|page
init|=
name|firstPage
decl_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|SinglePage
name|nextPage
decl_stmt|;
comment|// walk through chain of pages
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|remaining
operator|<
name|chunkSize
condition|)
name|chunkSize
operator|=
name|remaining
expr_stmt|;
comment|// copy next chunk of data to the page
comment|//if(!Arrays.equals(data, current, page.getData(), 0, chunkSize)) {
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|current
argument_list|,
name|page
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|!=
name|firstPage
condition|)
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//}
name|remaining
operator|-=
name|chunkSize
expr_stmt|;
name|current
operator|+=
name|chunkSize
expr_stmt|;
name|next
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextInChain
argument_list|()
expr_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|next
operator|>
literal|0
condition|)
block|{
comment|// load next page in chain
name|nextPage
operator|=
operator|(
name|SinglePage
operator|)
name|getDataPage
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|=
name|nextPage
expr_stmt|;
block|}
else|else
block|{
comment|// add a new page to the chain
name|nextPage
operator|=
operator|(
name|SinglePage
operator|)
name|createDataPage
argument_list|()
expr_stmt|;
name|nextPage
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextInChain
argument_list|(
name|nextPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|=
name|nextPage
expr_stmt|;
block|}
block|}
else|else
block|{
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|!=
name|firstPage
condition|)
block|{
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setLastInChain
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|firstPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setLastInChain
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|firstPage
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pages
operator|.
name|add
argument_list|(
name|firstPage
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|next
operator|>
literal|0
condition|)
block|{
comment|// there are more pages in the chain:
comment|// remove them
while|while
condition|(
name|next
operator|>
literal|0
condition|)
block|{
name|nextPage
operator|=
operator|(
name|SinglePage
operator|)
name|getDataPage
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|nextPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextInChain
argument_list|()
expr_stmt|;
name|nextPage
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pages
operator|.
name|remove
argument_list|(
name|nextPage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
class|class
name|ClockPageBuffer
block|{
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|PAGE_BUFFER_SIZE
init|=
literal|32
decl_stmt|;
specifier|protected
name|int
name|blockBuffers
decl_stmt|;
specifier|protected
name|int
name|fails
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|hits
init|=
literal|0
decl_stmt|;
comment|//protected TLongObjectHashMap map;
specifier|protected
name|Long2ObjectLinkedOpenHashMap
name|map
decl_stmt|;
comment|//protected LinkedList queue = new LinkedList();
comment|/** 		 *  Constructor for the PageBuffer object 		 * 		 *@param  blockBuffers  Description of the Parameter 		 */
specifier|public
name|ClockPageBuffer
parameter_list|(
name|int
name|blockBuffers
parameter_list|)
block|{
name|this
operator|.
name|blockBuffers
operator|=
name|blockBuffers
expr_stmt|;
comment|//map = new TLongObjectHashMap(blockBuffers);
name|map
operator|=
operator|new
name|Long2ObjectLinkedOpenHashMap
argument_list|(
name|blockBuffers
argument_list|)
expr_stmt|;
block|}
comment|/**  Constructor for the PageBuffer object */
specifier|public
name|ClockPageBuffer
parameter_list|()
block|{
name|this
argument_list|(
name|PAGE_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  page  Description of the Parameter 		 */
specifier|public
name|void
name|add
parameter_list|(
name|DataPage
name|page
parameter_list|)
block|{
name|add
argument_list|(
name|page
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DataPage
name|page
parameter_list|,
name|int
name|initialRefCount
parameter_list|)
block|{
if|if
condition|(
name|page
operator|instanceof
name|OverflowPage
condition|)
block|{
name|page
operator|=
operator|(
operator|(
name|OverflowPage
operator|)
name|page
operator|)
operator|.
name|getFirstPage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
condition|)
block|{
name|page
operator|.
name|incRefCount
argument_list|()
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>=
name|blockBuffers
condition|)
name|removeOne
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|setRefCount
argument_list|(
name|initialRefCount
argument_list|)
expr_stmt|;
comment|//queue.addLast(page);
name|map
operator|.
name|put
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|DataPage
name|page
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|page
operator|=
operator|(
name|DataPage
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|isDirty
argument_list|()
condition|)
try|try
block|{
name|page
operator|.
name|write
argument_list|()
expr_stmt|;
comment|//fileHeader.write();
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|DataPage
name|get
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DataPage
name|get
parameter_list|(
name|long
name|pnum
parameter_list|)
block|{
specifier|final
name|DataPage
name|page
init|=
operator|(
name|DataPage
operator|)
name|map
operator|.
name|get
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
condition|)
name|fails
operator|++
expr_stmt|;
else|else
name|hits
operator|++
expr_stmt|;
return|return
name|page
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|DataPage
name|page
parameter_list|)
block|{
comment|//			final int idx = queue.indexOf(page);
comment|//			if (idx> -1)
comment|//				queue.remove(idx);
name|map
operator|.
name|remove
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|isDirty
argument_list|()
condition|)
try|try
block|{
name|page
operator|.
name|write
argument_list|()
expr_stmt|;
comment|//fileHeader.write();
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|removeOne
parameter_list|(
name|DataPage
name|page
parameter_list|)
block|{
name|DataPage
name|old
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
name|long
name|oldNum
decl_stmt|,
name|pNum
decl_stmt|;
while|while
condition|(
operator|!
name|removed
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|old
operator|=
operator|(
name|DataPage
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|oldNum
operator|=
name|old
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
name|pNum
operator|=
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
comment|// don't replace the page we are trying to store
comment|// and don't replace consecutive pages
if|if
condition|(
name|oldNum
operator|==
name|pNum
operator|||
name|oldNum
operator|==
name|pNum
operator|+
literal|1
condition|)
continue|continue;
name|old
operator|.
name|decRefCount
argument_list|()
expr_stmt|;
comment|// replace old page if it has reference count< 1,
if|if
condition|(
name|old
operator|.
name|getRefCount
argument_list|()
operator|<
literal|1
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//map.remove(oldNum);
name|removed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|isDirty
argument_list|()
condition|)
try|try
block|{
name|old
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while writing page: "
operator|+
name|old
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|old
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getBuffers
parameter_list|()
block|{
return|return
name|blockBuffers
return|;
block|}
specifier|public
name|int
name|getUsedBuffers
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getFails
parameter_list|()
block|{
return|return
name|fails
return|;
block|}
specifier|public
name|int
name|getHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
block|}
comment|/** 	 *  wrapper class around a page of data. 	 * 	 *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de> 	 *@created    25. Mai 2002 	 */
specifier|private
specifier|final
class|class
name|SinglePage
extends|extends
name|DataPage
block|{
name|boolean
name|compress
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
name|Page
name|page
decl_stmt|;
name|BFilePageHeader
name|ph
decl_stmt|;
comment|/** 		 *  Constructor for the DataPage object 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|SinglePage
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DataPage object 		 * 		 *@param  compress         Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|SinglePage
parameter_list|(
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
name|page
operator|=
name|getFreePage
argument_list|()
expr_stmt|;
name|ph
operator|=
operator|(
name|BFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
expr_stmt|;
name|ph
operator|.
name|setStatus
argument_list|(
name|RECORD
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//ph.setNextChunk( -1 );
name|fileHeader
operator|.
name|setLastDataPage
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DataPage object 		 * 		 *@param  p                Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|SinglePage
parameter_list|(
name|Page
name|p
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|p
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DataPage object 		 * 		 *@param  p                Description of the Parameter 		 *@param  compress         Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|SinglePage
parameter_list|(
name|Page
name|p
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"illegal page"
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|(
name|p
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|RECORD
operator|||
name|p
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|MULTI_PAGE
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"not a data-page: "
operator|+
name|p
operator|.
name|getPageInfo
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not a data-page"
argument_list|)
throw|;
block|}
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
name|page
operator|=
name|p
expr_stmt|;
name|ph
operator|=
operator|(
name|BFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
comment|// reset page header fields
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setNextInChain
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setLastInChain
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setTID
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setRecordCount
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|setRefCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|unlinkPages
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Gets the data attribute of the DataPage object 		 * 		 *@return    The data value 		 */
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/** 		 *  Gets the pageHeader attribute of the DataPage object 		 * 		 *@return    The pageHeader value 		 */
specifier|public
name|BFilePageHeader
name|getPageHeader
parameter_list|()
block|{
return|return
name|ph
return|;
block|}
comment|/** 		 *  Gets the pageInfo attribute of the SinglePage object 		 * 		 *@return    The pageInfo value 		 */
specifier|public
name|String
name|getPageInfo
parameter_list|()
block|{
return|return
name|page
operator|.
name|getPageInfo
argument_list|()
return|;
block|}
comment|/** 		 *  Gets the pageNum attribute of the SinglePage object 		 * 		 *@return    The pageNum value 		 */
specifier|public
name|long
name|getPageNum
parameter_list|()
block|{
return|return
name|page
operator|.
name|getPageNum
argument_list|()
return|;
block|}
comment|/** 		 *  Sets the data attribute of the DataPage object 		 * 		 *@param  buf  The new data value 		 */
specifier|public
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|data
operator|=
name|buf
expr_stmt|;
block|}
comment|/** 		 *  Sets the dirty attribute of the SinglePage object 		 * 		 *@param  dirty  The new dirty value 		 */
specifier|public
name|void
name|setDirty
parameter_list|(
name|boolean
name|dirty
parameter_list|)
block|{
name|super
operator|.
name|setDirty
argument_list|(
name|dirty
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|()
throws|throws
name|IOException
block|{
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|writeValue
argument_list|(
name|page
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|saved
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

