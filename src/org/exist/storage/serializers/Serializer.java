begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TemplatesHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ProcessingInstructionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|SessionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|ReceiverToSAX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TransformerFactoryAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  * Serializer base class, used to serialize a document or document fragment   * back to XML. A serializer may be obtained by calling DBBroker.getSerializer().  *  *  The class basically offers two overloaded methods: serialize()  *  and toSAX(). serialize() returns the XML as a string, while  *  toSAX() generates a stream of SAX events. The stream of SAX  *  events is passed to the ContentHandler set by setContentHandler().  *    * Internally, both types of methods pass events to a {@link org.exist.util.serializer.Receiver}.  * Subclasses thus have to implement the various serializeToReceiver() methods.  *  *  Output can be configured through properties. Property keys are defined in classes  * {@link javax.xml.transform.OutputKeys} and {@link org.exist.storage.serializers.EXistOutputKeys}  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Serializer
implements|implements
name|XMLReader
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Serializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_ELEMENT_NAME
init|=
literal|"serializer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_XINCLUDE_ATTRIBUTE
init|=
literal|"enable-xinclude"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLE_XINCLUDE
init|=
literal|"serialization.enable-xinclude"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_XSL_ATTRIBUTE
init|=
literal|"enable-xsl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLE_XSL
init|=
literal|"serialization.enable-xsl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDENT_ATTRIBUTE
init|=
literal|"indent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_INDENT
init|=
literal|"serialization.indent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESS_OUTPUT_ATTRIBUTE
init|=
literal|"compress-output"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_COMPRESS_OUTPUT
init|=
literal|"serialization.compress-output"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_EXIST_ID_ATTRIBUTE
init|=
literal|"add-exist-id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ADD_EXIST_ID
init|=
literal|"serialization.add-exist-id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TAG_MATCHING_ELEMENTS_ATTRIBUTE
init|=
literal|"match-tagging-elements"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TAG_MATCHING_ELEMENTS
init|=
literal|"serialization.match-tagging-elements"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TAG_MATCHING_ATTRIBUTES_ATTRIBUTE
init|=
literal|"match-tagging-attributes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
init|=
literal|"serialization.match-tagging-attributes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_SESSION_ID
init|=
literal|"serialization.session-id"
decl_stmt|;
comment|// constants to configure the highlighting of matches in text and attributes
specifier|public
specifier|final
specifier|static
name|int
name|TAG_NONE
init|=
literal|0x0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_ELEMENT_MATCHES
init|=
literal|0x1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_ATTRIBUTE_MATCHES
init|=
literal|0x2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_BOTH
init|=
literal|0x3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EXIST_ID_NONE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EXIST_ID_ELEMENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EXIST_ID_ALL
init|=
literal|2
decl_stmt|;
specifier|protected
name|int
name|showId
init|=
name|EXIST_ID_NONE
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|GENERATE_DOC_EVENTS
init|=
literal|"sax-document-events"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ENCODING
init|=
literal|"encoding"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_HITS_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"hits"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_START_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"start"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_COUNT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"count"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ELEM_RESULT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"result"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_SESSION_ID
init|=
operator|new
name|QName
argument_list|(
literal|"session"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_TYPE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ELEM_VALUE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"value"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
comment|// required for XQJ/typed information implementation
comment|// -----------------------------------------
specifier|protected
specifier|final
specifier|static
name|QName
name|ELEM_DOC_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"document"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ELEM_ATTR_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"attribute"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ELEM_TEXT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"text"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_URI_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"uri"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_TNS_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"target-namespace"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_LOCAL_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"local"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_PREFIX_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"prefix"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|QName
name|ATTR_HAS_ELEMENT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"has-element"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"exist"
argument_list|)
decl_stmt|;
comment|// -----------------------------------------
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
name|EntityResolver
name|entityResolver
init|=
literal|null
decl_stmt|;
specifier|private
name|ErrorHandler
name|errorHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|SAXTransformerFactory
name|factory
decl_stmt|;
specifier|protected
name|boolean
name|createContainerElements
init|=
literal|false
decl_stmt|;
specifier|protected
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|Properties
name|outputProperties
decl_stmt|;
specifier|protected
name|Templates
name|templates
init|=
literal|null
decl_stmt|;
specifier|protected
name|TransformerHandler
name|xslHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|XIncludeFilter
name|xinclude
decl_stmt|;
specifier|protected
name|CustomMatchListenerFactory
name|customMatchListeners
decl_stmt|;
specifier|protected
name|Receiver
name|receiver
init|=
literal|null
decl_stmt|;
specifier|protected
name|SAXSerializer
name|xmlout
init|=
literal|null
decl_stmt|;
specifier|protected
name|LexicalHandler
name|lexicalHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|Subject
name|user
init|=
literal|null
decl_stmt|;
specifier|protected
name|HttpContext
name|httpContext
init|=
literal|null
decl_stmt|;
specifier|public
class|class
name|HttpContext
block|{
specifier|private
name|RequestWrapper
name|request
init|=
literal|null
decl_stmt|;
specifier|private
name|ResponseWrapper
name|response
init|=
literal|null
decl_stmt|;
specifier|private
name|SessionWrapper
name|session
init|=
literal|null
decl_stmt|;
specifier|public
name|RequestWrapper
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|RequestWrapper
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
specifier|public
name|ResponseWrapper
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
specifier|public
name|void
name|setResponse
parameter_list|(
name|ResponseWrapper
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
specifier|public
name|SessionWrapper
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|SessionWrapper
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setHttpContext
parameter_list|(
name|HttpContext
name|httpContext
parameter_list|)
block|{
name|this
operator|.
name|httpContext
operator|=
name|httpContext
expr_stmt|;
block|}
specifier|public
name|Serializer
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|factory
operator|=
name|TransformerFactoryAllocator
operator|.
name|getTransformerFactory
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
name|xinclude
operator|=
operator|new
name|XIncludeFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|customMatchListeners
operator|=
operator|new
name|CustomMatchListenerFactory
argument_list|(
name|broker
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
name|String
name|option
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ENABLE_XSL
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ENABLE_XINCLUDE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_INDENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_COMPRESS_OUTPUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ADD_EXIST_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|ADD_EXIST_ID
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|boolean
name|tagElements
init|=
literal|true
decl_stmt|,
name|tagAttributes
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_TAG_MATCHING_ELEMENTS
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|tagElements
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_TAG_MATCHING_ATTRIBUTES
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|tagAttributes
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagElements
operator|&&
name|tagAttributes
condition|)
block|{
name|option
operator|=
literal|"both"
expr_stmt|;
block|}
if|else if
condition|(
name|tagElements
condition|)
block|{
name|option
operator|=
literal|"elements"
expr_stmt|;
block|}
if|else if
condition|(
name|tagAttributes
condition|)
block|{
name|option
operator|=
literal|"attributes"
expr_stmt|;
block|}
else|else
block|{
name|option
operator|=
literal|"none"
expr_stmt|;
block|}
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|outputProperties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|key
decl_stmt|;
for|for
control|(
specifier|final
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|properties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|key
operator|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|)
condition|)
block|{
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setProperty
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|table
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|table
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prop
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
switch|switch
condition|(
name|prop
condition|)
block|{
case|case
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
case|:
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|EXistOutputKeys
operator|.
name|ADD_EXIST_ID
case|:
if|if
condition|(
literal|"element"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|showId
operator|=
name|EXIST_ID_ELEMENT
expr_stmt|;
block|}
if|else if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|showId
operator|=
name|EXIST_ID_ALL
expr_stmt|;
block|}
else|else
block|{
name|showId
operator|=
name|EXIST_ID_NONE
expr_stmt|;
block|}
break|break;
default|default:
name|outputProperties
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|boolean
name|isStylesheetApplied
parameter_list|()
block|{
return|return
name|templates
operator|!=
literal|null
return|;
block|}
specifier|protected
name|int
name|getHighlightingMode
parameter_list|()
block|{
specifier|final
name|String
name|option
init|=
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"both"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
operator|||
literal|"all"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
return|return
name|TAG_BOTH
return|;
block|}
if|else if
condition|(
literal|"elements"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
return|return
name|TAG_ELEMENT_MATCHES
return|;
block|}
if|else if
condition|(
literal|"attributes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
return|return
name|TAG_ATTRIBUTE_MATCHES
return|;
block|}
else|else
block|{
return|return
name|TAG_NONE
return|;
block|}
block|}
comment|/** 	 *  If an XSL stylesheet is present, plug it into 	 *  the chain. 	 */
specifier|protected
name|void
name|applyXSLHandler
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
specifier|final
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|xslHandler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setReceiver
argument_list|(
operator|new
name|ReceiverToSAX
argument_list|(
name|xslHandler
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|=
operator|new
name|ReceiverToSAX
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Return my internal EntityResolver 	 * 	 *@return    The entityResolver value 	 */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
comment|/** 	 * Set the current User. A valid user is required to 	 * process XInclude elements. 	 */
specifier|public
name|void
name|setUser
parameter_list|(
name|Subject
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/** 	 * Get the current User. 	 */
specifier|public
name|Subject
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES_PREFIXES
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|)
condition|)
block|{
return|return
name|lexicalHandler
return|;
block|}
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getStylesheetProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|xslHandler
operator|!=
literal|null
condition|)
block|{
return|return
name|xslHandler
operator|.
name|getTransformer
argument_list|()
operator|.
name|getOutputProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputSource
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// only system-ids are handled
specifier|final
name|String
name|doc
init|=
name|input
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"source is not an eXist document"
argument_list|)
throw|;
block|}
name|parse
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|xinclude
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setXQueryContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|xinclude
operator|.
name|setModuleLoadPath
argument_list|(
name|context
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
try|try
block|{
comment|// try to load document from eXist
comment|//TODO: this systemId came from exist, so should be an unchecked create, right?
specifier|final
name|DocumentImpl
name|doc
init|=
name|broker
operator|.
name|getResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|systemId
argument_list|)
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"document "
operator|+
name|systemId
operator|+
literal|" not found in database"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"serializing "
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toSAX
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"permission denied"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Reset the class to its initial state. 	 */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|receiver
operator|=
name|xinclude
expr_stmt|;
name|xinclude
operator|.
name|setModuleLoadPath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|xinclude
operator|.
name|setReceiver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|xslHandler
operator|=
literal|null
expr_stmt|;
name|templates
operator|=
literal|null
expr_stmt|;
name|outputProperties
operator|.
name|clear
argument_list|()
expr_stmt|;
name|showId
operator|=
name|EXIST_ID_NONE
expr_stmt|;
name|httpContext
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|serialize
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|serialize
argument_list|(
name|doc
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Serialize a document to the supplied writer. 	 */
specifier|public
name|void
name|serialize
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|SAXException
block|{
name|serialize
argument_list|(
name|doc
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|boolean
name|prepareStylesheet
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|prepareStylesheet
condition|)
block|{
try|try
block|{
name|prepareStylesheets
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
block|{
name|applyXSLHandler
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//looking for serializer properties in<?exist-serialize?>
specifier|final
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StoredNode
name|node
init|=
operator|(
name|StoredNode
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|&&
literal|"exist-serialize"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|params
index|[]
init|=
operator|(
operator|(
name|ProcessingInstructionImpl
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|param
range|:
name|params
control|)
block|{
specifier|final
name|String
name|opt
index|[]
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|opt
index|[
literal|0
index|]
argument_list|,
name|opt
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|setPrettyPrinter
argument_list|(
name|writer
argument_list|,
literal|"no"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setPrettyPrinter(writer, false);
block|}
name|serializeToReceiver
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeValue
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|serialize
argument_list|(
name|n
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|NodeValue
name|n
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
name|n
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
block|{
name|applyXSLHandler
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
name|setPrettyPrinter
argument_list|(
name|out
argument_list|,
literal|"no"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
argument_list|,
name|n
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|?
operator|(
name|NodeProxy
operator|)
name|n
else|:
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//setPrettyPrinter(out, false);
name|serializeToReceiver
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
block|}
comment|/** 	 *  Serialize a single NodeProxy. 	 * 	 *@param  p                 Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|serialize
argument_list|(
name|p
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
block|{
name|applyXSLHandler
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
name|setPrettyPrinter
argument_list|(
name|out
argument_list|,
literal|"no"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//setPrettyPrinter(out, false);
name|serializeToReceiver
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|prepareStylesheets
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|String
name|stylesheet
init|=
name|hasXSLPi
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|setStylesheet
argument_list|(
name|doc
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
block|}
name|setStylesheetFromProperties
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Set the ContentHandler to be used during serialization. 	 * 	 *@param  contentHandler  The new contentHandler value 	 */
specifier|public
name|void
name|setSAXHandlers
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|LexicalHandler
name|lexicalHandler
parameter_list|)
block|{
name|ReceiverToSAX
name|toSAX
init|=
operator|new
name|ReceiverToSAX
argument_list|(
name|contentHandler
argument_list|)
decl_stmt|;
name|toSAX
operator|.
name|setLexicalHandler
argument_list|(
name|lexicalHandler
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setReceiver
argument_list|(
name|toSAX
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|=
name|toSAX
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setReceiver
parameter_list|(
name|Receiver
name|receiver
parameter_list|)
block|{
name|this
operator|.
name|receiver
operator|=
name|receiver
expr_stmt|;
block|}
specifier|public
name|void
name|setReceiver
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|boolean
name|handleIncludes
parameter_list|)
block|{
if|if
condition|(
name|handleIncludes
operator|&&
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setReceiver
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|this
operator|.
name|receiver
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|receiver
operator|=
name|receiver
expr_stmt|;
block|}
block|}
specifier|public
name|XIncludeFilter
name|getXIncludeFilter
parameter_list|()
block|{
return|return
name|xinclude
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.XMLReader#setContentHandler(org.xml.sax.ContentHandler) 	 */
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Required by interface XMLReader. Always returns null. 	 *  	 * @see org.xml.sax.XMLReader#getContentHandler() 	 */
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Sets the entityResolver attribute of the Serializer object 	 * 	 *@param  resolver  The new entityResolver value 	 */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|entityResolver
operator|=
name|resolver
expr_stmt|;
block|}
comment|/** 	 *  Sets the errorHandler attribute of the Serializer object 	 * 	 *@param  handler  The new errorHandler value 	 */
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|handler
parameter_list|)
block|{
name|errorHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/** 	 *  Sets the feature attribute of the Serializer object 	 * 	 *@param  name                           The new feature value 	 *@param  value                          The new feature value 	 *@exception  SAXNotRecognizedException  Description of the Exception 	 *@exception  SAXNotSupportedException   Description of the Exception 	 */
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES_PREFIXES
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setPrettyPrinter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|boolean
name|xmlDecl
parameter_list|,
name|NodeProxy
name|root
parameter_list|,
name|boolean
name|applyFilters
parameter_list|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
name|xmlDecl
condition|?
literal|"no"
else|:
literal|"yes"
argument_list|)
expr_stmt|;
name|xmlout
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|xmlout
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setReceiver
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|=
name|xmlout
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|getHighlightingMode
argument_list|()
operator|!=
name|TAG_NONE
condition|)
block|{
specifier|final
name|IndexController
name|controller
init|=
name|broker
operator|.
name|getIndexController
argument_list|()
decl_stmt|;
name|MatchListener
name|listener
init|=
name|controller
operator|.
name|getMatchListener
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MatchListener
name|last
init|=
operator|(
name|MatchListener
operator|)
name|listener
operator|.
name|getLastInChain
argument_list|()
decl_stmt|;
name|last
operator|.
name|setNextInChain
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|listener
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|==
literal|null
operator|&&
name|applyFilters
operator|&&
name|customMatchListeners
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|customMatchListeners
operator|.
name|getLast
argument_list|()
operator|.
name|setNextInChain
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|customMatchListeners
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Receiver
name|setupMatchListeners
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
specifier|final
name|Receiver
name|oldReceiver
init|=
name|receiver
decl_stmt|;
if|if
condition|(
name|getHighlightingMode
argument_list|()
operator|!=
name|TAG_NONE
condition|)
block|{
specifier|final
name|IndexController
name|controller
init|=
name|broker
operator|.
name|getIndexController
argument_list|()
decl_stmt|;
name|MatchListener
name|listener
init|=
name|controller
operator|.
name|getMatchListener
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MatchListener
name|last
init|=
operator|(
name|MatchListener
operator|)
name|listener
operator|.
name|getLastInChain
argument_list|()
decl_stmt|;
name|last
operator|.
name|setNextInChain
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|listener
expr_stmt|;
block|}
block|}
return|return
name|oldReceiver
return|;
block|}
specifier|protected
name|void
name|releasePrettyPrinter
parameter_list|()
block|{
if|if
condition|(
name|xmlout
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
block|}
name|xmlout
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|setStylesheetFromProperties
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|stylesheet
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doc
operator|instanceof
name|DocumentImpl
condition|)
block|{
name|setStylesheet
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setStylesheet
argument_list|(
literal|null
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkStylesheetParams
parameter_list|()
block|{
if|if
condition|(
name|xslHandler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|outputProperties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET_PARAM
argument_list|)
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|property
operator|=
name|property
operator|.
name|substring
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET_PARAM
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|xslHandler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setParameter
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 *  Plug an XSL stylesheet into the processing pipeline. 	 *  All output will be passed to this stylesheet. 	 */
specifier|public
name|void
name|setStylesheet
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|String
name|stylesheet
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
if|if
condition|(
name|stylesheet
operator|==
literal|null
condition|)
block|{
name|templates
operator|=
literal|null
expr_stmt|;
return|return;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|xslHandler
operator|=
literal|null
expr_stmt|;
name|XmldbURI
name|stylesheetUri
init|=
literal|null
decl_stmt|;
name|URI
name|externalUri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stylesheetUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stylesheetUri
operator|.
name|toCollectionPathURI
argument_list|()
operator|.
name|equals
argument_list|(
name|stylesheetUri
argument_list|)
condition|)
block|{
name|externalUri
operator|=
name|stylesheetUri
operator|.
name|getXmldbURI
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//could be an external URI!
try|try
block|{
name|externalUri
operator|=
operator|new
name|URI
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|ee
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Stylesheet URI could not be parsed: "
operator|+
name|ee
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// does stylesheet point to an external resource?
if|if
condition|(
name|externalUri
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|externalUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|templates
operator|=
name|factory
operator|.
name|newTemplates
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// read stylesheet from the database
block|}
else|else
block|{
comment|// if stylesheet is relative, add path to the
comment|// current collection and normalize
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|stylesheetUri
operator|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|resolveCollectionPath
argument_list|(
name|stylesheetUri
argument_list|)
operator|.
name|normalizeCollectionPath
argument_list|()
expr_stmt|;
block|}
comment|// load stylesheet from eXist
name|DocumentImpl
name|xsl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xsl
operator|=
name|broker
operator|.
name|getResource
argument_list|(
name|stylesheetUri
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerConfigurationException
argument_list|(
literal|"permission denied to read "
operator|+
name|stylesheetUri
argument_list|)
throw|;
block|}
if|if
condition|(
name|xsl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TransformerConfigurationException
argument_list|(
literal|"stylesheet not found: "
operator|+
name|stylesheetUri
argument_list|)
throw|;
block|}
comment|//TODO: use xmldbURI
if|if
condition|(
name|xsl
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setURIResolver
argument_list|(
operator|new
name|InternalURIResolver
argument_list|(
name|xsl
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// save handlers
name|Receiver
name|oldReceiver
init|=
name|receiver
decl_stmt|;
comment|// compile stylesheet
name|factory
operator|.
name|setErrorListener
argument_list|(
operator|new
name|ErrorListener
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TemplatesHandler
name|handler
init|=
name|factory
operator|.
name|newTemplatesHandler
argument_list|()
decl_stmt|;
name|receiver
operator|=
operator|new
name|ReceiverToSAX
argument_list|(
name|handler
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|serializeToReceiver
argument_list|(
name|xsl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|templates
operator|=
name|handler
operator|.
name|getTemplates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// restore handlers
name|receiver
operator|=
name|oldReceiver
expr_stmt|;
name|factory
operator|.
name|setURIResolver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"compiling stylesheet took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
block|{
name|xslHandler
operator|=
name|factory
operator|.
name|newTransformerHandler
argument_list|(
name|templates
argument_list|)
expr_stmt|;
block|}
comment|//			xslHandler.getTransformer().setOutputProperties(outputProperties);
name|checkStylesheetParams
argument_list|()
expr_stmt|;
block|}
comment|/**  	 * Set stylesheet parameter 	 **/
specifier|public
name|void
name|setStylesheetParam
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|xslHandler
operator|!=
literal|null
condition|)
block|{
name|xslHandler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setParameter
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setXSLHandler
parameter_list|(
name|NodeProxy
name|root
parameter_list|,
name|boolean
name|applyFilters
parameter_list|)
block|{
if|if
condition|(
name|templates
operator|!=
literal|null
operator|&&
name|xslHandler
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SAXResult
name|result
init|=
operator|new
name|SAXResult
argument_list|()
decl_stmt|;
name|boolean
name|processXInclude
init|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
decl_stmt|;
name|ReceiverToSAX
name|filter
decl_stmt|;
if|if
condition|(
name|processXInclude
condition|)
block|{
name|filter
operator|=
operator|(
name|ReceiverToSAX
operator|)
name|xinclude
operator|.
name|getReceiver
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
operator|(
name|ReceiverToSAX
operator|)
name|receiver
expr_stmt|;
block|}
name|result
operator|.
name|setHandler
argument_list|(
name|filter
operator|.
name|getContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setLexicalHandler
argument_list|(
name|filter
operator|.
name|getLexicalHandler
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setLexicalHandler
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setContentHandler
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
name|xslHandler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|processXInclude
condition|)
block|{
name|xinclude
operator|.
name|setReceiver
argument_list|(
operator|new
name|ReceiverToSAX
argument_list|(
name|xslHandler
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|=
operator|new
name|ReceiverToSAX
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|getHighlightingMode
argument_list|()
operator|!=
name|TAG_NONE
condition|)
block|{
specifier|final
name|IndexController
name|controller
init|=
name|broker
operator|.
name|getIndexController
argument_list|()
decl_stmt|;
name|MatchListener
name|listener
init|=
name|controller
operator|.
name|getMatchListener
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MatchListener
name|last
init|=
operator|(
name|MatchListener
operator|)
name|listener
operator|.
name|getLastInChain
argument_list|()
decl_stmt|;
name|last
operator|.
name|setNextInChain
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|listener
expr_stmt|;
block|}
block|}
if|if
condition|(
name|applyFilters
operator|&&
name|root
operator|==
literal|null
operator|&&
name|customMatchListeners
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|customMatchListeners
operator|.
name|getLast
argument_list|()
operator|.
name|setNextInChain
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|customMatchListeners
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|String
name|stylesheet
init|=
name|hasXSLPi
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
try|try
block|{
name|setStylesheet
argument_list|(
name|doc
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|serializeToReceiver
argument_list|(
name|doc
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeValue
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
name|n
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
name|n
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|?
operator|(
name|NodeProxy
operator|)
name|n
else|:
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serializeToReceiver
argument_list|(
name|n
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|serializeToReceiver
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeToReceiver
argument_list|(
name|p
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Serialize the items in the given sequence to SAX, starting with item start. If parameter 	 * wrap is set to true, output a wrapper element to enclose the serialized items. The 	 * wrapper element will be in namespace {@link org.exist.Namespaces#EXIST_NS} and has the following form: 	 *  	 *&lt;exist:result hits="sequence length" start="value of start" count="value of count"> 	 *  	 * @param seq 	 * @param start 	 * @param count 	 * @param wrap Indicates whether the output should be wrapped          * @param typed Indicates whether the output types should be wrapped 	 * @throws SAXException 	 */
specifier|public
name|void
name|toSAX
parameter_list|(
name|Sequence
name|seq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|boolean
name|typed
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|AttrList
name|attrs
init|=
operator|new
name|AttrList
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_HITS_QNAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_START_QNAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_COUNT_QNAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SESSION_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_SESSION_ID
argument_list|,
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SESSION_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|wrap
condition|)
block|{
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_RESULT_QNAME
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|Item
name|item
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|--
name|start
init|;
name|i
operator|<
name|start
operator|+
name|count
condition|;
name|i
operator|++
control|)
block|{
name|item
operator|=
name|seq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"item "
operator|+
name|i
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|itemToSAX
argument_list|(
name|item
argument_list|,
name|typed
argument_list|,
name|wrap
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_RESULT_QNAME
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Serialize the items in the given sequence to SAX, starting with item start. If parameter 	 * wrap is set to true, output a wrapper element to enclose the serialized items. The 	 * wrapper element will be in namespace {@link org.exist.Namespaces#EXIST_NS} and has the following form: 	 *  	 *&lt;exist:result hits="sequence length" start="value of start" count="value of count"> 	 *  	 */
specifier|public
name|void
name|toSAX
parameter_list|(
name|Sequence
name|seq
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startDocument
argument_list|()
expr_stmt|;
try|try
block|{
name|Item
name|item
decl_stmt|;
specifier|final
name|SequenceIterator
name|itSeq
init|=
name|seq
operator|.
name|iterate
argument_list|()
decl_stmt|;
while|while
condition|(
name|itSeq
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|item
operator|=
name|itSeq
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|itemToSAX
argument_list|(
name|item
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Serialize the items in the given sequence to SAX, starting with item start. If parameter 	 * wrap is set to true, output a wrapper element to enclose the serialized items. The 	 * wrapper element will be in namespace {@link org.exist.Namespaces#EXIST_NS} and has the following form: 	 *  	 *&lt;exist:result hits="sequence length" start="value of start" count="value of count"> 	 *  	 * @param wrap Indicates whether the output should be wrapped          * @param typed Indicates whether the output types should be wrapped 	 * @throws SAXException 	 */
specifier|public
name|void
name|toSAX
parameter_list|(
name|Item
name|item
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|boolean
name|typed
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setStylesheetFromProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setXSLHandler
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|AttrList
name|attrs
init|=
operator|new
name|AttrList
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_HITS_QNAME
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_START_QNAME
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_COUNT_QNAME
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SESSION_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_SESSION_ID
argument_list|,
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SESSION_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|wrap
condition|)
block|{
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_RESULT_QNAME
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|itemToSAX
argument_list|(
name|item
argument_list|,
name|typed
argument_list|,
name|wrap
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrap
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_RESULT_QNAME
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|itemToSAX
parameter_list|(
name|Item
name|item
parameter_list|,
name|boolean
name|typed
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|AttrList
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|typed
condition|)
block|{
comment|//TODO the typed and wrapped stuff should ideally be replaced
comment|//with Marshaller.marshallItem
comment|//unfortrunately calling Marshaller.marshallItem(broker, item, new SAXToReceiver(receiver))
comment|//results in a stack overflow
comment|//TODO consider a full XDM serializer in place of this for these special needs
name|serializeTypePreNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATTRIBUTE
condition|)
block|{
name|serializeTypeAttributeValue
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeToReceiver
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|serializeTypePostNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeToReceiver
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wrap
condition|)
block|{
name|attrs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_TYPE_QNAME
argument_list|,
name|Type
operator|.
name|getTypeName
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_VALUE_QNAME
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|receiver
operator|.
name|characters
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_VALUE_QNAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|toReceiver
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|highlightMatches
parameter_list|)
throws|throws
name|SAXException
block|{
name|toReceiver
argument_list|(
name|p
argument_list|,
name|highlightMatches
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toReceiver
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|highlightMatches
parameter_list|,
name|boolean
name|checkAttributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|Receiver
name|oldReceiver
init|=
name|highlightMatches
condition|?
name|setupMatchListeners
argument_list|(
name|p
argument_list|)
else|:
name|receiver
decl_stmt|;
name|serializeToReceiver
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
name|checkAttributes
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|oldReceiver
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|serializeToReceiver
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|generateDocEvent
parameter_list|,
name|boolean
name|checkAttributes
parameter_list|)
throws|throws
name|SAXException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|serializeToReceiver
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|boolean
name|generateDocEvent
parameter_list|)
throws|throws
name|SAXException
function_decl|;
specifier|protected
name|void
name|serializeToReceiver
parameter_list|(
name|NodeValue
name|v
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|serializeToReceiver
argument_list|(
operator|(
name|NodeProxy
operator|)
name|v
argument_list|,
name|generateDocEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeToReceiver
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
operator|)
name|v
argument_list|,
name|generateDocEvents
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|serializeToReceiver
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
name|n
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|generateDocEvents
condition|)
block|{
name|receiver
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
name|setDocument
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setXQueryContext
argument_list|(
name|n
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|streamTo
argument_list|(
name|this
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateDocEvents
condition|)
block|{
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Inherited from XMLReader. Ignored. 	 *  	 * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler) 	 */
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|handler
parameter_list|)
block|{
block|}
comment|/** 	 * Inherited from XMLReader. Ignored. Returns always null. 	 *  	 * @see org.xml.sax.XMLReader#getDTDHandler() 	 */
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Check if the document has an xml-stylesheet processing instruction      * that references an XSLT stylesheet. Return the link to the stylesheet.      *        * @param doc      * @return link to the stylesheet      */
specifier|public
name|String
name|hasXSLPi
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|boolean
name|applyXSLPI
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|applyXSLPI
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|NodeList
name|docChildren
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
name|String
name|xsl
decl_stmt|,
name|type
decl_stmt|,
name|href
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docChildren
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|docChildren
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|&&
literal|"xml-stylesheet"
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|node
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
comment|// found<?xml-stylesheet?>
name|xsl
operator|=
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
expr_stmt|;
name|type
operator|=
name|XMLUtil
operator|.
name|parseValue
argument_list|(
name|xsl
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|XSL_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|XSLT_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|href
operator|=
name|XMLUtil
operator|.
name|parseValue
argument_list|(
name|xsl
argument_list|,
literal|"href"
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
return|return
name|href
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Quick code fix for the remote XQJ API implementation.      *      * attribute name { "value" } ---> goes through fine.      *      * fn:doc($expr)/element()/attribute() ---> fails, as this is      * contained within the Database (not an in memory attribute).      *      * @param item a NodeValue      * @throws SAXException      * @author Charles Foster      */
specifier|protected
name|void
name|serializeTypeAttributeValue
parameter_list|(
name|NodeValue
name|item
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|receiver
operator|.
name|characters
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"XPath error trying to retrieve attribute value. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes a start element for DOCUMENT, ATTRIBUTE and TEXT nodes.      * This is required for the XQJ API implementation.      *      * @param item a NodeValue which will be wrapped in a element.      * @throws SAXException      * @author Charles Foster      */
specifier|protected
name|void
name|serializeTypePreNode
parameter_list|(
name|NodeValue
name|item
parameter_list|)
throws|throws
name|SAXException
block|{
name|AttrList
name|attrs
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|item
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|DOCUMENT
case|:
specifier|final
name|String
name|baseUri
init|=
name|item
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
decl_stmt|;
name|attrs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
if|if
condition|(
name|baseUri
operator|!=
literal|null
operator|&&
name|baseUri
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_URI_QNAME
argument_list|,
name|baseUri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
operator|==
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_HAS_ELEMENT_QNAME
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_DOC_QNAME
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|ATTRIBUTE
case|:
name|attrs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
name|String
name|attributeValue
decl_stmt|;
if|if
condition|(
operator|(
name|attributeValue
operator|=
name|item
operator|.
name|getNode
argument_list|()
operator|.
name|getLocalName
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|attributeValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_LOCAL_QNAME
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|attributeValue
operator|=
name|item
operator|.
name|getNode
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|attributeValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_TNS_QNAME
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|attributeValue
operator|=
name|item
operator|.
name|getNode
argument_list|()
operator|.
name|getPrefix
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|attributeValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|ATTR_PREFIX_QNAME
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_ATTR_QNAME
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|TEXT
case|:
name|receiver
operator|.
name|startElement
argument_list|(
name|ELEM_TEXT_QNAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
comment|/**      * Writes an end element for DOCUMENT, ATTRIBUTE and TEXT nodes.      * This is required for the XQJ API implementation.      *      * @param item the item which will be wrapped in an element.      * @throws SAXException      * @author Charles Foster      */
specifier|protected
name|void
name|serializeTypePostNode
parameter_list|(
name|NodeValue
name|item
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|item
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|DOCUMENT
case|:
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_DOC_QNAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|ATTRIBUTE
case|:
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_ATTR_QNAME
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|TEXT
case|:
name|receiver
operator|.
name|endElement
argument_list|(
name|ELEM_TEXT_QNAME
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
comment|/** 	 *  URIResolver is called by the XSL transformer to handle<xsl:include>, 	 *<xsl:import> ... 	 * 	 *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de> 	 */
specifier|private
class|class
name|InternalURIResolver
implements|implements
name|URIResolver
block|{
specifier|private
name|String
name|collectionId
init|=
literal|null
decl_stmt|;
specifier|public
name|InternalURIResolver
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|collectionId
operator|=
name|collection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|resolve
parameter_list|(
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"resolving stylesheet ref "
operator|+
name|href
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
comment|// href is an URL pointing to an external resource
block|{
return|return
literal|null
return|;
block|}
comment|///TODO : use dedicated function in XmldbURI
specifier|final
name|URI
name|baseURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|collectionId
operator|+
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|href
argument_list|)
decl_stmt|;
name|href
operator|=
name|baseURI
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|newSerializer
argument_list|()
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
name|serializer
argument_list|,
operator|new
name|InputSource
argument_list|(
name|href
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * An error listener that just rethrows the exception      */
specifier|private
specifier|static
class|class
name|ErrorListener
implements|implements
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|ErrorListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning while applying stylesheet: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
throw|throw
name|exception
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatalError
parameter_list|(
name|TransformerException
name|exception
parameter_list|)
throws|throws
name|TransformerException
block|{
throw|throw
name|exception
throw|;
block|}
block|}
block|}
end_class

end_unit

