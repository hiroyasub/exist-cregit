begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TemplatesHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMStreamer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMStreamerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  *  Serializer base class, used to serialize a document or document fragment back to XML.  *  A serializer may be obtained by calling DBBroker.getSerializer().  *  *  The class basically offers two overloaded methods: serialize()  *  and toSAX(). serialize() returns the XML as a string, while  *  toSAX() generates a stream of SAX events. The stream of SAX  *  events is passed to the ContentHandler set by setContentHandler().  *  serialize() internally calls toSAX().  *  *  Output can be configured through properties. Property keys are defined in classes  * {@link javax.xml.transform.OutputKeys} and {@link org.exist.storage.serializers.EXistOutputKeys}  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Serializer
implements|implements
name|XMLReader
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Serializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|EXIST_NS
init|=
literal|"http://exist.sourceforge.net/NS/exist"
decl_stmt|;
comment|// constants to configure the highlighting of matches in text and attributes
specifier|public
specifier|final
specifier|static
name|int
name|TAG_NONE
init|=
literal|0x0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_ELEMENT_MATCHES
init|=
literal|0x1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_ATTRIBUTE_MATCHES
init|=
literal|0x2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TAG_BOTH
init|=
literal|0x4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|GENERATE_DOC_EVENTS
init|=
literal|"sax-document-events"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ENCODING
init|=
literal|"encoding"
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
name|EntityResolver
name|entityResolver
init|=
literal|null
decl_stmt|;
specifier|private
name|ErrorHandler
name|errorHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|SAXTransformerFactory
name|factory
decl_stmt|;
specifier|protected
name|boolean
name|createContainerElements
init|=
literal|false
decl_stmt|;
specifier|protected
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|Properties
name|outputProperties
decl_stmt|;
specifier|protected
name|Templates
name|templates
init|=
literal|null
decl_stmt|;
specifier|protected
name|TransformerHandler
name|xslHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|XIncludeFilter
name|xinclude
decl_stmt|;
specifier|protected
name|SAXSerializer
name|xmlout
init|=
literal|null
decl_stmt|;
specifier|protected
name|ContentHandler
name|contentHandler
decl_stmt|;
specifier|protected
name|DTDHandler
name|dtdHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|LexicalHandler
name|lexicalHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|public
name|Serializer
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|factory
operator|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|xinclude
operator|=
operator|new
name|XIncludeFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|contentHandler
operator|=
name|xinclude
expr_stmt|;
name|String
name|option
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"serialization.enable-xsl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
name|option
argument_list|)
expr_stmt|;
else|else
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"serialization.enable-xinclude"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"serialization.indent"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|boolean
name|tagElements
init|=
literal|true
decl_stmt|,
name|tagAttributes
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"serialization.match-tagging-elements"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|tagElements
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"serialization.match-tagging-attributes"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|tagAttributes
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagElements
operator|&&
name|tagAttributes
condition|)
name|option
operator|=
literal|"both"
expr_stmt|;
if|else if
condition|(
name|tagElements
condition|)
name|option
operator|=
literal|"elements"
expr_stmt|;
if|else if
condition|(
name|tagAttributes
condition|)
name|option
operator|=
literal|"attributes"
expr_stmt|;
else|else
name|option
operator|=
literal|"none"
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|outputProperties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultProperties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
return|return;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|properties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|key
operator|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|)
condition|)
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|else
name|setProperty
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Hashtable
name|table
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|table
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prop
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|prop
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|)
condition|)
block|{
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|boolean
name|isStylesheetApplied
parameter_list|()
block|{
return|return
name|templates
operator|!=
literal|null
return|;
block|}
specifier|protected
name|int
name|getHighlightingMode
parameter_list|()
block|{
name|String
name|option
init|=
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"both"
argument_list|)
condition|)
return|return
name|TAG_BOTH
return|;
if|else if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"elements"
argument_list|)
condition|)
return|return
name|TAG_ELEMENT_MATCHES
return|;
if|else if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"attributes"
argument_list|)
condition|)
return|return
name|TAG_ATTRIBUTE_MATCHES
return|;
else|else
return|return
name|TAG_NONE
return|;
block|}
comment|/** 	 *  If an XSL stylesheet is present, plug it into 	 *  the chain. 	 * 	 *@return StringWriter containing the generated XML 	 */
specifier|protected
name|StringWriter
name|applyXSLHandler
parameter_list|()
block|{
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|sout
argument_list|)
decl_stmt|;
name|xslHandler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setContentHandler
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
block|}
else|else
name|contentHandler
operator|=
name|xslHandler
expr_stmt|;
name|lexicalHandler
operator|=
literal|null
expr_stmt|;
return|return
name|sout
return|;
block|}
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|contentHandler
return|;
block|}
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
name|dtdHandler
return|;
block|}
comment|/** 	 *  Return my internal EntityResolver 	 * 	 *@return    The entityResolver value 	 */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
comment|/** 	 * Set the current User. A valid user is required to 	 * process XInclude elements. 	 */
specifier|public
name|void
name|setUser
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/** 	 * Get the current User. 	 */
specifier|public
name|User
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/features/namespace-prefixes"
argument_list|)
condition|)
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|name
argument_list|)
throw|;
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|)
condition|)
return|return
name|lexicalHandler
return|;
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputSource
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// only system-ids are handled
name|String
name|doc
init|=
name|input
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"source is not an eXist document"
argument_list|)
throw|;
name|parse
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|xinclude
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|contentHandler
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"no content handler"
argument_list|)
throw|;
try|try
block|{
comment|// try to load document from eXist
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|systemId
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"document "
operator|+
name|systemId
operator|+
literal|" not found in database"
argument_list|)
throw|;
else|else
name|LOG
operator|.
name|debug
argument_list|(
literal|"serializing "
operator|+
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read resource"
argument_list|)
throw|;
name|serializeToSAX
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"permission denied"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Reset the class to its initial state. 	 */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|contentHandler
operator|=
name|xinclude
expr_stmt|;
name|xinclude
operator|.
name|setContentHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|xslHandler
operator|=
literal|null
expr_stmt|;
name|templates
operator|=
literal|null
expr_stmt|;
name|outputProperties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 *  Serialize a set of nodes 	 * 	 *@param  set               Description of the Parameter 	 *@param  start             Description of the Parameter 	 *@param  howmany           Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeSet
name|set
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|)
throws|throws
name|SAXException
block|{
return|return
name|serialize
argument_list|(
name|set
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** 	 *  Serialize a set of nodes 	 * 	 *@param  set               Description of the Parameter 	 *@param  start             Description of the Parameter 	 *@param  howmany           Description of the Parameter 	 *@param  queryTime         Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeSet
name|set
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|,
name|long
name|queryTime
parameter_list|)
throws|throws
name|SAXException
block|{
name|StringWriter
name|out
decl_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
name|out
operator|=
name|applyXSLHandler
argument_list|()
expr_stmt|;
else|else
name|out
operator|=
name|setPrettyPrinter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serializeToSAX
argument_list|(
name|set
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|queryTime
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Serialize a document 	 * 	 *@param  doc               Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|String
name|stylesheet
init|=
name|hasXSLPi
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
name|setStylesheet
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|out
decl_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
name|out
operator|=
name|applyXSLHandler
argument_list|()
expr_stmt|;
else|else
name|out
operator|=
name|setPrettyPrinter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serializeToSAX
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Serialize a single node. 	 * 	 *@param  n                 Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeImpl
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
name|StringWriter
name|out
decl_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
name|out
operator|=
name|applyXSLHandler
argument_list|()
expr_stmt|;
else|else
name|out
operator|=
name|setPrettyPrinter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serializeToSAX
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeValue
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
name|StringWriter
name|out
decl_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
name|out
operator|=
name|applyXSLHandler
argument_list|()
expr_stmt|;
else|else
name|out
operator|=
name|setPrettyPrinter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serializeToSAX
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Serialize a single NodeProxy. 	 * 	 *@param  p                 Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|String
name|serialize
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
throws|throws
name|SAXException
block|{
name|StringWriter
name|out
decl_stmt|;
if|if
condition|(
name|templates
operator|!=
literal|null
condition|)
name|out
operator|=
name|applyXSLHandler
argument_list|()
expr_stmt|;
else|else
name|out
operator|=
name|setPrettyPrinter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serializeToSAX
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releasePrettyPrinter
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Serialize a document to a SAX stream 	 * 	 *@param  doc               Description of the Parameter 	 *@param  generateDocEvent  Description of the Parameter 	 *@exception  SAXException  Description of the Exception 	 */
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|boolean
name|generateDocEvent
parameter_list|)
throws|throws
name|SAXException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setDocument
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|generateDocEvent
condition|)
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|EXIST_NS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
operator|(
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|toSAX
argument_list|(
name|contentHandler
argument_list|,
name|lexicalHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateDocEvent
condition|)
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"serializing document took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Serialize a NodeSet to the SAX stream 	 * 	 *@param  set               Description of the Parameter 	 *@param  start             Description of the Parameter 	 *@param  howmany           Description of the Parameter 	 *@param  queryTime         Description of the Parameter 	 *@exception  SAXException  Description of the Exception 	 */
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|NodeSet
name|set
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|,
name|long
name|queryTime
parameter_list|)
throws|throws
name|SAXException
block|{
name|NodeImpl
name|n
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|EXIST_NS
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"hitCount"
argument_list|,
literal|"hitCount"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryTime
operator|>=
literal|0
condition|)
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"queryTime"
argument_list|,
literal|"queryTime"
argument_list|,
literal|"CDATA"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|queryTime
argument_list|)
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|startElement
argument_list|(
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|-
literal|1
init|;
name|i
operator|<
name|start
operator|+
name|howmany
operator|-
literal|1
operator|&&
name|i
operator|<
name|set
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
operator|(
name|NodeImpl
operator|)
name|set
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|setDocument
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|n
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
name|n
operator|.
name|toSAX
argument_list|(
name|contentHandler
argument_list|,
name|lexicalHandler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|contentHandler
operator|.
name|endElement
argument_list|(
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|NodeValue
name|v
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
name|serializeToSAX
argument_list|(
operator|(
name|NodeProxy
operator|)
name|v
argument_list|,
name|generateDocEvents
argument_list|)
expr_stmt|;
else|else
name|serializeToSAX
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
operator|)
name|v
argument_list|,
name|generateDocEvents
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Serialize a single Node to the SAX stream 	 * 	 *@param  n                  Description of the Parameter 	 *@param  generateDocEvents  Description of the Parameter 	 *@exception  SAXException   Description of the Exception 	 */
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|NodeImpl
name|n
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|generateDocEvents
condition|)
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|EXIST_NS
argument_list|)
expr_stmt|;
name|setDocument
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|n
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|toSAX
argument_list|(
name|contentHandler
argument_list|,
name|lexicalHandler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateDocEvents
condition|)
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
name|n
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|generateDocEvents
condition|)
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
comment|//contentHandler.startPrefixMapping("exist", EXIST_NS);
name|DOMStreamer
name|streamer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|streamer
operator|=
name|DOMStreamerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowDOMStreamer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|setContentHandler
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|setLexicalHandler
argument_list|(
name|lexicalHandler
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|serialize
argument_list|(
name|n
argument_list|,
name|generateDocEvents
argument_list|)
expr_stmt|;
comment|//contentHandler.endPrefixMapping("exist");
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|DOMStreamerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnDOMStreamer
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|generateDocEvents
condition|)
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
comment|/** 	 *  Serialize a single NodeProxy to the SAX stream 	 * 	 *@param  p                  Description of the Parameter 	 *@param  generateDocEvents  Description of the Parameter 	 *@exception  SAXException   Description of the Exception 	 */
specifier|protected
name|void
name|serializeToSAX
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|generateDocEvents
parameter_list|)
throws|throws
name|SAXException
block|{
name|NodeImpl
name|n
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|gid
operator|<
literal|0
condition|)
name|n
operator|=
operator|(
name|NodeImpl
operator|)
name|p
operator|.
name|doc
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
else|else
name|n
operator|=
operator|(
name|NodeImpl
operator|)
name|p
operator|.
name|getNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
name|serializeToSAX
argument_list|(
name|n
argument_list|,
name|generateDocEvents
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Set the ContentHandler to be used during serialization. 	 * 	 *@param  contentHandler  The new contentHandler value 	 */
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|xinclude
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|contentHandler
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
name|contentHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/** 	 *  Set the DTDHandler to be used during serialization. 	 * 	 *@param  handler  The new dTDHandler value 	 */
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|handler
parameter_list|)
block|{
name|dtdHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/** 	 *  Sets the entityResolver attribute of the Serializer object 	 * 	 *@param  resolver  The new entityResolver value 	 */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|entityResolver
operator|=
name|resolver
expr_stmt|;
block|}
comment|/** 	 *  Sets the errorHandler attribute of the Serializer object 	 * 	 *@param  handler  The new errorHandler value 	 */
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|handler
parameter_list|)
block|{
name|errorHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/** 	 *  Sets the feature attribute of the Serializer object 	 * 	 *@param  name                           The new feature value 	 *@param  value                          The new feature value 	 *@exception  SAXNotRecognizedException  Description of the Exception 	 *@exception  SAXNotSupportedException   Description of the Exception 	 */
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/features/namespace-prefixes"
argument_list|)
condition|)
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
name|name
argument_list|)
throw|;
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
comment|/** 	 *  Sets the lexicalHandler attribute of the Serializer object 	 * 	 *@param  lexicalHandler  The new lexicalHandler value 	 */
specifier|public
name|void
name|setLexicalHandler
parameter_list|(
name|LexicalHandler
name|lexicalHandler
parameter_list|)
block|{
name|this
operator|.
name|lexicalHandler
operator|=
name|lexicalHandler
expr_stmt|;
block|}
specifier|protected
name|StringWriter
name|setPrettyPrinter
parameter_list|(
name|boolean
name|xmlDecl
parameter_list|)
block|{
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
name|xmlDecl
condition|?
literal|"no"
else|:
literal|"yes"
argument_list|)
expr_stmt|;
name|xmlout
operator|=
name|SAXSerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowSAXSerializer
argument_list|()
expr_stmt|;
name|xmlout
operator|.
name|setWriter
argument_list|(
name|sout
argument_list|)
expr_stmt|;
name|xmlout
operator|.
name|setOutputProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|setContentHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|setLexicalHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
return|return
name|sout
return|;
block|}
specifier|protected
name|void
name|releasePrettyPrinter
parameter_list|()
block|{
if|if
condition|(
name|xmlout
operator|!=
literal|null
condition|)
name|SAXSerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnSAXSerializer
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|xmlout
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setStylesheet
parameter_list|(
name|String
name|stylesheet
parameter_list|)
block|{
name|setStylesheet
argument_list|(
literal|null
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Sets the stylesheet attribute of the Serializer object 	 * 	 *@param  stylesheet                             The new stylesheet value 	 *@exception  SAXException                       Description of the 	 *      Exception 	 *@exception  TransformerConfigurationException  Description of the 	 *      Exception 	 */
specifier|public
name|void
name|setStylesheet
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|String
name|stylesheet
parameter_list|)
block|{
if|if
condition|(
name|stylesheet
operator|==
literal|null
condition|)
block|{
name|templates
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|xslHandler
operator|=
literal|null
expr_stmt|;
try|try
block|{
comment|// does stylesheet point to an external resource?
if|if
condition|(
name|stylesheet
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|stylesheet
argument_list|)
decl_stmt|;
name|templates
operator|=
name|factory
operator|.
name|newTemplates
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// read stylesheet from the database
block|}
else|else
block|{
comment|// if stylesheet is relative, add path to the
comment|// current collection
if|if
condition|(
name|stylesheet
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
operator|&&
name|doc
operator|!=
literal|null
condition|)
name|stylesheet
operator|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|stylesheet
expr_stmt|;
comment|// load stylesheet from eXist
name|DocumentImpl
name|xsl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xsl
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"permission denied to read stylesheet"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xsl
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"stylesheet not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|xsl
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Permission denied to read stylesheet doc."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|xsl
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setURIResolver
argument_list|(
operator|new
name|InternalURIResolver
argument_list|(
name|xsl
operator|.
name|getCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// save handlers
name|ContentHandler
name|oldHandler
init|=
name|contentHandler
decl_stmt|;
name|LexicalHandler
name|oldLexical
init|=
name|lexicalHandler
decl_stmt|;
comment|// compile stylesheet
name|TemplatesHandler
name|handler
init|=
name|factory
operator|.
name|newTemplatesHandler
argument_list|()
decl_stmt|;
name|contentHandler
operator|=
name|handler
expr_stmt|;
try|try
block|{
name|this
operator|.
name|toSAX
argument_list|(
name|xsl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"SAXException while creating template"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|templates
operator|=
name|handler
operator|.
name|getTemplates
argument_list|()
expr_stmt|;
comment|// restore handlers
name|contentHandler
operator|=
name|oldHandler
expr_stmt|;
name|lexicalHandler
operator|=
name|oldLexical
expr_stmt|;
name|factory
operator|.
name|setURIResolver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"compiling stylesheet took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|xslHandler
operator|=
operator|(
operator|(
name|SAXTransformerFactory
operator|)
name|factory
operator|)
operator|.
name|newTransformerHandler
argument_list|(
name|templates
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"error compiling stylesheet"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**  	 * Set stylesheet parameter 	 **/
specifier|public
name|void
name|setStylesheetParamameter
parameter_list|(
name|String
name|valore
parameter_list|,
name|String
name|valore1
parameter_list|)
block|{
if|if
condition|(
name|xslHandler
operator|!=
literal|null
condition|)
name|xslHandler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setParameter
argument_list|(
name|valore
argument_list|,
name|valore1
argument_list|)
expr_stmt|;
block|}
comment|/**  Sets the xSLHandler attribute of the Serializer object */
specifier|protected
name|void
name|setXSLHandler
parameter_list|()
block|{
if|if
condition|(
name|templates
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|xslHandler
operator|!=
literal|null
condition|)
block|{
name|SAXResult
name|result
init|=
operator|new
name|SAXResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setLexicalHandler
argument_list|(
name|lexicalHandler
argument_list|)
expr_stmt|;
name|boolean
name|processXInclude
init|=
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|processXInclude
condition|)
name|result
operator|.
name|setHandler
argument_list|(
name|xinclude
operator|.
name|getContentHandler
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|setHandler
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
name|xslHandler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|processXInclude
condition|)
block|{
name|xinclude
operator|.
name|setContentHandler
argument_list|(
name|xslHandler
argument_list|)
expr_stmt|;
name|contentHandler
operator|=
name|xinclude
expr_stmt|;
block|}
else|else
name|contentHandler
operator|=
name|xslHandler
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeSet
name|set
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|)
throws|throws
name|SAXException
block|{
name|toSAX
argument_list|(
name|set
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeSet
name|set
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|,
name|long
name|queryTime
parameter_list|)
throws|throws
name|SAXException
block|{
name|setXSLHandler
argument_list|()
expr_stmt|;
name|serializeToSAX
argument_list|(
name|set
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|queryTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|String
name|stylesheet
init|=
name|hasXSLPi
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
name|setStylesheet
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|doc
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|setXSLHandler
argument_list|()
expr_stmt|;
name|serializeToSAX
argument_list|(
name|doc
argument_list|,
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeImpl
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
name|setXSLHandler
argument_list|()
expr_stmt|;
name|serializeToSAX
argument_list|(
name|n
argument_list|,
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeValue
name|n
parameter_list|)
throws|throws
name|SAXException
block|{
name|setXSLHandler
argument_list|()
expr_stmt|;
name|serializeToSAX
argument_list|(
name|n
argument_list|,
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toSAX
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
throws|throws
name|SAXException
block|{
name|setXSLHandler
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|gid
operator|<
literal|0
condition|)
name|serializeToSAX
argument_list|(
name|p
operator|.
name|doc
argument_list|,
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|serializeToSAX
argument_list|(
name|p
argument_list|,
name|getProperty
argument_list|(
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toReceiver
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|serializeToReceiver
argument_list|(
name|p
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|serializeToReceiver
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
function_decl|;
specifier|private
name|String
name|hasXSLPi
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|NodeList
name|docChildren
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
name|String
name|xsl
decl_stmt|,
name|type
decl_stmt|,
name|href
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docChildren
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|docChildren
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|&&
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|node
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xml-stylesheet"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found stylesheet instruction"
argument_list|)
expr_stmt|;
comment|// found<?xml-stylesheet?>
name|xsl
operator|=
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
expr_stmt|;
name|type
operator|=
name|XMLUtil
operator|.
name|parseValue
argument_list|(
name|xsl
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"text/xml"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"text/xsl"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"application/xslt+xml"
argument_list|)
operator|)
condition|)
block|{
name|href
operator|=
name|XMLUtil
operator|.
name|parseValue
argument_list|(
name|xsl
argument_list|,
literal|"href"
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|==
literal|null
condition|)
continue|continue;
name|LOG
operator|.
name|debug
argument_list|(
literal|"stylesheet = "
operator|+
name|href
argument_list|)
expr_stmt|;
return|return
name|href
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 *  URIResolver is called by the XSL transformer to handle<xsl:include>, 	 *<xsl:import> ... 	 * 	 *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de> 	 *@created    20. April 2002 	 */
specifier|private
class|class
name|InternalURIResolver
implements|implements
name|URIResolver
block|{
specifier|private
name|String
name|collectionId
init|=
literal|null
decl_stmt|;
comment|/** 		 *  Constructor for the InternalURIResolver object 		 * 		 *@param  collection  Description of the Parameter 		 */
specifier|public
name|InternalURIResolver
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|collectionId
operator|=
name|collection
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  href                      Description of the Parameter 		 *@param  base                      Description of the Parameter 		 *@return                           Description of the Return Value 		 *@exception  TransformerException  Description of the Exception 		 */
specifier|public
name|Source
name|resolve
parameter_list|(
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"resolving stylesheet ref "
operator|+
name|href
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>
operator|-
literal|1
condition|)
comment|// href is an URL pointing to an external resource
return|return
literal|null
return|;
if|if
condition|(
operator|(
operator|!
name|href
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|)
operator|&&
name|collectionId
operator|!=
literal|null
condition|)
name|href
operator|=
operator|(
name|collectionId
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|'/'
operator|+
name|href
else|:
name|collectionId
operator|+
literal|'/'
operator|+
name|href
operator|)
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|newSerializer
argument_list|()
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
name|serializer
argument_list|,
operator|new
name|InputSource
argument_list|(
name|href
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

