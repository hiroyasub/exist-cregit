begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/** * ElementIndex collects all element occurrences. It uses the name of the * element and the current doc_id as keys and stores all occurrences * of this element in a blob. This means that the blob just contains * an array of gid's which may be compressed if useCompression is true. * Storing all occurrences in one large blob is much faster than storing * each of them in a single table row. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ElementIndex
extends|extends
name|Observable
block|{
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|TreeMap
name|elementIds
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|protected
name|DocumentImpl
name|doc
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|ElementIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|addRow
parameter_list|(
name|String
name|element_id
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|flush
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|reindex
parameter_list|(
name|DocumentImpl
name|oldDoc
parameter_list|,
name|NodeImpl
name|node
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|remove
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|sync
parameter_list|()
function_decl|;
block|}
end_class

end_unit

