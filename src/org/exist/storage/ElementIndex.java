begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Encoder
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_comment
comment|//import gnu.trove.THashMap;
end_comment

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_comment
comment|/** * ElementIndex collects all element occurrences. It uses the name of the * element and the current doc_id as keys and stores all occurrences * of this element in a blob. This means that the blob just contains * an array of gid's which may be compressed if useCompression is true. * Storing all occurrences in one large blob is much faster than storing * each of them in a single table row. */
end_comment

begin_class
specifier|public
class|class
name|ElementIndex
extends|extends
name|Observable
block|{
specifier|protected
name|DBConnectionPool
name|pool
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_insert
decl_stmt|,
name|m_get
decl_stmt|,
name|m_update
decl_stmt|;
specifier|protected
name|Statement
name|stmt
decl_stmt|;
specifier|protected
name|TreeMap
name|elementIds
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|protected
name|DocumentImpl
name|doc
decl_stmt|;
specifier|protected
name|boolean
name|useCompression
init|=
literal|false
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|ElementIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|ElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|DBConnectionPool
name|pool
parameter_list|,
name|boolean
name|compress
parameter_list|)
block|{
name|this
argument_list|(
name|broker
argument_list|,
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|useCompression
operator|=
name|compress
expr_stmt|;
block|}
specifier|public
name|ElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|DBConnectionPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|m_insert
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into b_element (doc_id, element_id, data)"
operator|+
literal|" values (?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_get
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select element_id from b_element where doc_id=? and "
operator|+
literal|"element_id=?"
argument_list|)
expr_stmt|;
name|m_update
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"update b_element set data=concat(data, ?) "
operator|+
literal|"where doc_id=? and element_id=?"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|int
name|element_id
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Integer
name|id
init|=
operator|new
name|Integer
argument_list|(
name|element_id
argument_list|)
decl_stmt|;
name|ArrayList
name|list
decl_stmt|;
if|if
condition|(
name|elementIds
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
name|list
operator|=
operator|(
name|ArrayList
operator|)
name|elementIds
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
else|else
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|elementIds
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|lockTables
parameter_list|()
block|{
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"lock tables b_element write"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not lock tables: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unlockTables
parameter_list|()
block|{
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"unlock tables"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not unlock tables: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|elementIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|RelationalBroker
operator|.
name|MYSQL
condition|)
name|lockTables
argument_list|()
expr_stmt|;
else|else
try|try
block|{
name|m_insert
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|ProgressIndicator
name|progress
init|=
operator|new
name|ProgressIndicator
argument_list|(
name|elementIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|elementIds
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|Integer
name|id
init|=
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArrayList
name|list
init|=
operator|(
name|ArrayList
operator|)
name|elementIds
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|VariableByteOutputStream
name|ostream
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
name|long
name|gid
decl_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|gid
operator|=
operator|(
operator|(
name|NodeProxy
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getGID
argument_list|()
expr_stmt|;
name|ostream
operator|.
name|writeLong
argument_list|(
name|gid
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|ostream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
try|try
block|{
name|m_insert
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|id
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|b
parameter_list|)
block|{
comment|// happens sometimes, don't know why.
name|LOG
operator|.
name|warn
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|//progress.set(count);
name|progress
operator|.
name|setValue
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
name|elementIds
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|RelationalBroker
operator|.
name|MYSQL
condition|)
name|unlockTables
argument_list|()
expr_stmt|;
else|else
try|try
block|{
name|m_insert
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
specifier|static
name|void
name|quickSort
parameter_list|(
name|long
index|[]
name|list
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
if|if
condition|(
name|low
operator|>=
name|high
condition|)
return|return;
name|int
name|left_index
init|=
name|low
decl_stmt|;
name|int
name|right_index
init|=
name|high
decl_stmt|;
name|long
name|pivot
init|=
name|list
index|[
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
index|]
decl_stmt|;
do|do
block|{
while|while
condition|(
name|left_index
operator|<=
name|high
operator|&&
name|list
index|[
name|left_index
index|]
operator|<
name|pivot
condition|)
name|left_index
operator|++
expr_stmt|;
while|while
condition|(
name|right_index
operator|>=
name|low
operator|&&
name|list
index|[
name|right_index
index|]
operator|>
name|pivot
condition|)
name|right_index
operator|--
expr_stmt|;
if|if
condition|(
name|left_index
operator|<=
name|right_index
condition|)
block|{
if|if
condition|(
name|list
index|[
name|left_index
index|]
operator|==
name|list
index|[
name|right_index
index|]
condition|)
block|{
name|left_index
operator|++
expr_stmt|;
name|right_index
operator|--
expr_stmt|;
block|}
else|else
block|{
name|long
name|temp
init|=
name|list
index|[
name|right_index
index|]
decl_stmt|;
name|list
index|[
name|right_index
operator|--
index|]
operator|=
name|list
index|[
name|left_index
index|]
expr_stmt|;
name|list
index|[
name|left_index
operator|++
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|left_index
operator|<=
name|right_index
condition|)
do|;
name|quickSort
argument_list|(
name|list
argument_list|,
name|low
argument_list|,
name|right_index
argument_list|)
expr_stmt|;
name|quickSort
argument_list|(
name|list
argument_list|,
name|left_index
argument_list|,
name|high
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

