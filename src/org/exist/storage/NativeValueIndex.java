begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_comment
comment|//import java.io.EOFException;
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteArrayInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ValueOccurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Maintains an index on typed node values.  *   * TODO: Check correct types during validation.  *   * In the BTree single BFile, the keys are :  * (collectionId, indexType, indexData)  * and the values are : gid1, gid2-gid1, ...  *<b></b>  *<p>Algorithm:</p>  * When a node is stored, an entry is added or updated in the {@link #pending} map,   * with given String content and basic type as key.  * This way, the index entries are easily put in the persistent BFile storage by   * {@link #flush()} .  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|NativeValueIndex
implements|implements
name|ContentLoadingObserver
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NativeValueIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"values.dbx"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FILE_KEY_IN_CONFIG
init|=
literal|"db-connection.values"
decl_stmt|;
comment|//TODO : find the real semantics
specifier|public
specifier|static
specifier|final
name|int
name|WITH_PATH
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|WITHOUT_PATH
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_VALUE_CACHE_GROWTH
init|=
literal|1.25
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_VALUE_KEY_THRESHOLD
init|=
literal|0.01
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_VALUE_VALUE_THRESHOLD
init|=
literal|0.04
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OFFSET_COLLECTION_ID
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OFFSET_VALUE_TYPE
init|=
name|OFFSET_COLLECTION_ID
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
decl_stmt|;
comment|//2
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_VALUE_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
specifier|static
specifier|final
name|int
name|OFFSET_DATA
init|=
name|OFFSET_VALUE_TYPE
operator|+
name|NativeValueIndex
operator|.
name|LENGTH_VALUE_TYPE
decl_stmt|;
comment|//3
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_NODE_IDS
init|=
literal|4
decl_stmt|;
comment|//sizeof int
specifier|public
specifier|final
specifier|static
name|byte
name|IDX_GENERIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|IDX_QNAME
init|=
literal|1
decl_stmt|;
comment|/** The broker that is using this value index */
name|DBBroker
name|broker
decl_stmt|;
comment|/** The datastore for this value index */
specifier|protected
name|BFile
name|dbValues
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
comment|/** A collection of key-value pairs that pending modifications for this value index.        * The keys are {@link org.exist.xquery.value.AtomicValue atomic values}      * that implement {@link Indexable Indexable}. 	 * The values are {@link org.exist.util.LongLinkedList lists} containing 	 * the nodes GIDs (global identifiers.      */
specifier|protected
name|Map
index|[]
name|pending
init|=
operator|new
name|Map
index|[
literal|2
index|]
decl_stmt|;
comment|/** The current document */
specifier|private
name|DocumentImpl
name|doc
decl_stmt|;
comment|/** Work output Stream taht should be cleared before every use */
specifier|private
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
comment|//TODO : reconsider this. Case sensitivity have nothing to do with atomic values -pb
specifier|protected
name|boolean
name|caseSensitive
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROPERTY_INDEX_CASE_SENSITIVE
init|=
literal|"indexer.case-sensitive"
decl_stmt|;
specifier|public
name|NativeValueIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|byte
name|id
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|DBException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|pending
index|[
name|IDX_GENERIC
index|]
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|pending
index|[
name|IDX_QNAME
index|]
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
comment|//use inheritance if necessary !
comment|//TODO : read from configuration (key ?)
name|double
name|cacheGrowth
init|=
name|NativeValueIndex
operator|.
name|DEFAULT_VALUE_CACHE_GROWTH
decl_stmt|;
name|double
name|cacheKeyThresdhold
init|=
name|NativeValueIndex
operator|.
name|DEFAULT_VALUE_KEY_THRESHOLD
decl_stmt|;
name|double
name|cacheValueThresHold
init|=
name|NativeValueIndex
operator|.
name|DEFAULT_VALUE_VALUE_THRESHOLD
decl_stmt|;
name|BFile
name|nativeFile
init|=
operator|(
name|BFile
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|getConfigKeyForFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nativeFile
operator|==
literal|null
condition|)
block|{
comment|//use inheritance
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating '"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
name|nativeFile
operator|=
operator|new
name|BFile
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|id
argument_list|,
literal|false
argument_list|,
name|file
argument_list|,
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|cacheGrowth
argument_list|,
name|cacheKeyThresdhold
argument_list|,
name|cacheValueThresHold
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|getConfigKeyForFile
argument_list|()
argument_list|,
name|nativeFile
argument_list|)
expr_stmt|;
block|}
name|dbValues
operator|=
name|nativeFile
expr_stmt|;
comment|//TODO : reconsider this. Case sensitivity have nothing to do with atomic values -pb
name|Boolean
name|caseOpt
init|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|NativeValueIndex
operator|.
name|PROPERTY_INDEX_CASE_SENSITIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|caseOpt
operator|!=
literal|null
condition|)
name|caseSensitive
operator|=
name|caseOpt
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|broker
operator|.
name|addContentLoadingObserver
argument_list|(
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|FILE_NAME
return|;
block|}
specifier|public
name|String
name|getConfigKeyForFile
parameter_list|()
block|{
return|return
name|FILE_KEY_IN_CONFIG
return|;
block|}
specifier|public
name|NativeValueIndex
name|getInstance
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.ContentLoadingObserver#setDocument(org.exist.dom.DocumentImpl)      */
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|document
expr_stmt|;
block|}
comment|/** Store the given element's value in the value index.      * @param xpathType The value type      * @param node The element      * @param content The string representation of the value      */
specifier|public
name|void
name|storeElement
parameter_list|(
name|ElementImpl
name|node
parameter_list|,
name|String
name|content
parameter_list|,
name|int
name|xpathType
parameter_list|,
name|byte
name|indexType
parameter_list|,
name|boolean
name|remove
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|node
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id ('"
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') and proxy id ('"
operator|+
name|node
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') differ !"
argument_list|)
throw|;
block|}
name|AtomicValue
name|atomic
init|=
name|convertToAtomic
argument_list|(
name|xpathType
argument_list|,
name|content
argument_list|)
decl_stmt|;
comment|//Ignore if the value can't be successfully atomized
comment|//(this is logged elsewhere)
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
return|return;
name|Object
name|key
decl_stmt|;
if|if
condition|(
name|indexType
operator|==
name|IDX_QNAME
condition|)
block|{
name|key
operator|=
operator|new
name|QNameKey
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|,
name|atomic
argument_list|)
expr_stmt|;
block|}
else|else
name|key
operator|=
name|atomic
expr_stmt|;
if|if
condition|(
operator|!
name|remove
condition|)
block|{
name|ArrayList
name|buf
decl_stmt|;
comment|//Is this indexable value already pending ?
if|if
condition|(
name|pending
index|[
name|indexType
index|]
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
name|buf
operator|=
operator|(
name|ArrayList
operator|)
name|pending
index|[
name|indexType
index|]
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|else
block|{
comment|//Create a NodeId list
name|buf
operator|=
operator|new
name|ArrayList
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|pending
index|[
name|indexType
index|]
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|//Add node's NodeId to the list
name|buf
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|pending
index|[
name|indexType
index|]
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
name|pending
index|[
name|indexType
index|]
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Store the given attribute's value in the value index.      * @param spec The index specification      * @param node The attribute      */
specifier|public
name|void
name|storeAttribute
parameter_list|(
name|AttrImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|int
name|indexingHint
parameter_list|,
name|RangeIndexSpec
name|spec
parameter_list|,
name|boolean
name|remove
parameter_list|)
block|{
comment|//Return early
if|if
condition|(
name|indexingHint
operator|!=
name|WITHOUT_PATH
condition|)
return|return;
if|if
condition|(
name|doc
operator|!=
literal|null
operator|&&
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|node
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id ('"
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') and proxy id ('"
operator|+
name|node
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') differ !"
argument_list|)
throw|;
block|}
name|AtomicValue
name|atomic
init|=
name|convertToAtomic
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|//Ignore if the value can't be successfully atomized
comment|//(this is logged elsewhere)
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
return|return;
name|int
name|indexType
init|=
name|spec
operator|.
name|getQName
argument_list|()
operator|==
literal|null
condition|?
name|IDX_GENERIC
else|:
name|IDX_QNAME
decl_stmt|;
name|Object
name|key
decl_stmt|;
if|if
condition|(
name|indexType
operator|==
name|IDX_QNAME
condition|)
block|{
name|key
operator|=
operator|new
name|QNameKey
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|,
name|atomic
argument_list|)
expr_stmt|;
block|}
else|else
name|key
operator|=
name|atomic
expr_stmt|;
if|if
condition|(
operator|!
name|remove
condition|)
block|{
name|ArrayList
name|buf
decl_stmt|;
comment|//Is this indexable value already pending ?
if|if
condition|(
name|pending
index|[
name|indexType
index|]
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
comment|//Reuse the existing NodeId list
name|buf
operator|=
operator|(
name|ArrayList
operator|)
name|pending
index|[
name|indexType
index|]
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|else
block|{
comment|//Create a NodeId list
name|buf
operator|=
operator|new
name|ArrayList
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|pending
index|[
name|indexType
index|]
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|//Add node's GID to the list
name|buf
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|pending
index|[
name|indexType
index|]
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
name|pending
index|[
name|indexType
index|]
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|storeText
parameter_list|(
name|TextImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|int
name|indexingHint
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|ElementImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|boolean
name|index
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|int
name|xpathType
parameter_list|,
name|ElementImpl
name|node
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|removeElement
parameter_list|(
name|ElementImpl
name|node
parameter_list|,
name|NodePath
name|currentPath
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.IndexGenerator#sync()      */
specifier|public
name|void
name|sync
parameter_list|()
block|{
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|dbValues
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw an exception ? -pb
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.IndexGenerator#flush() 	 */
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|//TODO : return if doc == null? -pb
name|int
name|keyCount
init|=
name|pending
index|[
name|IDX_GENERIC
index|]
operator|.
name|size
argument_list|()
operator|+
name|pending
index|[
name|IDX_QNAME
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyCount
operator|==
literal|0
condition|)
return|return;
specifier|final
name|short
name|collectionId
init|=
name|this
operator|.
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|section
init|=
literal|0
init|;
name|section
operator|<=
name|IDX_QNAME
condition|;
name|section
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pending
index|[
name|section
index|]
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//TODO : NativeElementIndex uses ArrayLists -pb
name|ArrayList
name|gids
init|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|gids
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Don't forget this one
name|FastQSort
operator|.
name|sort
argument_list|(
name|gids
argument_list|,
literal|0
argument_list|,
name|gidsCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|nodeIDsLength
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//Compute the GID list
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|gids
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
try|try
block|{
name|previous
operator|=
name|nodeId
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
comment|//                        nodeId.write(os);
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error while writing range index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception?
block|}
block|}
comment|//Write (variable) length of node IDs
name|os
operator|.
name|writeFixedInt
argument_list|(
name|nodeIDsLength
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|nodeIDsLength
operator|-
name|LENGTH_NODE_IDS
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|Value
name|v
decl_stmt|;
if|if
condition|(
name|section
operator|==
name|IDX_GENERIC
condition|)
name|v
operator|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
expr_stmt|;
else|else
block|{
name|QNameKey
name|qnk
init|=
operator|(
name|QNameKey
operator|)
name|key
decl_stmt|;
name|v
operator|=
operator|new
name|QNameValue
argument_list|(
name|collectionId
argument_list|,
name|qnk
operator|.
name|qname
argument_list|,
name|qnk
operator|.
name|value
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbValues
operator|.
name|append
argument_list|(
name|v
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not append index data for key '"
operator|+
name|key
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Return without clearing the pending entries
return|return;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|pending
index|[
name|section
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.IndexGenerator#remove()      */
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|//TODO : return if doc == null? -pb
name|int
name|keyCount
init|=
name|pending
index|[
name|IDX_GENERIC
index|]
operator|.
name|size
argument_list|()
operator|+
name|pending
index|[
name|IDX_QNAME
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyCount
operator|==
literal|0
condition|)
return|return;
specifier|final
name|short
name|collectionId
init|=
name|this
operator|.
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|section
init|=
literal|0
init|;
name|section
operator|<=
name|IDX_QNAME
condition|;
name|section
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pending
index|[
name|section
index|]
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
name|storedGIDList
init|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ArrayList
name|newGIDList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//Compute a key for the value
name|Value
name|searchKey
decl_stmt|;
if|if
condition|(
name|section
operator|==
name|IDX_GENERIC
condition|)
name|searchKey
operator|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
expr_stmt|;
else|else
block|{
name|QNameKey
name|qnk
init|=
operator|(
name|QNameKey
operator|)
name|key
decl_stmt|;
name|searchKey
operator|=
operator|new
name|QNameValue
argument_list|(
name|collectionId
argument_list|,
name|qnk
operator|.
name|qname
argument_list|,
name|qnk
operator|.
name|value
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Value
name|value
init|=
name|dbValues
operator|.
name|get
argument_list|(
name|searchKey
argument_list|)
decl_stmt|;
comment|//Does the value already has data in the index ?
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|//Add its data to the new list
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// append them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
comment|// feed the new list with the GIDs
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
comment|// add the node to the new list if it is not
comment|// in the list of removed nodes
if|if
condition|(
operator|!
name|containsNode
argument_list|(
name|storedGIDList
argument_list|,
name|nodeId
argument_list|)
condition|)
block|{
name|newGIDList
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//append the data from the new list
if|if
condition|(
name|newGIDList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|gidsCount
init|=
name|newGIDList
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Don't forget this one
name|FastQSort
operator|.
name|sort
argument_list|(
name|newGIDList
argument_list|,
literal|0
argument_list|,
name|gidsCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|nodeIDsLength
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|newGIDList
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
try|try
block|{
name|previous
operator|=
name|nodeId
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error while writing range index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
block|}
comment|//Write (variable) length of node IDs
name|os
operator|.
name|writeFixedInt
argument_list|(
name|nodeIDsLength
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|nodeIDsLength
operator|-
name|LENGTH_NODE_IDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbValues
operator|.
name|update
argument_list|(
name|value
operator|.
name|getAddress
argument_list|()
argument_list|,
name|searchKey
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not update index data for value '"
operator|+
name|searchKey
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//TODO: throw exception ?
block|}
block|}
else|else
block|{
if|if
condition|(
name|dbValues
operator|.
name|put
argument_list|(
name|searchKey
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for value '"
operator|+
name|searchKey
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : return ?
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error on '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|pending
index|[
name|section
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|containsNode
parameter_list|(
name|List
name|list
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeId
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/* Drop all index entries for the given collection. 	 * @see org.exist.storage.IndexGenerator#dropIndex(org.exist.collections.Collection) 	 */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//TODO : flush ? -pb
comment|// remove generic index
name|Value
name|ref
init|=
operator|new
name|SimpleValue
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|dbValues
operator|.
name|removeAll
argument_list|(
literal|null
argument_list|,
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove QName index
name|ref
operator|=
operator|new
name|QNameValue
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|dbValues
operator|.
name|removeAll
argument_list|(
literal|null
argument_list|,
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Drop all index entries for the given document. 	 * @see org.exist.storage.IndexGenerator#dropIndex(org.exist.dom.DocumentImpl) 	 */
comment|//TODO : note that this is *not* this.doc -pb
specifier|public
name|void
name|dropIndex
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
specifier|final
name|short
name|collectionId
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|section
init|=
literal|0
init|;
name|section
operator|<=
name|IDX_QNAME
condition|;
name|section
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pending
index|[
name|section
index|]
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//Compute a key for the indexed value in the collection
name|Value
name|v
decl_stmt|;
if|if
condition|(
name|section
operator|==
name|IDX_GENERIC
condition|)
name|v
operator|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
expr_stmt|;
else|else
block|{
name|QNameKey
name|qnk
init|=
operator|(
name|QNameKey
operator|)
name|key
decl_stmt|;
name|v
operator|=
operator|new
name|QNameValue
argument_list|(
name|collectionId
argument_list|,
name|qnk
operator|.
name|qname
argument_list|,
name|qnk
operator|.
name|value
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Value
name|value
init|=
name|dbValues
operator|.
name|get
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
continue|continue;
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|document
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// copy them (keep them)
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|gidsCount
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
comment|// skip them (remove them)
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//Store new data, if relevant
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|os
operator|.
name|data
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// nothing to store:
comment|// remove the existing key/value pair
name|dbValues
operator|.
name|remove
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// still something to store:
comment|// modify the existing value for the key
if|if
condition|(
name|dbValues
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for key '"
operator|+
name|v
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
block|}
block|}
block|}
name|pending
index|[
name|section
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while removing range index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** find 	 * @param relation binary operator used for the comparison 	 * @param value right hand comparison value */
specifier|public
name|NodeSet
name|find
parameter_list|(
name|int
name|relation
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|axis
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Indexable
name|value
parameter_list|)
throws|throws
name|TerminatedException
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
specifier|final
name|SearchCallback
name|cb
init|=
operator|new
name|SearchCallback
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|result
argument_list|,
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|//Compute a key for the value in the collection
specifier|final
name|Value
name|searchKey
decl_stmt|,
name|prefixKey
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
name|searchKey
operator|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|prefixKey
operator|=
operator|new
name|SimplePrefixValue
argument_list|(
name|collectionId
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searchKey
operator|=
operator|new
name|QNameValue
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|,
name|value
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
name|prefixKey
operator|=
operator|new
name|QNamePrefixValue
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|idxOp
init|=
name|checkRelationOp
argument_list|(
name|relation
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|idxOp
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxOp
operator|==
name|IndexQuery
operator|.
name|EQ
condition|)
name|dbValues
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
else|else
name|dbValues
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefixKey
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|NodeSet
name|match
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|axis
parameter_list|,
name|String
name|expr
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|TerminatedException
throws|,
name|EXistException
block|{
return|return
name|match
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|axis
argument_list|,
name|expr
argument_list|,
name|qname
argument_list|,
name|type
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Regular expression search 	 * @param type  like type argument for {@link org.exist.storage.RegexMatcher} constructor 	 * @param flags like flags argument for {@link org.exist.storage.RegexMatcher} constructor 	 *  */
specifier|public
name|NodeSet
name|match
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|axis
parameter_list|,
name|String
name|expr
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|flags
parameter_list|,
name|boolean
name|caseSensitiveQuery
parameter_list|)
throws|throws
name|TerminatedException
throws|,
name|EXistException
block|{
comment|// if the regexp starts with a char sequence, we restrict the index scan to entries starting with
comment|// the same sequence. Otherwise, we have to scan the whole index.
name|StringValue
name|startTerm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
operator|&&
name|caseSensitiveQuery
operator|==
name|caseSensitive
condition|)
block|{
name|StringBuffer
name|term
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|expr
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|term
operator|.
name|append
argument_list|(
name|expr
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
else|else
break|break;
if|if
condition|(
name|term
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|startTerm
operator|=
operator|new
name|StringValue
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Match will begin index scan at '"
operator|+
name|startTerm
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TermMatcher
name|comparator
init|=
operator|new
name|RegexMatcher
argument_list|(
name|expr
argument_list|,
name|type
argument_list|,
name|flags
argument_list|)
decl_stmt|;
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
specifier|final
name|RegexCallback
name|cb
init|=
operator|new
name|RegexCallback
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|result
argument_list|,
name|comparator
argument_list|,
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Value
name|searchKey
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|startTerm
operator|!=
literal|null
condition|)
block|{
comment|//Compute a key for the start term in the collection
name|searchKey
operator|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
name|startTerm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Compute a key for an arbitrary string in the collection
name|searchKey
operator|=
operator|new
name|SimplePrefixValue
argument_list|(
name|collectionId
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|startTerm
operator|!=
literal|null
condition|)
block|{
name|searchKey
operator|=
operator|new
name|QNameValue
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|,
name|startTerm
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching with QName prefix"
argument_list|)
expr_stmt|;
name|searchKey
operator|=
operator|new
name|QNamePrefixValue
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|broker
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|searchKey
argument_list|)
decl_stmt|;
name|dbValues
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|ValueOccurrences
index|[]
name|scanIndexKeys
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Indexable
name|start
parameter_list|)
block|{
specifier|final
name|int
name|type
init|=
name|start
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|stringType
init|=
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
specifier|final
name|IndexScanCallback
name|cb
init|=
operator|new
name|IndexScanCallback
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|dbValues
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|//Compute a key for the start value in the collection
if|if
condition|(
name|stringType
condition|)
block|{
specifier|final
name|Value
name|startKey
init|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|startKey
argument_list|)
decl_stmt|;
name|dbValues
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Value
name|startKey
init|=
operator|new
name|SimpleValue
argument_list|(
name|collectionId
argument_list|,
name|start
argument_list|)
decl_stmt|;
specifier|final
name|Value
name|prefixKey
init|=
operator|new
name|SimplePrefixValue
argument_list|(
name|collectionId
argument_list|,
name|start
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GEQ
argument_list|,
name|startKey
argument_list|)
decl_stmt|;
name|dbValues
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefixKey
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
name|map
init|=
name|cb
operator|.
name|map
decl_stmt|;
name|ValueOccurrences
index|[]
name|result
init|=
operator|new
name|ValueOccurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|ValueOccurrences
index|[]
operator|)
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|protected
name|int
name|checkRelationOp
parameter_list|(
name|int
name|relation
parameter_list|)
block|{
name|int
name|indexOp
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|LT
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|LT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|LEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GT
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|GT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|GEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|NEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|NEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|EQ
case|:
default|default:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|EQ
expr_stmt|;
break|break;
block|}
return|return
name|indexOp
return|;
block|}
comment|/**      * @param xpathType      * @param value      * @return<code>null</null> if atomization fails or if the atomic value is not indexable.      * Should we throw an exception instead ? -pb      */
specifier|private
name|AtomicValue
name|convertToAtomic
parameter_list|(
name|int
name|xpathType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|AtomicValue
name|atomic
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|xpathType
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|atomic
operator|=
operator|new
name|StringValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|atomic
operator|=
operator|new
name|StringValue
argument_list|(
name|value
argument_list|)
operator|.
name|convertTo
argument_list|(
name|xpathType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node value '"
operator|+
name|value
operator|+
literal|"' cannot be converted to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|xpathType
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node value '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|xpathType
argument_list|)
operator|+
literal|"("
operator|+
name|value
operator|+
literal|")'"
operator|+
literal|" cannot be used as index key. It is null."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|atomic
operator|instanceof
name|Indexable
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node value '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|xpathType
argument_list|)
operator|+
literal|"("
operator|+
name|value
operator|+
literal|")'"
operator|+
literal|" cannot be used as index key. It does not implement "
operator|+
name|Indexable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|atomic
return|;
block|}
specifier|public
name|void
name|closeAndRemove
parameter_list|()
block|{
comment|//Use inheritance if necessary ;-)
name|config
operator|.
name|setProperty
argument_list|(
name|getConfigKeyForFile
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dbValues
operator|.
name|closeAndRemove
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|close
parameter_list|()
throws|throws
name|DBException
block|{
comment|//Use inheritance if necessary ;-)
name|config
operator|.
name|setProperty
argument_list|(
name|getConfigKeyForFile
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|dbValues
operator|.
name|close
argument_list|()
return|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|dbValues
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|dbValues
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" owned by "
operator|+
name|broker
operator|.
name|toString
argument_list|()
operator|+
literal|" (case sensitive = "
operator|+
name|caseSensitive
operator|+
literal|")"
return|;
block|}
comment|/** TODO document */
class|class
name|SearchCallback
implements|implements
name|BTreeCallback
block|{
name|DocumentSet
name|docs
decl_stmt|;
name|NodeSet
name|contextSet
decl_stmt|;
name|NodeSet
name|result
decl_stmt|;
name|boolean
name|returnAncestor
decl_stmt|;
specifier|public
name|SearchCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|boolean
name|returnAncestor
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|returnAncestor
operator|=
name|returnAncestor
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.dbxml.core.filer.BTreeCallback#indexInfo(org.dbxml.core.data.Value, long)          */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|VariableByteInput
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|dbValues
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//Process the nodes
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
name|NodeId
name|nodeId
decl_stmt|;
name|NodeProxy
name|storedNode
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|nodeId
operator|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|storedNode
operator|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnAncestor
condition|)
block|{
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|parentNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
else|else
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
comment|// otherwise, we add all nodes without check
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|Constants
operator|.
name|NO_SIZE_HINT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/** TODO document */
specifier|private
class|class
name|RegexCallback
extends|extends
name|SearchCallback
block|{
specifier|private
name|TermMatcher
name|matcher
decl_stmt|;
specifier|private
name|XMLString
name|key
init|=
operator|new
name|XMLString
argument_list|(
literal|128
argument_list|)
decl_stmt|;
specifier|public
name|RegexCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|TermMatcher
name|matcher
parameter_list|,
name|boolean
name|returnAncestor
parameter_list|)
block|{
name|super
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|result
argument_list|,
name|returnAncestor
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|data
argument_list|()
index|[
name|value
operator|.
name|start
argument_list|()
index|]
operator|==
name|IDX_GENERIC
condition|)
name|offset
operator|=
name|SimpleValue
operator|.
name|OFFSET_VALUE
operator|+
name|NativeValueIndex
operator|.
name|LENGTH_VALUE_TYPE
expr_stmt|;
else|else
name|offset
operator|=
name|QNameValue
operator|.
name|OFFSET_VALUE
operator|+
name|NativeValueIndex
operator|.
name|LENGTH_VALUE_TYPE
expr_stmt|;
name|key
operator|.
name|reuse
argument_list|()
expr_stmt|;
name|UTF8
operator|.
name|decode
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
operator|+
name|offset
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
operator|-
name|offset
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|super
operator|.
name|indexInfo
argument_list|(
name|value
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|IndexScanCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
name|DocumentSet
name|docs
decl_stmt|;
specifier|private
name|NodeSet
name|contextSet
decl_stmt|;
specifier|private
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|type
decl_stmt|;
name|IndexScanCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.dbxml.core.filer.BTreeCallback#indexInfo(org.dbxml.core.data.Value, long)          */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|AtomicValue
name|atomic
decl_stmt|;
try|try
block|{
name|atomic
operator|=
operator|(
name|AtomicValue
operator|)
name|SimpleValue
operator|.
name|deserialize
argument_list|(
name|key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|start
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|VariableByteInput
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|dbValues
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|ValueOccurrences
name|oc
init|=
operator|(
name|ValueOccurrences
operator|)
name|map
operator|.
name|get
argument_list|(
name|atomic
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|docAdded
init|=
literal|false
decl_stmt|;
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|gidsCount
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|lastParentId
init|=
literal|null
decl_stmt|;
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
name|NodeId
name|nodeId
decl_stmt|;
name|NodeProxy
name|parentNode
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gidsCount
condition|;
name|j
operator|++
control|)
block|{
name|nodeId
operator|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|parentNode
operator|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|ValueOccurrences
argument_list|(
name|atomic
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|atomic
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
comment|//Handle this very special case : /item[foo = "bar"] vs. /item[@foo = "bar"]
comment|//Same value, same parent but different nodes !
comment|//Not sure if we should track the contextSet's parentId... (just like we do)
comment|//... or the way the contextSet is created (thus keeping track of the NodeTest)
if|if
condition|(
name|lastParentId
operator|==
literal|null
operator|||
operator|!
name|lastParentId
operator|.
name|equals
argument_list|(
name|parentNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
name|oc
operator|.
name|addOccurrences
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|docAdded
condition|)
block|{
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|docAdded
operator|=
literal|true
expr_stmt|;
block|}
name|lastParentId
operator|=
name|parentNode
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
block|}
block|}
comment|//TODO : what if contextSet == null ? -pb
comment|//See above where we have this behaviour :
comment|//otherwise, we add all nodes without check
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QNameKey
implements|implements
name|Comparable
block|{
specifier|private
name|QName
name|qname
decl_stmt|;
specifier|private
name|AtomicValue
name|value
decl_stmt|;
specifier|public
name|QNameKey
parameter_list|(
name|QName
name|qname
parameter_list|,
name|AtomicValue
name|atomic
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|atomic
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|QNameKey
name|other
init|=
operator|(
name|QNameKey
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|qname
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|value
argument_list|)
return|;
else|else
return|return
name|cmp
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SimpleValue
extends|extends
name|Value
block|{
specifier|public
specifier|static
name|int
name|OFFSET_IDX_TYPE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|LENGTH_IDX_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
specifier|static
name|int
name|OFFSET_COLLECTION_ID
init|=
name|OFFSET_IDX_TYPE
operator|+
name|LENGTH_IDX_TYPE
decl_stmt|;
comment|//1
specifier|public
specifier|static
name|int
name|OFFSET_VALUE
init|=
name|OFFSET_COLLECTION_ID
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
decl_stmt|;
comment|// 3
specifier|public
name|SimpleValue
parameter_list|(
name|short
name|collectionId
parameter_list|)
block|{
name|len
operator|=
name|LENGTH_IDX_TYPE
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_GENERIC
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
name|pos
operator|=
name|OFFSET_IDX_TYPE
expr_stmt|;
block|}
specifier|public
name|SimpleValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|Indexable
name|atomic
parameter_list|)
throws|throws
name|EXistException
block|{
name|data
operator|=
name|atomic
operator|.
name|serializeValue
argument_list|(
name|OFFSET_VALUE
argument_list|)
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
expr_stmt|;
name|pos
operator|=
name|OFFSET_IDX_TYPE
expr_stmt|;
name|data
index|[
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_GENERIC
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Indexable
name|deserialize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|EXistException
block|{
return|return
name|ValueIndexFactory
operator|.
name|deserialize
argument_list|(
name|data
argument_list|,
name|start
operator|+
name|OFFSET_VALUE
argument_list|,
name|len
operator|-
name|OFFSET_VALUE
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SimplePrefixValue
extends|extends
name|Value
block|{
specifier|public
specifier|static
name|int
name|LENGTH_VALUE_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
name|SimplePrefixValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|len
operator|=
name|SimpleValue
operator|.
name|LENGTH_IDX_TYPE
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
operator|+
name|LENGTH_VALUE_TYPE
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
name|SimpleValue
operator|.
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_GENERIC
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|SimpleValue
operator|.
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
name|data
index|[
name|SimpleValue
operator|.
name|OFFSET_VALUE
index|]
operator|=
operator|(
name|byte
operator|)
name|type
expr_stmt|;
name|pos
operator|=
name|SimpleValue
operator|.
name|OFFSET_IDX_TYPE
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QNameValue
extends|extends
name|Value
block|{
specifier|public
specifier|static
name|int
name|OFFSET_IDX_TYPE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|LENGTH_IDX_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
specifier|static
name|int
name|OFFSET_COLLECTION_ID
init|=
name|OFFSET_IDX_TYPE
operator|+
name|LENGTH_IDX_TYPE
decl_stmt|;
comment|//1
specifier|public
specifier|static
name|int
name|OFFSET_QNAME
init|=
name|OFFSET_COLLECTION_ID
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
decl_stmt|;
comment|//3
specifier|public
specifier|static
name|int
name|LENGTH_QNAME_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
specifier|static
name|int
name|OFFSET_NS_URI
init|=
name|OFFSET_QNAME
operator|+
name|LENGTH_QNAME_TYPE
decl_stmt|;
comment|//4
specifier|public
specifier|static
name|int
name|OFFSET_LOCAL_NAME
init|=
name|OFFSET_NS_URI
operator|+
name|SymbolTable
operator|.
name|LENGTH_NS_URI
decl_stmt|;
comment|//6
specifier|public
specifier|static
name|int
name|OFFSET_VALUE
init|=
name|OFFSET_LOCAL_NAME
operator|+
name|SymbolTable
operator|.
name|LENGTH_LOCAL_NAME
decl_stmt|;
comment|//8
specifier|public
name|QNameValue
parameter_list|(
name|short
name|collectionId
parameter_list|)
block|{
name|len
operator|=
name|LENGTH_IDX_TYPE
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_QNAME
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
name|pos
operator|=
name|OFFSET_IDX_TYPE
expr_stmt|;
block|}
specifier|public
name|QNameValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Indexable
name|atomic
parameter_list|,
name|SymbolTable
name|symbols
parameter_list|)
throws|throws
name|EXistException
block|{
name|data
operator|=
name|atomic
operator|.
name|serializeValue
argument_list|(
name|OFFSET_VALUE
argument_list|)
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
expr_stmt|;
name|pos
operator|=
name|OFFSET_IDX_TYPE
expr_stmt|;
specifier|final
name|short
name|namespaceId
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|short
name|localNameId
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|data
index|[
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_QNAME
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
name|data
index|[
name|OFFSET_QNAME
index|]
operator|=
name|qname
operator|.
name|getNameType
argument_list|()
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|namespaceId
argument_list|,
name|data
argument_list|,
name|OFFSET_NS_URI
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|localNameId
argument_list|,
name|data
argument_list|,
name|OFFSET_LOCAL_NAME
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QNamePrefixValue
extends|extends
name|Value
block|{
specifier|public
specifier|static
name|int
name|LENGTH_VALUE_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
specifier|public
name|QNamePrefixValue
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|type
parameter_list|,
name|SymbolTable
name|symbols
parameter_list|)
block|{
name|len
operator|=
name|QNameValue
operator|.
name|OFFSET_VALUE
operator|+
name|LENGTH_VALUE_TYPE
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
name|QNameValue
operator|.
name|OFFSET_IDX_TYPE
index|]
operator|=
name|IDX_QNAME
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|QNameValue
operator|.
name|OFFSET_COLLECTION_ID
argument_list|)
expr_stmt|;
specifier|final
name|short
name|namespaceId
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|short
name|localNameId
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|data
index|[
name|QNameValue
operator|.
name|OFFSET_QNAME
index|]
operator|=
name|qname
operator|.
name|getNameType
argument_list|()
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|namespaceId
argument_list|,
name|data
argument_list|,
name|QNameValue
operator|.
name|OFFSET_NS_URI
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|localNameId
argument_list|,
name|data
argument_list|,
name|QNameValue
operator|.
name|OFFSET_LOCAL_NAME
argument_list|)
expr_stmt|;
name|data
index|[
name|QNameValue
operator|.
name|OFFSET_VALUE
index|]
operator|=
operator|(
name|byte
operator|)
name|type
expr_stmt|;
name|pos
operator|=
name|QNameValue
operator|.
name|OFFSET_IDX_TYPE
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

