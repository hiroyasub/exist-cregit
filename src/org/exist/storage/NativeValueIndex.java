begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|indexer
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteArrayInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|store
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Maintains an index on typed node values.  *   * TODO: Check correct types during validation.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|NativeValueIndex
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NativeValueIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|BFile
name|db
decl_stmt|;
specifier|private
name|TreeMap
name|pending
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|DocumentImpl
name|doc
decl_stmt|;
specifier|private
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
specifier|public
name|NativeValueIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|BFile
name|valuesDb
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|valuesDb
expr_stmt|;
block|}
specifier|public
name|void
name|storeText
parameter_list|(
name|ValueIndexSpec
name|spec
parameter_list|,
name|Text
name|node
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|AtomicValue
name|atomic
init|=
name|convertToAtomic
argument_list|(
name|spec
argument_list|,
name|node
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
return|return;
comment|// skip
name|ArrayList
name|buf
decl_stmt|;
if|if
condition|(
name|pending
operator|.
name|containsKey
argument_list|(
name|atomic
argument_list|)
condition|)
name|buf
operator|=
operator|(
name|ArrayList
operator|)
name|pending
operator|.
name|get
argument_list|(
name|atomic
argument_list|)
expr_stmt|;
else|else
block|{
name|buf
operator|=
operator|new
name|ArrayList
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|atomic
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|storeAttribute
parameter_list|(
name|ValueIndexSpec
name|spec
parameter_list|,
name|Attr
name|node
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|AtomicValue
name|atomic
init|=
name|convertToAtomic
argument_list|(
name|spec
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
return|return;
comment|// skip
name|ArrayList
name|buf
decl_stmt|;
if|if
condition|(
name|pending
operator|.
name|containsKey
argument_list|(
name|atomic
argument_list|)
condition|)
name|buf
operator|=
operator|(
name|ArrayList
operator|)
name|pending
operator|.
name|get
argument_list|(
name|atomic
argument_list|)
expr_stmt|;
else|else
block|{
name|buf
operator|=
operator|new
name|ArrayList
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|atomic
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|document
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|NodeProxy
name|proxy
decl_stmt|;
name|Indexable
name|indexable
decl_stmt|;
name|ArrayList
name|idList
decl_stmt|;
name|int
name|len
decl_stmt|;
name|Value
name|ref
decl_stmt|;
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
comment|// get collection id for this collection
name|long
name|prevId
decl_stmt|;
name|long
name|cid
decl_stmt|;
name|short
name|collectionId
init|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pending
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|indexable
operator|=
operator|(
name|Indexable
operator|)
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idList
operator|=
operator|(
name|ArrayList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing "
operator|+
operator|(
operator|(
name|AtomicValue
operator|)
name|indexable
operator|)
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": "
operator|+
name|idList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|FastQSort
operator|.
name|sort
argument_list|(
name|idList
argument_list|,
literal|0
argument_list|,
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|len
operator|=
name|idList
operator|.
name|size
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|prevId
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|proxy
operator|=
operator|(
name|NodeProxy
operator|)
name|idList
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|cid
operator|=
name|proxy
operator|.
name|gid
operator|-
name|prevId
expr_stmt|;
name|prevId
operator|=
name|proxy
operator|.
name|gid
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
name|ref
operator|=
operator|new
name|Value
argument_list|(
name|indexable
operator|.
name|serialize
argument_list|(
name|collectionId
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|append
argument_list|(
name|ref
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not save index for value"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"could not acquire lock on values.dbx"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"io error while writing value index."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"database is read-only"
argument_list|)
expr_stmt|;
return|return;
block|}
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not acquire lock for values.dbx"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Drop all index entries for the given collection.      *       * @param collection      */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing elements ..."
argument_list|)
expr_stmt|;
name|Value
name|ref
init|=
operator|new
name|ElementValue
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|db
operator|.
name|removeAll
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"could not acquire lock on elements index"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Drop all index entries for the given document.      *       * @param doc      * @throws ReadOnlyException      */
specifier|public
name|void
name|dropIndex
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
comment|//	  drop element-index
name|short
name|collectionId
init|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Value
name|ref
init|=
operator|new
name|ElementValue
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|ArrayList
name|elements
init|=
name|db
operator|.
name|findKeys
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeDocument() - "
operator|+
literal|"found "
operator|+
name|elements
operator|.
name|size
argument_list|()
operator|+
literal|" elements."
argument_list|)
expr_stmt|;
block|}
name|Value
name|key
decl_stmt|;
name|Value
name|value
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|VariableByteArrayInput
name|is
decl_stmt|;
name|VariableByteOutputStream
name|os
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|docId
decl_stmt|;
name|long
name|delta
decl_stmt|;
name|long
name|address
decl_stmt|;
name|boolean
name|changed
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|=
operator|(
name|Value
operator|)
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|=
name|db
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|data
operator|=
name|value
operator|.
name|getData
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|VariableByteOutputStream
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|docId
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|len
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|docId
operator|!=
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// copy data to new buffer
name|os
operator|.
name|writeInt
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying "
operator|+
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|delta
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping "
operator|+
name|len
argument_list|)
expr_stmt|;
comment|// skip
name|is
operator|.
name|skip
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeDocument(String) - eof"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeDocument(String) "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|db
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeDocument() - "
operator|+
literal|"could not save value index"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeDocument(String) - "
operator|+
literal|"could not acquire lock on values.dbx"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"method terminated"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|NodeSet
name|find
parameter_list|(
name|int
name|relation
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Indexable
name|value
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|int
name|idxOp
init|=
name|checkRelationOp
argument_list|(
name|relation
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|SearchCallback
name|callback
init|=
operator|new
name|SearchCallback
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|short
name|collectionId
init|=
name|collection
operator|.
name|getId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|value
operator|.
name|serialize
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|idxOp
argument_list|,
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|checkRelationOp
parameter_list|(
name|int
name|relation
parameter_list|)
block|{
name|int
name|indexOp
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|LT
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|LT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|LEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GT
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|GT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|GEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|NEQ
case|:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|NEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|EQ
case|:
default|default:
name|indexOp
operator|=
name|IndexQuery
operator|.
name|EQ
expr_stmt|;
break|break;
block|}
return|return
name|indexOp
return|;
block|}
specifier|private
name|AtomicValue
name|convertToAtomic
parameter_list|(
name|ValueIndexSpec
name|spec
parameter_list|,
name|String
name|value
parameter_list|)
block|{
specifier|final
name|StringValue
name|str
init|=
operator|new
name|StringValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|AtomicValue
name|atomic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
name|atomic
operator|=
name|str
expr_stmt|;
else|else
block|{
try|try
block|{
name|atomic
operator|=
name|str
operator|.
name|convertTo
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node value: '"
operator|+
name|value
operator|+
literal|"' cannot be converted to type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|atomic
operator|instanceof
name|Indexable
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The specified type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" cannot be used as index key. It does not implement interface Indexable."
argument_list|)
expr_stmt|;
name|atomic
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|atomic
return|;
block|}
specifier|private
class|class
name|SearchCallback
implements|implements
name|BTreeCallback
block|{
name|DocumentSet
name|docs
decl_stmt|;
name|NodeSet
name|contextSet
decl_stmt|;
name|NodeSet
name|result
decl_stmt|;
specifier|public
name|SearchCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|NodeSet
name|result
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.dbxml.core.filer.BTreeCallback#indexInfo(org.dbxml.core.data.Value, long)          */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|VariableByteInput
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|db
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return
literal|true
return|;
try|try
block|{
name|int
name|sizeHint
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|docId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|doc
operator|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
operator|)
operator|==
literal|null
operator|||
operator|(
name|contextSet
operator|!=
literal|null
operator|&&
operator|!
name|contextSet
operator|.
name|containsDoc
argument_list|(
name|doc
argument_list|)
operator|)
condition|)
block|{
name|is
operator|.
name|skip
argument_list|(
name|len
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
name|sizeHint
operator|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|long
name|gid
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|current
decl_stmt|,
name|parent
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|gid
operator|=
name|gid
operator|+
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|current
operator|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
expr_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching text node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|current
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, we add all text nodes without check
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// EOF is expected here
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"io error while reading index"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|byte
index|[]
name|d
init|=
name|ByteConversion
operator|.
name|longToByte
argument_list|(
literal|56473
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|56473
operator|+
literal|" = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|d
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|d
operator|=
name|ByteConversion
operator|.
name|longToByte
argument_list|(
literal|774663
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|774663
operator|+
literal|" = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|d
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Value
name|v1
init|=
operator|new
name|Value
argument_list|(
operator|new
name|IntegerValue
argument_list|(
literal|56473
argument_list|)
operator|.
name|serialize
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Value
name|v2
init|=
operator|new
name|Value
argument_list|(
operator|new
name|IntegerValue
argument_list|(
literal|774663
argument_list|)
operator|.
name|serialize
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|=
name|v1
operator|.
name|getData
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"v1 = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|d
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|d
operator|=
name|v2
operator|.
name|getData
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"v2 = "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|d
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

