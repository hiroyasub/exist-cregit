begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|AbstractLoggable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBinaryLoggable
extends|extends
name|AbstractLoggable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|AbstractBinaryLoggable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
name|NO_DIGEST_TYPE
init|=
literal|0x0
decl_stmt|;
specifier|public
name|AbstractBinaryLoggable
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get's the absolute path as a byte array.      *      * @param path the path to encode.      *      * @return the absolute path, UTF-8 encoded as bytes      */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|byte
index|[]
name|getPathData
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
comment|/**      * Get's the path from a byte array encoded by {@link #getPathData(Path)}.      *      * @param pathData the path data to decode.      *      * @return the path      */
annotation|@
name|Nullable
specifier|protected
specifier|static
name|Path
name|getPath
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|pathData
parameter_list|)
block|{
if|if
condition|(
name|pathData
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|String
argument_list|(
name|pathData
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the first two bytes of an integer into      * an unsigned short and stores the result into a short.      *      * @param i the integer      *      * @return the unsigned short stored in a short.      */
specifier|protected
specifier|static
name|short
name|asUnsignedShort
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
name|i
operator|&
literal|0xFFFF
operator|)
return|;
block|}
comment|/**      * Converts an unsigned short stored in a short back      * into an integer. Inverse of {@link #asUnsignedShort(int)}.      *      * @param s the unsigned short as a short.      *      * @return the integer.      */
specifier|protected
specifier|static
name|int
name|asSignedInt
parameter_list|(
specifier|final
name|short
name|s
parameter_list|)
block|{
return|return
name|s
operator|&
literal|0xFFFF
return|;
block|}
comment|/**      * Check that the length of a path does not need more storage than we have available (i.e. 2 bytes).      *      * @param loggableName The name of the loggable (for formatting error messages).      * @param pathName The name of the path (for formatting error messages).      * @param path The path to check the length of.      */
specifier|protected
specifier|static
name|void
name|checkPathLen
parameter_list|(
specifier|final
name|String
name|loggableName
parameter_list|,
specifier|final
name|String
name|pathName
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
name|path
index|[]
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|len
init|=
name|path
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|loggableName
operator|+
literal|": "
operator|+
name|pathName
operator|+
literal|" path has a zero length"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|len
operator|>
literal|0xFFFF
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|loggableName
operator|+
literal|": "
operator|+
name|pathName
operator|+
literal|" path needs more than 65,535 bytes. Path will be truncated: "
operator|+
operator|new
name|String
argument_list|(
name|path
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes a message digest to a buffer.      *      * @param out the buffer to write the message digest to.      * @param messageDigest the message digest to write to the buffer.      */
specifier|protected
specifier|static
name|void
name|writeMessageDigest
parameter_list|(
specifier|final
name|ByteBuffer
name|out
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|MessageDigest
name|messageDigest
parameter_list|)
block|{
if|if
condition|(
name|messageDigest
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|NO_DIGEST_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|put
argument_list|(
name|messageDigest
operator|.
name|getDigestType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|messageDigest
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|messageDigest
operator|.
name|getDigestType
argument_list|()
operator|.
name|getDigestLengthBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads a message digest from a buffer.      *      * @param in the buffer to read the message digest from.      *      * @return the message digest read from the buffer.      */
specifier|protected
specifier|static
annotation|@
name|Nullable
name|MessageDigest
name|readMessageDigest
parameter_list|(
specifier|final
name|ByteBuffer
name|in
parameter_list|)
block|{
specifier|final
name|byte
name|digestTypeId
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|digestTypeId
operator|==
name|NO_DIGEST_TYPE
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|DigestType
name|digestType
init|=
name|DigestType
operator|.
name|forId
argument_list|(
name|digestTypeId
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|digestValue
init|=
operator|new
name|byte
index|[
name|digestType
operator|.
name|getDigestLengthBytes
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|get
argument_list|(
name|digestValue
argument_list|)
expr_stmt|;
return|return
operator|new
name|MessageDigest
argument_list|(
name|digestType
argument_list|,
name|digestValue
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

