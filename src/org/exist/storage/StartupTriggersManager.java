begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2016 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|PluginsManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Simple manager for Startup Triggers  *  * Basically just groups zero or more startup triggers  * as a single BrokerPoolService  */
end_comment

begin_class
specifier|public
class|class
name|StartupTriggersManager
implements|implements
name|BrokerPoolService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|PluginsManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Configuration
operator|.
name|StartupTriggerConfig
argument_list|>
name|startupTriggerConfigs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
specifier|final
name|List
argument_list|<
name|Configuration
operator|.
name|StartupTriggerConfig
argument_list|>
name|startupTriggerConfigs
init|=
operator|(
name|List
argument_list|<
name|Configuration
operator|.
name|StartupTriggerConfig
argument_list|>
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_STARTUP_TRIGGERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|startupTriggerConfigs
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|startupTriggerConfigs
operator|.
name|addAll
argument_list|(
name|startupTriggerConfigs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPreMultiUserSystem
parameter_list|(
specifier|final
name|DBBroker
name|systemBroker
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
for|for
control|(
specifier|final
name|Configuration
operator|.
name|StartupTriggerConfig
name|startupTriggerConfig
range|:
name|startupTriggerConfigs
control|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|StartupTrigger
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|StartupTrigger
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|startupTriggerConfig
operator|.
name|getClazz
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StartupTrigger
name|startupTrigger
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|startupTrigger
operator|.
name|execute
argument_list|(
name|systemBroker
argument_list|,
name|startupTriggerConfig
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
decl||
name|IllegalAccessException
decl||
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not call StartupTrigger class: "
operator|+
name|startupTriggerConfig
operator|+
literal|". SKIPPING! "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|RuntimeException
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"StartupTrigger threw RuntimeException: "
operator|+
name|re
operator|.
name|getMessage
argument_list|()
operator|+
literal|". IGNORING!"
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

