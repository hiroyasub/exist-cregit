begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2001,  Wolfgang Meier (meier@ifs.tu-darmstadt.de)  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|WordTokenizer
block|{
name|char
index|[]
name|data
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|token
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|indexNumbers
init|=
literal|false
decl_stmt|,
name|stem
init|=
literal|false
decl_stmt|;
name|PorterStemmer
name|stemmer
init|=
literal|null
decl_stmt|;
specifier|public
name|WordTokenizer
parameter_list|(
name|boolean
name|indexNumbers
parameter_list|,
name|boolean
name|stem
parameter_list|)
block|{
name|this
operator|.
name|indexNumbers
operator|=
name|indexNumbers
expr_stmt|;
name|this
operator|.
name|stem
operator|=
name|stem
expr_stmt|;
if|if
condition|(
name|stem
condition|)
name|stemmer
operator|=
operator|new
name|PorterStemmer
argument_list|()
expr_stmt|;
block|}
specifier|public
name|WordTokenizer
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|token
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|data
operator|=
operator|new
name|char
index|[
name|text
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
name|text
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|nextToken
parameter_list|()
block|{
name|String
name|next
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|data
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|stem
condition|)
name|stemmer
operator|.
name|add
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|token
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|stem
condition|)
name|stemmer
operator|.
name|add
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
else|else
name|token
operator|.
name|append
argument_list|(
name|data
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|data
index|[
name|pos
index|]
operator|==
literal|'*'
condition|)
block|{
if|if
condition|(
name|stem
condition|)
name|stemmer
operator|.
name|add
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
else|else
name|token
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stem
condition|)
block|{
name|stemmer
operator|.
name|stem
argument_list|()
expr_stmt|;
name|next
operator|=
name|stemmer
operator|.
name|toString
argument_list|()
expr_stmt|;
name|stemmer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
name|token
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
return|return
name|next
return|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|stem
condition|)
block|{
name|stemmer
operator|.
name|stem
argument_list|()
expr_stmt|;
name|next
operator|=
name|stemmer
operator|.
name|toString
argument_list|()
expr_stmt|;
name|stemmer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
name|token
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
return|return
name|next
return|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

