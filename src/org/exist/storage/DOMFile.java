begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastUtil
operator|.
name|Long2ObjectLinkedOpenHashMap
import|;
end_import

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastUtil
operator|.
name|Object2LongOpenHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|filer
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|indexer
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Lockable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SimpleTimeOutLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_comment
comment|/**  *  DOMFile represents the central storage file for DOM nodes.  *   * Nodes are stored in sequential order to allow fast access when  * serializing a document or fragment. Pages have previous-page/next-page  * links. Each node has a virtual address,  * which consists of a page-number/tid pair. The tid is a virtual offset  * into the page. A node may be moved to a new page on node insertions.  * However, the tid will always remain the same.  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    25. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|DOMFile
extends|extends
name|BTree
implements|implements
name|Lockable
block|{
comment|// page types
specifier|public
specifier|final
specifier|static
name|byte
name|FREE_LIST
init|=
literal|22
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|LOB
init|=
literal|21
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|RECORD
init|=
literal|20
decl_stmt|;
specifier|protected
specifier|static
name|int
name|GROW_BY
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DOMFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ClockPageBuffer
name|buffer
decl_stmt|;
specifier|private
name|DOMFileHeader
name|fileHeader
decl_stmt|;
specifier|private
name|Object
name|owner
init|=
literal|null
decl_stmt|;
specifier|private
name|Lock
name|lock
init|=
operator|new
name|SimpleTimeOutLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object2LongOpenHashMap
name|pages
init|=
operator|new
name|Object2LongOpenHashMap
argument_list|()
decl_stmt|;
comment|/** 	 *  Constructor for the DOMFile object 	 * 	 *@param  buffers      the number of btree buffers to use 	 *@param  dataBuffers  the number of data page buffers 	 */
specifier|public
name|DOMFile
parameter_list|(
name|int
name|buffers
parameter_list|,
name|int
name|dataBuffers
parameter_list|)
block|{
name|super
argument_list|(
name|buffers
argument_list|)
expr_stmt|;
name|fileHeader
operator|=
operator|(
name|DOMFileHeader
operator|)
name|getFileHeader
argument_list|()
expr_stmt|;
name|fileHeader
operator|.
name|setPageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|setTotalCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|ClockPageBuffer
argument_list|(
name|dataBuffers
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the DOMFile object 	 * 	 *@param  file  the file to use 	 */
specifier|public
name|DOMFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the DOMFile object 	 * 	 *@param  file     the file to use 	 *@param  buffers  size of the data page buffer 	 */
specifier|public
name|DOMFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|buffers
parameter_list|)
block|{
name|this
argument_list|(
name|buffers
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the DOMFile object 	 * 	 *@param  file         the file to use  	 *@param  buffers      size of the buffer for btree pages 	 *@param  dataBuffers  size of the buffer for data pages 	 */
specifier|public
name|DOMFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|buffers
parameter_list|,
name|int
name|dataBuffers
parameter_list|)
block|{
name|this
argument_list|(
name|buffers
argument_list|,
name|dataBuffers
argument_list|)
expr_stmt|;
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the DOMFile object.      *       * Use this constructor if all keys have the same length. 	 * 	 *@param  file     the file to use 	 *@param  buffers  size of the data page buffer 	 *@param  keyLen   key size if all keys have the same length 	 */
specifier|public
name|DOMFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|buffers
parameter_list|,
name|short
name|keyLen
parameter_list|)
block|{
name|this
argument_list|(
name|file
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|setKeyLen
argument_list|(
name|keyLen
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Create virtual address from page number and offset (tid) 	 * 	 *@param  page    page number 	 *@param  offset  offset (tid) 	 *@return         new virtual address in a long 	 */
specifier|public
specifier|final
specifier|static
name|long
name|createPointer
parameter_list|(
name|int
name|page
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|p
init|=
operator|(
name|page
operator|&
literal|0xffff
operator|)
decl_stmt|;
name|long
name|o
init|=
operator|(
name|offset
operator|&
literal|0xffff
operator|)
decl_stmt|;
return|return
name|page
operator||
operator|(
name|o
operator|<<
literal|32
operator|)
return|;
block|}
comment|/** 	 *  Get the tid from a virtual address 	 * 	 *@param  pointer   	 *@return          the tid encoded in this address 	 */
specifier|public
specifier|final
specifier|static
name|int
name|tidFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
operator|(
name|pointer
operator|>>>
literal|32
operator|)
operator|&
literal|0xffff
operator|)
return|;
block|}
comment|/** 	 *  Get the page from a virtual address 	 * 	 *@param  pointer   	 *@return          the page encoded in this address 	 */
specifier|public
specifier|final
specifier|static
name|int
name|pageFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|pointer
return|;
block|}
comment|/** 	 *  Append a value to the current page  	 * 	 *@param  value  the value to append 	 *@return        the virtual storage address of the value 	 */
specifier|public
name|long
name|add
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
specifier|final
name|int
name|valueLen
init|=
name|value
operator|.
name|length
decl_stmt|;
comment|// always append data to the end of the file
name|DOMPage
name|page
init|=
name|getCurrentPage
argument_list|()
decl_stmt|;
comment|// does value fit into current data page?
if|if
condition|(
name|page
operator|==
literal|null
operator|||
name|page
operator|.
name|len
operator|+
literal|4
operator|+
name|valueLen
operator|>
name|page
operator|.
name|data
operator|.
name|length
condition|)
block|{
name|DOMPage
name|newPage
init|=
operator|new
name|DOMPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|DOMFilePageHeader
name|ph
init|=
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|ph
operator|.
name|setNextDataPage
argument_list|(
name|newPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|newPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setPrevDataPage
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
name|page
operator|=
name|newPage
expr_stmt|;
name|setCurrentPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|// save tuple identifier
specifier|final
name|DOMFilePageHeader
name|ph
init|=
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
specifier|final
name|short
name|tid
init|=
name|ph
operator|.
name|getNextTID
argument_list|()
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|tid
argument_list|,
name|page
operator|.
name|data
argument_list|,
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
name|page
operator|.
name|len
operator|+=
literal|2
expr_stmt|;
comment|// save data length
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|valueLen
argument_list|,
name|page
operator|.
name|data
argument_list|,
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
name|page
operator|.
name|len
operator|+=
literal|2
expr_stmt|;
comment|// save data
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|page
operator|.
name|data
argument_list|,
name|page
operator|.
name|len
argument_list|,
name|valueLen
argument_list|)
expr_stmt|;
name|page
operator|.
name|len
operator|+=
name|valueLen
expr_stmt|;
name|ph
operator|.
name|incRecordCount
argument_list|()
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// create pointer from pageNum and offset into page
specifier|final
name|long
name|p
init|=
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|tid
argument_list|)
decl_stmt|;
return|return
name|p
return|;
block|}
specifier|public
name|long
name|insertAfter
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
try|try
block|{
specifier|final
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|insertAfter
argument_list|(
name|p
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"key not found"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|long
name|insertAfter
parameter_list|(
name|long
name|address
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|rec
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"page not found"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
name|rec
operator|.
name|offset
operator|=
name|rec
operator|.
name|offset
operator|+
name|l
operator|+
literal|2
expr_stmt|;
name|int
name|dataLen
init|=
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
comment|// insert in the middle of the page?
if|if
condition|(
name|rec
operator|.
name|offset
operator|<
name|dataLen
condition|)
block|{
if|if
condition|(
name|dataLen
operator|+
name|value
operator|.
name|length
operator|+
literal|4
operator|<
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
condition|)
block|{
name|int
name|end
init|=
name|rec
operator|.
name|offset
operator|+
name|value
operator|.
name|length
operator|+
literal|4
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|end
argument_list|,
name|dataLen
operator|-
name|rec
operator|.
name|offset
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|dataLen
operator|+
name|value
operator|.
name|length
operator|+
literal|4
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|rec
operator|.
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// split the page
name|DOMPage
name|splitPage
init|=
operator|new
name|DOMPage
argument_list|()
decl_stmt|;
name|splitPage
operator|.
name|len
operator|=
name|dataLen
operator|-
name|rec
operator|.
name|offset
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|,
name|splitPage
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|splitPage
operator|.
name|len
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|splitPage
operator|.
name|len
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextDataPage
argument_list|(
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextDataPage
argument_list|()
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setPrevDataPage
argument_list|(
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextTID
argument_list|(
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextTID
argument_list|()
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setRecordCount
argument_list|(
name|getRecordCount
argument_list|(
name|splitPage
argument_list|)
argument_list|)
expr_stmt|;
name|splitPage
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|splitPage
argument_list|)
expr_stmt|;
name|DOMPage
name|nextPage
init|=
name|getCurrentPage
argument_list|(
name|splitPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextDataPage
argument_list|()
argument_list|)
decl_stmt|;
name|nextPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setPrevDataPage
argument_list|(
name|splitPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|nextPage
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextDataPage
argument_list|(
name|splitPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|rec
operator|.
name|offset
operator|+
name|value
operator|.
name|length
operator|+
literal|4
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|rec
operator|.
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setRecordCount
argument_list|(
name|getRecordCount
argument_list|(
name|rec
operator|.
name|page
argument_list|)
argument_list|)
expr_stmt|;
name|dataLen
operator|=
name|rec
operator|.
name|offset
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dataLen
operator|+
name|value
operator|.
name|length
operator|+
literal|4
operator|>
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
condition|)
block|{
comment|// append at the end of the page
comment|// does value fit into page?
name|DOMPage
name|newPage
init|=
operator|new
name|DOMPage
argument_list|()
decl_stmt|;
name|newPage
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextDataPage
argument_list|(
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextDataPage
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextDataPage
argument_list|(
name|newPage
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|rec
operator|.
name|page
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|=
name|newPage
expr_stmt|;
name|rec
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|value
operator|.
name|length
operator|+
literal|4
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|rec
operator|.
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|dataLen
operator|+
name|value
operator|.
name|length
operator|+
literal|4
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDataLength
argument_list|(
name|rec
operator|.
name|page
operator|.
name|len
argument_list|)
expr_stmt|;
block|}
comment|// write the data
name|short
name|tid
init|=
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextTID
argument_list|()
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|tid
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
expr_stmt|;
name|rec
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|value
operator|.
name|length
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
expr_stmt|;
name|rec
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|rec
operator|.
name|offset
operator|+=
name|value
operator|.
name|length
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|incRecordCount
argument_list|()
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|rec
operator|.
name|page
argument_list|)
expr_stmt|;
return|return
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|tid
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|close
parameter_list|()
throws|throws
name|DBException
block|{
name|flush
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|create
parameter_list|()
throws|throws
name|DBException
block|{
if|if
condition|(
name|super
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|()
block|{
return|return
operator|new
name|DOMFileHeader
argument_list|(
literal|1024
argument_list|,
name|PAGE_SIZE
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  read             Description of the Parameter 	 *@return                  Description of the Return Value 	 *@exception  IOException  Description of the Exception 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|boolean
name|read
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DOMFileHeader
argument_list|(
name|read
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pageCount  Description of the Parameter 	 *@return            Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|)
block|{
return|return
operator|new
name|DOMFileHeader
argument_list|(
name|pageCount
argument_list|,
name|PAGE_SIZE
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pageCount  Description of the Parameter 	 *@param  pageSize   Description of the Parameter 	 *@return            Description of the Return Value 	 */
specifier|public
name|FileHeader
name|createFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
return|return
operator|new
name|DOMFileHeader
argument_list|(
name|pageCount
argument_list|,
name|pageSize
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|protected
name|Page
name|createNewPage
parameter_list|()
block|{
try|try
block|{
name|Page
name|page
init|=
name|getFreePage
argument_list|()
decl_stmt|;
name|DOMFilePageHeader
name|ph
init|=
operator|(
name|DOMFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|ph
operator|.
name|setStatus
argument_list|(
name|RECORD
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setNextDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setPrevDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setRecordCount
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|//page.write();
name|fileHeader
operator|.
name|setLastDataPage
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|PageHeader
name|createPageHeader
parameter_list|()
block|{
return|return
operator|new
name|DOMFilePageHeader
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  query               Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|findKeys
parameter_list|(
name|IndexQuery
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
specifier|final
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|KEYS
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|private
name|long
name|findNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|long
name|target
parameter_list|,
name|Iterator
name|iter
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
specifier|final
name|long
name|firstChildId
init|=
name|XMLUtil
operator|.
name|getFirstChildId
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstChildId
operator|<
literal|0
condition|)
return|return
literal|0
return|;
specifier|final
name|long
name|lastChildId
init|=
name|firstChildId
operator|+
name|node
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
comment|//LOG.debug("scanning " + firstChildId + " to " + lastChildId);
name|long
name|p
decl_stmt|;
for|for
control|(
name|long
name|gid
init|=
name|firstChildId
init|;
name|gid
operator|<
name|lastChildId
condition|;
name|gid
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|(
name|Value
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|gid
operator|==
name|target
condition|)
return|return
operator|(
operator|(
name|DOMFileIterator
operator|)
name|iter
operator|)
operator|.
name|currentAddress
argument_list|()
return|;
name|NodeImpl
name|child
init|=
name|NodeImpl
operator|.
name|deserialize
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
decl_stmt|;
name|child
operator|.
name|setGID
argument_list|(
name|gid
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|hasChildNodes
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|findNode
argument_list|(
name|child
argument_list|,
name|target
argument_list|,
name|iter
argument_list|)
operator|)
operator|!=
literal|0
condition|)
return|return
name|p
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** 	 *  Retrieve a range of nodes, starting at first and including last. 	 * 	 *@param  first               the first node to retrieve 	 *@param  last                the last node to retrieve 	 *@return                     list of nodes 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|findRange
parameter_list|(
name|Value
name|first
parameter_list|,
name|Value
name|last
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
literal|null
argument_list|,
name|IndexQuery
operator|.
name|BW
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
decl_stmt|;
specifier|final
name|RangeCallback
name|cb
init|=
operator|new
name|RangeCallback
argument_list|()
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
specifier|private
name|long
name|findValue
parameter_list|(
name|Object
name|lock
parameter_list|,
name|NodeProxy
name|node
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getDoc
argument_list|()
decl_stmt|;
specifier|final
name|NativeBroker
operator|.
name|NodeRef
name|nodeRef
init|=
operator|new
name|NativeBroker
operator|.
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// first try to find the node in the index
return|return
name|findValue
argument_list|(
name|nodeRef
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"node "
operator|+
name|node
operator|.
name|gid
operator|+
literal|" not found, trying parent."
argument_list|)
expr_stmt|;
comment|// node not found in index: try to find the nearest available
comment|// ancestor and traverse it
name|long
name|id
init|=
name|node
operator|.
name|getGID
argument_list|()
decl_stmt|;
name|long
name|parentPointer
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|parentPointer
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|id
operator|<
literal|1
condition|)
throw|throw
operator|new
name|BTreeException
argument_list|(
literal|"node "
operator|+
name|node
operator|.
name|gid
operator|+
literal|" not found."
argument_list|)
throw|;
name|id
operator|=
name|XMLUtil
operator|.
name|getParentId
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|NativeBroker
operator|.
name|NodeRef
name|parentRef
init|=
operator|new
name|NativeBroker
operator|.
name|NodeRef
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|parentPointer
operator|=
name|findValue
argument_list|(
name|parentRef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
block|}
block|}
specifier|final
name|long
name|firstChildId
init|=
name|XMLUtil
operator|.
name|getFirstChildId
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
name|iter
init|=
operator|new
name|DOMFileIterator
argument_list|(
name|lock
argument_list|,
name|doc
argument_list|,
name|this
argument_list|,
name|parentPointer
argument_list|)
decl_stmt|;
specifier|final
name|Value
name|value
init|=
operator|(
name|Value
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|deserialize
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|n
operator|.
name|setGID
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|long
name|address
init|=
name|findNode
argument_list|(
name|n
argument_list|,
name|node
operator|.
name|gid
argument_list|,
name|iter
argument_list|)
decl_stmt|;
return|return
name|address
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|address
return|;
block|}
block|}
comment|/** 	 *  Find matching nodes for the given query.  	 * 	 *@param  query               Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  IOException     Description of the Exception 	 *@exception  BTreeException  Description of the Exception 	 */
specifier|public
name|ArrayList
name|findValues
parameter_list|(
name|IndexQuery
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|BTreeException
block|{
name|FindCallback
name|cb
init|=
operator|new
name|FindCallback
argument_list|(
name|FindCallback
operator|.
name|VALUES
argument_list|)
decl_stmt|;
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return
name|cb
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/** 	 *  Flush all buffers to disk. 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|flush
parameter_list|()
throws|throws
name|DBException
block|{
comment|//super.flush();
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pages
operator|.
name|remove
argument_list|(
name|owner
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fileHeader
operator|.
name|isDirty
argument_list|()
condition|)
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sync failed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|DBException
block|{
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pages
operator|.
name|remove
argument_list|(
name|owner
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fileHeader
operator|.
name|isDirty
argument_list|()
condition|)
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sync failed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|super
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
block|}
comment|/** 	 *  Retrieve a node by key 	 * 	 *@param  key   	 *@return      Description of the Return Value 	 */
specifier|public
name|Value
name|get
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// key not found
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Retrieve a node described by the given NodeProxy. 	 * 	 *@param  node  Description of the Parameter 	 *@return       Description of the Return Value 	 */
specifier|public
name|Value
name|get
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|owner
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Retrieve node at virtual address p. 	 * 	 *@param  p  Description of the Parameter 	 *@return    Description of the Return Value 	 */
specifier|public
name|Value
name|get
parameter_list|(
name|long
name|p
parameter_list|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
name|Value
name|v
init|=
operator|new
name|Value
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
operator|+
literal|2
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|v
operator|.
name|setAddress
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|RecordPos
block|{
name|int
name|offset
init|=
operator|-
literal|1
decl_stmt|;
name|DOMPage
name|page
init|=
literal|null
decl_stmt|;
specifier|public
name|RecordPos
parameter_list|(
name|int
name|offset
parameter_list|,
name|DOMPage
name|page
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|RecordPos
name|findValuePosition
parameter_list|(
name|long
name|p
parameter_list|)
block|{
name|long
name|pageNr
init|=
operator|(
name|long
operator|)
name|pageFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|short
name|tid
init|=
operator|(
name|short
operator|)
name|tidFromPointer
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|DOMPage
name|page
decl_stmt|;
name|int
name|pos
decl_stmt|;
while|while
condition|(
name|pageNr
operator|>
operator|-
literal|1
condition|)
block|{
name|page
operator|=
name|getCurrentPage
argument_list|(
name|pageNr
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
specifier|final
name|int
name|dlen
init|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
comment|//System.out.println(pos + "< " + dlen);
while|while
condition|(
name|pos
operator|<
name|dlen
condition|)
block|{
specifier|final
name|short
name|current
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|page
operator|.
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
comment|//System.out.println(current + " = " + tid);
if|if
condition|(
name|current
operator|==
name|tid
condition|)
return|return
operator|new
name|RecordPos
argument_list|(
name|pos
operator|+
literal|2
argument_list|,
name|page
argument_list|)
return|;
name|pos
operator|=
name|pos
operator|+
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|page
operator|.
name|data
argument_list|,
name|pos
operator|+
literal|2
argument_list|)
operator|+
literal|4
expr_stmt|;
block|}
name|pageNr
operator|=
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getNextDataPage
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"tid "
operator|+
name|tid
operator|+
literal|" not found on page "
operator|+
name|page
operator|.
name|page
operator|.
name|getPageInfo
argument_list|()
operator|+
literal|". Loading "
operator|+
name|pageNr
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"tid "
operator|+
name|tid
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|short
name|getRecordCount
parameter_list|(
name|DOMPage
name|page
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|len
decl_stmt|;
name|short
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
condition|)
block|{
name|len
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|page
operator|.
name|data
argument_list|,
name|pos
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|+
name|len
operator|+
literal|4
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/** 	 *  Retrieve the last page in the current sequence. 	 * 	 *@return    The currentPage value 	 */
specifier|private
specifier|final
name|DOMPage
name|getCurrentPage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pages
operator|.
name|containsKey
argument_list|(
name|owner
argument_list|)
condition|)
block|{
specifier|final
name|DOMPage
name|page
init|=
operator|new
name|DOMPage
argument_list|()
decl_stmt|;
name|pages
operator|.
name|put
argument_list|(
name|owner
argument_list|,
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
else|else
block|{
return|return
name|getCurrentPage
argument_list|(
name|pages
operator|.
name|getLong
argument_list|(
name|owner
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** 	 *  Retrieve the page with page number p 	 * 	 *@param  p  Description of the Parameter 	 *@return    The currentPage value 	 */
specifier|private
specifier|final
name|DOMPage
name|getCurrentPage
parameter_list|(
name|long
name|p
parameter_list|)
block|{
name|DOMPage
name|page
init|=
operator|(
name|DOMPage
operator|)
name|buffer
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
condition|)
name|page
operator|=
operator|new
name|DOMPage
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
comment|/** 	 *@return    The rootNode value 	 */
comment|//    protected BTreeNode getRootNode() {
comment|//        try {
comment|//            if (currentDoc.getRootPage()< 0) {
comment|//                long rootPage = createRootNode();
comment|//                currentDoc.setRootPage(rootPage);
comment|//            }
comment|//            BTreeNode node = (BTreeNode) cache.get(currentDoc.getRootPage());
comment|//            if (node == null) {
comment|//            	LOG.debug("reading root: " + currentDoc.getRootPage());
comment|//                Page p = getPage(currentDoc.getRootPage());
comment|//                node = new BTreeNode(p);
comment|//                node.read();
comment|//            }
comment|//            cache.add(node);
comment|//            return node;
comment|//        } catch (Exception e) {
comment|//            System.err.println(e);
comment|//            e.printStackTrace();
comment|//            return null;
comment|//        }
comment|//    }
comment|/** 	 *  Get a node iterator starting at the address of the given      * NodeProxy. 	 * 	 *@param  doc   Description of the Parameter 	 *@param  node  Description of the Parameter 	 *@return       Description of the Return Value 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeProxy
name|node
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|DOMFileIterator
argument_list|(
name|owner
argument_list|,
name|doc
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 *  Get a node iterator starting at the given address. 	 * 	 *@param  doc      Description of the Parameter 	 *@param  address  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|address
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|DOMFileIterator
argument_list|(
name|owner
argument_list|,
name|doc
argument_list|,
name|this
argument_list|,
name|address
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 *  Open the file. 	 * 	 *@return                  Description of the Return Value 	 *@exception  DBException  Description of the Exception 	 */
specifier|public
name|boolean
name|open
parameter_list|()
throws|throws
name|DBException
block|{
if|if
condition|(
name|super
operator|.
name|open
argument_list|()
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
comment|/** 	 *  Put a new key/value pair. 	 * 	 *@param  key    Description of the Parameter 	 *@param  value  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|public
name|long
name|put
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
name|long
name|p
init|=
name|add
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
block|{
name|addValue
argument_list|(
name|key
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|p
return|;
block|}
comment|/** 	 *  Remove a key/value pair. 	 * 	 *@param  key  Description of the Parameter 	 */
specifier|public
name|void
name|remove
parameter_list|(
name|Value
name|key
parameter_list|)
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|key
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Remove the value at address p. 	 * 	 *@param  p  Description of the Parameter 	 */
specifier|public
name|void
name|remove
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|p
parameter_list|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing tid "
operator|+
name|tidFromPointer
argument_list|(
name|p
argument_list|)
operator|+
literal|" from page "
operator|+
name|pageFromPointer
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|DOMFilePageHeader
name|ph
init|=
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|rec
operator|.
name|offset
operator|+
literal|2
operator|+
name|l
decl_stmt|;
name|int
name|len
init|=
name|ph
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
comment|// remove old value
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|end
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
operator|-
literal|2
argument_list|,
name|len
operator|-
name|end
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|l
operator|-
literal|4
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ph
operator|.
name|decRecordCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|ph
operator|.
name|getRecordCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buffer
operator|.
name|remove
argument_list|(
name|rec
operator|.
name|page
argument_list|)
expr_stmt|;
name|long
name|np
init|=
name|ph
operator|.
name|getNextDataPage
argument_list|()
decl_stmt|;
name|DOMPage
name|prev
init|=
name|getCurrentPage
argument_list|(
name|ph
operator|.
name|getPrevDataPage
argument_list|()
argument_list|)
decl_stmt|;
name|prev
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setNextDataPage
argument_list|(
name|np
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fileHeader
operator|.
name|getLastDataPage
argument_list|()
operator|==
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
condition|)
name|fileHeader
operator|.
name|setLastDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setNextDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setRecordCount
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|unlinkPages
argument_list|(
name|rec
operator|.
name|page
operator|.
name|page
argument_list|)
expr_stmt|;
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
name|rec
operator|.
name|page
operator|=
literal|null
expr_stmt|;
block|}
else|else
name|buffer
operator|.
name|add
argument_list|(
name|rec
operator|.
name|page
argument_list|)
expr_stmt|;
try|try
block|{
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 *  Set the last page in the sequence to which nodes are      * currently appended. 	 * 	 *@param  page  The new currentPage value 	 */
specifier|private
specifier|final
name|void
name|setCurrentPage
parameter_list|(
name|DOMPage
name|page
parameter_list|)
block|{
specifier|final
name|long
name|pnum
init|=
name|pages
operator|.
name|getLong
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|pnum
operator|==
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
condition|)
return|return;
name|pages
operator|.
name|remove
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|pages
operator|.
name|put
argument_list|(
name|owner
argument_list|,
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the active Lock object for this file.      *  	 * @see org.exist.util.Lockable#getLock() 	 */
specifier|public
specifier|final
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
comment|/** 	 *  Set the file location for this DOMFile. 	 * 	 *@param  location  The new location value 	 */
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|location
operator|+
literal|".dbx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  The current object owning this file.      *  	 * 	 *@param  obj  The new ownerObject value 	 */
specifier|public
specifier|final
name|void
name|setOwnerObject
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|owner
operator|=
name|obj
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|releaseOwner
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|//pages.remove(obj);
block|}
comment|/** 	 *  Set the rootNode of the B+-tree 	 * 	 *@param  rootNode         The new rootNode value 	 *@exception  IOException  Description of the Exception 	 */
comment|//    protected void setRootNode(BTreeNode rootNode) throws IOException {
comment|//        if (currentDoc != null)
comment|//            currentDoc.setRootPage(rootNode.page.getPageNum());
comment|//        cache.add(rootNode);
comment|//    }
comment|/** 	 *  Update the key/value pair. 	 * 	 *@param  key    Description of the Parameter 	 *@param  value  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|public
name|boolean
name|update
parameter_list|(
name|Value
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
try|try
block|{
name|long
name|p
init|=
name|findValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
return|return
literal|false
return|;
comment|// key not found
name|update
argument_list|(
name|key
argument_list|,
name|p
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|bte
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|bte
argument_list|)
expr_stmt|;
name|bte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 *  Update the key/value pair where the value is found at      * address p. 	 * 	 *@param  key    Description of the Parameter 	 *@param  p      Description of the Parameter 	 *@param  value  Description of the Parameter 	 */
specifier|public
name|void
name|update
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|p
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|ReadOnlyException
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|<
name|l
condition|)
block|{
comment|// value is smaller than before
name|LOG
operator|.
name|debug
argument_list|(
literal|"shrinking value"
argument_list|)
expr_stmt|;
name|int
name|next
init|=
name|rec
operator|.
name|offset
operator|+
literal|2
operator|+
name|l
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|value
operator|.
name|length
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
expr_stmt|;
name|rec
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|rec
operator|.
name|offset
operator|+=
name|value
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|next
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|,
name|rec
operator|.
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|getDataLength
argument_list|()
operator|-
name|next
argument_list|)
expr_stmt|;
name|rec
operator|.
name|page
operator|.
name|len
operator|=
name|rec
operator|.
name|page
operator|.
name|len
operator|-
operator|(
name|l
operator|-
name|value
operator|.
name|length
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|.
name|length
operator|>
name|l
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"value too long"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// value length unchanged
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
operator|+
literal|2
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|rec
operator|.
name|page
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|DOMFileIterator
implements|implements
name|Iterator
block|{
name|DOMFile
name|db
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
name|Value
name|nextVal
init|=
literal|null
decl_stmt|;
name|NodeProxy
name|node
init|=
literal|null
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|short
name|lastTID
init|=
operator|-
literal|1
decl_stmt|;
name|DOMPage
name|p
init|=
literal|null
decl_stmt|;
name|long
name|page
decl_stmt|;
name|long
name|startAddress
init|=
operator|-
literal|1
decl_stmt|;
name|Object
name|lockKey
decl_stmt|;
comment|/** 		 *  Constructor for the DOMFileIterator object 		 * 		 *@param  doc                 Description of the Parameter 		 *@param  db                  Description of the Parameter 		 *@param  node                Description of the Parameter 		 *@exception  BTreeException  Description of the Exception 		 *@exception  IOException     Description of the Exception 		 */
specifier|public
name|DOMFileIterator
parameter_list|(
name|Object
name|lock
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|DOMFile
name|db
parameter_list|,
name|NodeProxy
name|node
parameter_list|)
throws|throws
name|BTreeException
throws|,
name|IOException
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|lockKey
operator|=
operator|(
name|lock
operator|==
literal|null
condition|?
name|this
else|:
name|lock
operator|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMFileIterator object 		 * 		 *@param  doc                 Description of the Parameter 		 *@param  db                  Description of the Parameter 		 *@param  address             Description of the Parameter 		 *@exception  BTreeException  Description of the Exception 		 *@exception  IOException     Description of the Exception 		 */
specifier|public
name|DOMFileIterator
parameter_list|(
name|Object
name|lock
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|DOMFile
name|db
parameter_list|,
name|long
name|address
parameter_list|)
throws|throws
name|BTreeException
throws|,
name|IOException
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|startAddress
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|lockKey
operator|=
operator|(
name|lock
operator|==
literal|null
condition|?
name|this
else|:
name|lock
operator|)
expr_stmt|;
block|}
comment|/** 		 *  Gets the currentAddress attribute of the DOMFileIterator object 		 * 		 *@return    The currentAddress value 		 */
specifier|public
name|long
name|currentAddress
parameter_list|()
block|{
return|return
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|page
argument_list|,
name|lastTID
argument_list|)
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@return    Description of the Return Value 		 */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|setOwnerObject
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
name|long
name|addr
init|=
name|db
operator|.
name|findValue
argument_list|(
name|lockKey
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|page
operator|=
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
name|p
operator|=
name|rec
operator|.
name|page
expr_stmt|;
name|offset
operator|=
name|rec
operator|.
name|offset
operator|-
literal|2
expr_stmt|;
name|node
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
operator|-
literal|1
operator|<
name|startAddress
condition|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|startAddress
argument_list|)
decl_stmt|;
name|page
operator|=
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
name|offset
operator|=
name|rec
operator|.
name|offset
operator|-
literal|2
expr_stmt|;
name|p
operator|=
name|rec
operator|.
name|page
expr_stmt|;
block|}
if|else if
condition|(
name|page
operator|>
operator|-
literal|1
condition|)
name|p
operator|=
name|db
operator|.
name|getCurrentPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
else|else
block|{
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DOMFilePageHeader
name|ph
init|=
name|p
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|<
name|ph
operator|.
name|getDataLength
argument_list|()
condition|)
return|return
literal|true
return|;
if|else if
condition|(
name|ph
operator|.
name|getNextDataPage
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@return    Description of the Return Value 		 */
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|setOwnerObject
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
name|long
name|addr
init|=
name|db
operator|.
name|findValue
argument_list|(
name|lockKey
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|page
operator|=
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
name|p
operator|=
name|rec
operator|.
name|page
expr_stmt|;
name|offset
operator|=
name|rec
operator|.
name|offset
operator|-
literal|2
expr_stmt|;
name|node
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
operator|-
literal|1
operator|<
name|startAddress
condition|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|startAddress
argument_list|)
decl_stmt|;
name|page
operator|=
name|rec
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
expr_stmt|;
name|offset
operator|=
name|rec
operator|.
name|offset
operator|-
literal|2
expr_stmt|;
name|p
operator|=
name|rec
operator|.
name|page
expr_stmt|;
name|startAddress
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|page
operator|>
operator|-
literal|1
condition|)
name|p
operator|=
name|db
operator|.
name|getCurrentPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
else|else
block|{
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DOMFilePageHeader
name|ph
init|=
name|p
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|ph
operator|.
name|getDataLength
argument_list|()
condition|)
block|{
name|long
name|nextPage
init|=
name|ph
operator|.
name|getNextDataPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPage
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"offset out of range "
operator|+
name|p
operator|.
name|page
operator|.
name|getPageInfo
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|page
operator|=
name|nextPage
expr_stmt|;
name|p
operator|=
name|db
operator|.
name|getCurrentPage
argument_list|(
name|nextPage
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
name|short
name|tid
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|p
operator|.
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|p
operator|.
name|data
argument_list|,
name|offset
operator|+
literal|2
argument_list|)
decl_stmt|;
name|int
name|dataStart
init|=
name|offset
operator|+
literal|4
decl_stmt|;
name|Value
name|nextVal
init|=
operator|new
name|Value
argument_list|(
name|p
operator|.
name|data
argument_list|,
name|dataStart
argument_list|,
name|l
argument_list|)
decl_stmt|;
name|nextVal
operator|.
name|setAddress
argument_list|(
name|createPointer
argument_list|(
operator|(
name|int
operator|)
name|page
argument_list|,
name|tid
argument_list|)
argument_list|)
expr_stmt|;
name|lastTID
operator|=
name|tid
expr_stmt|;
name|offset
operator|=
name|dataStart
operator|+
name|l
expr_stmt|;
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
name|nextVal
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|lockKey
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|lock
operator|.
name|enter
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
name|DOMPage
name|p
init|=
literal|null
decl_stmt|;
name|p
operator|=
name|db
operator|.
name|getCurrentPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|DOMFilePageHeader
name|ph
init|=
name|p
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|ph
operator|.
name|decRecordCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|ph
operator|.
name|getRecordCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|long
name|np
init|=
name|ph
operator|.
name|getNextDataPage
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|db
operator|.
name|fileHeader
operator|.
name|getLastDataPage
argument_list|()
operator|==
name|p
operator|.
name|getPageNum
argument_list|()
condition|)
name|db
operator|.
name|fileHeader
operator|.
name|setLastDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setNextDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setPrevDataPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setDataLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ph
operator|.
name|setRecordCount
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|db
operator|.
name|buffer
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|db
operator|.
name|unlinkPages
argument_list|(
name|p
operator|.
name|page
argument_list|)
expr_stmt|;
name|db
operator|.
name|fileHeader
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
name|page
operator|=
name|np
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|lockKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 		 *  Sets the to attribute of the DOMFileIterator object 		 * 		 *@param  node  The new to value 		 */
specifier|public
name|void
name|setTo
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/** 		 *  Sets the to attribute of the DOMFileIterator object 		 * 		 *@param  address  The new to value 		 */
specifier|public
name|void
name|setTo
parameter_list|(
name|long
name|address
parameter_list|)
block|{
name|this
operator|.
name|startAddress
operator|=
name|address
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|private
specifier|final
class|class
name|DOMFileHeader
extends|extends
name|BTreeFileHeader
block|{
specifier|protected
name|long
name|lastDataPage
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|LinkedList
name|reserved
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|/**  Constructor for the DOMFileHeader object */
specifier|public
name|DOMFileHeader
parameter_list|()
block|{
block|}
comment|/** 		 *  Constructor for the DOMFileHeader object 		 * 		 *@param  pageCount  Description of the Parameter 		 */
specifier|public
name|DOMFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|)
block|{
name|super
argument_list|(
name|pageCount
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMFileHeader object 		 * 		 *@param  pageCount  Description of the Parameter 		 *@param  pageSize   Description of the Parameter 		 */
specifier|public
name|DOMFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
name|super
argument_list|(
name|pageCount
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMFileHeader object 		 * 		 *@param  pageCount  Description of the Parameter 		 *@param  pageSize   Description of the Parameter 		 *@param  blockSize  Description of the Parameter 		 */
specifier|public
name|DOMFileHeader
parameter_list|(
name|long
name|pageCount
parameter_list|,
name|int
name|pageSize
parameter_list|,
name|byte
name|blockSize
parameter_list|)
block|{
name|super
argument_list|(
name|pageCount
argument_list|,
name|pageSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMFileHeader object 		 * 		 *@param  read             Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|DOMFileHeader
parameter_list|(
name|boolean
name|read
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Adds a feature to the ReservedPage attribute of the DOMFileHeader 		 *  object 		 * 		 *@param  page  The feature to be added to the ReservedPage attribute 		 */
specifier|public
name|void
name|addReservedPage
parameter_list|(
name|long
name|page
parameter_list|)
block|{
name|reserved
operator|.
name|addFirst
argument_list|(
operator|new
name|Long
argument_list|(
name|page
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Gets the lastDataPage attribute of the DOMFileHeader object 		 * 		 *@return    The lastDataPage value 		 */
specifier|public
name|long
name|getLastDataPage
parameter_list|()
block|{
return|return
name|lastDataPage
return|;
block|}
comment|/** 		 *  Gets the reservedPage attribute of the DOMFileHeader object 		 * 		 *@return    The reservedPage value 		 */
specifier|public
name|long
name|getReservedPage
parameter_list|()
block|{
if|if
condition|(
name|reserved
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
operator|(
operator|(
name|Long
operator|)
name|reserved
operator|.
name|removeLast
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  raf              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|read
parameter_list|(
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|read
argument_list|(
name|raf
argument_list|)
expr_stmt|;
name|lastDataPage
operator|=
name|raf
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|rp
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|long
name|l
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rp
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|=
name|raf
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|reserved
operator|.
name|addFirst
argument_list|(
operator|new
name|Long
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 		 *  Sets the lastDataPage attribute of the DOMFileHeader object 		 * 		 *@param  last  The new lastDataPage value 		 */
specifier|public
name|void
name|setLastDataPage
parameter_list|(
name|long
name|last
parameter_list|)
block|{
name|lastDataPage
operator|=
name|last
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  raf              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|(
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|raf
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeLong
argument_list|(
name|lastDataPage
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|reserved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|l
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|reserved
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|l
operator|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|raf
operator|.
name|writeLong
argument_list|(
name|l
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|private
specifier|final
class|class
name|DOMFilePageHeader
extends|extends
name|BTreePageHeader
block|{
specifier|protected
name|int
name|dataLen
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|nextDataPage
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|long
name|prevDataPage
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|short
name|tid
init|=
literal|0
decl_stmt|;
specifier|protected
name|short
name|records
init|=
literal|0
decl_stmt|;
comment|/**  Constructor for the DOMFilePageHeader object */
specifier|public
name|DOMFilePageHeader
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMFilePageHeader object 		 * 		 *@param  dis              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|DOMFilePageHeader
parameter_list|(
name|DataInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|decRecordCount
parameter_list|()
block|{
name|records
operator|--
expr_stmt|;
block|}
specifier|public
name|short
name|getNextTID
parameter_list|()
block|{
return|return
operator|++
name|tid
return|;
block|}
specifier|public
name|void
name|setNextTID
parameter_list|(
name|short
name|tid
parameter_list|)
block|{
name|this
operator|.
name|tid
operator|=
name|tid
expr_stmt|;
block|}
comment|/** 		 *  Gets the dataLength attribute of the DOMFilePageHeader object 		 * 		 *@return    The dataLength value 		 */
specifier|public
name|int
name|getDataLength
parameter_list|()
block|{
return|return
name|dataLen
return|;
block|}
comment|/** 		 *  Gets the nextDataPage attribute of the DOMFilePageHeader object 		 * 		 *@return    The nextDataPage value 		 */
specifier|public
name|long
name|getNextDataPage
parameter_list|()
block|{
return|return
name|nextDataPage
return|;
block|}
specifier|public
name|long
name|getPrevDataPage
parameter_list|()
block|{
return|return
name|prevDataPage
return|;
block|}
comment|/** 		 *  Gets the recordCount attribute of the DOMFilePageHeader object 		 * 		 *@return    The recordCount value 		 */
specifier|public
name|short
name|getRecordCount
parameter_list|()
block|{
return|return
name|records
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|incRecordCount
parameter_list|()
block|{
name|records
operator|++
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  dis              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|read
parameter_list|(
name|DataInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|read
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|records
operator|=
name|dis
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|dataLen
operator|=
name|dis
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|nextDataPage
operator|=
name|dis
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|prevDataPage
operator|=
name|dis
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|tid
operator|=
name|dis
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Sets the dataLength attribute of the DOMFilePageHeader object 		 * 		 *@param  len  The new dataLength value 		 */
specifier|public
name|void
name|setDataLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|dataLen
operator|=
name|len
expr_stmt|;
block|}
comment|/** 		 *  Sets the nextDataPage attribute of the DOMFilePageHeader object 		 * 		 *@param  page  The new nextDataPage value 		 */
specifier|public
name|void
name|setNextDataPage
parameter_list|(
name|long
name|page
parameter_list|)
block|{
name|nextDataPage
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|void
name|setPrevDataPage
parameter_list|(
name|long
name|page
parameter_list|)
block|{
name|prevDataPage
operator|=
name|page
expr_stmt|;
block|}
comment|/** 		 *  Sets the recordCount attribute of the DOMFilePageHeader object 		 * 		 *@param  recs  The new recordCount value 		 */
specifier|public
name|void
name|setRecordCount
parameter_list|(
name|short
name|recs
parameter_list|)
block|{
name|records
operator|=
name|recs
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  dos              Description of the Parameter 		 *@exception  IOException  Description of the Exception 		 */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|dataLen
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|nextDataPage
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|prevDataPage
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|tid
argument_list|)
expr_stmt|;
comment|//            if(dataLen == 0) {
comment|//                LOG.debug("dataLen == 0");
comment|//                Thread.dumpStack();
comment|//            }
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|private
specifier|final
class|class
name|DOMPage
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|Page
name|page
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|boolean
name|saved
init|=
literal|true
decl_stmt|;
comment|/**  Constructor for the DOMPage object */
specifier|public
name|DOMPage
parameter_list|()
block|{
name|page
operator|=
name|createNewPage
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|fileHeader
operator|.
name|getWorkSize
argument_list|()
index|]
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
block|}
comment|/** 		 *  Constructor for the DOMPage object 		 * 		 *@param  pos  Description of the Parameter 		 */
specifier|public
name|DOMPage
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
try|try
block|{
name|page
operator|=
name|getPage
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 		 *  Constructor for the DOMPage object 		 * 		 *@param  page  Description of the Parameter 		 */
specifier|public
name|DOMPage
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|load
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|decRefCount
parameter_list|()
block|{
name|refCount
operator|--
expr_stmt|;
block|}
comment|/** 		 *  Gets the pageHeader attribute of the DOMPage object 		 * 		 *@return    The pageHeader value 		 */
specifier|public
name|DOMFilePageHeader
name|getPageHeader
parameter_list|()
block|{
return|return
operator|(
name|DOMFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
return|;
block|}
comment|/** 		 *  Gets the pageNum attribute of the DOMPage object 		 * 		 *@return    The pageNum value 		 */
specifier|public
name|long
name|getPageNum
parameter_list|()
block|{
return|return
name|page
operator|.
name|getPageNum
argument_list|()
return|;
block|}
comment|/** 		 *  Gets the refCount attribute of the DOMPage object 		 * 		 *@return    The refCount value 		 */
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|incRefCount
parameter_list|()
block|{
name|refCount
operator|++
expr_stmt|;
block|}
comment|/** 		 *  Gets the dirty attribute of the DOMPage object 		 * 		 *@return    The dirty value 		 */
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
operator|!
name|saved
return|;
block|}
specifier|public
name|void
name|setDirty
parameter_list|(
name|boolean
name|dirty
parameter_list|)
block|{
name|saved
operator|=
operator|!
name|dirty
expr_stmt|;
name|page
operator|.
name|getPageHeader
argument_list|()
operator|.
name|setDirty
argument_list|(
name|dirty
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|load
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
try|try
block|{
name|DOMFilePageHeader
name|ph
init|=
operator|(
name|DOMFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
name|len
operator|=
name|ph
operator|.
name|getDataLength
argument_list|()
expr_stmt|;
name|data
operator|=
name|page
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"page "
operator|+
name|page
operator|.
name|getPageNum
argument_list|()
operator|+
literal|" data length == 0"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|saved
operator|=
literal|true
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|write
parameter_list|()
block|{
if|if
condition|(
name|page
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|DOMFilePageHeader
name|ph
init|=
operator|(
name|DOMFilePageHeader
operator|)
name|page
operator|.
name|getPageHeader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ph
operator|.
name|isDirty
argument_list|()
condition|)
return|return;
comment|//ph.setDataLength(len);
name|ph
operator|.
name|setRecordLen
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|writeValue
argument_list|(
name|page
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//page.write();
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 *  Cache for data pages. Pages are put on top of a stack. If the stack size 	 *  exceeds blockBuffers, the last page in the stack will be removed and 	 *  saved to disk. When a page is removed, it's dirty flag is check to 	 *  determine if the page needs to be saved. If the page is dirty, the page 	 *  is saved. 	 * 	 *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de> 	 *@created    25. Mai 2002 	 */
specifier|protected
class|class
name|ClockPageBuffer
block|{
specifier|protected
name|int
name|blockBuffers
decl_stmt|;
specifier|protected
name|int
name|hits
init|=
literal|0
decl_stmt|;
comment|//protected TLongObjectHashMap map;
specifier|protected
name|Long2ObjectLinkedOpenHashMap
name|map
decl_stmt|;
specifier|protected
name|int
name|misses
init|=
literal|0
decl_stmt|;
comment|//protected LinkedList queue = new LinkedList();
comment|/** 		 *  Constructor for the PageBuffer object 		 * 		 *@param  blockBuffers  Description of the Parameter 		 */
specifier|public
name|ClockPageBuffer
parameter_list|(
name|int
name|blockBuffers
parameter_list|)
block|{
name|this
operator|.
name|blockBuffers
operator|=
name|blockBuffers
expr_stmt|;
comment|//map = new TLongObjectHashMap(blockBuffers);
name|map
operator|=
operator|new
name|Long2ObjectLinkedOpenHashMap
argument_list|(
name|blockBuffers
argument_list|)
expr_stmt|;
block|}
comment|/**  Constructor for the PageBuffer object */
specifier|public
name|ClockPageBuffer
parameter_list|()
block|{
name|this
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  page  Description of the Parameter 		 */
specifier|public
name|void
name|add
parameter_list|(
name|DOMPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
condition|)
block|{
name|page
operator|.
name|incRefCount
argument_list|()
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|blockBuffers
condition|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|removed
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DOMPage
name|old
init|=
operator|(
name|DOMPage
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|old
operator|.
name|decRefCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|getRefCount
argument_list|()
operator|<
literal|1
operator|&&
name|old
operator|.
name|getPageNum
argument_list|()
operator|!=
name|page
operator|.
name|getPageNum
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//map.remove(old.page.getPageNum());
if|if
condition|(
name|old
operator|.
name|isDirty
argument_list|()
condition|)
name|old
operator|.
name|write
argument_list|()
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|//queue.add(page);
name|map
operator|.
name|put
argument_list|(
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|DOMPage
name|page
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|page
operator|=
operator|(
name|DOMPage
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|isDirty
argument_list|()
condition|)
name|page
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|flush
argument_list|()
expr_stmt|;
comment|//queue.clear();
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  page  Description of the Parameter 		 *@return       Description of the Return Value 		 */
specifier|public
name|DOMPage
name|get
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  pnum  Description of the Parameter 		 *@return       Description of the Return Value 		 */
specifier|public
name|DOMPage
name|get
parameter_list|(
name|long
name|pnum
parameter_list|)
block|{
name|DOMPage
name|page
init|=
operator|(
name|DOMPage
operator|)
name|map
operator|.
name|get
argument_list|(
name|pnum
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
condition|)
name|misses
operator|++
expr_stmt|;
else|else
name|hits
operator|++
expr_stmt|;
return|return
name|page
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  page  Description of the Parameter 		 */
specifier|public
name|void
name|remove
parameter_list|(
name|DOMPage
name|page
parameter_list|)
block|{
comment|//			int idx;
comment|//			while ((idx = queue.indexOf(page))> -1)
comment|//				queue.remove(idx);
name|map
operator|.
name|remove
argument_list|(
name|page
operator|.
name|page
operator|.
name|getPageNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"dom.dbx DATA "
argument_list|)
operator|.
name|append
argument_list|(
name|blockBuffers
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
operator|.
name|append
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
operator|.
name|append
argument_list|(
name|misses
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|private
specifier|final
class|class
name|FindCallback
implements|implements
name|BTreeCallback
block|{
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|KEYS
init|=
literal|1
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|VALUES
init|=
literal|0
decl_stmt|;
name|int
name|mode
init|=
name|VALUES
decl_stmt|;
name|ArrayList
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/** 		 *  Constructor for the FindCallback object 		 * 		 *@param  mode  Description of the Parameter 		 */
specifier|public
name|FindCallback
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
comment|/** 		 *  Gets the values attribute of the FindCallback object 		 * 		 *@return    The values value 		 */
specifier|public
name|ArrayList
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  value    Description of the Parameter 		 *@param  pointer  Description of the Parameter 		 *@return          Description of the Return Value 		 */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|VALUES
case|:
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|pointer
argument_list|)
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
name|int
name|dataStart
init|=
name|rec
operator|.
name|offset
operator|+
literal|2
decl_stmt|;
comment|//int l = (int) VariableByteCoding.decode( page.data, offset );
comment|//int dataStart = VariableByteCoding.getSize( l );
name|values
operator|.
name|add
argument_list|(
operator|new
name|Value
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|dataStart
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|KEYS
case|:
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    3. Juni 2002 	 */
specifier|private
specifier|final
class|class
name|RangeCallback
implements|implements
name|BTreeCallback
block|{
name|ArrayList
name|values
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**  Constructor for the RangeCallback object */
specifier|public
name|RangeCallback
parameter_list|()
block|{
block|}
comment|/** 		 *  Gets the values attribute of the RangeCallback object 		 * 		 *@return    The values value 		 */
specifier|public
name|ArrayList
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/** 		 *  Description of the Method 		 * 		 *@param  value    Description of the Parameter 		 *@param  pointer  Description of the Parameter 		 *@return          Description of the Return Value 		 */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
block|{
name|RecordPos
name|rec
init|=
name|findValuePosition
argument_list|(
name|pointer
argument_list|)
decl_stmt|;
name|short
name|l
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|rec
operator|.
name|offset
argument_list|)
decl_stmt|;
name|int
name|dataStart
init|=
name|rec
operator|.
name|offset
operator|+
literal|2
decl_stmt|;
comment|//int l = (int) VariableByteCoding.decode( page.data, offset );
comment|//int dataStart = VariableByteCoding.getSize( l ) + offset;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Value
argument_list|(
name|rec
operator|.
name|page
operator|.
name|data
argument_list|,
name|dataStart
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

