begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Broker Pool Service for the de-duplicating  * Blob Store, see {@link BlobStoreImpl}.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|BlobStoreImplService
implements|implements
name|BlobStoreService
implements|,
name|BrokerPoolService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|BlobStoreImplService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOB_STORE_PERSISTENT_FILE_NAME
init|=
literal|"blob.dbx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOB_STORE_DIR_NAME
init|=
literal|"blob"
decl_stmt|;
specifier|private
name|Path
name|persistentFile
decl_stmt|;
specifier|private
name|Path
name|dataDir
decl_stmt|;
specifier|private
name|Path
name|blobDir
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
name|this
operator|.
name|dataDir
operator|=
operator|(
name|Path
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
literal|"Could not determine "
operator|+
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
operator|+
literal|" from the configuration"
argument_list|)
throw|;
block|}
name|this
operator|.
name|persistentFile
operator|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|BLOB_STORE_PERSISTENT_FILE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobDir
operator|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|BLOB_STORE_DIR_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
name|this
operator|.
name|blobStore
operator|=
operator|new
name|BlobStoreImpl
argument_list|(
name|pool
argument_list|,
name|persistentFile
argument_list|,
name|blobDir
argument_list|,
name|DigestType
operator|.
name|BLAKE_256
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opened de-duplicating Blob Store v"
operator|+
name|BlobStoreImpl
operator|.
name|BLOB_STORE_VERSION
operator|+
literal|". metadata="
operator|+
name|dataDir
operator|.
name|relativize
argument_list|(
name|persistentFile
argument_list|)
operator|+
literal|", store="
operator|+
name|dataDir
operator|.
name|relativize
argument_list|(
name|blobDir
argument_list|)
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|blobStore
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|blobStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Clean shutdown of Blob Store failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
block|}
end_class

end_unit

