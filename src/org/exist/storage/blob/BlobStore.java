begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|RawDataBackup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Store for BLOBs (Binary Large Objects).  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_interface
specifier|public
interface|interface
name|BlobStore
extends|extends
name|Closeable
block|{
comment|/**      * Open's the BLOB Store.      *      * Should be called before any other actions.      *      * @throws IOException if the store cannot be opened.      */
name|void
name|open
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Add a BLOB to the BLOB Store.      *      * @param transaction the current database transaction.      * @param is the input stream containing the blob data.      *      * @return an identifier representing the stored blob and the size of the blob in bytes.      *      * @throws IOException if the BLOB cannot be added.      */
name|Tuple2
argument_list|<
name|BlobId
argument_list|,
name|Long
argument_list|>
name|add
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Get a BLOB from the BLOB Store.      *      * @param transaction the current database transaction.      * @param blobId the identifier representing the blob to be retrieved.      *      * @return an InputStream for accessing the BLOB data, or null if there is no such BLOB.      *     NOTE the stream MUST be closed when the caller has finished      *     with it to release any associated resources.      *      * @throws IOException if an error occurs whilst retrieving the BLOB.      */
annotation|@
name|Nullable
name|InputStream
name|get
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Perform an operation with a {@link Path} reference to a BLOB.      *      * NOTE: Use of this method should be avoided where possible. It only      * exists for integration with tools external to Java which can only      * work with File Paths and where making a copy of the file is not      * necessary.      *      * WARNING: The provided {@link Path} MUST ONLY be used for      * READ operations, any WRITE/DELETE operation will corrupt the      * integrity of the blob store.      *      * Consider if you really need to use this method. It is likely you could      * instead use {@link #get(Txn, BlobId)} and make a copy of the data to      * a temporary file.      *      * Note that any resources associated with the BLOB file      * may not be released until the {@code fnFile} has finished executing.      *      * USE WITH CAUTION!      *      * @param transaction the current database transaction.      * @param blobId the identifier representing the blob to be retrieved.      * @param<T> the type of the return value      * @param fnFile a function which performs a read-only operation on the BLOB file.      *     If you wish to handle exceptions in your function you should consider      *     {@link com.evolvedbinary.j8fu.Try} or similar.      *      * @throws IOException if an error occurs whilst retrieving the BLOB file.      */
parameter_list|<
name|T
parameter_list|>
name|T
name|with
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|,
specifier|final
name|Function
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|fnFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Remove a BLOB from the BLOB Store.      *      * @param transaction the current database transaction.      * @param blobId the identifier representing the blob to be removed.      *      * @throws IOException if an error occurs whilst removing the BLOB.      */
name|void
name|remove
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Backup the Blob Store to the backup.      *      * @param backup the backup to write the Blob Store to.      */
name|void
name|backupToArchive
parameter_list|(
specifier|final
name|RawDataBackup
name|backup
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

