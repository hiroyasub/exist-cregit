begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|AbstractLoggable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBlobLoggable
extends|extends
name|AbstractLoggable
implements|implements
name|BlobLoggable
block|{
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|BlobId
name|blobId
decl_stmt|;
specifier|public
name|AbstractBlobLoggable
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobId
operator|=
name|blobId
expr_stmt|;
block|}
specifier|public
name|AbstractBlobLoggable
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ByteBuffer
name|out
parameter_list|)
block|{
name|out
operator|.
name|putInt
argument_list|(
name|blobId
operator|.
name|getId
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|blobId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|ByteBuffer
name|in
parameter_list|)
block|{
specifier|final
name|int
name|idLen
init|=
name|in
operator|.
name|getInt
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|idLen
index|]
decl_stmt|;
name|in
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobId
operator|=
operator|new
name|BlobId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLogSize
parameter_list|()
block|{
return|return
literal|4
operator|+
name|blobId
operator|.
name|getId
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**      * Get the Blob id      *      * @return the blob id      */
specifier|public
name|BlobId
name|getBlobId
parameter_list|()
block|{
return|return
name|blobId
return|;
block|}
block|}
end_class

end_unit

