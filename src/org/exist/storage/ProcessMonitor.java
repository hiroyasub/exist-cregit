begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: ProcessMonitor.java 8235 2008-10-17 16:03:27Z chaeron $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
operator|.
name|XQueryURLRewrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|JavaObjectValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/**  * Class to keep track of all running queries in a database instance. The main  * purpose of this class is to signal running queries that the database is going to  * shut down. This is done through the {@link org.exist.xquery.XQueryWatchDog}  * registered by each query. It is up to the query to check the watchdog's state.  * If it simply ignores the terminate signal, it will be killed after the shutdown  * timeout is reached.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ProcessMonitor
block|{
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_UNSPECIFIED
init|=
literal|"unspecified"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_VALIDATE_DOC
init|=
literal|"validating document"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_STORE_DOC
init|=
literal|"storing document"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_STORE_BINARY
init|=
literal|"storing binary resource"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_REMOVE_XML
init|=
literal|"remove XML resource"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_REMOVE_BINARY
init|=
literal|"remove binary resource"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_REMOVE_COLLECTION
init|=
literal|"remove collection"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_REINDEX_COLLECTION
init|=
literal|"reindex collection"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_COPY_COLLECTION
init|=
literal|"copy collection"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_MOVE_COLLECTION
init|=
literal|"move collection"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ACTION_BACKUP
init|=
literal|"backup"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ProcessMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|QUERY_HISTORY_TIMEOUT
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 2 minutes
specifier|public
specifier|final
specifier|static
name|long
name|MIN_TIME
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|XQueryWatchDog
argument_list|>
name|runningQueries
init|=
operator|new
name|HashSet
argument_list|<
name|XQueryWatchDog
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DelayQueue
argument_list|<
name|QueryHistory
argument_list|>
name|history
init|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Thread
argument_list|,
name|JobInfo
argument_list|>
name|processes
init|=
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|JobInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|maxShutdownWait
decl_stmt|;
specifier|private
name|long
name|historyTimespan
init|=
name|QUERY_HISTORY_TIMEOUT
decl_stmt|;
specifier|private
name|long
name|minTime
init|=
name|MIN_TIME
decl_stmt|;
specifier|private
name|boolean
name|trackRequests
init|=
literal|false
decl_stmt|;
specifier|public
name|ProcessMonitor
parameter_list|(
name|long
name|maxShutdownWait
parameter_list|)
block|{
name|this
operator|.
name|maxShutdownWait
operator|=
name|maxShutdownWait
expr_stmt|;
block|}
specifier|public
name|void
name|startJob
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|startJob
argument_list|(
name|action
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startJob
parameter_list|(
name|String
name|action
parameter_list|,
name|Object
name|addInfo
parameter_list|)
block|{
name|startJob
argument_list|(
name|action
argument_list|,
name|addInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//TODO: addInfo = XmldbURI ? -shabanovd
specifier|public
name|void
name|startJob
parameter_list|(
name|String
name|action
parameter_list|,
name|Object
name|addInfo
parameter_list|,
name|Monitor
name|monitor
parameter_list|)
block|{
specifier|final
name|JobInfo
name|info
init|=
operator|new
name|JobInfo
argument_list|(
name|action
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAddInfo
argument_list|(
name|addInfo
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|processes
operator|.
name|put
argument_list|(
name|info
operator|.
name|getThread
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|endJob
parameter_list|()
block|{
name|processes
operator|.
name|remove
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JobInfo
index|[]
name|runningJobs
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
specifier|final
name|JobInfo
name|jobs
index|[]
init|=
operator|new
name|JobInfo
index|[
name|processes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|JobInfo
argument_list|>
name|i
init|=
name|processes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
comment|//BUG: addInfo = XmldbURI ? -shabanovd
name|jobs
index|[
name|j
index|]
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|jobs
return|;
block|}
block|}
specifier|public
name|void
name|stopRunningJobs
parameter_list|()
block|{
specifier|final
name|long
name|waitStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|maxShutdownWait
operator|>
operator|-
literal|1
condition|)
block|{
while|while
condition|(
name|processes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|//Wait until they become inactive...
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
comment|//...or force the shutdown
if|if
condition|(
name|maxShutdownWait
operator|>
operator|-
literal|1
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|waitStart
operator|>
name|maxShutdownWait
condition|)
block|{
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|JobInfo
name|job
range|:
name|processes
operator|.
name|values
argument_list|()
control|)
block|{
name|job
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|queryStarted
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
synchronized|synchronized
init|(
name|runningQueries
init|)
block|{
name|watchdog
operator|.
name|setRunningThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|runningQueries
operator|.
name|add
argument_list|(
name|watchdog
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|queryCompleted
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
name|boolean
name|found
decl_stmt|;
synchronized|synchronized
init|(
name|runningQueries
init|)
block|{
name|found
operator|=
name|runningQueries
operator|.
name|remove
argument_list|(
name|watchdog
argument_list|)
expr_stmt|;
block|}
comment|// add to query history if elapsed time> minTime
specifier|final
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|watchdog
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|&&
name|elapsed
operator|>
name|minTime
condition|)
block|{
synchronized|synchronized
init|(
name|history
init|)
block|{
specifier|final
name|String
name|sourceKey
init|=
name|watchdog
operator|.
name|getContext
argument_list|()
operator|.
name|getXacmlSource
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|QueryHistory
name|qh
init|=
operator|new
name|QueryHistory
argument_list|(
name|sourceKey
argument_list|,
name|historyTimespan
argument_list|)
decl_stmt|;
name|qh
operator|.
name|setMostRecentExecutionTime
argument_list|(
name|watchdog
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|qh
operator|.
name|setMostRecentExecutionDuration
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
name|qh
operator|.
name|incrementInvocationCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|trackRequests
condition|)
block|{
name|qh
operator|.
name|setRequestURI
argument_list|(
name|getRequestURI
argument_list|(
name|watchdog
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|history
operator|.
name|add
argument_list|(
name|qh
argument_list|)
expr_stmt|;
name|cleanHistory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|cleanHistory
parameter_list|()
block|{
comment|// remove timed out entries
while|while
condition|(
name|history
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
block|}
comment|/**      * The max duration (in milliseconds) for which queries are tracked in the query history. Older queries      * will be removed (default is {@link #QUERY_HISTORY_TIMEOUT}).      *      * @param time max duration in ms      */
specifier|public
name|void
name|setHistoryTimespan
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|historyTimespan
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|long
name|getHistoryTimespan
parameter_list|()
block|{
return|return
name|historyTimespan
return|;
block|}
comment|/**      * The minimum duration of a query (in milliseconds) to be added to the query history. Use this to filter out      * very short-running queries (default is {@link #MIN_TIME}).      *      * @param time min duration in ms      */
specifier|public
name|void
name|setMinTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|minTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|long
name|getMinTime
parameter_list|()
block|{
return|return
name|minTime
return|;
block|}
comment|/**      * Set to true if the class should attempt to determine the HTTP URI through which the query was triggered.      * This is an important piece of information for diagnosis, but gathering it might be expensive, so request      * URI tracking is disabled by default.      *      * @param track attempt to track URIs if true      */
specifier|public
name|void
name|setTrackRequestURI
parameter_list|(
name|boolean
name|track
parameter_list|)
block|{
name|trackRequests
operator|=
name|track
expr_stmt|;
block|}
specifier|public
name|boolean
name|getTrackRequestURI
parameter_list|()
block|{
return|return
name|trackRequests
return|;
block|}
specifier|public
class|class
name|QueryHistory
implements|implements
name|Delayed
block|{
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
specifier|private
name|String
name|requestURI
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|mostRecentExecutionTime
decl_stmt|;
specifier|private
name|long
name|mostRecentExecutionDuration
decl_stmt|;
specifier|private
name|int
name|invocationCount
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|expires
decl_stmt|;
specifier|public
name|QueryHistory
parameter_list|(
name|String
name|source
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|expires
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|delay
expr_stmt|;
block|}
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|void
name|incrementInvocationCount
parameter_list|()
block|{
name|invocationCount
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getInvocationCount
parameter_list|()
block|{
return|return
name|invocationCount
return|;
block|}
specifier|public
name|long
name|getMostRecentExecutionTime
parameter_list|()
block|{
return|return
name|mostRecentExecutionTime
return|;
block|}
specifier|public
name|void
name|setMostRecentExecutionTime
parameter_list|(
name|long
name|mostRecentExecutionTime
parameter_list|)
block|{
name|this
operator|.
name|mostRecentExecutionTime
operator|=
name|mostRecentExecutionTime
expr_stmt|;
block|}
specifier|public
name|long
name|getMostRecentExecutionDuration
parameter_list|()
block|{
return|return
name|mostRecentExecutionDuration
return|;
block|}
specifier|public
name|void
name|setMostRecentExecutionDuration
parameter_list|(
name|long
name|mostRecentExecutionDuration
parameter_list|)
block|{
name|this
operator|.
name|mostRecentExecutionDuration
operator|=
name|mostRecentExecutionDuration
expr_stmt|;
block|}
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
return|return
name|requestURI
return|;
block|}
specifier|public
name|void
name|setRequestURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|requestURI
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|expires
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
if|if
condition|(
name|expires
operator|<
operator|(
operator|(
name|QueryHistory
operator|)
name|o
operator|)
operator|.
name|expires
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|expires
operator|>
operator|(
operator|(
name|QueryHistory
operator|)
name|o
operator|)
operator|.
name|expires
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|QueryHistory
index|[]
name|getRecentQueryHistory
parameter_list|()
block|{
synchronized|synchronized
init|(
name|history
init|)
block|{
name|cleanHistory
argument_list|()
expr_stmt|;
return|return
name|history
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
operator|(
name|o1
operator|,
name|o2
operator|)
operator|->
name|o1
operator|.
name|expires
operator|>
name|o2
operator|.
name|expires
condition|?
operator|-
literal|1
else|:
operator|(
name|o1
operator|.
name|expires
operator|<
name|o2
operator|.
name|expires
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|QueryHistory
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|killAll
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
comment|// directly called from BrokerPool itself. no need to synchronize.
for|for
control|(
specifier|final
name|XQueryWatchDog
name|watchdog
range|:
name|runningQueries
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing query: "
operator|+
name|ExpressionDumper
operator|.
name|dump
argument_list|(
name|watchdog
operator|.
name|getContext
argument_list|()
operator|.
name|getRootExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|watchdog
operator|.
name|kill
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|XQueryWatchDog
index|[]
name|getRunningXQueries
parameter_list|()
block|{
synchronized|synchronized
init|(
name|runningQueries
init|)
block|{
return|return
name|runningQueries
operator|.
name|stream
argument_list|()
operator|.
name|toArray
argument_list|(
name|XQueryWatchDog
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Monitor
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|proceed
parameter_list|()
block|{
return|return
operator|!
name|stop
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Terminating job"
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|JobInfo
block|{
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
name|String
name|action
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|Object
name|addInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|Monitor
name|monitor
init|=
literal|null
decl_stmt|;
specifier|public
name|JobInfo
parameter_list|(
name|String
name|action
parameter_list|,
name|Monitor
name|monitor
parameter_list|)
block|{
name|this
operator|.
name|thread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
specifier|public
name|Thread
name|getThread
parameter_list|()
block|{
return|return
name|thread
return|;
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
specifier|public
name|void
name|setAddInfo
parameter_list|(
name|Object
name|info
parameter_list|)
block|{
name|this
operator|.
name|addInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|Object
name|getAddInfo
parameter_list|()
block|{
return|return
name|addInfo
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Try to figure out the HTTP request URI by which a query was called.      * Request tracking is not enabled unless {@link #setTrackRequestURI(boolean)}      * is called.      *      * @param watchdog      * @return      */
specifier|public
specifier|static
name|String
name|getRequestURI
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
specifier|final
name|RequestModule
name|reqModule
init|=
operator|(
name|RequestModule
operator|)
name|watchdog
operator|.
name|getContext
argument_list|()
operator|.
name|getModule
argument_list|(
name|RequestModule
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqModule
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|Variable
name|var
init|=
name|reqModule
operator|.
name|resolveVariable
argument_list|(
name|RequestModule
operator|.
name|REQUEST_VAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
operator|||
name|var
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|getItemType
argument_list|()
operator|!=
name|Type
operator|.
name|JAVA_OBJECT
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|JavaObjectValue
name|value
init|=
operator|(
name|JavaObjectValue
operator|)
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|getObject
argument_list|()
operator|instanceof
name|RequestWrapper
condition|)
block|{
specifier|final
name|RequestWrapper
name|wrapper
init|=
operator|(
name|RequestWrapper
operator|)
name|value
operator|.
name|getObject
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|attr
init|=
name|wrapper
operator|.
name|getAttribute
argument_list|(
name|XQueryURLRewrite
operator|.
name|RQ_ATTR_REQUEST_URI
argument_list|)
decl_stmt|;
name|String
name|uri
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|wrapper
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|attr
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|queryString
init|=
name|wrapper
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
name|uri
operator|+=
literal|"?"
operator|+
name|queryString
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|// ignore and return null
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

