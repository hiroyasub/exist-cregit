begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2003-2016 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|ConsumerE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * This abstract class really just contains the static  * methods for {@link BrokerPool} to help us organise the  * code into smaller understandable chunks and reduce the  * complexity when understanding the concurrency  * constraints between one and many BrokerPools  *  * @author Adam Retter<adam@exist-db.org>  * @author Wolfgang Meier<wolfgang@exist-db.org>  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|abstract
class|class
name|BrokerPools
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|BrokerPools
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReadWriteLock
name|instancesLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"instancesLock"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BrokerPool
argument_list|>
name|instances
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The name of a default database instance      */
specifier|public
specifier|static
name|String
name|DEFAULT_INSTANCE_NAME
init|=
literal|"exist"
decl_stmt|;
comment|// register a shutdown hook
static|static
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
literal|"BrokerPools-ShutdownHook"
argument_list|)
block|{
comment|/**                  * Make sure that all instances are cleanly shut down.                  */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing shutdown thread"
argument_list|)
expr_stmt|;
name|BrokerPools
operator|.
name|stopAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutdown hook registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shutdown hook already registered"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates and configures a default database instance and adds it to the available instances.      * Call this before calling {link #getInstance()}.      * If a default database instance already exists, the new configuration is ignored.      *      * @param minBrokers The minimum number of concurrent brokers for handling requests on the database instance.      * @param maxBrokers The maximum number of concurrent brokers for handling requests on the database instance.      * @param config     The configuration object for the database instance      *      * @throws EXistException If the initialization fails.      *      * @Deprecated Use {@link #configure(int, int, Configuration, Optional)}      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|configure
parameter_list|(
specifier|final
name|int
name|minBrokers
parameter_list|,
specifier|final
name|int
name|maxBrokers
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
block|{
name|configure
argument_list|(
name|DEFAULT_INSTANCE_NAME
argument_list|,
name|minBrokers
argument_list|,
name|maxBrokers
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and configures a default database instance and adds it to the available instances.      * Call this before calling {link #getInstance()}.      * If a default database instance already exists, the new configuration is ignored.      *      * @param minBrokers The minimum number of concurrent brokers for handling requests on the database instance.      * @param maxBrokers The maximum number of concurrent brokers for handling requests on the database instance.      * @param config     The configuration object for the database instance      * @param statusObserver    Observes the status of this database instance      *      * @throws EXistException If the initialization fails.      */
specifier|public
specifier|static
name|void
name|configure
parameter_list|(
specifier|final
name|int
name|minBrokers
parameter_list|,
specifier|final
name|int
name|maxBrokers
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Observer
argument_list|>
name|statusObserver
parameter_list|)
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
block|{
name|configure
argument_list|(
name|DEFAULT_INSTANCE_NAME
argument_list|,
name|minBrokers
argument_list|,
name|maxBrokers
argument_list|,
name|config
argument_list|,
name|statusObserver
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and configures a database instance and adds it to the pool.      * Call this before calling {link #getInstance()}.      * If a database instance with the same name already exists, the new configuration is ignored.      *      * @param instanceName A<strong>unique</strong> name for the database instance.      *                     It is possible to have more than one database instance (with different configurations      *                     for example).      * @param minBrokers   The minimum number of concurrent brokers for handling requests on the database instance.      * @param maxBrokers   The maximum number of concurrent brokers for handling requests on the database instance.      * @param config       The configuration object for the database instance      *      * @throws EXistException If the initialization fails.      *      * @Deprecated Use {@link #configure(String, int, int, Configuration, Optional)}      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|configure
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|,
specifier|final
name|int
name|minBrokers
parameter_list|,
specifier|final
name|int
name|maxBrokers
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|configure
argument_list|(
name|instanceName
argument_list|,
name|minBrokers
argument_list|,
name|maxBrokers
argument_list|,
name|config
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and configures a database instance and adds it to the pool.      * Call this before calling {link #getInstance()}.      * If a database instance with the same name already exists, the new configuration is ignored.      *      * @param instanceName A<strong>unique</strong> name for the database instance.      *                     It is possible to have more than one database instance (with different configurations      *                     for example).      * @param minBrokers        The minimum number of concurrent brokers for handling requests on the database instance.      * @param maxBrokers        The maximum number of concurrent brokers for handling requests on the database instance.      * @param config            The configuration object for the database instance      * @param statusObserver    Observes the status of this database instance      *      * @throws EXistException If the initialization fails.      */
specifier|public
specifier|static
name|void
name|configure
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|,
specifier|final
name|int
name|minBrokers
parameter_list|,
specifier|final
name|int
name|maxBrokers
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Observer
argument_list|>
name|statusObserver
parameter_list|)
throws|throws
name|EXistException
block|{
comment|// optimize for read-concurrency as instances are configured (created) once and used many times
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|readLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|instances
operator|.
name|containsKey
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Database instance '"
operator|+
name|instanceName
operator|+
literal|"' is already configured"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// fallback to probably having to create a new BrokerPool instance
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|writeLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
comment|// check again, as another thread may have preempted us since we released the read-lock
if|if
condition|(
name|instances
operator|.
name|containsKey
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Database instance '"
operator|+
name|instanceName
operator|+
literal|"' is already configured"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring database instance '"
operator|+
name|instanceName
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Create the instance
specifier|final
name|BrokerPool
name|instance
init|=
operator|new
name|BrokerPool
argument_list|(
name|instanceName
argument_list|,
name|minBrokers
argument_list|,
name|maxBrokers
argument_list|,
name|config
argument_list|,
name|statusObserver
argument_list|)
decl_stmt|;
comment|//initialize it!
name|instance
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|//Add it to the list
name|instances
operator|.
name|put
argument_list|(
name|instanceName
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch all possible issues and report.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to initialize database instance '"
operator|+
name|instanceName
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
specifier|final
name|EXistException
name|ee
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|EXistException
condition|)
block|{
name|ee
operator|=
operator|(
name|EXistException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|ee
operator|=
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ee
throw|;
block|}
block|}
block|}
comment|/**      * Returns whether or not the default database instance is configured.      *      * @return<code>true</code> if it is configured      */
specifier|public
specifier|static
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
name|isConfigured
argument_list|(
name|DEFAULT_INSTANCE_NAME
argument_list|)
return|;
block|}
comment|/**      * Returns whether or not a database instance is configured.      *      * @param instanceName The name of the database instance      * @return<code>true</code> if it is configured      */
specifier|public
specifier|static
name|boolean
name|isConfigured
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|)
block|{
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|readLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|BrokerPool
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
name|instanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|instance
operator|.
name|isInstanceConfigured
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * Returns the broker pool for the default database instance (if it is configured).      *      * @return The broker pool of the default database instance      *      * @throws EXistException If the instance is not available (not created, stopped or not configured)      */
specifier|public
specifier|static
name|BrokerPool
name|getInstance
parameter_list|()
throws|throws
name|EXistException
block|{
return|return
name|getInstance
argument_list|(
name|DEFAULT_INSTANCE_NAME
argument_list|)
return|;
block|}
comment|/**      * Returns a broker pool for a database instance.      *      * @param instanceName The name of the database instance      * @return The broker pool      *      * @throws EXistException If the instance is not available (not created, stopped or not configured)      */
specifier|public
specifier|static
name|BrokerPool
name|getInstance
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|)
throws|throws
name|EXistException
block|{
comment|//Check if there is a database instance with the same id
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|readLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|BrokerPool
name|instance
init|=
name|instances
operator|.
name|get
argument_list|(
name|instanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
comment|//TODO : call isConfigured(id) and throw an EXistException if relevant ?
return|return
name|instance
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Database instance '"
operator|+
name|instanceName
operator|+
literal|"' is not available"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|static
name|void
name|removeInstance
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|)
block|{
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|writeLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
name|instances
operator|.
name|remove
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|readInstances
parameter_list|(
specifier|final
name|ConsumerE
argument_list|<
name|BrokerPool
argument_list|,
name|E
argument_list|>
name|reader
parameter_list|)
throws|throws
name|E
block|{
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|readLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|BrokerPool
name|instance
range|:
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
name|reader
operator|.
name|accept
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|int
name|instancesCount
parameter_list|()
block|{
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|readLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
return|return
name|instances
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Stops all the database instances. After calling this method, the database instances are      * no longer configured.      *      * @param killed<code>true</code> when invoked by an exiting JVM      */
specifier|public
specifier|static
name|void
name|stopAll
parameter_list|(
specifier|final
name|boolean
name|killed
parameter_list|)
block|{
try|try
init|(
specifier|final
name|ManagedLock
argument_list|<
name|ReadWriteLock
argument_list|>
name|writeLock
init|=
name|ManagedLock
operator|.
name|acquire
argument_list|(
name|instancesLock
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|BrokerPool
name|instance
range|:
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|isInstanceConfigured
argument_list|()
condition|)
block|{
comment|//Shut it down
name|instance
operator|.
name|shutdown
argument_list|(
name|killed
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Clear the living instances container : they are all sentenced to death...
assert|assert
operator|(
name|instances
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|// should have all been removed by BrokerPool#shutdown(boolean)
name|instances
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

