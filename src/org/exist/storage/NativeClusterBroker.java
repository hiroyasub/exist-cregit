begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|//$Id$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|ClusterCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Created by Francesco Mondora.  *  * @author Francesco Mondora aka Makkina  * @author Michele Danieli aka mdanieli  *         Date: 13-dic-2004  *         Time: 17.12.51  *         Revision $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|NativeClusterBroker
extends|extends
name|NativeBroker
block|{
specifier|public
name|NativeClusterBroker
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
argument_list|(
name|pool
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get collection object. If the collection does not exist, null is      * returned.      *      * Wraps for cluster the resultant collection in a ClusterCollection      *      * @param name Description of the Parameter      * @return The collection value      */
specifier|public
name|Collection
name|openCollection
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|addr
parameter_list|,
name|int
name|lockMode
parameter_list|)
block|{
name|Collection
name|c
init|=
name|super
operator|.
name|openCollection
argument_list|(
name|name
argument_list|,
name|addr
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
return|return
name|c
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ClusterCollection
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|public
name|void
name|saveCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|super
operator|.
name|saveCollection
argument_list|(
operator|new
name|ClusterCollection
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * get collection object If the collection does not yet exists, it is      * created automatically.      *      * Wraps for cluster the resultant collection in a ClusterCollection      *      * @param name the collection's name      * @return The orCreateCollection value      * @throws org.exist.security.PermissionDeniedException      *          Description of the Exception      */
specifier|public
name|Collection
name|getOrCreateCollection
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|Collection
name|c
init|=
name|super
operator|.
name|getOrCreateCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|c
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ClusterCollection
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_class

end_unit

