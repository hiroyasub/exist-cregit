begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Encoder
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  Postgres-specific subclass of ElementIndex. ElementIndex collects all  *  element occurrences. It uses the name of the element and the current doc_id  *  as keys and stores all occurrences of this element in a blob. This means  *  that the blob just contains an array of gid's which may be compressed if  *  useCompression is true. Storing all occurrences in one large blob is much  *  faster than storing each of them in a single table row.  *  * @author     wolf  * @created    25. Juli 2002  */
end_comment

begin_class
specifier|public
class|class
name|PgElementIndex
extends|extends
name|ElementIndex
block|{
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|ElementIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      *  Constructor for the PgElementIndex object      *      * @param  broker    Description of the Parameter      * @param  config    Description of the Parameter      * @param  pool      Description of the Parameter      * @param  compress  Description of the Parameter      */
specifier|public
name|PgElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|DBConnectionPool
name|pool
parameter_list|,
name|boolean
name|compress
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|config
argument_list|,
name|pool
argument_list|,
name|compress
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor for the PgElementIndex object      *      * @param  broker  Description of the Parameter      * @param  config  Description of the Parameter      * @param  pool    Description of the Parameter      */
specifier|public
name|PgElementIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|DBConnectionPool
name|pool
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|elementIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
try|try
block|{
name|m_insert
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|ProgressIndicator
name|progress
init|=
operator|new
name|ProgressIndicator
argument_list|(
name|elementIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"flushing PgElementIndex"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|elementIds
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|Integer
name|id
init|=
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"flushing "
operator|+
name|id
argument_list|)
expr_stmt|;
name|ArrayList
name|list
init|=
operator|(
name|ArrayList
operator|)
name|elementIds
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|gid
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|m_insert
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|id
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|gid
operator|=
operator|(
operator|(
name|Long
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|gid
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_insert
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|b
parameter_list|)
block|{
comment|// happens sometimes, don't know why.
name|LOG
operator|.
name|warn
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|setValue
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|//((RelationalBroker)broker).setChanged();
operator|(
operator|(
name|RelationalBroker
operator|)
name|broker
operator|)
operator|.
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
name|elementIds
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|m_insert
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

