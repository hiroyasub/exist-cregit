begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  *  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|LogException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  *  * Serialized binary format is as follows:  *  * [sourcePathLen, sourcePath, destinationPathLen, destinationPath, dataPathLen, dataPath]  *  * sourcePathLen:       2 bytes, unsigned short  * sourcePath:          var length bytes, UTF-8 encoded java.lang.String  * destinationPathLen:  2 bytes, unsigned short  * destinationPath:     var length bytes, UTF-8 encoded java.lang.String  * dataPathLen:         2 bytes, unsigned short  * dataPath:            var length bytes, UTF-8 encoded java.lang.String  */
end_comment

begin_class
specifier|public
class|class
name|RenameBinaryLoggable
extends|extends
name|AbstractBinaryLoggable
block|{
specifier|private
name|byte
index|[]
name|sourcePath
decl_stmt|;
comment|// the current path (i.e. the current value)
specifier|private
name|byte
index|[]
name|destinationPath
decl_stmt|;
comment|// the new path (i.e. the new value)
annotation|@
name|Nullable
specifier|private
name|byte
index|[]
name|dataPath
decl_stmt|;
comment|// path to a copy of the destinationPath data before the move (i.e. a copy of the current value) - needed for undo
comment|/**      * Creates a new instance of RenameBinaryLoggable.      *      * @param broker The database broker.      * @param txn The database transaction.      * @param source the path before the move.      * @param destination the path after the move.      * @param data a copy of the existing destination data, or null if the destination does not exist      */
specifier|public
name|RenameBinaryLoggable
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|Path
name|source
parameter_list|,
specifier|final
name|Path
name|destination
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Path
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|NativeBroker
operator|.
name|LOG_RENAME_BINARY
argument_list|,
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourcePath
operator|=
name|getPathData
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|checkPathLen
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"sourcePath"
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationPath
operator|=
name|getPathData
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|checkPathLen
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"destinationPath"
argument_list|,
name|destinationPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataPath
operator|=
name|getPathData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|checkPathLen
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"dataPath"
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of RenameBinaryLoggable.      *      * @param broker The database broker.      * @param transactionId The database transaction id.      */
specifier|public
name|RenameBinaryLoggable
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|NativeBroker
operator|.
name|LOG_RENAME_BINARY
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLogSize
parameter_list|()
block|{
return|return
literal|2
operator|+
name|sourcePath
operator|.
name|length
operator|+
literal|2
operator|+
name|destinationPath
operator|.
name|length
operator|+
literal|2
operator|+
operator|(
name|dataPath
operator|==
literal|null
condition|?
literal|0
else|:
name|dataPath
operator|.
name|length
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ByteBuffer
name|out
parameter_list|)
block|{
name|out
operator|.
name|putShort
argument_list|(
name|asUnsignedShort
argument_list|(
name|sourcePath
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|out
operator|.
name|putShort
argument_list|(
name|asUnsignedShort
argument_list|(
name|destinationPath
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|destinationPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataPath
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|putShort
argument_list|(
name|asUnsignedShort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|putShort
argument_list|(
name|asUnsignedShort
argument_list|(
name|dataPath
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|dataPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|ByteBuffer
name|in
parameter_list|)
block|{
specifier|final
name|int
name|sourcePathLen
init|=
name|asSignedInt
argument_list|(
name|in
operator|.
name|getShort
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|sourcePath
operator|=
operator|new
name|byte
index|[
name|sourcePathLen
index|]
expr_stmt|;
name|in
operator|.
name|get
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
specifier|final
name|int
name|destinationPathLen
init|=
name|asSignedInt
argument_list|(
name|in
operator|.
name|getShort
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|destinationPath
operator|=
operator|new
name|byte
index|[
name|destinationPathLen
index|]
expr_stmt|;
name|in
operator|.
name|get
argument_list|(
name|destinationPath
argument_list|)
expr_stmt|;
specifier|final
name|int
name|dataPathLen
init|=
name|asSignedInt
argument_list|(
name|in
operator|.
name|getShort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataPathLen
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|dataPath
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dataPath
operator|=
operator|new
name|byte
index|[
name|dataPathLen
index|]
expr_stmt|;
name|in
operator|.
name|get
argument_list|(
name|dataPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|LogException
block|{
comment|// we need to move the destination to a backup of data, and then move the source to the destination
specifier|final
name|Path
name|source
init|=
name|getPath
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|destination
init|=
name|getPath
argument_list|(
name|destinationPath
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|data
init|=
name|getPath
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|destination
argument_list|,
name|data
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Cannot redo replace of binary resource: move destination="
operator|+
name|destination
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to data="
operator|+
name|destination
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Cannot redo replace of binary resource: move source="
operator|+
name|source
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to destination="
operator|+
name|destination
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|undo
parameter_list|()
throws|throws
name|LogException
block|{
comment|// to undo a move of A to B, we have to:
comment|// 1) move B to A
comment|// 2) restore any previous value of B that we originally overwrote
specifier|final
name|Path
name|source
init|=
name|getPath
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|destination
init|=
name|getPath
argument_list|(
name|destinationPath
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|data
init|=
name|getPath
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Cannot undo replace of binary resource: move destination="
operator|+
name|destination
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to source="
operator|+
name|source
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|data
argument_list|,
name|destination
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LogException
argument_list|(
literal|"Cannot undo replace of binary resource: move data="
operator|+
name|data
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to destination="
operator|+
name|destination
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Path
name|getSourceFile
parameter_list|()
block|{
return|return
name|getPath
argument_list|(
name|sourcePath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|dump
parameter_list|()
block|{
return|return
name|super
operator|.
name|dump
argument_list|()
operator|+
literal|" - rename binary [key="
operator|+
name|getPath
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", currentValue="
operator|+
name|getPath
argument_list|(
name|dataPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", newValue="
operator|+
name|getPath
argument_list|(
name|destinationPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

