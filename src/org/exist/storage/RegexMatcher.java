begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|GlobCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Compiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_class
class|class
name|RegexMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|PatternCompiler
name|regexCompiler
init|=
operator|new
name|Perl5Compiler
argument_list|()
decl_stmt|;
specifier|private
name|PatternCompiler
name|globCompiler
init|=
operator|new
name|GlobCompiler
argument_list|()
decl_stmt|;
specifier|private
name|PatternMatcher
name|matcher
init|=
operator|new
name|Perl5Matcher
argument_list|()
decl_stmt|;
specifier|private
name|Pattern
name|regexp
decl_stmt|;
specifier|public
name|RegexMatcher
parameter_list|(
name|String
name|expr
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|EXistException
block|{
try|try
block|{
name|regexp
operator|=
operator|(
name|type
operator|==
name|DBBroker
operator|.
name|MATCH_REGEXP
condition|?
name|regexCompiler
operator|.
name|compile
argument_list|(
name|expr
argument_list|,
name|Perl5Compiler
operator|.
name|CASE_INSENSITIVE_MASK
argument_list|)
else|:
name|globCompiler
operator|.
name|compile
argument_list|(
name|expr
argument_list|,
name|GlobCompiler
operator|.
name|CASE_INSENSITIVE_MASK
operator||
name|GlobCompiler
operator|.
name|QUESTION_MATCHES_ZERO_OR_ONE_MASK
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see java.util.Comparator#equals(java.lang.Object) 	 */
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|term
parameter_list|)
block|{
return|return
name|matcher
operator|.
name|contains
argument_list|(
name|term
argument_list|,
name|regexp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

