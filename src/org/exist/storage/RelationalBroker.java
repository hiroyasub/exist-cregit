begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|CommentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ProcessingInstructionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|PostgresSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  *  This is the central class for the database backend. It inherits from  *  DBBroker. It's main purpose is to store nodes to the database but it does  *  also provide general retrieval methods which are used by the xpath backend.  *  Nodes are stored through the methods storeDocument and store. These are  *  called by the document-object.  *  *@author     wolf  *@created    3. Juni 2002  */
end_comment

begin_class
specifier|public
class|class
name|RelationalBroker
extends|extends
name|DBBroker
block|{
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|RelationalBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// constants for retrieval mode
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|PRELOAD
init|=
literal|0
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|SINGLE
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
name|TableLock
name|collectionsLock
init|=
operator|new
name|TableLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|TableLock
name|documentsLock
init|=
operator|new
name|TableLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|TableLock
name|elementIdsLock
init|=
operator|new
name|TableLock
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|ATTR_FILE
init|=
literal|"attr"
decl_stmt|;
comment|// file names for temporary table data
specifier|protected
name|String
name|CDATA_FILE
init|=
literal|"cdata"
decl_stmt|;
specifier|protected
name|String
name|DOM_FILE
init|=
literal|"dom"
decl_stmt|;
comment|// fields for caching temporary data
specifier|protected
name|ObjectPool
name|cache
init|=
literal|null
decl_stmt|;
specifier|protected
name|HashMap
name|elementIds
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|HashMap
name|elementNames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|ElementPool
name|elementPool
init|=
operator|new
name|ElementPool
argument_list|(
literal|50
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|enc
decl_stmt|;
specifier|protected
name|ElementIdsWorkerThread
name|idWorker
decl_stmt|;
specifier|protected
name|int
name|lastElementId
init|=
operator|-
literal|1
decl_stmt|,
name|lastDocId
init|=
operator|-
literal|1
decl_stmt|,
name|lastCDATAId
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|mDatabaseType
init|=
name|MYSQL
decl_stmt|;
specifier|protected
name|int
name|mRetrvMode
init|=
name|SINGLE
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getAttr
decl_stmt|,
name|m_getAttrByName
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getDocsByType
decl_stmt|,
name|m_retrvDoc
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getNamespaceURI
decl_stmt|,
name|m_getNamespacePrefix
decl_stmt|,
name|m_storeNamespace
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getNextElementId
decl_stmt|,
name|m_getElementStmt
decl_stmt|,
name|m_getElementId
decl_stmt|,
name|m_insertElementId
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getNodeRange
decl_stmt|,
name|m_getNodeDataStmt
decl_stmt|,
name|m_insertNodeStmt
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_getTextStmt
decl_stmt|,
name|m_getTextPreload
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_insertCollectionStmt
decl_stmt|,
name|m_updateCollectionStmt
decl_stmt|,
name|m_getCollectionStmt
decl_stmt|,
name|m_deleteCollectionStmt
decl_stmt|,
name|m_getSubcollectionStmt
decl_stmt|,
name|m_getAllCollectionsStmt
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_insertDocStmt
decl_stmt|,
name|m_getNextDocId
decl_stmt|,
name|m_getDocStmt
decl_stmt|,
name|m_getAllDocsStmt
decl_stmt|,
name|m_setNextDocId
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_insertTreeInfo
decl_stmt|,
name|m_getTreeInfo
decl_stmt|;
specifier|protected
name|PreparedStatement
name|m_storePI
decl_stmt|,
name|m_getPI
decl_stmt|,
name|m_storeComment
decl_stmt|,
name|m_getComment
decl_stmt|,
name|m_delComment
decl_stmt|;
specifier|protected
name|boolean
name|m_toFiles
init|=
literal|true
decl_stmt|;
specifier|protected
name|HashMap
name|namespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// the connection pool used
specifier|protected
name|DBConnectionPool
name|pool
init|=
literal|null
decl_stmt|;
specifier|protected
name|TableOutputStream
name|s_attr
init|=
literal|null
decl_stmt|;
comment|// output streams used when writing to files
specifier|protected
name|TableOutputStream
name|s_cdata
init|=
literal|null
decl_stmt|;
specifier|protected
name|TableOutputStream
name|s_dom
init|=
literal|null
decl_stmt|;
specifier|protected
name|Statement
name|stmt
decl_stmt|;
specifier|protected
name|ElementIndex
name|t_elementIndex
init|=
literal|null
decl_stmt|;
comment|// SQL statements used by this class
specifier|protected
name|TableInsert
name|t_insertTextStmt
decl_stmt|,
name|t_insertAttr
decl_stmt|;
comment|// the fulltext-engine used
specifier|protected
name|RelationalTextEngine
name|textEngine
decl_stmt|;
specifier|protected
name|String
name|tmpDir
decl_stmt|;
specifier|protected
name|boolean
name|useCompression
init|=
literal|false
decl_stmt|;
comment|// hides some mysql specific features
specifier|protected
name|DBWrapper
name|wrapper
decl_stmt|;
specifier|protected
name|Serializer
name|xmlSerializer
decl_stmt|;
comment|/**      *  Constructor for the RelationalBroker object      *      *@param  config              Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|RelationalBroker
parameter_list|(
name|BrokerPool
name|brokerPool
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
argument_list|(
name|brokerPool
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|driver
decl_stmt|;
name|String
name|url
decl_stmt|;
name|String
name|user
decl_stmt|;
name|String
name|pass
decl_stmt|;
name|String
name|stopword
decl_stmt|;
name|String
name|compress
decl_stmt|;
name|String
name|dbType
decl_stmt|;
name|String
name|pathSep
decl_stmt|;
name|Boolean
name|batch
decl_stmt|;
name|pathSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// get some jdbc configuration parameters
if|if
condition|(
operator|(
name|tmpDir
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"tmpDir"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|tmpDir
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|(
name|driver
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"driver"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|driver
operator|=
literal|"org.gjt.mm.mysql.Driver"
expr_stmt|;
if|if
condition|(
operator|(
name|url
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|url
operator|=
literal|"jdbc:mysql://localhost/test"
expr_stmt|;
if|if
condition|(
operator|(
name|user
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|user
operator|=
literal|"test"
expr_stmt|;
if|if
condition|(
operator|(
name|pass
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|pass
operator|=
literal|"test"
expr_stmt|;
comment|// should temporary files be used to store table data?
if|if
condition|(
operator|(
name|batch
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"batchLoad"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|m_toFiles
operator|=
name|batch
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|compress
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"compression"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|useCompression
operator|=
literal|false
expr_stmt|;
else|else
name|useCompression
operator|=
operator|(
name|compress
operator|.
name|equals
argument_list|(
literal|"on"
argument_list|)
condition|?
literal|true
else|:
literal|false
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|enc
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"encoding"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|enc
operator|=
literal|"UTF-8"
expr_stmt|;
comment|// get database-type: MYSQL or ORACLE
if|if
condition|(
operator|(
name|dbType
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"database"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|mDatabaseType
operator|=
operator|(
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mysql"
argument_list|)
condition|?
name|MYSQL
else|:
operator|(
name|dbType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"postgresql"
argument_list|)
condition|?
name|POSTGRESQL
else|:
name|ORACLE
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|==
name|MYSQL
condition|)
name|pool
operator|=
operator|new
name|DBConnectionPool
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pass
argument_list|,
name|driver
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|pool
operator|=
operator|new
name|DBConnectionPool
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|pass
argument_list|,
name|driver
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// get a database connection
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|con
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"cannot initialize database connection"
argument_list|)
throw|;
comment|// create serializers
comment|//xmlSerializer = new Serializer( this, pool );
switch|switch
condition|(
name|mDatabaseType
condition|)
block|{
case|case
name|POSTGRESQL
case|:
name|xmlSerializer
operator|=
operator|new
name|PostgresSerializer
argument_list|(
name|this
argument_list|,
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
break|break;
default|default:
name|xmlSerializer
operator|=
operator|new
name|Serializer
argument_list|(
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|// create element index writer
name|t_elementIndex
operator|=
operator|new
name|ElementIndex
argument_list|(
name|this
argument_list|,
name|config
argument_list|,
name|pool
argument_list|,
name|useCompression
argument_list|)
expr_stmt|;
comment|// create an object-pool where retrieved nodes are cached
name|cache
operator|=
operator|new
name|ObjectPool
argument_list|()
expr_stmt|;
comment|// create database-specific wrappers, used for loading temporary files
switch|switch
condition|(
name|mDatabaseType
condition|)
block|{
case|case
name|MYSQL
case|:
name|wrapper
operator|=
operator|new
name|MysqlWrapper
argument_list|(
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
break|break;
case|case
name|POSTGRESQL
case|:
name|wrapper
operator|=
operator|new
name|PostgresqlWrapper
argument_list|(
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
break|break;
case|case
name|ORACLE
case|:
name|wrapper
operator|=
operator|new
name|OracleWrapper
argument_list|(
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"unknown database type"
argument_list|)
throw|;
block|}
comment|// create a worker-thread, used by method findElementsByTagName()
name|idWorker
operator|=
operator|new
name|ElementIdsWorkerThread
argument_list|()
expr_stmt|;
name|idWorker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// prepare statements
try|try
block|{
comment|// statements for table collections
name|m_insertCollectionStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into collections "
operator|+
literal|"(name, owner, owner_group, permissions, data) "
operator|+
literal|"values (?, ?, ?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_getCollectionStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name, owner, owner_group, permissions, data "
operator|+
literal|"from collections where name like ?"
argument_list|)
expr_stmt|;
name|m_getAllCollectionsStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select * from collections"
argument_list|)
expr_stmt|;
name|m_getSubcollectionStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name from collections where name like ?"
argument_list|)
expr_stmt|;
name|m_deleteCollectionStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"delete from collections where name=?"
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"update collections set owner=?, "
operator|+
literal|"owner_group=?, permissions=?, data=? where name=?"
argument_list|)
expr_stmt|;
comment|// statements for table element_id
name|m_getNextElementId
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select max(element_id) from element_names"
argument_list|)
expr_stmt|;
name|m_getElementId
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select element_id from element_names where name=?"
argument_list|)
expr_stmt|;
name|m_insertElementId
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into element_names (element_id, name) values (?, ?)"
argument_list|)
expr_stmt|;
name|m_getElementStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name from element_names where element_id=?"
argument_list|)
expr_stmt|;
comment|// statements for table documents
name|m_insertDocStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into documents (doc_id, name, children, "
operator|+
literal|"doctype, "
operator|+
literal|"public_id, system_id) "
operator|+
literal|"values (?, ?, ?, ?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_getNextDocId
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select id from identifiers where name='doc_id'"
argument_list|)
expr_stmt|;
name|m_setNextDocId
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"update identifiers set id=? where name='doc_id'"
argument_list|)
expr_stmt|;
name|m_getDocStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select doc_id, doctype, public_id, system_id, "
operator|+
literal|"children, "
operator|+
literal|"name "
operator|+
literal|"from documents where name like ?"
argument_list|)
expr_stmt|;
name|m_getAllDocsStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select doc_id, name, doctype, public_id,"
operator|+
literal|"system_id, children from documents"
argument_list|)
expr_stmt|;
name|m_getDocsByType
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select doc_id, name, doctype, public_id, system_id, "
operator|+
literal|"children from documents "
operator|+
literal|"where doctype=?"
argument_list|)
expr_stmt|;
comment|// statements for table xtree
name|m_insertTreeInfo
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into xtree (doc_id, leafs, tree_level, "
operator|+
literal|"start_point, end_point) values (?, ?, ?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_getTreeInfo
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select leafs from xtree where doc_id=? "
operator|+
literal|"order by tree_level"
argument_list|)
expr_stmt|;
comment|// statements for table cdata
name|t_insertTextStmt
operator|=
operator|new
name|TableInsert
argument_list|(
name|pool
argument_list|,
literal|"cdata"
argument_list|,
literal|"insert into cdata values "
argument_list|,
operator|(
name|mDatabaseType
operator|!=
name|MYSQL
operator|)
argument_list|)
expr_stmt|;
comment|// statements for table attr
name|t_insertAttr
operator|=
operator|new
name|TableInsert
argument_list|(
name|pool
argument_list|,
literal|"attr"
argument_list|,
literal|"insert into attr values "
argument_list|,
operator|(
name|mDatabaseType
operator|!=
name|MYSQL
operator|)
argument_list|)
expr_stmt|;
name|m_getAttr
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select name, value from attr where doc_id=? "
operator|+
literal|"and node_id=?"
argument_list|)
expr_stmt|;
name|m_getAttrByName
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select doc_id, node_id from attr where name=?"
argument_list|)
expr_stmt|;
comment|// statements for table namespaces
name|m_storeNamespace
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into namespaces (uri, prefix) values (?, ?)"
argument_list|)
expr_stmt|;
name|m_getNamespaceURI
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select uri from namespaces where prefix=?"
argument_list|)
expr_stmt|;
name|m_getNamespacePrefix
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select prefix from namespaces where uri=?"
argument_list|)
expr_stmt|;
comment|// statements for table dom, used by method objectWith
name|m_insertNodeStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into dom values (?, ?, ?, ?, ?, ?, ?)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|==
name|MYSQL
operator|||
name|mDatabaseType
operator|==
name|POSTGRESQL
condition|)
comment|// for mysql and postgresql we use "join"
name|m_getNodeDataStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select dom.gid, dom.type, dom.children, "
operator|+
literal|"dom.element_id, dom.attrib, dom.prefixes, "
operator|+
literal|"cdata.cdata from dom "
operator|+
literal|"left join cdata using (doc_id, gid) "
operator|+
literal|"where dom.doc_id=? and dom.gid=?"
argument_list|)
expr_stmt|;
else|else
comment|// otherwise we use sub-selects
name|m_getNodeDataStmt
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select d.gid, d.type, d.children, "
operator|+
literal|"d.element_id, d.attrib, dom.prefixes, "
operator|+
literal|"(select c.cdata from cdata c where "
operator|+
literal|"c.doc_id=d.doc_id and "
operator|+
literal|"c.gid=d.gid) from dom d where "
operator|+
literal|"d.doc_id=? and d.gid=?"
argument_list|)
expr_stmt|;
comment|// statements used by method getRange()
if|if
condition|(
name|mDatabaseType
operator|==
name|MYSQL
condition|)
name|m_getNodeRange
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select dom.gid, dom.type, dom.children, "
operator|+
literal|"dom.element_id, dom.attrib, dom.prefixes, cdata.cdata from dom "
operator|+
literal|"left join cdata using (doc_id, gid) where "
operator|+
literal|"dom.doc_id=? "
operator|+
literal|"and (dom.gid between ? and ?)"
argument_list|)
expr_stmt|;
else|else
name|m_getNodeRange
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select d.gid, d.type, d.children, "
operator|+
literal|"d.element_id, d.attrib, dom.prefixes, "
operator|+
literal|"(select c.cdata from cdata c where "
operator|+
literal|"c.doc_id=d.doc_id and "
operator|+
literal|"c.gid=d.gid) from dom d where d.doc_id=? "
operator|+
literal|" and (d.gid between ? and ?)"
argument_list|)
expr_stmt|;
name|m_storePI
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into processing_instruction (doc_id, gid, "
operator|+
literal|"target, data) "
operator|+
literal|" values (?, ?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_getPI
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select target, data from processing_instruction "
operator|+
literal|"where doc_id=? and gid=?"
argument_list|)
expr_stmt|;
name|m_storeComment
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"insert into comment_node (doc_id, gid, cdata) "
operator|+
literal|"values (?, ?, ?)"
argument_list|)
expr_stmt|;
name|m_getComment
operator|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select cdata from comment_node where doc_id=? "
operator|+
literal|"and gid=?"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
comment|// create the text-engine
name|textEngine
operator|=
operator|new
name|RelationalTextEngine
argument_list|(
name|this
argument_list|,
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
comment|// if table data is written to temporary files,
comment|// open files
if|if
condition|(
name|m_toFiles
condition|)
name|openTempFiles
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
comment|// load all element-names into cache
name|preloadElementNames
argument_list|()
expr_stmt|;
try|try
block|{
name|getOrCreateCollection
argument_list|(
literal|"/db"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"database error"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|documentSet
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|StringBuffer
name|r
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|r
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
operator|(
operator|(
name|DocumentImpl
operator|)
name|docs
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Gets the firstChildID attribute of the RelationalBroker class      *      *@param  doc    Description of the Parameter      *@param  level  Description of the Parameter      *@param  gid    Description of the Parameter      *@return        The firstChildID value      */
specifier|protected
specifier|static
name|long
name|getFirstChildID
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|level
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
return|return
operator|(
name|gid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|*
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      *  Gets the lastChildID attribute of the RelationalBroker class      *      *@param  doc    Description of the Parameter      *@param  level  Description of the Parameter      *@param  gid    Description of the Parameter      *@return        The lastChildID value      */
specifier|protected
specifier|static
name|long
name|getLastChildID
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|level
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|long
name|start
init|=
operator|(
name|gid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|*
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|start
operator|+
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  name  Description of the Parameter      *@return       Description of the Return Value      */
specifier|protected
specifier|final
specifier|static
name|String
name|normalizeCollectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|1
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
name|i
operator|++
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
name|Object
name|acquireWriteLock
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      *  Adds a feature to the Observer attribute of the RelationalBroker object      *      *@param  o  The feature to be added to the Observer attribute      */
specifier|public
name|void
name|addObserver
parameter_list|(
name|Observer
name|o
parameter_list|)
block|{
name|super
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|textEngine
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|t_elementIndex
operator|.
name|addObserver
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  doc  Description of the Parameter      *@param  r    Description of the Parameter      *@return      Description of the Return Value      */
specifier|protected
name|Node
name|createNode
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|ResultSet
name|r
parameter_list|)
block|{
name|long
name|current
decl_stmt|;
name|short
name|type
decl_stmt|;
name|int
name|children
decl_stmt|;
name|int
name|nodeNameRef
decl_stmt|;
name|short
name|attribCount
decl_stmt|;
name|String
name|cdata
init|=
literal|null
decl_stmt|;
name|String
name|prefixes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|current
operator|=
name|r
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|type
operator|=
name|r
operator|.
name|getShort
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|children
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|nodeNameRef
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|attribCount
operator|=
name|r
operator|.
name|getShort
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|prefixes
operator|=
name|r
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|cdata
operator|=
name|r
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
expr_stmt|;
return|return
name|createNode
argument_list|(
name|doc
argument_list|,
name|current
argument_list|,
name|type
argument_list|,
name|children
argument_list|,
name|nodeNameRef
argument_list|,
name|attribCount
argument_list|,
name|prefixes
argument_list|,
name|cdata
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      *  utility-method to create a node      *      *@param  doc          Description of the Parameter      *@param  gid          Description of the Parameter      *@param  type         Description of the Parameter      *@param  children     Description of the Parameter      *@param  nodeNameRef  Description of the Parameter      *@param  attribCount  Description of the Parameter      *@param  cdata        Description of the Parameter      *@param  prefixes     Description of the Parameter      *@return              Description of the Return Value      */
specifier|protected
name|Node
name|createNode
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|short
name|type
parameter_list|,
name|int
name|children
parameter_list|,
name|int
name|nodeNameRef
parameter_list|,
name|short
name|attribCount
parameter_list|,
name|String
name|prefixes
parameter_list|,
name|String
name|cdata
parameter_list|)
block|{
name|Node
name|node
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|setChildCount
argument_list|(
name|children
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|setNodeNameRef
argument_list|(
name|nodeNameRef
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|setAttributes
argument_list|(
name|attribCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixes
operator|!=
literal|null
condition|)
block|{
comment|// read list of namespace prefixes used in this doc
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|prefixes
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
name|String
name|pfx
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|pfx
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|addNamespacePrefix
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
block|{
name|node
operator|=
operator|new
name|TextImpl
argument_list|(
name|gid
argument_list|,
name|cdata
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NodeImpl
operator|)
name|node
operator|)
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
block|{
name|node
operator|=
operator|new
name|AttrImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AttrImpl
operator|)
name|node
operator|)
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|m_getAttr
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getAttr
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|m_getAttr
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
operator|(
operator|(
name|AttrImpl
operator|)
name|node
operator|)
operator|.
name|setNodeName
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AttrImpl
operator|)
name|node
operator|)
operator|.
name|setValue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
block|{
name|node
operator|=
operator|new
name|CommentImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CommentImpl
operator|)
name|node
operator|)
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|m_getComment
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getComment
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|m_getComment
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
operator|(
operator|(
name|CommentImpl
operator|)
name|node
operator|)
operator|.
name|appendData
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
block|{
name|node
operator|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ProcessingInstructionImpl
operator|)
name|node
operator|)
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|m_getPI
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getPI
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|m_getPI
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
operator|(
operator|(
name|ProcessingInstructionImpl
operator|)
name|node
operator|)
operator|.
name|setTarget
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ProcessingInstructionImpl
operator|)
name|node
operator|)
operator|.
name|setData
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
break|break;
block|}
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"unknown node "
operator|+
name|gid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not read node "
operator|+
name|gid
operator|+
literal|" from db."
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**      *  get the element-name of an element-object. Method object-with just loads      *  element-id's from the database, but not the element's actual name.      *  ElementImpl calls this method whenever the actual name is accessed.      *      *@param  element  Description of the Parameter      *@return          Description of the Return Value      */
specifier|public
name|boolean
name|elementWith
parameter_list|(
name|ElementImpl
name|element
parameter_list|)
block|{
try|try
block|{
name|String
name|name
decl_stmt|;
name|Integer
name|ref
init|=
operator|new
name|Integer
argument_list|(
name|element
operator|.
name|getNodeNameRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementNames
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
condition|)
name|name
operator|=
operator|(
name|String
operator|)
name|elementNames
operator|.
name|get
argument_list|(
name|ref
argument_list|)
expr_stmt|;
else|else
block|{
name|m_getElementStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|element
operator|.
name|getNodeNameRef
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|re
init|=
name|m_getElementStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|re
operator|.
name|next
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"element "
operator|+
name|element
operator|.
name|getGID
argument_list|()
operator|+
literal|"not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|name
operator|=
name|re
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|elementNames
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|re
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|element
operator|.
name|setNodeName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  in  Description of the Parameter      *@return     Description of the Return Value      */
specifier|protected
name|String
name|escapeCharacters
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|int
name|l
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|l
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
switch|switch
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'\''
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'`'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\`"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'{'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\{"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\}"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  collects all occurrences of an element in the document set. Element      *  occurrences are stored in binary large objects (blobs) to speed up      *  retrieval. It is much faster to scan through a large binary block of a      *  few thousand long ids than to store each of them in its own table row.      *  Additionally the blob may be compressed with gzip. The method recognizes      *  this.      *      *@param  docs     Description of the Parameter      *@param  tagName  Description of the Parameter      *@return          Description of the Return Value      */
specifier|public
name|NodeSet
name|findElementsByTagName
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|tagName
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementPool
operator|!=
literal|null
operator|&&
name|elementPool
operator|.
name|inCache
argument_list|(
name|docs
argument_list|,
name|tagName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cache hit"
argument_list|)
expr_stmt|;
return|return
name|elementPool
operator|.
name|getNodeSet
argument_list|(
name|docs
argument_list|,
name|tagName
argument_list|)
return|;
block|}
name|NodeSet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|elementId
decl_stmt|;
if|if
condition|(
name|elementIds
operator|.
name|containsKey
argument_list|(
name|tagName
argument_list|)
condition|)
name|elementId
operator|=
operator|(
operator|(
name|Integer
operator|)
name|elementIds
operator|.
name|get
argument_list|(
name|tagName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
else|else
try|try
block|{
name|m_getElementId
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|tagName
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getElementId
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"element not found"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|elementId
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
try|try
block|{
name|StringBuffer
name|sql
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"select doc_id, data from b_element where doc_id in "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|documentSet
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" and element_id="
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|elementId
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" order by doc_id"
argument_list|)
expr_stmt|;
comment|//stmt.setFetchSize(stmt.getMaxRows());
name|ResultSet
name|r
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|doc_id
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|long
name|gid
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|DocumentImpl
name|lastDoc
init|=
literal|null
decl_stmt|;
name|VariableByteInputStream
name|is
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|doc_id
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lastDoc
operator|=
name|docs
operator|.
name|getDoc
argument_list|(
name|doc_id
argument_list|)
expr_stmt|;
name|data
operator|=
name|r
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|len
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|gid
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|lastDoc
argument_list|,
name|gid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|s
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"found: "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|elementPool
operator|.
name|add
argument_list|(
name|docs
argument_list|,
name|result
argument_list|,
name|tagName
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**  flush the database and all open files */
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|t_elementIndex
operator|!=
literal|null
condition|)
name|t_elementIndex
operator|.
name|flush
argument_list|()
expr_stmt|;
name|t_insertAttr
operator|.
name|flush
argument_list|()
expr_stmt|;
name|t_insertTextStmt
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_toFiles
condition|)
block|{
try|try
block|{
name|s_cdata
operator|.
name|close
argument_list|()
expr_stmt|;
name|s_dom
operator|.
name|close
argument_list|()
expr_stmt|;
name|s_attr
operator|.
name|close
argument_list|()
expr_stmt|;
name|wrapper
operator|.
name|loadFromFile
argument_list|(
name|s_dom
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|"dom"
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|loadFromFile
argument_list|(
name|s_cdata
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|"cdata"
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|loadFromFile
argument_list|(
name|s_attr
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|"attr"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|openTempFiles
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|mDatabaseType
operator|==
name|MYSQL
operator|&&
name|m_toFiles
operator|)
condition|)
name|m_insertNodeStmt
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|textEngine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lastDocId
operator|=
operator|-
literal|1
expr_stmt|;
name|lastElementId
operator|=
operator|-
literal|1
expr_stmt|;
name|elementIds
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|elementNames
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  get a set of all documents stored in the database.      *      *@param  user  Description of the Parameter      *@return       The allDocuments value      */
specifier|public
name|DocumentSet
name|getAllDocuments
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|setAllDocuments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ResultSet
name|r
init|=
name|m_getAllCollectionsStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|perm
operator|.
name|setOwner
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setPermissions
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
continue|continue;
comment|// read documents
name|byte
index|[]
name|data
init|=
name|r
operator|.
name|getBytes
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|//ByteArrayInputStream bstream = new ByteArrayInputStream( data );
comment|//DataInputStream istream = new DataInputStream( bstream );
name|VariableByteInputStream
name|istream
init|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|int
name|c
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|this
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|doc
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
comment|/**      *  Gets the attributesByName attribute of the RelationalBroker object      *      *@param  docs  Description of the Parameter      *@param  name  Description of the Parameter      *@return       The attributesByName value      */
specifier|public
name|NodeSet
name|getAttributesByName
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
block|{
name|m_getAttrByName
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|m_getAttrByName
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|int
name|doc_id
decl_stmt|;
name|long
name|gid
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|doc_id
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gid
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getDoc
argument_list|(
name|doc_id
argument_list|)
argument_list|,
name|gid
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      *  get collection object If the collection does not exist, null is      *  returned.      *      *@param  name  Description of the Parameter      *@return       The collection value      */
specifier|public
name|Collection
name|getCollection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|normalizeCollectionName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|name
operator|=
literal|"/"
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// load the collection
name|m_getCollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getCollectionStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|name
operator|+
literal|" does not exist!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Collection
name|collection
init|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|perm
operator|.
name|setOwner
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setPermissions
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// read documents
name|byte
index|[]
name|data
init|=
name|r
operator|.
name|getBytes
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|//ByteArrayInputStream bstream = new ByteArrayInputStream( data );
comment|//DataInputStream istream = new DataInputStream( bstream );
name|VariableByteInputStream
name|istream
init|=
operator|new
name|VariableByteInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|int
name|c
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|this
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|doc
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// get existing subcollections
name|m_getSubcollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|name
operator|+
literal|"/%"
argument_list|)
expr_stmt|;
name|r
operator|=
name|m_getSubcollectionStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|String
name|collName
decl_stmt|;
name|String
name|relPath
decl_stmt|;
name|String
name|subColl
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|collName
operator|=
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relPath
operator|=
name|collName
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|relPath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|relPath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|relPath
operator|=
name|relPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// add a subcollection
name|subColl
operator|=
operator|(
name|relPath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>
operator|-
literal|1
operator|)
condition|?
name|relPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|relPath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
else|:
name|relPath
expr_stmt|;
name|collection
operator|.
name|addCollection
argument_list|(
name|subColl
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collection
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      *  get the type of database-engine, this broker is talking to. Should be      *  one out of MYSQL or ORACLE      *      *@return    The databaseType value      */
specifier|public
name|int
name|getDatabaseType
parameter_list|()
block|{
return|return
name|mDatabaseType
return|;
block|}
comment|/**      *  get a Document-Node by it's file name.      *      *@param  fileName                       Description of the Parameter      *@param  user                           Description of the Parameter      *@return                                The document value      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|Document
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|fileName
operator|=
literal|'/'
operator|+
name|fileName
expr_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|fileName
operator|=
literal|"/db"
operator|+
name|fileName
expr_stmt|;
name|int
name|pos
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|collName
init|=
operator|(
name|pos
operator|>
literal|0
operator|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
else|:
literal|"/"
decl_stmt|;
name|Collection
name|collection
init|=
name|getCollection
argument_list|(
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collName
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"permission denied to read collection"
argument_list|)
throw|;
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"document "
operator|+
name|fileName
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read document"
argument_list|)
throw|;
return|return
name|doc
return|;
block|}
comment|/**      *  Gets the documentsByCollection attribute of the RelationalBroker object      *      *@param  collection                     Description of the Parameter      *@param  user                           Description of the Parameter      *@return                                The documentsByCollection value      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|DocumentSet
name|getDocumentsByCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
return|return
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|collection
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      *  Gets the documentsByCollection attribute of the RelationalBroker object      *      *@param  collection                     Description of the Parameter      *@param  inclusive                      Description of the Parameter      *@param  user                           Description of the Parameter      *@return                                The documentsByCollection value      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|DocumentSet
name|getDocumentsByCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
name|collection
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|docs
return|;
if|if
condition|(
name|collection
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|collection
operator|=
literal|"/"
operator|+
name|collection
expr_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|collection
operator|=
literal|"/db"
operator|+
name|collection
expr_stmt|;
name|Collection
name|coll
init|=
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collection
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
if|if
condition|(
operator|!
name|coll
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"permission to read collection denied"
argument_list|)
throw|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|coll
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inclusive
condition|)
block|{
name|String
name|childName
decl_stmt|;
name|DocumentSet
name|childDocs
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|coll
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childName
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|childName
operator|=
name|coll
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|childName
expr_stmt|;
name|childDocs
operator|=
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|childName
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addAll
argument_list|(
name|childDocs
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading "
operator|+
name|docs
operator|.
name|getLength
argument_list|()
operator|+
literal|" documents from collection "
operator|+
name|collection
operator|+
literal|" took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
comment|/**      *  get a set of all documents matching a doctype      *      *@param  doctypeName  Description of the Parameter      *@param  user         Description of the Parameter      *@return              The documentsByDoctype value      */
specifier|public
name|DocumentSet
name|getDocumentsByDoctype
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|doctypeName
parameter_list|)
block|{
name|DocumentSet
name|result
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|DocumentSet
name|docs
init|=
name|getAllDocuments
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|doc
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypeName
operator|.
name|equals
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
operator|&&
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      *  get the namespace associated with the given prefix. Every broker      *  subclass should keep an internal map, where it stores the prefixes used      *  for different namespaces. It should be guaranteed that only one prefix      *  is associated with one namespace URI.      *      *@param  namespace  Description of the Parameter      *@return            The namespacePrefix value      */
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespaces
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
return|return
operator|(
name|String
operator|)
name|namespaces
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
try|try
block|{
name|m_getNamespacePrefix
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getNamespacePrefix
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *  get common prefix for a namespace URI. It should be guaranteed that only      *  one prefix is associated with one namespace URI throughout the database.      *      *@param  prefix  Description of the Parameter      *@return         The namespaceURI value      */
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
try|try
block|{
name|m_getNamespaceURI
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getNamespaceURI
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ns
init|=
name|r
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|ns
return|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *  the following methods are used to determine the next valid value for a      *  internal id. We use this to be database-independant.      *      *@param  collection  Description of the Parameter      *@return             The nextDocId value      */
specifier|public
name|int
name|getNextDocId
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
try|try
block|{
name|ResultSet
name|r
init|=
name|m_getNextDocId
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
return|return
literal|0
return|;
name|lastDocId
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
operator|+
literal|1
expr_stmt|;
name|m_setNextDocId
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|lastDocId
argument_list|)
expr_stmt|;
name|m_setNextDocId
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
return|return
name|lastDocId
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
name|int
name|getNextElementId
parameter_list|()
block|{
try|try
block|{
name|ResultSet
name|r
init|=
name|m_getNextElementId
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
return|return
literal|0
return|;
name|lastElementId
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
operator|+
literal|1
expr_stmt|;
return|return
name|lastElementId
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sql exception while getting element id: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      *  Gets the nodeValue attribute of the RelationalBroker object      *      *@param  proxy  Description of the Parameter      *@return        The nodeValue value      */
specifier|public
name|String
name|getNodeValue
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Node
name|n
init|=
name|objectWith
argument_list|(
name|proxy
operator|.
name|doc
argument_list|,
name|proxy
operator|.
name|gid
argument_list|)
decl_stmt|;
return|return
name|n
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
comment|/**      *  get set of all nodes containing term This method actually calls the      *  corresponding method of TextSearchEngine.      *      *@param  docs  Description of the Parameter      *@param  term  Description of the Parameter      *@return       The nodesContaining value      */
specifier|public
name|NodeSet
name|getNodesContaining
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|String
name|termList
index|[]
init|=
block|{
name|term
block|}
decl_stmt|;
name|NodeSet
index|[]
name|result
init|=
name|getNodesContaining
argument_list|(
name|docs
argument_list|,
name|termList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
operator|==
literal|0
condition|)
return|return
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
return|;
else|else
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
comment|/**      *  get set of all nodes containing a list of terms This method actually      *  calls the corresponding method of TextSearchEngine.      *      *@param  docs      Description of the Parameter      *@param  termList  Description of the Parameter      *@return           The nodesContaining value      */
specifier|public
name|NodeSet
index|[]
name|getNodesContaining
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
index|[]
name|termList
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeSet
index|[]
name|result
init|=
name|textEngine
operator|.
name|getNodesContaining
argument_list|(
name|docs
argument_list|,
name|termList
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/*      *  find all Nodes whose string value is equal to expr in the document      *  set. The method uses a simple select statement to retrieve the      *  matching columns from the cdata table.      */
comment|/**      *  Gets the nodesEqualTo attribute of the RelationalBroker object      *      *@param  context  Description of the Parameter      *@param  docs     Description of the Parameter      *@param  type     Description of the Parameter      *@param  expr     Description of the Parameter      *@return          The nodesEqualTo value      */
specifier|public
name|NodeSet
name|getNodesEqualTo
parameter_list|(
name|NodeSet
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|int
name|type
parameter_list|,
name|String
name|expr
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|ArraySet
name|temp
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|String
name|comparator
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Constants
operator|.
name|LT
case|:
name|comparator
operator|=
literal|"<"
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GT
case|:
name|comparator
operator|=
literal|">"
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|comparator
operator|=
literal|"<="
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|comparator
operator|=
literal|">="
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|NEQ
case|:
name|comparator
operator|=
literal|"!="
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|EQ
case|:
default|default:
name|comparator
operator|=
literal|" like "
expr_stmt|;
break|break;
block|}
try|try
block|{
name|StringBuffer
name|sql
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|"select doc_id, gid from cdata where doc_id in "
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|documentSet
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|" and cdata"
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|r
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|gid
decl_stmt|;
name|int
name|doc_id
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|doc_id
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gid
operator|=
name|r
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|docs
operator|.
name|getDoc
argument_list|(
name|doc_id
argument_list|)
argument_list|,
name|gid
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|StringBuffer
name|sql2
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sql2
operator|.
name|append
argument_list|(
literal|"select doc_id, node_id from attr where doc_id in "
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
name|documentSet
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
literal|" and value"
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|sql2
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|r
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|doc_id
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gid
operator|=
name|r
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|docs
operator|.
name|getDoc
argument_list|(
name|doc_id
argument_list|)
argument_list|,
name|gid
argument_list|,
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|NodeProxy
name|parent
decl_stmt|;
name|NodeProxy
name|l
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|temp
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|l
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// if this node has a parent that belongs to the
name|parent
operator|=
name|context
operator|.
name|parentWithChild
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"getNodeIdsEqualTo took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found: "
operator|+
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      *  Get a collection or create it if necessary.      *      *@param  name                           Description of the Parameter      *@param  user                           Description of the Parameter      *@return                                The orCreateCollection value      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|Collection
name|getOrCreateCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|name
operator|=
literal|"/"
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|temp
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/db"
decl_stmt|;
name|Collection
name|sub
decl_stmt|;
name|Collection
name|current
init|=
name|getCollection
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating root collection /db"
argument_list|)
expr_stmt|;
name|current
operator|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
literal|"/db"
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setPermissions
argument_list|(
literal|0775
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|user
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|//current.setId( getNextCollectionId() );
name|saveCollection
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
operator|+
literal|" write permission denied"
argument_list|)
throw|;
name|temp
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|temp
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|hasSubcollection
argument_list|(
name|temp
argument_list|)
condition|)
name|current
operator|=
name|getCollection
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|sub
operator|=
operator|new
name|Collection
argument_list|(
name|this
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|user
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|//sub.setId( getNextCollectionId() );
name|current
operator|.
name|addCollection
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|sub
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
comment|/**      *  get a node-range from the database. This method is mainly called by      *  ElementImpl.getChildNodes() to retrieve child-nodes. It is faster than      *  calling objectWith() for every node, since only one sql-statement is      *  needed. If the broker's retrieval-mode is set to PRELOAD, this method      *  will do a read-ahead by calling "preloadChildren()" and preload all the      *  child nodes of this node-range.      *      *@param  doc    Description of the Parameter      *@param  first  Description of the Parameter      *@param  last   Description of the Parameter      *@return        The range value      */
specifier|public
name|NodeList
name|getRange
parameter_list|(
name|Document
name|doc
parameter_list|,
name|long
name|first
parameter_list|,
name|long
name|last
parameter_list|)
block|{
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|doc
decl_stmt|;
name|NodeListImpl
name|result
init|=
operator|new
name|NodeListImpl
argument_list|(
operator|(
name|int
operator|)
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|Node
name|node
decl_stmt|;
for|for
control|(
init|;
name|first
operator|<=
name|last
condition|;
name|first
operator|++
control|)
if|if
condition|(
operator|(
name|node
operator|=
name|cache
operator|.
name|get
argument_list|(
name|d
argument_list|,
name|first
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
else|else
break|break;
if|if
condition|(
name|first
operator|>
name|last
condition|)
return|return
name|result
return|;
try|try
block|{
name|ResultSet
name|r
decl_stmt|;
name|m_getNodeRange
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getNodeRange
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|m_getNodeRange
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|r
operator|=
name|m_getNodeRange
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|node
operator|=
name|createNode
argument_list|(
name|d
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
continue|continue;
name|cache
operator|.
name|add
argument_list|(
operator|(
name|NodeImpl
operator|)
name|node
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mRetrvMode
operator|==
name|PRELOAD
condition|)
name|preloadChildren
argument_list|(
name|d
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**      *  Gets the serializer attribute of the RelationalBroker object      *      *@return    The serializer value      */
specifier|public
name|Serializer
name|getSerializer
parameter_list|()
block|{
name|xmlSerializer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|xmlSerializer
return|;
block|}
comment|/**      *  returns the TextSearchEngine responsible for this broker.      *      *@return    The textEngine value      */
specifier|public
name|TextSearchEngine
name|getTextEngine
parameter_list|()
block|{
return|return
name|textEngine
return|;
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
name|Serializer
name|newSerializer
parameter_list|()
block|{
return|return
operator|new
name|Serializer
argument_list|(
name|this
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      *  read a single object from the database. This method retrieves a single      *  node. If the ObjectPool does already contain the node, it will get it      *  from there. There are other, more specialized methods for retrieving a      *  range of nodes or a whole document.      *      *@param  doc  Description of the Parameter      *@param  gid  Description of the Parameter      *@return      Description of the Return Value      */
specifier|public
name|Node
name|objectWith
parameter_list|(
name|Document
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|doc
decl_stmt|;
name|Node
name|node
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|=
name|cache
operator|.
name|get
argument_list|(
name|d
argument_list|,
name|gid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
return|return
name|node
return|;
try|try
block|{
name|ResultSet
name|r
decl_stmt|;
name|m_getNodeDataStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getNodeDataStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|r
operator|=
name|m_getNodeDataStmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node "
operator|+
name|gid
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|node
operator|=
name|createNode
argument_list|(
name|d
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"node "
operator|+
name|gid
operator|+
literal|" is null."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cache
operator|.
name|add
argument_list|(
operator|(
name|NodeImpl
operator|)
name|node
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|openTempFiles
parameter_list|(
name|String
name|tmpDir
parameter_list|)
block|{
try|try
block|{
comment|// delete old files
comment|//new File(DOM_FILE).delete();
comment|//new File(CDATA_FILE).delete();
comment|//new File(ATTR_FILE).delete();
name|File
name|tmp
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|CDATA_FILE
argument_list|,
literal|".txt"
argument_list|,
name|tmp
argument_list|)
decl_stmt|;
name|FileOutputStream
name|outf
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|s_cdata
operator|=
operator|new
name|TableOutputStream
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|outf
argument_list|,
name|enc
argument_list|)
expr_stmt|;
name|f
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|DOM_FILE
argument_list|,
literal|".txt"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|s_dom
operator|=
operator|new
name|TableOutputStream
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|outf
argument_list|,
name|enc
argument_list|)
expr_stmt|;
name|f
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|ATTR_FILE
argument_list|,
literal|".txt"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|outf
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|s_attr
operator|=
operator|new
name|TableOutputStream
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|outf
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fne
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|fne
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  for every node in a range of nodes, starting with first and ending with      *  last, retrieve it's child nodes and store them into the ObjectPool.      *      *@param  doc    Description of the Parameter      *@param  first  Description of the Parameter      *@param  last   Description of the Parameter      */
specifier|protected
name|void
name|preloadChildren
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|first
parameter_list|,
name|long
name|last
parameter_list|)
block|{
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|doc
operator|.
name|getMaxDepth
argument_list|()
condition|)
return|return;
name|long
name|start
init|=
name|getFirstChildID
argument_list|(
name|doc
argument_list|,
name|level
argument_list|,
name|first
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|getLastChildID
argument_list|(
name|doc
argument_list|,
name|level
argument_list|,
name|last
argument_list|)
decl_stmt|;
try|try
block|{
name|ResultSet
name|r
decl_stmt|;
name|m_getNodeRange
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_getNodeRange
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|m_getNodeRange
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|r
operator|=
name|m_getNodeRange
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|Node
name|node
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|node
operator|=
name|createNode
argument_list|(
name|doc
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
continue|continue;
name|cache
operator|.
name|add
argument_list|(
operator|(
name|NodeImpl
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|preloadElementNames
parameter_list|()
block|{
name|String
name|sql
init|=
literal|"select element_id, name from element_names"
decl_stmt|;
try|try
block|{
name|ResultSet
name|r
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|()
condition|)
name|elementIds
operator|.
name|put
argument_list|(
name|r
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DocumentImpl
name|readDocument
parameter_list|(
name|ResultSet
name|r
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|doc_id
init|=
name|r
operator|.
name|getShort
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|doctype
init|=
name|r
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|publicId
init|=
name|r
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|systemId
init|=
name|r
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|int
name|children
init|=
name|r
operator|.
name|getInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|r
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setChildCount
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setDocId
argument_list|(
name|doc_id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setBroker
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|doctype
operator|!=
literal|null
operator|&&
name|doctype
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DocumentTypeImpl
name|docType
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|doctype
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setDocumentType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
block|}
name|m_getTreeInfo
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc_id
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|m_getTreeInfo
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|int
name|o
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|o
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setTreeLevelOrder
argument_list|(
name|level
operator|++
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|setMaxDepth
argument_list|(
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|calculateTreeLevelStartPoints
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
return|return
name|doc
return|;
block|}
comment|/**      *  associate a prefix with a given namespace. Every broker subclass should      *  keep an internal map, where it stores the prefixes used for different      *  namespaces. It should be guaranteed that only one prefix is associated      *  with one namespace URI.      *      *@param  namespace  Description of the Parameter      *@param  prefix     Description of the Parameter      */
specifier|public
name|void
name|registerNamespace
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
comment|// there's already a prefix for this namespace
if|if
condition|(
name|getNamespacePrefix
argument_list|(
name|namespace
argument_list|)
operator|!=
literal|null
condition|)
return|return;
try|try
block|{
name|m_storeNamespace
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|m_storeNamespace
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|m_storeNamespace
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sqe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  lock  Description of the Parameter      */
specifier|public
name|void
name|releaseWriteLock
parameter_list|(
name|Object
name|lock
parameter_list|)
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  collName                       Description of the Parameter      *@param  user                           Description of the Parameter      *@return                                Description of the Return Value      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collName
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|Collection
name|collection
init|=
name|getCollection
argument_list|(
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removing collection "
operator|+
name|collName
argument_list|)
expr_stmt|;
name|Collection
name|parent
init|=
name|collection
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to remove collection"
argument_list|)
throw|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|removeCollection
argument_list|(
name|collName
operator|.
name|substring
argument_list|(
name|collName
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|String
name|childCollection
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing sub-collections"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childCollection
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|removeCollection
argument_list|(
name|user
argument_list|,
name|collName
operator|+
literal|'/'
operator|+
name|childCollection
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|m_deleteCollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|collName
argument_list|)
expr_stmt|;
name|m_deleteCollectionStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"collection "
operator|+
name|collName
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  name                           Description of the Parameter      *@param  user                           Description of the Parameter      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|void
name|removeDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|getDocument
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|removeDocument
argument_list|(
name|user
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**      *  remove a document and all it's content from the database      *      *@param  doc                            Description of the Parameter      *@param  user                           Description of the Parameter      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|void
name|removeDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing document: "
operator|+
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|delNodeStmt
init|=
literal|"delete from dom where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delElementStmt
init|=
literal|"delete from b_element where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delTextStmt
init|=
literal|"delete from cdata where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delInvStmt
init|=
literal|"delete from inv_idx where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delAttrStmt
init|=
literal|"delete from attr where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delXTreeStmt
init|=
literal|"delete from xtree where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delDocStmt
init|=
literal|"delete from documents where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delCommentStmt
init|=
literal|"delete from comment_node where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
name|String
name|delPiStmt
init|=
literal|"delete from processing_instruction where doc_id="
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delNodeStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delElementStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delTextStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delInvStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delAttrStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delXTreeStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delCommentStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delPiStmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delDocStmt
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|doc
operator|.
name|getCollection
argument_list|()
decl_stmt|;
name|collection
operator|.
name|removeDocument
argument_list|(
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|elementPool
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  collection  Description of the Parameter      */
specifier|public
name|void
name|saveCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
comment|//ByteArrayOutputStream bstream = new ByteArrayOutputStream();
comment|//DataOutputStream ostream = new DataOutputStream( bstream );
name|VariableByteOutputStream
name|ostream
init|=
operator|new
name|VariableByteOutputStream
argument_list|( )
decl_stmt|;
try|try
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|collection
operator|.
name|getDocumentCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|.
name|getDocumentCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|doc
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
block|}
block|}
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|ostream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Object
name|lock
init|=
name|collectionsLock
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|m_getCollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getCollectionStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|m_insertCollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertCollectionStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertCollectionStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertCollectionStmt
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertCollectionStmt
operator|.
name|setBytes
argument_list|(
literal|5
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|m_insertCollectionStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_updateCollectionStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|.
name|setBytes
argument_list|(
literal|4
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_updateCollectionStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertCollectionStmt
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|collectionsLock
operator|.
name|release
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  set the current retrieval-mode There are two retrieval modes: SINGLE and      *  PRELOAD. With retrieval mode set to PRELOAD, the broker will try to do a      *  read ahead when retrieving nodes. This means, that it will not only      *  retrieve the actual nodes, but also their children. The additional nodes      *  will be put into the ObjectPool where they will be found by subsequent      *  calls to objectWith. The advantage is that we need less sql-statements      *  to retrieve a certain portion of the document. On the other hand, nodes      *  may be read which are not really needed.      *      *@param  mode  The new retrvMode value      */
specifier|public
name|void
name|setRetrvMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|mRetrvMode
operator|=
name|mode
expr_stmt|;
block|}
comment|/**      *  shutdown the database This will also process all temporary files.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|idWorker
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|textEngine
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"closing all connections"
argument_list|)
expr_stmt|;
name|pool
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
comment|/**      *  store a Node-Object into the database      *      *@param  node  Description of the Parameter      *@param  path  Description of the Parameter      */
specifier|public
name|void
name|store
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|CharSequence
name|path
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|ElementImpl
name|temp
init|=
operator|(
name|ElementImpl
operator|)
name|node
decl_stmt|;
name|int
name|elementId
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|nodeName
init|=
name|temp
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
comment|// first, try to get an elementId for this node-name.
comment|// elementId's are cached
if|if
condition|(
name|elementIds
operator|.
name|containsKey
argument_list|(
name|nodeName
argument_list|)
condition|)
name|elementId
operator|=
operator|(
operator|(
name|Integer
operator|)
name|elementIds
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
else|else
block|{
name|Object
name|lock
init|=
name|elementIdsLock
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertElementId
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_getElementId
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|ResultSet
name|r
init|=
name|m_getElementId
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|()
condition|)
block|{
name|elementId
operator|=
name|getNextElementId
argument_list|()
expr_stmt|;
name|m_insertElementId
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|elementId
argument_list|)
expr_stmt|;
name|m_insertElementId
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|m_insertElementId
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertElementId
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|elementId
operator|=
name|r
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|elementIds
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
operator|new
name|Integer
argument_list|(
name|elementId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sql exception while storing element id: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|elementIdsLock
operator|.
name|release
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|setNodeNameRef
argument_list|(
name|elementId
argument_list|)
expr_stmt|;
comment|// save element by calling ElementIndex
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|temp
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|temp
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
name|t_elementIndex
operator|.
name|setDocument
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|temp
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
name|t_elementIndex
operator|.
name|addRow
argument_list|(
name|elementId
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
block|{
name|TextImpl
name|temp
init|=
operator|(
name|TextImpl
operator|)
name|node
decl_stmt|;
name|Object
index|[]
name|textData
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|textData
index|[
literal|0
index|]
operator|=
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|DocumentImpl
operator|)
name|temp
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|textData
index|[
literal|1
index|]
operator|=
operator|new
name|Long
argument_list|(
name|temp
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
comment|// save text-data to file if user want's this
if|if
condition|(
name|m_toFiles
condition|)
block|{
name|textData
index|[
literal|2
index|]
operator|=
name|temp
operator|.
name|getData
argument_list|()
expr_stmt|;
try|try
block|{
name|s_cdata
operator|.
name|writeRow
argument_list|(
name|textData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// otherwise, store it directly to the database
name|textData
index|[
literal|2
index|]
operator|=
name|escapeCharacters
argument_list|(
name|temp
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|t_insertTextStmt
operator|.
name|append
argument_list|(
name|textData
argument_list|)
expr_stmt|;
block|}
comment|// check if this textual content should be fulltext-indexed
comment|// by calling IndexPaths.match(path)
name|IndexPaths
name|idx
init|=
operator|(
name|IndexPaths
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexScheme."
operator|+
name|temp
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
operator|||
name|idx
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
name|textEngine
operator|.
name|storeText
argument_list|(
name|idx
argument_list|,
name|temp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
block|{
name|AttrImpl
name|attrib
init|=
operator|(
name|AttrImpl
operator|)
name|node
decl_stmt|;
name|Object
index|[]
name|attrData
init|=
block|{
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|DocumentImpl
operator|)
name|attrib
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|attrib
operator|.
name|getGID
argument_list|()
argument_list|)
block|,
name|attrib
operator|.
name|getName
argument_list|()
block|,
name|attrib
operator|.
name|getValue
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
name|m_toFiles
condition|)
try|try
block|{
name|s_attr
operator|.
name|writeRow
argument_list|(
name|attrData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
else|else
name|t_insertAttr
operator|.
name|append
argument_list|(
name|attrData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
block|{
try|try
block|{
name|ProcessingInstructionImpl
name|pi
init|=
operator|(
name|ProcessingInstructionImpl
operator|)
name|node
decl_stmt|;
name|m_storePI
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|DocumentImpl
operator|)
name|pi
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_storePI
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|pi
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
name|m_storePI
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|pi
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|m_storePI
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|pi
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|m_storePI
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_storePI
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sql exception while storing pi: "
operator|+
name|sqe
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
block|{
try|try
block|{
name|CommentImpl
name|comment
init|=
operator|(
name|CommentImpl
operator|)
name|node
decl_stmt|;
name|m_storeComment
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|DocumentImpl
operator|)
name|comment
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_storeComment
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|comment
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
name|m_storeComment
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|comment
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|m_storeComment
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_storePI
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sql exception while storing comment: "
operator|+
name|sqe
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
return|return;
block|}
comment|// get namespace prefixes used in this element
name|StringBuffer
name|prefixes
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|declaresNamespacePrefixes
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|node
operator|)
operator|.
name|getNamespacePrefixes
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|prefixes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|prefixes
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now store the node's data to the dom-table
if|if
condition|(
name|m_toFiles
condition|)
block|{
name|Object
index|[]
name|row
init|=
block|{
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
block|,
operator|new
name|Short
argument_list|(
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|node
operator|.
name|getChildCount
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|node
operator|.
name|getNodeNameRef
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|node
operator|.
name|getAttributesCount
argument_list|()
argument_list|)
block|,
name|prefixes
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|s_dom
operator|.
name|writeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
else|else
try|try
block|{
name|m_insertNodeStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setShort
argument_list|(
literal|3
argument_list|,
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
name|node
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setInt
argument_list|(
literal|5
argument_list|,
name|node
operator|.
name|getNodeNameRef
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setInt
argument_list|(
literal|6
argument_list|,
name|node
operator|.
name|getAttributesCount
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|prefixes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertNodeStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  store a Document-Object into the database      *      *@param  doc  Description of the Parameter      */
specifier|public
name|void
name|storeDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|Object
name|lock
init|=
name|documentsLock
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|String
name|docName
init|=
name|doc
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|docName
operator|=
name|NativeBroker
operator|.
name|normalizeCollectionName
argument_list|(
name|docName
argument_list|)
expr_stmt|;
if|if
condition|(
name|docName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|docName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|docName
operator|=
literal|"/"
operator|+
name|docName
expr_stmt|;
if|if
condition|(
operator|!
name|docName
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|docName
operator|=
literal|"/db"
operator|+
name|docName
expr_stmt|;
if|if
condition|(
name|docName
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|docName
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|docName
operator|=
name|docName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|docName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertDocStmt
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|doc_id
init|=
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc_id
operator|<
literal|0
condition|)
name|doc_id
operator|=
name|getNextDocId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc_id
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
name|doc
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentTypeImpl
name|doctype
init|=
operator|(
name|DocumentTypeImpl
operator|)
name|doc
operator|.
name|getDoctype
argument_list|()
decl_stmt|;
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
block|{
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|doctype
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|m_insertDocStmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|doctype
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m_insertDocStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertDocStmt
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setDocId
argument_list|(
name|doc_id
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|calculateTreeLevelStartPoints
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|getMaxDepth
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|m_insertTreeInfo
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|doc_id
argument_list|)
expr_stmt|;
name|m_insertTreeInfo
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|m_insertTreeInfo
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|m_insertTreeInfo
operator|.
name|setLong
argument_list|(
literal|4
argument_list|,
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|m_insertTreeInfo
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|m_insertTreeInfo
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mDatabaseType
operator|!=
name|MYSQL
condition|)
name|m_insertDocStmt
operator|.
name|getConnection
argument_list|()
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeDocument(): "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|documentsLock
operator|.
name|release
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  in  Description of the Parameter      *@return     Description of the Return Value      */
specifier|protected
name|String
name|unescapeCharacters
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|int
name|l
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|l
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
switch|switch
condition|(
name|in
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
condition|)
block|{
case|case
literal|'\''
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'`'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Description of the Class      *      *@author     wolf      *@created    3. Juni 2002      */
specifier|protected
specifier|final
specifier|static
class|class
name|TableLock
block|{
specifier|protected
name|Object
name|_lock
decl_stmt|;
comment|/**  Constructor for the TableLock object */
specifier|public
name|TableLock
parameter_list|()
block|{
name|_lock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@return    Description of the Return Value          */
specifier|public
specifier|synchronized
name|Object
name|acquire
parameter_list|()
block|{
while|while
condition|(
name|_lock
operator|==
literal|null
condition|)
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
block|}
name|Object
name|key
init|=
name|_lock
decl_stmt|;
name|_lock
operator|=
literal|null
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**          *  Description of the Method          *          *@param  lock  Description of the Parameter          */
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|Object
name|lock
parameter_list|)
block|{
name|_lock
operator|=
name|lock
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *  special output-stream, used for writing temporary files.      *      *@author     wolf      *@created    3. Juni 2002      */
specifier|protected
specifier|final
specifier|static
class|class
name|TableOutputStream
extends|extends
name|BufferedOutputStream
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|EOL
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|FIELD_SEP
init|=
literal|'|'
decl_stmt|;
specifier|protected
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
specifier|protected
name|String
name|fileName
decl_stmt|;
comment|/**          *  Constructor for the TableOutputStream object          *          *@param  fileName  Description of the Parameter          *@param  out       Description of the Parameter          *@param  encoding  Description of the Parameter          */
specifier|public
name|TableOutputStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
comment|/**          *  Constructor for the TableOutputStream object          *          *@param  fileName  Description of the Parameter          *@param  out       Description of the Parameter          *@param  size      Description of the Parameter          */
specifier|public
name|TableOutputStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
comment|/**          *  Gets the fileName attribute of the TableOutputStream object          *          *@return    The fileName value          */
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
comment|/**          *  Description of the Method          *          *@param  bytes            Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|writeEscaped
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@param  data             Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|protected
name|void
name|writeEscaped
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
switch|switch
condition|(
operator|(
name|char
operator|)
name|data
index|[
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIELD_SEP
case|:
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|FIELD_SEP
argument_list|)
expr_stmt|;
break|break;
case|case
name|EOL
case|:
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|//write('\\');
comment|//write(EOL);
break|break;
default|default:
name|write
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          *  Description of the Method          *          *@param  value            Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeInt
parameter_list|(
name|Integer
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@param  value            Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeLong
parameter_list|(
name|Long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@param  row              Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeRow
parameter_list|(
name|Object
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
index|[
name|i
index|]
operator|instanceof
name|String
condition|)
name|writeString
argument_list|(
operator|(
name|String
operator|)
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|row
index|[
name|i
index|]
operator|instanceof
name|Integer
condition|)
name|writeInt
argument_list|(
operator|(
name|Integer
operator|)
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|row
index|[
name|i
index|]
operator|instanceof
name|byte
index|[]
condition|)
name|writeBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|row
index|[
name|i
index|]
operator|instanceof
name|Long
condition|)
name|writeLong
argument_list|(
operator|(
name|Long
operator|)
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|row
index|[
name|i
index|]
operator|instanceof
name|Short
condition|)
name|writeShort
argument_list|(
operator|(
name|Short
operator|)
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|row
operator|.
name|length
operator|-
literal|1
condition|)
name|write
argument_list|(
name|FIELD_SEP
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@param  value            Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeShort
parameter_list|(
name|Short
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          *  Description of the Method          *          *@param  data             Description of the Parameter          *@exception  IOException  Description of the Exception          */
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBytes
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  this class is used by getElementsByTagName It runs in it's own thread      *  and converts the byte-stream it gets from getElementsByTagName to Nodes.      *      *@author     wolf      *@created    3. Juni 2002      */
class|class
name|ElementIdsWorkerThread
extends|extends
name|Thread
block|{
specifier|protected
name|DocumentSet
name|docs
decl_stmt|;
specifier|protected
name|DocumentImpl
name|lastDoc
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|lastDocId
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|LinkedList
name|queue
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|protected
name|NodeSet
name|result
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|terminate
init|=
literal|false
decl_stmt|;
comment|/**  Constructor for the ElementIdsWorkerThread object */
specifier|public
name|ElementIdsWorkerThread
parameter_list|()
block|{
block|}
comment|/**          *  Description of the Method          *          *@param  docs    Description of the Parameter          *@param  result  Description of the Parameter          *@param  docId   Description of the Parameter          *@param  data    Description of the Parameter          */
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|int
name|docId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|queue
operator|.
name|addFirst
argument_list|(
operator|new
name|QueuedData
argument_list|(
name|docId
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**          *  Gets the result attribute of the ElementIdsWorkerThread object          *          *@return    The result value          */
specifier|public
specifier|synchronized
name|NodeSet
name|getResult
parameter_list|()
block|{
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for worker to finish"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**  Main processing method for the ElementIdsWorkerThread object */
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
block|}
if|if
condition|(
name|terminate
condition|)
return|return;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|work
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**  Description of the Method */
specifier|public
specifier|synchronized
name|void
name|terminate
parameter_list|()
block|{
name|terminate
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|work
parameter_list|()
block|{
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QueuedData
name|qd
init|=
operator|(
name|QueuedData
operator|)
name|queue
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|long
name|gid
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qd
operator|.
name|data
operator|.
name|length
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|gid
operator|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|qd
operator|.
name|data
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// save some time here by avoiding calls to docs.get()
if|if
condition|(
name|qd
operator|.
name|docId
operator|!=
name|lastDocId
condition|)
block|{
name|lastDoc
operator|=
name|docs
operator|.
name|getDoc
argument_list|(
name|qd
operator|.
name|docId
argument_list|)
expr_stmt|;
name|lastDocId
operator|=
name|qd
operator|.
name|docId
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|lastDoc
argument_list|,
name|gid
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**          *  Description of the Class          *          *@author     wolf          *@created    3. Juni 2002          */
class|class
name|QueuedData
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|int
name|docId
decl_stmt|;
comment|/**              *  Constructor for the QueuedData object              *              *@param  docId  Description of the Parameter              *@param  data   Description of the Parameter              */
specifier|public
name|QueuedData
parameter_list|(
name|int
name|docId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.DBBroker#objectWith(org.exist.dom.NodeProxy) 	 */
specifier|public
name|Node
name|objectWith
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

