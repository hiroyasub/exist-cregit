begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DataBackup
implements|implements
name|SystemTask
block|{
name|String
name|dest
decl_stmt|;
specifier|public
name|DataBackup
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
block|{
name|Configuration
name|config
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|dataDir
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.data-dir"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Backup the data file into "
operator|+
name|this
operator|.
name|dest
argument_list|)
expr_stmt|;
try|try
block|{
name|copy
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"dom.dbx"
argument_list|,
name|this
operator|.
name|dest
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"dom.dbx"
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"symbols.dbx"
argument_list|,
name|this
operator|.
name|dest
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"symbols.dbx"
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"collections.dbx"
argument_list|,
name|this
operator|.
name|dest
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"collections.dbx"
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"elements.dbx"
argument_list|,
name|this
operator|.
name|dest
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"elements.dbx"
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|dataDir
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"words.dbx"
argument_list|,
name|this
operator|.
name|dest
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"words.dbx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|copy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|src1
init|=
operator|new
name|File
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|File
name|dst1
init|=
operator|new
name|File
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|OutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"file not found"
operator|+
name|fnf
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

