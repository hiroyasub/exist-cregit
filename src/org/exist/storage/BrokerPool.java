begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2003-2016 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|fsm
operator|.
name|AtomicFSM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|fsm
operator|.
name|FSM
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationDocumentTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|Debuggee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|DebuggeeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|AgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|DLNFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|PluginsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|PluginsManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|ClasspathHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|ExistRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|impl
operator|.
name|QuartzSchedulerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|impl
operator|.
name|SystemTaskJobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|DeadlockDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|FileLockService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|recovery
operator|.
name|RecoveryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|SyncTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ShutdownListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PerformanceStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|fsm
operator|.
name|TransitionTable
operator|.
name|transitionTable
import|;
end_import

begin_comment
comment|/**  * This class controls all available instances of the database.  * Use it to configure, start and stop database instances.  * You may have multiple instances defined, each using its own configuration.  * To define multiple instances, pass an identification string to  * {@link #configure(String, int, int, Configuration, Optional<Observer>)}  * and use {@link #getInstance(String)} to retrieve an instance.  *  * @author Wolfgang Meier<wolfgang@exist-db.org>  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"pool"
argument_list|)
specifier|public
class|class
name|BrokerPool
extends|extends
name|BrokerPools
implements|implements
name|BrokerPoolConstants
implements|,
name|Database
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|BrokerPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BrokerPoolServicesManager
name|servicesManager
init|=
operator|new
name|BrokerPoolServicesManager
argument_list|()
decl_stmt|;
specifier|private
name|StatusReporter
name|statusReporter
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|XQuery
name|xqueryService
init|=
operator|new
name|XQuery
argument_list|()
decl_stmt|;
comment|//TODO : make it non-static since every database instance may have its own policy.
comment|//TODO : make a default value that could be overwritten by the configuration
comment|// WM: this is only used by junit tests to test the recovery process.
comment|/**      * For testing only: triggers a database corruption by disabling the page caches. The effect is      * similar to a sudden power loss or the jvm being killed. The flag is used by some      * junit tests to test the recovery process.      */
specifier|public
specifier|static
name|boolean
name|FORCE_CORRUPTION
init|=
literal|false
decl_stmt|;
comment|/**      *<code>true</code> if the database instance is able to perform recovery.      */
specifier|private
specifier|final
name|boolean
name|recoveryEnabled
decl_stmt|;
comment|/**      * The name of the database instance      */
specifier|private
specifier|final
name|String
name|instanceName
decl_stmt|;
comment|/**      * State of the BrokerPool instance      */
specifier|private
enum|enum
name|State
block|{
name|SHUTTING_DOWN
block|,
name|SHUTDOWN
block|,
name|INITIALIZING
block|,
name|INITIALIZING_SYSTEM_MODE
block|,
name|INITIALIZING_MULTI_USER_MODE
block|,
name|OPERATIONAL
block|}
specifier|private
enum|enum
name|Event
block|{
name|INITIALIZE
block|,
name|INITIALIZE_SYSTEM_MODE
block|,
name|INITIALIZE_MULTI_USER_MODE
block|,
name|READY
block|,
name|START_SHUTDOWN
block|,
name|FINISHED_SHUTDOWN
block|,     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|final
name|FSM
argument_list|<
name|State
argument_list|,
name|Event
argument_list|>
name|status
init|=
operator|new
name|AtomicFSM
argument_list|<>
argument_list|(
name|State
operator|.
name|SHUTDOWN
argument_list|,
name|transitionTable
argument_list|(
name|State
operator|.
name|class
argument_list|,
name|Event
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|SHUTDOWN
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|INITIALIZE
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|INITIALIZE_SYSTEM_MODE
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|INITIALIZING_SYSTEM_MODE
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|INITIALIZING_SYSTEM_MODE
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|INITIALIZE_MULTI_USER_MODE
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|INITIALIZING_MULTI_USER_MODE
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|INITIALIZING_MULTI_USER_MODE
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|READY
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|OPERATIONAL
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|OPERATIONAL
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|START_SHUTDOWN
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|SHUTTING_DOWN
argument_list|)
operator|.
name|when
argument_list|(
name|State
operator|.
name|SHUTTING_DOWN
argument_list|)
operator|.
name|on
argument_list|(
name|Event
operator|.
name|FINISHED_SHUTDOWN
argument_list|)
operator|.
name|switchTo
argument_list|(
name|State
operator|.
name|SHUTDOWN
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The number of brokers for the database instance      */
specifier|private
name|int
name|brokersCount
init|=
literal|0
decl_stmt|;
comment|/**      * The minimal number of brokers for the database instance      */
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"min"
argument_list|)
specifier|private
specifier|final
name|int
name|minBrokers
decl_stmt|;
comment|/**      * The maximal number of brokers for the database instance      */
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"max"
argument_list|)
specifier|private
specifier|final
name|int
name|maxBrokers
decl_stmt|;
comment|/**      * The number of inactive brokers for the database instance      */
specifier|private
specifier|final
name|Deque
argument_list|<
name|DBBroker
argument_list|>
name|inactiveBrokers
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The number of active brokers for the database instance      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|DBBroker
argument_list|>
name|activeBrokers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Used when TRACE level logging is enabled      * to provide a history of broker leases      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TraceableStateChanges
argument_list|<
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|,
name|TraceableBrokerLeaseChange
operator|.
name|Change
argument_list|>
argument_list|>
name|brokerLeaseChangeTrace
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TraceableStateChanges
argument_list|<
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|,
name|TraceableBrokerLeaseChange
operator|.
name|Change
argument_list|>
argument_list|>
argument_list|>
name|brokerLeaseChangeTraceHistory
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
literal|null
decl_stmt|;
comment|/**      * The configuration object for the database instance      */
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|Observer
argument_list|>
name|statusObservers
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      *<code>true</code> if a cache synchronization event is scheduled      */
comment|//TODO : rename as syncScheduled ?
comment|//TODO : alternatively, delete this member and create a Sync.NOSYNC event
specifier|private
name|boolean
name|syncRequired
init|=
literal|false
decl_stmt|;
comment|/**      * The kind of scheduled cache synchronization event.      * One of {@link org.exist.storage.sync.Sync}      */
specifier|private
name|Sync
name|syncEvent
init|=
name|Sync
operator|.
name|MINOR
decl_stmt|;
specifier|private
name|boolean
name|checkpoint
init|=
literal|false
decl_stmt|;
comment|/**      * Indicates whether the database is operating in read-only mode      */
annotation|@
name|GuardedBy
argument_list|(
literal|"itself"
argument_list|)
specifier|private
name|Boolean
name|readOnly
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"pageSize"
argument_list|)
specifier|private
specifier|final
name|int
name|pageSize
decl_stmt|;
specifier|private
name|FileLockService
name|dataLock
decl_stmt|;
comment|/**      * The journal manager of the database instance.      */
specifier|private
name|Optional
argument_list|<
name|JournalManager
argument_list|>
name|journalManager
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
comment|/**      * The transaction manager of the database instance.      */
specifier|private
name|TransactionManager
name|transactionManager
init|=
literal|null
decl_stmt|;
comment|/**      * Delay (in ms) for running jobs to return when the database instance shuts down.      */
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"wait-before-shutdown"
argument_list|)
specifier|private
specifier|final
name|long
name|maxShutdownWait
decl_stmt|;
comment|/**      * The scheduler for the database instance.      */
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"scheduler"
argument_list|)
specifier|private
name|Scheduler
name|scheduler
decl_stmt|;
comment|/**      * Manages pluggable index structures.      */
specifier|private
name|IndexManager
name|indexManager
decl_stmt|;
comment|/**      * Global symbol table used to encode element and attribute qnames.      */
specifier|private
name|SymbolTable
name|symbols
decl_stmt|;
comment|/**      * Cache synchronization on the database instance.      */
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"sync-period"
argument_list|)
specifier|private
specifier|final
name|long
name|majorSyncPeriod
decl_stmt|;
comment|//the period after which a major sync should occur
specifier|private
name|long
name|lastMajorSync
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//time the last major sync occurred
specifier|private
specifier|final
name|long
name|diskSpaceMin
decl_stmt|;
comment|/**      * The listener that is notified when the database instance shuts down.      */
specifier|private
name|ShutdownListener
name|shutdownListener
init|=
literal|null
decl_stmt|;
comment|/**      * The security manager of the database instance.      */
specifier|private
name|SecurityManager
name|securityManager
init|=
literal|null
decl_stmt|;
comment|/**      * The plugin manager.      */
specifier|private
name|PluginsManagerImpl
name|pluginManager
init|=
literal|null
decl_stmt|;
comment|/**      * The global notification service used to subscribe      * to document updates.      */
specifier|private
name|NotificationService
name|notificationService
init|=
literal|null
decl_stmt|;
comment|/**      * The cache in which the database instance may store items.      */
specifier|private
name|DefaultCacheManager
name|cacheManager
decl_stmt|;
specifier|private
name|CollectionCacheManager
name|collectionCacheMgr
decl_stmt|;
specifier|private
name|long
name|reservedMem
decl_stmt|;
comment|/**      * The pool in which the database instance's<strong>compiled</strong> XQueries are stored.      */
specifier|private
name|XQueryPool
name|xQueryPool
decl_stmt|;
comment|/**      * The monitor in which the database instance's strong>running</strong> XQueries are managed.      */
specifier|private
name|ProcessMonitor
name|processMonitor
decl_stmt|;
comment|/**      * Global performance stats to gather function execution statistics      * from all queries running on this database instance.      */
specifier|private
name|PerformanceStats
name|xqueryStats
decl_stmt|;
comment|/**      * The global manager for accessing collection configuration files from the database instance.      */
specifier|private
name|CollectionConfigurationManager
name|collectionConfigurationManager
init|=
literal|null
decl_stmt|;
comment|/**      * The cache in which the database instance's collections are stored.      */
comment|//TODO : rename as collectionsCache ?
specifier|private
name|CollectionCache
name|collectionCache
decl_stmt|;
comment|/**      * The pool in which the database instance's readers are stored.      */
specifier|private
name|XMLReaderPool
name|xmlReaderPool
decl_stmt|;
specifier|private
specifier|final
name|NodeIdFactory
name|nodeFactory
init|=
operator|new
name|DLNFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|globalXUpdateLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|Subject
name|serviceModeUser
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|inServiceMode
init|=
literal|false
decl_stmt|;
comment|//the time that the database was started
specifier|private
specifier|final
name|Calendar
name|startupTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Optional
argument_list|<
name|BrokerWatchdog
argument_list|>
name|watchdog
decl_stmt|;
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|expathRepo
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|private
name|StartupTriggersManager
name|startupTriggersManager
decl_stmt|;
comment|/**      * Creates and configures the database instance.      *      * @param instanceName A name for the database instance.      * @param minBrokers   The minimum number of concurrent brokers for handling requests on the database instance.      * @param maxBrokers   The maximum number of concurrent brokers for handling requests on the database instance.      * @param conf         The configuration object for the database instance      * @param statusObserver    Observes the status of this database instance      *      * @throws EXistException If the initialization fails.      */
comment|//TODO : Then write a configure(int minBrokers, int maxBrokers, Configuration conf) method
name|BrokerPool
parameter_list|(
specifier|final
name|String
name|instanceName
parameter_list|,
specifier|final
name|int
name|minBrokers
parameter_list|,
specifier|final
name|int
name|maxBrokers
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Observer
argument_list|>
name|statusObserver
parameter_list|)
block|{
specifier|final
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
name|this
operator|.
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|this
operator|.
name|instanceName
operator|=
name|instanceName
expr_stmt|;
name|this
operator|.
name|maxShutdownWait
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_SHUTDOWN_DELAY
argument_list|,
name|DEFAULT_MAX_SHUTDOWN_WAIT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' will wait  "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|this
operator|.
name|maxShutdownWait
argument_list|)
operator|+
literal|" ms during shutdown"
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoveryEnabled
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' is enabled for recovery : "
operator|+
name|this
operator|.
name|recoveryEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|minBrokers
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_MIN_CONNECTIONS
argument_list|,
name|minBrokers
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxBrokers
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_MAX_CONNECTIONS
argument_list|,
name|maxBrokers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' will have between "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|this
operator|.
name|minBrokers
argument_list|)
operator|+
literal|" and "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|this
operator|.
name|maxBrokers
argument_list|)
operator|+
literal|" brokers"
argument_list|)
expr_stmt|;
name|this
operator|.
name|majorSyncPeriod
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SYNC_PERIOD
argument_list|,
name|DEFAULT_SYNCH_PERIOD
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' will be synchronized every "
operator|+
name|nf
operator|.
name|format
argument_list|(
comment|/*this.*/
name|majorSyncPeriod
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
comment|// convert from bytes to megabytes: 1024 * 1024
name|this
operator|.
name|diskSpaceMin
operator|=
literal|1024l
operator|*
literal|1024l
operator|*
name|conf
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|DISK_SPACE_MIN_PROPERTY
argument_list|,
name|DEFAULT_DISK_SPACE_MIN
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PAGE_SIZE
argument_list|,
name|DEFAULT_PAGE_SIZE
argument_list|)
expr_stmt|;
comment|//Configuration is valid, save it
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|statusObserver
operator|.
name|ifPresent
argument_list|(
name|this
operator|.
name|statusObservers
operator|::
name|add
argument_list|)
expr_stmt|;
name|this
operator|.
name|watchdog
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"trace.brokers"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
operator|new
name|BrokerWatchdog
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the database instance.      *      * @throws EXistException      * @throws DatabaseConfigurationException      */
name|void
name|initialize
parameter_list|()
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
block|{
try|try
block|{
name|_initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
comment|// remove that file lock we may have acquired in canReadDataDir
synchronized|synchronized
init|(
name|readOnly
init|)
block|{
if|if
condition|(
name|dataLock
operator|!=
literal|null
operator|&&
operator|!
name|readOnly
condition|)
block|{
name|dataLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|instanceof
name|EXistException
condition|)
block|{
throw|throw
operator|(
name|EXistException
operator|)
name|e
throw|;
block|}
if|else if
condition|(
name|e
operator|instanceof
name|DatabaseConfigurationException
condition|)
block|{
throw|throw
operator|(
name|DatabaseConfigurationException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|_initialize
parameter_list|()
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
block|{
comment|//Flag to indicate that we are initializing
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|INITIALIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing database instance '"
operator|+
name|instanceName
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
block|}
comment|// register core broker pool services
name|this
operator|.
name|scheduler
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|QuartzSchedulerImpl
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: this must occur after the scheduler, and before any other service which requires access to the data directory
name|this
operator|.
name|dataLock
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|FileLockService
argument_list|(
literal|"dbx_dir.lck"
argument_list|,
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|,
name|NativeBroker
operator|.
name|DEFAULT_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|securityManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|SecurityManagerImpl
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|DefaultCacheManager
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|xQueryPool
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|XQueryPool
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|processMonitor
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|ProcessMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|xqueryStats
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|PerformanceStats
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XMLReaderObjectFactory
name|xmlReaderObjectFactory
init|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|XMLReaderObjectFactory
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|xmlReaderPool
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|XMLReaderPool
argument_list|(
name|xmlReaderObjectFactory
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bufferSize
init|=
name|Optional
operator|.
name|of
argument_list|(
name|conf
operator|.
name|getInteger
argument_list|(
name|PROPERTY_COLLECTION_CACHE_SIZE
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|size
lambda|->
name|size
operator|!=
operator|-
literal|1
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_COLLECTION_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|collectionCache
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|CollectionCache
argument_list|(
name|this
argument_list|,
name|bufferSize
argument_list|,
literal|0.000001
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|collectionCacheMgr
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|CollectionCacheManager
argument_list|(
name|this
argument_list|,
name|collectionCache
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|notificationService
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|NotificationService
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalManager
operator|=
name|recoveryEnabled
condition|?
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|JournalManager
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|servicesManager
operator|.
name|register
argument_list|(
name|journalManager
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SystemTaskManager
name|systemTaskManager
init|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|SystemTaskManager
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|transactionManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|TransactionManager
argument_list|(
name|this
argument_list|,
name|journalManager
argument_list|,
name|systemTaskManager
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|symbols
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|SymbolTable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|expathRepo
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|new
name|ExistRepository
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expathRepo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|servicesManager
operator|.
name|register
argument_list|(
name|expathRepo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|ClasspathHelper
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|IndexManager
argument_list|(
name|this
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|//prepare those services that require system (single-user) mode
name|this
operator|.
name|pluginManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|PluginsManagerImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|//Get a manager to handle further collections configuration
name|this
operator|.
name|collectionConfigurationManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|CollectionConfigurationManager
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|startupTriggersManager
operator|=
name|servicesManager
operator|.
name|register
argument_list|(
operator|new
name|StartupTriggersManager
argument_list|()
argument_list|)
expr_stmt|;
comment|//configure the registered services
try|try
block|{
name|servicesManager
operator|.
name|configureServices
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokerPoolServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// calculate how much memory is reserved for caches to grow
specifier|final
name|Runtime
name|rt
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|maxMem
init|=
name|rt
operator|.
name|maxMemory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|minFree
init|=
name|maxMem
operator|/
literal|5
decl_stmt|;
name|reservedMem
operator|=
name|cacheManager
operator|.
name|getTotalMem
argument_list|()
operator|+
name|collectionCacheMgr
operator|.
name|getMaxTotal
argument_list|()
operator|+
name|minFree
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reserved memory: "
operator|+
name|reservedMem
operator|+
literal|"; max: "
operator|+
name|maxMem
operator|+
literal|"; min: "
operator|+
name|minFree
argument_list|)
expr_stmt|;
comment|//prepare the registered services, before entering system (single-user) mode
try|try
block|{
name|servicesManager
operator|.
name|prepareServices
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokerPoolServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//setup database synchronization job
if|if
condition|(
name|majorSyncPeriod
operator|>
literal|0
condition|)
block|{
specifier|final
name|SyncTask
name|syncTask
init|=
operator|new
name|SyncTask
argument_list|()
decl_stmt|;
name|syncTask
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|createPeriodicJob
argument_list|(
literal|2500
argument_list|,
operator|new
name|SystemTaskJobImpl
argument_list|(
name|SyncTask
operator|.
name|getJobName
argument_list|()
argument_list|,
name|syncTask
argument_list|)
argument_list|,
literal|2500
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|statusReporter
operator|=
operator|new
name|StatusReporter
argument_list|(
name|SIGNAL_STARTUP
argument_list|)
expr_stmt|;
name|statusObservers
operator|.
name|forEach
argument_list|(
name|statusReporter
operator|::
name|addObserver
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|statusThread
init|=
operator|new
name|Thread
argument_list|(
name|statusReporter
argument_list|)
decl_stmt|;
name|statusThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// statusReporter may have to be terminated or the thread can/will hang.
try|try
block|{
specifier|final
name|boolean
name|exportOnly
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_EXPORT_ONLY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// If the initialization fails after transactionManager has been created this method better cleans up
comment|// or the FileSyncThread for the journal can/will hang.
try|try
block|{
comment|// Enter System Mode
try|try
init|(
specifier|final
name|DBBroker
name|systemBroker
init|=
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|INITIALIZE_SYSTEM_MODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
name|journalManager
operator|.
name|ifPresent
argument_list|(
name|JournalManager
operator|::
name|disableJournalling
argument_list|)
expr_stmt|;
block|}
comment|//Run the recovery process
name|boolean
name|recovered
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
name|recovered
operator|=
name|runRecovery
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
comment|//TODO : extract the following from this block ? What if we are not transactional ? -pb
if|if
condition|(
operator|!
name|recovered
condition|)
block|{
try|try
block|{
if|if
condition|(
name|systemBroker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|Txn
name|txn
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|systemBroker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
expr_stmt|;
name|transactionManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|TriggerException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transactionManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|transactionManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* initialise required collections if they don't exist yet */
if|if
condition|(
operator|!
name|exportOnly
condition|)
block|{
try|try
block|{
name|initialiseSystemCollections
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
block|}
name|statusReporter
operator|.
name|setStatus
argument_list|(
name|SIGNAL_READINESS
argument_list|)
expr_stmt|;
try|try
block|{
name|servicesManager
operator|.
name|startSystemServices
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokerPoolServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//If necessary, launch a task to repair the DB
comment|//TODO : merge this with the recovery process ?
if|if
condition|(
name|isRecoveryEnabled
argument_list|()
operator|&&
name|recovered
condition|)
block|{
if|if
condition|(
operator|!
name|exportOnly
condition|)
block|{
name|reportStatus
argument_list|(
literal|"Reindexing database files..."
argument_list|)
expr_stmt|;
try|try
block|{
name|systemBroker
operator|.
name|repair
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during recovery: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
operator|(
name|Boolean
operator|)
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_CHECK
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
specifier|final
name|ConsistencyCheckTask
name|task
init|=
operator|new
name|ConsistencyCheckTask
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"backup"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"output"
argument_list|,
literal|"sanity"
argument_list|)
expr_stmt|;
name|task
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|task
operator|.
name|execute
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
block|}
block|}
comment|//OK : the DB is repaired; let's make a few RW operations
name|statusReporter
operator|.
name|setStatus
argument_list|(
name|SIGNAL_WRITABLE
argument_list|)
expr_stmt|;
comment|//initialize configurations watcher trigger
if|if
condition|(
operator|!
name|exportOnly
condition|)
block|{
try|try
block|{
name|initialiseTriggersForCollections
argument_list|(
name|systemBroker
argument_list|,
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
comment|//XXX: do not catch exception!
name|LOG
operator|.
name|error
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove temporary docs
try|try
block|{
name|systemBroker
operator|.
name|cleanUpTempResources
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
expr_stmt|;
block|}
name|sync
argument_list|(
name|systemBroker
argument_list|,
name|Sync
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
comment|// we have completed all system mode operations
comment|// we can now prepare those services which need
comment|// system mode before entering multi-user mode
try|try
block|{
name|servicesManager
operator|.
name|startPreMultiUserSystemServices
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokerPoolServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//Create a default configuration file for the root collection
comment|//TODO : why can't we call this from within CollectionConfigurationManager ?
comment|//TODO : understand why we get a test suite failure
comment|//collectionConfigurationManager.checkRootCollectionConfigCollection(broker);
comment|//collectionConfigurationManager.checkRootCollectionConfig(broker);
comment|//Create the minimal number of brokers required by the configuration
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|minBrokers
condition|;
name|i
operator|++
control|)
block|{
name|createBroker
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|INITIALIZE_MULTI_USER_MODE
argument_list|)
expr_stmt|;
comment|// register some MBeans to provide access to this instance
name|AgentFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|initDBInstance
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' initialized"
argument_list|)
expr_stmt|;
block|}
name|servicesManager
operator|.
name|startMultiUserServices
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|READY
argument_list|)
expr_stmt|;
name|statusReporter
operator|.
name|setStatus
argument_list|(
name|SIGNAL_STARTED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|transactionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|statusReporter
operator|!=
literal|null
condition|)
block|{
name|statusReporter
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|statusReporter
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Initialise system collections, if it doesn't exist yet      *      * @param sysBroker        The system broker from before the brokerpool is populated      * @param sysCollectionUri XmldbURI of the collection to create      * @param permissions      The permissions to set on the created collection      */
specifier|private
name|void
name|initialiseSystemCollection
parameter_list|(
specifier|final
name|DBBroker
name|sysBroker
parameter_list|,
specifier|final
name|XmldbURI
name|sysCollectionUri
parameter_list|,
specifier|final
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|Collection
name|collection
init|=
name|sysBroker
operator|.
name|getCollection
argument_list|(
name|sysCollectionUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|collection
operator|=
name|sysBroker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|sysCollectionUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create system collection: "
operator|+
name|sysCollectionUri
argument_list|)
throw|;
block|}
name|collection
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|sysBroker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Initialisation of system collections failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Initialize required system collections, if they don't exist yet      *      * @param broker - The system broker from before the brokerpool is populated      * @throws EXistException If a system collection cannot be created      */
specifier|private
name|void
name|initialiseSystemCollections
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
comment|//create /db/system
name|initialiseSystemCollection
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|,
name|Permission
operator|.
name|DEFAULT_SYSTEM_COLLECTION_PERM
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialiseTriggersForCollections
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
comment|//initialize configurations watcher trigger
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CollectionConfigurationManager
name|manager
init|=
name|getConfigurationManager
argument_list|()
decl_stmt|;
specifier|final
name|CollectionConfiguration
name|collConf
init|=
name|manager
operator|.
name|getOrCreateCollectionConfiguration
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|)
decl_stmt|;
specifier|final
name|DocumentTriggerProxy
name|triggerProxy
init|=
operator|new
name|DocumentTriggerProxy
argument_list|(
name|ConfigurationDocumentTrigger
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//, collection.getURI());
name|collConf
operator|.
name|documentTriggers
argument_list|()
operator|.
name|add
argument_list|(
name|triggerProxy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Run a database recovery if required. This method is called once during      * startup from {@link org.exist.storage.BrokerPool}.      *      * @param broker      * @throws EXistException      */
specifier|public
name|boolean
name|runRecovery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
block|{
specifier|final
name|boolean
name|forceRestart
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_FORCE_RESTART
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ForceRestart = "
operator|+
name|forceRestart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|RecoveryManager
name|recovery
init|=
operator|new
name|RecoveryManager
argument_list|(
name|broker
argument_list|,
name|journalManager
operator|.
name|get
argument_list|()
argument_list|,
name|forceRestart
argument_list|)
decl_stmt|;
return|return
name|recovery
operator|.
name|recover
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot run recovery without a JournalManager"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getReservedMem
parameter_list|()
block|{
return|return
name|reservedMem
operator|-
name|cacheManager
operator|.
name|getCurrentSize
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|pageSize
return|;
block|}
comment|/**      * Returns the class loader used when this BrokerPool was configured.      */
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|this
operator|.
name|classLoader
return|;
block|}
comment|/**      * Whether or not the database instance is operational, i.e. initialization      * has completed      *      * @return<code>true</code> if the database instance is operational      */
specifier|public
name|boolean
name|isOperational
parameter_list|()
block|{
return|return
name|status
operator|.
name|getCurrentState
argument_list|()
operator|==
name|State
operator|.
name|OPERATIONAL
return|;
block|}
comment|/**      * Returns the database instance's name.      *      * @return The id      */
comment|//TODO : rename getInstanceName
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|instanceName
return|;
block|}
comment|/**      * Returns the number of brokers currently serving requests for the database instance.      *      * @return The brokers count      * @deprecated use countActiveBrokers      */
comment|//TODO : rename as getActiveBrokers ?
specifier|public
name|int
name|active
parameter_list|()
block|{
return|return
name|activeBrokers
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns the number of brokers currently serving requests for the database instance.      *      * @return The active brokers count.      */
annotation|@
name|Override
specifier|public
name|int
name|countActiveBrokers
parameter_list|()
block|{
return|return
name|activeBrokers
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Thread
argument_list|,
name|DBBroker
argument_list|>
name|getActiveBrokers
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|activeBrokers
argument_list|)
return|;
block|}
comment|/**      * Returns the number of inactive brokers for the database instance.      *      * @return The brokers count      */
comment|//TODO : rename as getInactiveBrokers ?
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|inactiveBrokers
operator|.
name|size
argument_list|()
return|;
block|}
comment|//TODO : getMin() method ?
comment|/**      * Returns the maximal number of brokers for the database instance.      *      * @return The brokers count      */
comment|//TODO : rename as getMaxBrokers ?
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|maxBrokers
return|;
block|}
specifier|public
name|int
name|total
parameter_list|()
block|{
return|return
name|brokersCount
return|;
block|}
comment|/**      * Returns whether the database instance has been configured.      *      * @return<code>true</code> if the datbase instance is configured      */
specifier|public
specifier|final
name|boolean
name|isInstanceConfigured
parameter_list|()
block|{
return|return
name|conf
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the configuration object for the database instance.      *      * @return The configuration      */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|getExpathRepo
parameter_list|()
block|{
return|return
name|expathRepo
return|;
block|}
comment|//TODO : rename as setShutdwonListener ?
specifier|public
name|void
name|registerShutdownListener
parameter_list|(
specifier|final
name|ShutdownListener
name|listener
parameter_list|)
block|{
comment|//TODO : check that we are not shutting down
name|shutdownListener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|NodeIdFactory
name|getNodeFactory
parameter_list|()
block|{
return|return
name|nodeFactory
return|;
block|}
comment|/**      * Returns the database instance's security manager      *      * @return The security manager      */
specifier|public
name|SecurityManager
name|getSecurityManager
parameter_list|()
block|{
return|return
name|securityManager
return|;
block|}
comment|/**      * Returns the Scheduler      *      * @return The scheduler      */
specifier|public
name|Scheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
specifier|public
name|SymbolTable
name|getSymbols
parameter_list|()
block|{
return|return
name|symbols
return|;
block|}
specifier|public
name|NotificationService
name|getNotificationService
parameter_list|()
block|{
return|return
name|notificationService
return|;
block|}
comment|/**      * Returns whether transactions can be handled by the database instance.      *      * @return<code>true</code> if transactions can be handled      */
specifier|public
name|boolean
name|isRecoveryEnabled
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readOnly
init|)
block|{
return|return
operator|!
name|readOnly
operator|&&
name|recoveryEnabled
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readOnly
init|)
block|{
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
specifier|final
name|long
name|freeSpace
init|=
name|FileUtils
operator|.
name|measureFileStore
argument_list|(
name|dataLock
operator|.
name|getFile
argument_list|()
argument_list|,
name|FileStore
operator|::
name|getUsableSpace
argument_list|)
decl_stmt|;
if|if
condition|(
name|freeSpace
operator|!=
operator|-
literal|1
operator|&&
name|freeSpace
operator|<
name|diskSpaceMin
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Partition containing DATA_DIR: "
operator|+
name|dataLock
operator|.
name|getFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" is running out of disk space ["
operator|+
name|freeSpace
operator|+
literal|"]. "
operator|+
literal|"Switching eXist-db to read only to prevent data loss!"
argument_list|)
expr_stmt|;
name|setReadOnly
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|readOnly
return|;
block|}
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|()
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Switching database into read-only mode!"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|readOnly
init|)
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isInServiceMode
parameter_list|()
block|{
return|return
name|inServiceMode
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|JournalManager
argument_list|>
name|getJournalManager
parameter_list|()
block|{
return|return
name|journalManager
return|;
block|}
specifier|public
name|TransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
comment|/**      * Returns a manager for accessing the database instance's collection configuration files.      *      * @return The manager      */
annotation|@
name|Override
specifier|public
name|CollectionConfigurationManager
name|getConfigurationManager
parameter_list|()
block|{
return|return
name|collectionConfigurationManager
return|;
block|}
comment|/**      * Returns a cache in which the database instance's collections are stored.      *      * @return The cache      */
specifier|public
name|CollectionCache
name|getCollectionsCache
parameter_list|()
block|{
return|return
name|collectionCache
return|;
block|}
comment|/**      * Returns a cache in which the database instance's may store items.      *      * @return The cache      */
annotation|@
name|Override
specifier|public
name|DefaultCacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
specifier|public
name|CollectionCacheManager
name|getCollectionCacheMgr
parameter_list|()
block|{
return|return
name|collectionCacheMgr
return|;
block|}
comment|/**      * Returns the index manager which handles all additional indexes not      * being part of the database core.      *      * @return The IndexManager      */
annotation|@
name|Override
specifier|public
name|IndexManager
name|getIndexManager
parameter_list|()
block|{
return|return
name|indexManager
return|;
block|}
comment|/**      * Returns a pool in which the database instance's<strong>compiled</strong> XQueries are stored.      *      * @return The pool      */
specifier|public
name|XQueryPool
name|getXQueryPool
parameter_list|()
block|{
return|return
name|xQueryPool
return|;
block|}
comment|/**      * Retuns the XQuery Service      *      * @return The XQuery service      */
specifier|public
name|XQuery
name|getXQueryService
parameter_list|()
block|{
return|return
name|xqueryService
return|;
block|}
comment|/**      * Returns a monitor in which the database instance's<strong>running</strong> XQueries are managed.      *      * @return The monitor      */
specifier|public
name|ProcessMonitor
name|getProcessMonitor
parameter_list|()
block|{
return|return
name|processMonitor
return|;
block|}
comment|/**      * Returns the global profiler used to gather execution statistics      * from all XQueries running on this db instance.      *      * @return the profiler      */
specifier|public
name|PerformanceStats
name|getPerformanceStats
parameter_list|()
block|{
return|return
name|xqueryStats
return|;
block|}
comment|/**      * Returns a pool in which the database instance's readers are stored.      *      * @return The pool      */
specifier|public
name|XMLReaderPool
name|getParserPool
parameter_list|()
block|{
return|return
name|xmlReaderPool
return|;
block|}
comment|/**      * Returns the global update lock for the database instance.      * This lock is used by XUpdate operations to avoid that      * concurrent XUpdate requests modify the database until all      * document locks have been correctly set.      *      * @return The global lock      */
comment|//TODO : rename as getUpdateLock ?
specifier|public
name|Lock
name|getGlobalUpdateLock
parameter_list|()
block|{
return|return
name|globalXUpdateLock
return|;
block|}
comment|/**      * Creates an inactive broker for the database instance.      *      * @return The broker      * @throws EXistException      */
specifier|protected
name|DBBroker
name|createBroker
parameter_list|()
throws|throws
name|EXistException
block|{
comment|//TODO : in the future, don't pass the whole configuration, just the part relevant to brokers
specifier|final
name|DBBroker
name|broker
init|=
name|BrokerFactory
operator|.
name|getInstance
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|inactiveBrokers
operator|.
name|push
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|brokersCount
operator|++
expr_stmt|;
name|broker
operator|.
name|setId
argument_list|(
name|broker
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'_'
operator|+
name|instanceName
operator|+
literal|"_"
operator|+
name|brokersCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"created broker '"
operator|+
name|broker
operator|.
name|getId
argument_list|()
operator|+
literal|" for database instance '"
operator|+
name|instanceName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
comment|/**      * Get active broker for current thread      *      * Note - If you call getActiveBroker() you must not call      * release on both the returned active broker and the original      * lease from {@link BrokerPool#getBroker()} or {@link BrokerPool#get(Optional)}      * otherwise release will have been called more than get!      *      * @return Database broker      * @throws RuntimeException NO broker available for current thread.      */
specifier|public
name|DBBroker
name|getActiveBroker
parameter_list|()
block|{
comment|//throws EXistException {
comment|//synchronized(this) {
comment|//Try to get an active broker
specifier|final
name|DBBroker
name|broker
init|=
name|activeBrokers
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Broker was not obtained for thread '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|Thread
argument_list|,
name|DBBroker
argument_list|>
name|entry
range|:
name|activeBrokers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|broker
return|;
comment|//}
block|}
specifier|public
name|DBBroker
name|authenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|Object
name|credentials
parameter_list|)
throws|throws
name|AuthenticationException
block|{
specifier|final
name|Subject
name|subject
init|=
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|username
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|get
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|subject
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns an active broker for the database instance.      *      * The current user will be inherited by this broker      *      * @return The broker      */
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
throws|throws
name|EXistException
block|{
return|return
name|get
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an active broker for the database instance.      *      * @param subject Optionally a subject to set on the broker, if a user is not provided then the      *                current user assigned to the broker will be re-used      * @return The broker      * @throws EXistException If the instance is not available (stopped or not configured)      */
comment|//TODO : rename as getBroker ? getInstance (when refactored) ?
specifier|public
name|DBBroker
name|get
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Subject
argument_list|>
name|subject
parameter_list|)
throws|throws
name|EXistException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|subject
argument_list|,
literal|"Subject cannot be null, use BrokerPool#getBroker() instead"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInstanceConfigured
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"database instance '"
operator|+
name|instanceName
operator|+
literal|"' is not available"
argument_list|)
throw|;
block|}
comment|//Try to get an active broker
name|DBBroker
name|broker
init|=
name|activeBrokers
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
comment|//Use it...
comment|//TOUNDERSTAND (pb) : why not pop a broker from the inactive ones rather than maintaining reference counters ?
comment|// WM: a thread may call this more than once in the sequence of operations, i.e. calls to get/release can
comment|// be nested. Returning a new broker every time would lead to a deadlock condition if two threads have
comment|// to wait for a broker to become available. We thus use reference counts and return
comment|// the same broker instance for each thread.
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
comment|//increase its number of uses
name|broker
operator|.
name|incReferenceCount
argument_list|()
expr_stmt|;
name|broker
operator|.
name|pushSubject
argument_list|(
name|subject
operator|.
name|orElseGet
argument_list|(
name|broker
operator|::
name|getCurrentSubject
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|brokerLeaseChangeTrace
operator|.
name|containsKey
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|brokerLeaseChangeTrace
operator|.
name|put
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|TraceableStateChanges
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|brokerLeaseChangeTrace
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|TraceableBrokerLeaseChange
operator|.
name|get
argument_list|(
operator|new
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
name|broker
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|broker
return|;
comment|//TODO : share the code with what is below (including notifyAll) ?
comment|// WM: notifyAll is not necessary if we don't have to wait for a broker.
block|}
comment|//No active broker : get one ASAP
while|while
condition|(
name|serviceModeUser
operator|!=
literal|null
operator|&&
name|subject
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|subject
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|serviceModeUser
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Db instance is in service mode. Waiting for db to become available again ..."
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//Are there any available brokers ?
if|if
condition|(
name|inactiveBrokers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//There are no available brokers. If allowed...
if|if
condition|(
name|brokersCount
operator|<
name|maxBrokers
condition|)
comment|//... create one
block|{
name|createBroker
argument_list|()
expr_stmt|;
block|}
else|else
comment|//... or wait until there is one available
while|while
condition|(
name|inactiveBrokers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for a broker to become available"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//nothing to be done!
block|}
block|}
block|}
name|broker
operator|=
name|inactiveBrokers
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//activate the broker
name|activeBrokers
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|broker
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"+++ "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
name|Stacktrace
operator|.
name|top
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|Stacktrace
operator|.
name|DEFAULT_STACK_TOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|watchdog
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|watchdog
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|incReferenceCount
argument_list|()
expr_stmt|;
name|broker
operator|.
name|pushSubject
argument_list|(
name|subject
operator|.
name|orElseGet
argument_list|(
name|securityManager
operator|::
name|getGuestSubject
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|brokerLeaseChangeTrace
operator|.
name|containsKey
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|brokerLeaseChangeTrace
operator|.
name|put
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|TraceableStateChanges
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|brokerLeaseChangeTrace
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|TraceableBrokerLeaseChange
operator|.
name|get
argument_list|(
operator|new
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
name|broker
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Inform the other threads that we have a new-comer
comment|// TODO: do they really need to be informed here???????
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
comment|/**      * Releases a broker for the database instance. If it is no more used, make if invactive.      * If there are pending system maintenance tasks,      * the method will block until these tasks have finished.      *      * NOTE - this is intentionally package-private, it is only meant to be      * called internally and from {@link DBBroker#close()}      *      * @param broker The broker to be released      */
comment|//TODO : rename as releaseBroker ? releaseInstance (when refactored) ?
name|void
name|release
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|broker
argument_list|,
literal|"Cannot release nothing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|brokerLeaseChangeTrace
operator|.
name|containsKey
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|brokerLeaseChangeTrace
operator|.
name|put
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|TraceableStateChanges
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|brokerLeaseChangeTrace
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|TraceableBrokerLeaseChange
operator|.
name|release
argument_list|(
operator|new
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
name|broker
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//first check that the broker is active ! If not, return immediately.
name|broker
operator|.
name|decReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|broker
operator|.
name|popSubject
argument_list|()
expr_stmt|;
comment|//it is still in use and thus can't be marked as inactive
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//Broker is no more used : inactivate it
for|for
control|(
specifier|final
name|DBBroker
name|inactiveBroker
range|:
name|inactiveBrokers
control|)
block|{
if|if
condition|(
name|broker
operator|==
name|inactiveBroker
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Broker "
operator|+
name|broker
operator|.
name|getId
argument_list|()
operator|+
literal|" is already in the inactive list!!!"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|activeBrokers
operator|.
name|remove
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"release() has been called from the wrong thread for broker "
operator|+
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup the state of activeBrokers
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|Thread
argument_list|,
name|DBBroker
argument_list|>
name|activeBroker
range|:
name|activeBrokers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|activeBroker
operator|.
name|getValue
argument_list|()
operator|==
name|broker
condition|)
block|{
specifier|final
name|EXistException
name|ex
init|=
operator|new
name|EXistException
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"release() has been called from '"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|"', but occupied at '"
operator|+
name|activeBroker
operator|.
name|getKey
argument_list|()
operator|+
literal|"'."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|activeBrokers
operator|.
name|remove
argument_list|(
name|activeBroker
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"--- "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
name|Stacktrace
operator|.
name|top
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|Stacktrace
operator|.
name|DEFAULT_STACK_TOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Subject
name|lastUser
init|=
name|broker
operator|.
name|popSubject
argument_list|()
decl_stmt|;
comment|//guard to ensure that the broker has popped all its subjects
if|if
condition|(
name|lastUser
operator|==
literal|null
operator|||
name|broker
operator|.
name|getCurrentSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Broker "
operator|+
name|broker
operator|.
name|getId
argument_list|()
operator|+
literal|" was returned with extraneous Subjects, cleaning..."
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
literal|"DBBroker pushSubject/popSubject mismatch"
argument_list|)
operator|.
name|fillInStackTrace
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|broker
operator|.
name|traceSubjectChanges
argument_list|()
expr_stmt|;
block|}
comment|//cleanup any remaining erroneous subjects
while|while
condition|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lastUser
operator|=
name|broker
operator|.
name|popSubject
argument_list|()
expr_stmt|;
block|}
block|}
name|inactiveBrokers
operator|.
name|push
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|watchdog
operator|.
name|ifPresent
argument_list|(
name|wd
lambda|->
name|wd
operator|.
name|remove
argument_list|(
name|broker
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|brokerLeaseChangeTraceHistory
operator|.
name|containsKey
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|brokerLeaseChangeTraceHistory
operator|.
name|put
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|brokerLeaseChangeTraceHistory
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|TraceableStateChanges
argument_list|<
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|,
name|TraceableBrokerLeaseChange
operator|.
name|Change
argument_list|>
operator|)
name|brokerLeaseChangeTrace
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|brokerLeaseChangeTrace
operator|.
name|get
argument_list|(
name|broker
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|clearSubjectChangesTrace
argument_list|()
expr_stmt|;
block|}
comment|//If the database is now idle, do some useful stuff
if|if
condition|(
name|activeBrokers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//TODO : use a "clean" dedicated method (we have some below) ?
if|if
condition|(
name|syncRequired
condition|)
block|{
comment|//Note that the broker is not yet really inactive ;-)
name|sync
argument_list|(
name|broker
argument_list|,
name|syncEvent
argument_list|)
expr_stmt|;
name|this
operator|.
name|syncRequired
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|checkpoint
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|serviceModeUser
operator|!=
literal|null
operator|&&
operator|!
name|lastUser
operator|.
name|equals
argument_list|(
name|serviceModeUser
argument_list|)
condition|)
block|{
name|inServiceMode
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//Inform the other threads that someone is gone
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|DBBroker
name|enterServiceMode
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Only users of group dba can switch the db to service mode"
argument_list|)
throw|;
block|}
name|serviceModeUser
operator|=
name|user
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|activeBrokers
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|inServiceMode
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//nothing to be done
block|}
block|}
block|}
block|}
name|inServiceMode
operator|=
literal|true
expr_stmt|;
specifier|final
name|DBBroker
name|broker
init|=
name|inactiveBrokers
operator|.
name|peek
argument_list|()
decl_stmt|;
name|checkpoint
operator|=
literal|true
expr_stmt|;
name|sync
argument_list|(
name|broker
argument_list|,
name|Sync
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
name|checkpoint
operator|=
literal|false
expr_stmt|;
comment|// Return a broker that can be used to perform system tasks
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|exitServiceMode
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|serviceModeUser
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"The db has been locked by a different user"
argument_list|)
throw|;
block|}
name|serviceModeUser
operator|=
literal|null
expr_stmt|;
name|inServiceMode
operator|=
literal|false
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reportStatus
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|statusReporter
operator|!=
literal|null
condition|)
block|{
name|statusReporter
operator|.
name|setStatus
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getMajorSyncPeriod
parameter_list|()
block|{
return|return
name|majorSyncPeriod
return|;
block|}
specifier|public
name|long
name|getLastMajorSync
parameter_list|()
block|{
return|return
name|lastMajorSync
return|;
block|}
comment|/**      * Executes a waiting cache synchronization for the database instance.      *      * @param broker    A broker responsible for executing the job      * @param syncEvent One of {@link org.exist.storage.sync.Sync}      */
comment|//TODO : rename as runSync ? executeSync ?
comment|//TOUNDERSTAND (pb) : *not* synchronized, so... "executes" or, rather, "schedules" ? "executes" (WM)
comment|//TOUNDERSTAND (pb) : why do we need a broker here ? Why not get and release one when we're done ?
comment|// WM: the method will always be under control of the BrokerPool. It is guaranteed that no
comment|// other brokers are active when it is called. That's why we don't need to synchronize here.
comment|//TODO : make it protected ?
specifier|public
name|void
name|sync
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sync
name|syncEvent
parameter_list|)
block|{
name|broker
operator|.
name|sync
argument_list|(
name|syncEvent
argument_list|)
expr_stmt|;
comment|//TODO : strange that it is set *after* the sunc method has been called.
try|try
block|{
name|broker
operator|.
name|pushSubject
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|syncEvent
operator|==
name|Sync
operator|.
name|MAJOR
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Major sync"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|FORCE_CORRUPTION
condition|)
block|{
name|transactionManager
operator|.
name|checkpoint
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|cacheManager
operator|.
name|checkCaches
argument_list|()
expr_stmt|;
if|if
condition|(
name|pluginManager
operator|!=
literal|null
condition|)
block|{
name|pluginManager
operator|.
name|sync
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|lastMajorSync
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|notificationService
operator|.
name|debug
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cacheManager
operator|.
name|checkDistribution
argument_list|()
expr_stmt|;
comment|//            LOG.debug("Minor sync");
block|}
comment|//TODO : touch this.syncEvent and syncRequired ?
block|}
finally|finally
block|{
name|broker
operator|.
name|popSubject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Schedules a cache synchronization for the database instance. If the database instance is idle,      * the cache synchronization will be run immediately. Otherwise, the task will be deferred      * until all running threads have returned.      *      * @param syncEvent One of {@link org.exist.storage.sync.Sync}      */
specifier|public
name|void
name|triggerSync
parameter_list|(
specifier|final
name|Sync
name|syncEvent
parameter_list|)
block|{
comment|//TOUNDERSTAND (pb) : synchronized, so... "schedules" or, rather, "executes" ? "schedules" (WM)
specifier|final
name|State
name|s
init|=
name|status
operator|.
name|getCurrentState
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|SHUTDOWN
operator|||
name|s
operator|==
name|State
operator|.
name|SHUTTING_DOWN
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Triggering sync: "
operator|+
name|syncEvent
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//Are there available brokers ?
comment|// TOUNDERSTAND (pb) : the trigger is ignored !
comment|// WM: yes, it seems wrong!!
comment|//			if(inactiveBrokers.size() == 0)
comment|//				return;
comment|//TODO : switch on syncEvent and throw an exception if it is inaccurate ?
comment|//Is the database instance idle ?
if|if
condition|(
name|inactiveBrokers
operator|.
name|size
argument_list|()
operator|==
name|brokersCount
condition|)
block|{
comment|//Borrow a broker
comment|//TODO : this broker is *not* marked as active and may be reused by another process !
comment|// No other brokers are running at this time, so there's no risk.
comment|//TODO : use get() then release the broker ?
comment|// No, might lead to a deadlock.
specifier|final
name|DBBroker
name|broker
init|=
name|inactiveBrokers
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|//Do the synchronization job
name|sync
argument_list|(
name|broker
argument_list|,
name|syncEvent
argument_list|)
expr_stmt|;
name|inactiveBrokers
operator|.
name|push
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|syncRequired
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|//Put the synchronization job into the queue
comment|//TODO : check that we don't replace high priority Sync.MAJOR_SYNC by a lesser priority sync !
name|this
operator|.
name|syncEvent
operator|=
name|syncEvent
expr_stmt|;
name|syncRequired
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Schedules a system maintenance task for the database instance. If the database is idle,      * the task will be run immediately. Otherwise, the task will be deffered      * until all running threads have returned.      *      * @param task The task      */
comment|//TOUNDERSTAND (pb) : synchronized, so... "schedules" or, rather, "executes" ?
specifier|public
name|void
name|triggerSystemTask
parameter_list|(
specifier|final
name|SystemTask
name|task
parameter_list|)
block|{
specifier|final
name|State
name|s
init|=
name|status
operator|.
name|getCurrentState
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|State
operator|.
name|SHUTTING_DOWN
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping SystemTask: '"
operator|+
name|task
operator|.
name|getName
argument_list|()
operator|+
literal|"' as database is shutting down..."
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|s
operator|==
name|State
operator|.
name|SHUTDOWN
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to execute SystemTask: '"
operator|+
name|task
operator|.
name|getName
argument_list|()
operator|+
literal|"' as database is shut down!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|transactionManager
operator|.
name|triggerSystemTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shuts downs the database instance      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShuttingDown
parameter_list|()
block|{
return|return
name|status
operator|.
name|getCurrentState
argument_list|()
operator|==
name|State
operator|.
name|SHUTTING_DOWN
return|;
block|}
specifier|public
name|boolean
name|isShutDown
parameter_list|()
block|{
return|return
name|status
operator|.
name|getCurrentState
argument_list|()
operator|==
name|State
operator|.
name|SHUTDOWN
return|;
block|}
comment|/**      * Shuts downs the database instance      *      * @param killed<code>true</code> when the JVM is (cleanly) exiting      */
specifier|public
name|void
name|shutdown
parameter_list|(
specifier|final
name|boolean
name|killed
parameter_list|)
block|{
try|try
block|{
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|START_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// we are not operational!
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Database is shutting down ..."
argument_list|)
expr_stmt|;
name|processMonitor
operator|.
name|stopRunningJobs
argument_list|()
expr_stmt|;
comment|//Shutdown the scheduler
name|scheduler
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|lock
init|=
name|transactionManager
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
comment|// wait for currently running system tasks before we shutdown
comment|// they will have a lock on the transactionManager
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// these may be used and set by other threads for the same or some other purpose
comment|// (unlikely). Take no chances.
name|statusReporter
operator|=
operator|new
name|StatusReporter
argument_list|(
name|SIGNAL_SHUTDOWN
argument_list|)
expr_stmt|;
name|statusObservers
operator|.
name|forEach
argument_list|(
name|statusReporter
operator|::
name|addObserver
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|statusThread
init|=
operator|new
name|Thread
argument_list|(
name|statusReporter
argument_list|)
decl_stmt|;
name|statusThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// release transaction log to allow remaining brokers to complete
comment|// their job
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// DW: only in debug mode
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|notificationService
operator|.
name|debug
argument_list|()
expr_stmt|;
block|}
comment|//Notify all running tasks that we are shutting down
comment|//Notify all running XQueries that we are shutting down
name|processMonitor
operator|.
name|killAll
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|//TODO : close other objects using varying methods ? set them to null ?
comment|//cacheManager.something();
comment|//xQueryPool.something();
comment|//collectionConfigurationManager.something();
comment|//collectionCache.something();
comment|//xmlReaderPool.close();
if|if
condition|(
name|isRecoveryEnabled
argument_list|()
condition|)
block|{
name|journalManager
operator|.
name|ifPresent
argument_list|(
name|jm
lambda|->
name|jm
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|waitStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//Are there active brokers ?
if|if
condition|(
name|activeBrokers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|printSystemInfo
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting "
operator|+
name|maxShutdownWait
operator|+
literal|"ms for remaining threads to shut down..."
argument_list|)
expr_stmt|;
while|while
condition|(
name|activeBrokers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|//Wait until they become inactive...
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//nothing to be done
block|}
comment|//...or force the shutdown
if|if
condition|(
name|maxShutdownWait
operator|>
operator|-
literal|1
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|waitStart
operator|>
name|maxShutdownWait
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not all threads returned. Forcing shutdown ..."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling shutdown ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginManager
operator|!=
literal|null
condition|)
try|try
block|{
name|pluginManager
operator|.
name|stop
argument_list|(
operator|(
name|DBBroker
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during plugin manager shutdown: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// closing down external indexes
try|try
block|{
name|indexManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during index shutdown: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//TODO : replace the following code by get()/release() statements ?
comment|// WM: deadlock risk if not all brokers returned properly.
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inactiveBrokers
operator|.
name|isEmpty
argument_list|()
condition|)
try|try
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not create instance for shutdown. Giving up."
argument_list|)
expr_stmt|;
block|}
else|else
comment|//TODO : this broker is *not* marked as active and may be reused by another process !
comment|//TODO : use get() then release the broker ?
comment|// WM: deadlock risk if not all brokers returned properly.
comment|//TODO: always createBroker? -dmitriy
block|{
name|broker
operator|=
name|inactiveBrokers
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
comment|//TOUNDERSTAND (pb) : shutdown() is called on only *one* broker ?
comment|// WM: yes, the database files are shared, so only one broker is needed to close them for all
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|pushSubject
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|collectionCacheMgr
operator|.
name|deregisterCache
argument_list|(
name|collectionCache
argument_list|)
expr_stmt|;
comment|// do not write a checkpoint if some threads did not return before shutdown
comment|// there might be dirty transactions
name|transactionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// deregister JMX MBeans
name|AgentFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|closeDBInstance
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//Clear the living instances container
name|removeInstance
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|readOnly
init|)
block|{
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
comment|// release the lock on the data directory
name|dataLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|//clearing additional resources, like ThreadLocal
name|clearThreadLocals
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"shutdown complete !"
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdownListener
operator|!=
literal|null
condition|)
block|{
name|shutdownListener
operator|.
name|shutdown
argument_list|(
name|instanceName
argument_list|,
name|instancesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statusReporter
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|statusReporter
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// clear instance variables, just to be sure they will be garbage collected
comment|// the test suite restarts the db a few hundred times
name|Configurator
operator|.
name|clear
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|transactionManager
operator|=
literal|null
expr_stmt|;
name|collectionCache
operator|=
literal|null
expr_stmt|;
name|collectionCacheMgr
operator|=
literal|null
expr_stmt|;
name|xQueryPool
operator|=
literal|null
expr_stmt|;
name|processMonitor
operator|=
literal|null
expr_stmt|;
name|collectionConfigurationManager
operator|=
literal|null
expr_stmt|;
name|notificationService
operator|=
literal|null
expr_stmt|;
name|indexManager
operator|=
literal|null
expr_stmt|;
name|xmlReaderPool
operator|=
literal|null
expr_stmt|;
name|shutdownListener
operator|=
literal|null
expr_stmt|;
name|securityManager
operator|=
literal|null
expr_stmt|;
name|notificationService
operator|=
literal|null
expr_stmt|;
name|statusObservers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|status
operator|.
name|process
argument_list|(
name|Event
operator|.
name|FINISHED_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addStatusObserver
parameter_list|(
specifier|final
name|Observer
name|statusObserver
parameter_list|)
block|{
name|this
operator|.
name|statusObservers
operator|.
name|add
argument_list|(
name|statusObserver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeStatusObserver
parameter_list|(
specifier|final
name|Observer
name|statusObserver
parameter_list|)
block|{
return|return
name|this
operator|.
name|statusObservers
operator|.
name|remove
argument_list|(
name|statusObserver
argument_list|)
return|;
block|}
specifier|private
name|void
name|clearThreadLocals
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Thread
name|thread
range|:
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|cleanThreadLocalsForThread
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not clear ThreadLocals for thread: "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|cleanThreadLocalsForThread
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|)
throws|throws
name|EXistException
block|{
try|try
block|{
comment|// Get a reference to the thread locals table of the current thread
specifier|final
name|Field
name|threadLocalsField
init|=
name|Thread
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"threadLocals"
argument_list|)
decl_stmt|;
name|threadLocalsField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|threadLocalTable
init|=
name|threadLocalsField
operator|.
name|get
argument_list|(
name|thread
argument_list|)
decl_stmt|;
comment|// Get a reference to the array holding the thread local variables inside the
comment|// ThreadLocalMap of the current thread
specifier|final
name|Class
name|threadLocalMapClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.ThreadLocal$ThreadLocalMap"
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|tableField
init|=
name|threadLocalMapClass
operator|.
name|getDeclaredField
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|tableField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|table
init|=
name|tableField
operator|.
name|get
argument_list|(
name|threadLocalTable
argument_list|)
decl_stmt|;
comment|// The key to the ThreadLocalMap is a WeakReference object. The referent field of this object
comment|// is a reference to the actual ThreadLocal variable
specifier|final
name|Field
name|referentField
init|=
name|Reference
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"referent"
argument_list|)
decl_stmt|;
name|referentField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|table
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
comment|// Each entry in the table array of ThreadLocalMap is an Entry object
comment|// representing the thread local reference and its value
specifier|final
name|Object
name|entry
init|=
name|Array
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
comment|// Get a reference to the thread local object and remove it from the table
specifier|final
name|ThreadLocal
name|threadLocal
init|=
operator|(
name|ThreadLocal
operator|)
name|referentField
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|threadLocal
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|// We will tolerate an exception here and just log it
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|BrokerWatchdog
argument_list|>
name|getWatchdog
parameter_list|()
block|{
return|return
name|watchdog
return|;
block|}
comment|//TODO : move this elsewhere
specifier|public
name|void
name|triggerCheckpoint
parameter_list|()
block|{
if|if
condition|(
name|syncRequired
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|syncEvent
operator|=
name|Sync
operator|.
name|MAJOR
expr_stmt|;
name|syncRequired
operator|=
literal|true
expr_stmt|;
name|checkpoint
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|Debuggee
name|debuggee
init|=
literal|null
decl_stmt|;
specifier|public
name|Debuggee
name|getDebuggee
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|debuggee
operator|==
literal|null
condition|)
block|{
name|debuggee
operator|=
name|DebuggeeFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|debuggee
return|;
block|}
specifier|public
name|Calendar
name|getStartupTime
parameter_list|()
block|{
return|return
name|startupTime
return|;
block|}
specifier|public
name|void
name|printSystemInfo
parameter_list|()
block|{
try|try
init|(
specifier|final
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|()
init|;
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|sout
argument_list|)
init|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SYSTEM INFO"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|format
argument_list|(
literal|"Database instance: %s\n"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"-------------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|watchdog
operator|.
name|ifPresent
argument_list|(
name|wd
lambda|->
name|wd
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
name|DeadlockDetection
operator|.
name|debug
argument_list|(
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|sout
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StatusReporter
extends|extends
name|Observable
implements|implements
name|Runnable
block|{
specifier|private
name|String
name|status
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|terminate
init|=
literal|false
decl_stmt|;
specifier|public
name|StatusReporter
parameter_list|(
specifier|final
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|setStatus
parameter_list|(
specifier|final
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifyObservers
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|terminate
parameter_list|()
block|{
name|this
operator|.
name|terminate
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|terminate
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
name|this
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifyObservers
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getStoragePlace
parameter_list|()
block|{
return|return
operator|(
name|Path
operator|)
name|conf
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
argument_list|>
name|documentTriggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|CollectionTrigger
argument_list|>
argument_list|>
name|collectionTriggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
argument_list|>
name|getDocumentTriggers
parameter_list|()
block|{
return|return
name|documentTriggers
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|CollectionTrigger
argument_list|>
argument_list|>
name|getCollectionTriggers
parameter_list|()
block|{
return|return
name|collectionTriggers
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerDocumentTrigger
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
name|clazz
parameter_list|)
block|{
name|documentTriggers
operator|.
name|add
argument_list|(
operator|new
name|DocumentTriggerProxy
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerCollectionTrigger
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|CollectionTrigger
argument_list|>
name|clazz
parameter_list|)
block|{
name|collectionTriggers
operator|.
name|add
argument_list|(
operator|new
name|CollectionTriggerProxy
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PluginsManager
name|getPluginsManager
parameter_list|()
block|{
return|return
name|pluginManager
return|;
block|}
specifier|protected
name|MetaStorage
name|metaStorage
init|=
literal|null
decl_stmt|;
specifier|public
name|MetaStorage
name|getMetaStorage
parameter_list|()
block|{
return|return
name|metaStorage
return|;
block|}
comment|/**      * Represents a change involving {@link BrokerPool#inactiveBrokers}      * or {@link BrokerPool#activeBrokers} or {@link DBBroker#referenceCount}      *      * Used for tracing broker leases      */
specifier|private
specifier|static
class|class
name|TraceableBrokerLeaseChange
extends|extends
name|TraceableStateChange
argument_list|<
name|TraceableBrokerLeaseChange
operator|.
name|BrokerInfo
argument_list|,
name|TraceableBrokerLeaseChange
operator|.
name|Change
argument_list|>
block|{
specifier|public
enum|enum
name|Change
block|{
name|GET
block|,
name|RELEASE
block|}
specifier|public
specifier|static
class|class
name|BrokerInfo
block|{
specifier|final
name|String
name|id
decl_stmt|;
specifier|final
name|int
name|referenceCount
decl_stmt|;
specifier|public
name|BrokerInfo
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|int
name|referenceCount
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|referenceCount
operator|=
name|referenceCount
expr_stmt|;
block|}
block|}
specifier|private
name|TraceableBrokerLeaseChange
parameter_list|(
specifier|final
name|Change
name|change
parameter_list|,
specifier|final
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{
name|super
argument_list|(
name|change
argument_list|,
name|brokerInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getState
argument_list|()
operator|.
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|describeState
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|getState
argument_list|()
operator|.
name|referenceCount
argument_list|)
return|;
block|}
specifier|static
name|TraceableBrokerLeaseChange
name|get
parameter_list|(
specifier|final
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{
return|return
operator|new
name|TraceableBrokerLeaseChange
argument_list|(
name|Change
operator|.
name|GET
argument_list|,
name|brokerInfo
argument_list|)
return|;
block|}
specifier|static
name|TraceableBrokerLeaseChange
name|release
parameter_list|(
specifier|final
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{
return|return
operator|new
name|TraceableBrokerLeaseChange
argument_list|(
name|Change
operator|.
name|RELEASE
argument_list|,
name|brokerInfo
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

