begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_comment
comment|/**  * Represents a (virtual) storage address in the paged file, consisting  * of page number, tuple id and type indicator.  *   * The format of a storage address is as follows:  *   *<pre>  * | page    | type | tid |  * | 1 2 3 4 | 5 6   | 7 8 |  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|StorageAddress
block|{
comment|/**      *  Create virtual address from page number and offset (tid)      *      *@param  page    Page number      *@param  tid     Tuple identifier      *@return         Virtual address of the tuple      */
specifier|public
specifier|final
specifier|static
name|long
name|createPointer
parameter_list|(
name|int
name|page
parameter_list|,
name|short
name|tid
parameter_list|)
block|{
return|return
name|tid
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|page
operator|)
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
literal|32
return|;
block|}
specifier|public
specifier|final
specifier|static
name|long
name|createPointer
parameter_list|(
name|int
name|page
parameter_list|,
name|short
name|tid
parameter_list|,
name|short
name|flags
parameter_list|)
block|{
return|return
name|tid
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|flags
operator|)
operator|&
literal|0xFFFFL
operator|)
operator|<<
literal|16
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|page
operator|)
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
literal|32
return|;
block|}
comment|/**      *  Get the tuple identifier from a virtual address.      *      *@param  pointer The address      *@return The tuple ID at this address      */
specifier|public
specifier|final
specifier|static
name|short
name|tidFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
name|pointer
operator|&
literal|0xFFFFL
operator|)
return|;
block|}
comment|/**      *  Get the page number from a virtual address.      *      *@param  pointer The address      *@return The page number      */
specifier|public
specifier|final
specifier|static
name|int
name|pageFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
operator|(
name|pointer
operator|>>>
literal|32
operator|)
operator|&
literal|0xFFFFFFFFL
operator|)
return|;
block|}
comment|/**      * Get the type indicator from a virtual address.      *       * Returns a short corresponding to the type constants defined      * in {@link org.exist.xquery.value.Type}.      *       * @param pointer The address      * @return The type indicator      */
specifier|public
specifier|final
specifier|static
name|short
name|indexTypeFromPointer
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
operator|(
name|pointer
operator|>>>
literal|16
operator|)
operator|&
literal|0xFFFFL
operator|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|long
name|setIndexType
parameter_list|(
name|long
name|pointer
parameter_list|,
name|short
name|type
parameter_list|)
block|{
return|return
name|pointer
operator||
operator|(
operator|(
name|long
operator|)
operator|(
name|type
operator|<<
literal|16
operator|)
operator|&
literal|0xFFFF0000L
operator|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|hasAddress
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
operator|(
name|pointer
operator|&
literal|0xFFFFFFFF0000FFFFL
operator|)
operator|>
literal|0
return|;
block|}
comment|/**      * Returns<code>true</code> if the page number and the tuple ID of the two storage      * addresses are equal. The type indicator is ignored.      *       * @param p0 The first storage address      * @param p1 The second storage address      * @return<code>true</code> if the page number and the tuple ID      * of the two storage addresses are equal      */
specifier|public
specifier|final
specifier|static
name|boolean
name|equals
parameter_list|(
name|long
name|p0
parameter_list|,
name|long
name|p1
parameter_list|)
block|{
return|return
operator|(
operator|(
name|p0
operator|&
literal|0xFFFFFFFF0000FFFFL
operator|)
operator|==
operator|(
name|p1
operator|&
literal|0xFFFFFFFF0000FFFFL
operator|)
operator|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|write
parameter_list|(
name|long
name|pointer
parameter_list|,
name|VariableByteOutputStream
name|os
parameter_list|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|pageFromPointer
argument_list|(
name|pointer
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeShort
argument_list|(
name|tidFromPointer
argument_list|(
name|pointer
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeShort
argument_list|(
name|indexTypeFromPointer
argument_list|(
name|pointer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|long
name|read
parameter_list|(
name|VariableByteInput
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|EOFException
block|{
return|return
name|createPointer
argument_list|(
name|is
operator|.
name|readInt
argument_list|()
argument_list|,
name|is
operator|.
name|readShort
argument_list|()
argument_list|,
name|is
operator|.
name|readShort
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|toString
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
return|return
name|pageFromPointer
argument_list|(
name|pointer
argument_list|)
operator|+
literal|":"
operator|+
name|tidFromPointer
argument_list|(
name|pointer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

