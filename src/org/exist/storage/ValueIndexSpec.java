begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Used to specify a range index on a node path. Contrary to the  * fulltext index, a range index indexes the value of nodes according  * to a predefined type.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ValueIndexSpec
block|{
comment|/*      * Constants to define the type of the index.      */
comment|/** No index specified **/
specifier|public
specifier|final
specifier|static
name|int
name|NO_INDEX
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|STRING
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|INTEGER
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DOUBLE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|FLOAT
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|BOOLEAN
init|=
literal|5
decl_stmt|;
comment|// special flag to indicate that the node has mixed
comment|// content
specifier|public
specifier|final
specifier|static
name|int
name|MIXED_CONTENT
init|=
literal|0x40
decl_stmt|;
comment|// special flag which is set if the node has
comment|// been fulltext indexed
specifier|public
specifier|final
specifier|static
name|int
name|TEXT
init|=
literal|0x80
decl_stmt|;
comment|// Maps the type constants above to the corresponding
comment|// XPath atomic types
specifier|private
specifier|final
specifier|static
name|int
index|[]
name|xpathTypes
init|=
block|{
name|Type
operator|.
name|ITEM
block|,
name|Type
operator|.
name|STRING
block|,
name|Type
operator|.
name|INTEGER
block|,
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|BOOLEAN
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
index|[]
name|indexTypes
init|=
operator|new
name|int
index|[
literal|64
index|]
decl_stmt|;
static|static
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|indexTypes
argument_list|,
name|NO_INDEX
argument_list|)
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|STRING
index|]
operator|=
name|STRING
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|INTEGER
index|]
operator|=
name|INTEGER
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|DOUBLE
index|]
operator|=
name|DOUBLE
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|FLOAT
index|]
operator|=
name|FLOAT
expr_stmt|;
name|indexTypes
index|[
name|Type
operator|.
name|BOOLEAN
index|]
operator|=
name|BOOLEAN
expr_stmt|;
block|}
comment|/**      * For a given index type specifier, return the corresponding      * atomic XPath type (as defined in {@link org.exist.xquery.value.Type}).      *       * @param type      * @return      */
specifier|public
specifier|final
specifier|static
name|int
name|indexTypeToXPath
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|xpathTypes
index|[
name|type
operator|&
literal|0x3F
index|]
return|;
block|}
comment|/**      * Returns true if the index type specifier has the fulltext index flag      * set.      *       * @param type      * @return      */
specifier|public
specifier|final
specifier|static
name|boolean
name|hasFulltextIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|TEXT
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * Returns true if the index type specifier has the mixed content      * flag set.      *       * @param type      * @return      */
specifier|public
specifier|final
specifier|static
name|boolean
name|hasMixedContent
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|MIXED_CONTENT
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * Returns the index type specifier corresponding to a given      * XPath type (as defined in {@link org.exist.xquery.value.Type}).      *       * @param type      * @return      */
specifier|public
specifier|final
specifier|static
name|int
name|xpathTypeToIndex
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|indexTypes
index|[
name|type
index|]
return|;
block|}
specifier|private
name|NodePath
name|path
decl_stmt|;
specifier|private
name|int
name|type
decl_stmt|;
specifier|public
name|ValueIndexSpec
parameter_list|(
name|Map
name|namespaces
parameter_list|,
name|String
name|pathStr
parameter_list|,
name|String
name|typeStr
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
if|if
condition|(
name|pathStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"The path attribute is required in index.create"
argument_list|)
throw|;
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|namespaces
argument_list|,
name|pathStr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|type
operator|=
name|Type
operator|.
name|getType
argument_list|(
name|typeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Unknown type: "
operator|+
name|typeStr
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the path corresponding to this index.      *       * @return      */
specifier|public
name|NodePath
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Returns the XPath type code for this index      * (as defined in {@link org.exist.xquery.value.Type}).      *       * @return      */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the index type for this index, corresponding      * to the constants defined in this class.      *       * @return      */
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
return|return
name|indexTypes
index|[
name|type
index|]
return|;
block|}
comment|/**      * Check if the path argument matches the path      * of this index spec.      *       * @param otherPath      * @return      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|NodePath
name|otherPath
parameter_list|)
block|{
return|return
name|path
operator|.
name|match
argument_list|(
name|otherPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

