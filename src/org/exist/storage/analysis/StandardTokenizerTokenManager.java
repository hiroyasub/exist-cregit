begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. StandardTokenizerTokenManager.java */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|StandardTokenizerTokenManager
implements|implements
name|StandardTokenizerConstants
block|{
specifier|public
name|java
operator|.
name|io
operator|.
name|PrintStream
name|debugStream
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|public
name|void
name|setDebugStream
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintStream
name|ds
parameter_list|)
block|{
name|debugStream
operator|=
name|ds
expr_stmt|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa0_0
parameter_list|()
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAdd
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|jjrounds
index|[
name|state
index|]
operator|!=
name|jjround
condition|)
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|state
expr_stmt|;
name|jjrounds
index|[
name|state
index|]
operator|=
name|jjround
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|jjAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|jjnextStates
index|[
name|start
index|]
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddTwoStates
parameter_list|(
name|int
name|state1
parameter_list|,
name|int
name|state2
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|state1
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|state2
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec0
init|=
block|{
literal|0x1ff00000fffffffeL
block|,
literal|0xffffffffffffc000L
block|,
literal|0xffffffffL
block|,
literal|0x600000000000000L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec2
init|=
block|{
literal|0x0L
block|,
literal|0x0L
block|,
literal|0x0L
block|,
literal|0xff7fffffff7fffffL
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec3
init|=
block|{
literal|0x0L
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec4
init|=
block|{
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffL
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec5
init|=
block|{
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|,
literal|0x0L
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec6
init|=
block|{
literal|0x3fffffffffffL
block|,
literal|0x0L
block|,
literal|0x0L
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec7
init|=
block|{
literal|0x1600L
block|,
literal|0x0L
block|,
literal|0x0L
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec8
init|=
block|{
literal|0x0L
block|,
literal|0xffc000000000L
block|,
literal|0x0L
block|,
literal|0xffc000000000L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec9
init|=
block|{
literal|0x0L
block|,
literal|0x3ff00000000L
block|,
literal|0x0L
block|,
literal|0x3ff000000000000L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec10
init|=
block|{
literal|0x0L
block|,
literal|0xffc000000000L
block|,
literal|0x0L
block|,
literal|0xff8000000000L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec11
init|=
block|{
literal|0x0L
block|,
literal|0xffc000000000L
block|,
literal|0x0L
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec12
init|=
block|{
literal|0x0L
block|,
literal|0x3ff0000L
block|,
literal|0x0L
block|,
literal|0x3ff0000L
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec13
init|=
block|{
literal|0x0L
block|,
literal|0x3ffL
block|,
literal|0x0L
block|,
literal|0x0L
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
name|jjMoveNfa_0
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
index|[]
name|nextStates
decl_stmt|;
name|int
name|startsAt
init|=
literal|0
decl_stmt|;
name|jjnewStateCnt
operator|=
literal|72
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|jjstateSet
index|[
literal|0
index|]
operator|=
name|startState
expr_stmt|;
name|int
name|j
decl_stmt|,
name|kind
init|=
literal|0x7fffffff
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|jjround
operator|==
literal|0x7fffffff
condition|)
name|ReInitRounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|<
literal|64
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
name|curChar
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|6
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|14
argument_list|,
literal|26
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
case|case
literal|6
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
case|case
literal|9
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
case|case
literal|16
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|16
argument_list|,
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|13
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
case|case
literal|21
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
expr_stmt|;
break|break;
case|case
literal|22
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|23
argument_list|)
expr_stmt|;
break|break;
case|case
literal|23
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|23
argument_list|,
literal|24
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|25
argument_list|,
literal|26
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|25
argument_list|,
literal|26
argument_list|)
expr_stmt|;
break|break;
case|case
literal|26
case|:
case|case
literal|27
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|22
argument_list|,
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|28
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|28
argument_list|,
literal|29
argument_list|)
expr_stmt|;
break|break;
case|case
literal|29
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|30
argument_list|,
literal|31
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|30
argument_list|,
literal|31
argument_list|)
expr_stmt|;
break|break;
case|case
literal|31
case|:
case|case
literal|32
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|32
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
case|case
literal|33
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|34
argument_list|)
expr_stmt|;
break|break;
case|case
literal|34
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|34
argument_list|,
literal|35
argument_list|)
expr_stmt|;
break|break;
case|case
literal|35
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|36
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|36
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|36
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|37
case|:
case|case
literal|38
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|33
argument_list|,
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|39
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|39
argument_list|,
literal|40
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
case|case
literal|41
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|41
argument_list|,
literal|42
argument_list|)
expr_stmt|;
break|break;
case|case
literal|42
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|43
argument_list|)
expr_stmt|;
break|break;
case|case
literal|43
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|43
argument_list|,
literal|44
argument_list|)
expr_stmt|;
break|break;
case|case
literal|44
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|45
argument_list|,
literal|46
argument_list|)
expr_stmt|;
break|break;
case|case
literal|45
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|45
argument_list|,
literal|46
argument_list|)
expr_stmt|;
break|break;
case|case
literal|46
case|:
case|case
literal|47
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|47
argument_list|,
literal|48
argument_list|)
expr_stmt|;
break|break;
case|case
literal|48
case|:
if|if
condition|(
operator|(
literal|0xf00000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|49
argument_list|)
expr_stmt|;
break|break;
case|case
literal|49
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|44
argument_list|,
literal|49
argument_list|)
expr_stmt|;
break|break;
case|case
literal|53
case|:
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAdd
argument_list|(
literal|54
argument_list|)
expr_stmt|;
break|break;
case|case
literal|55
case|:
if|if
condition|(
name|curChar
operator|!=
literal|46
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|4
condition|)
name|kind
operator|=
literal|4
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|54
argument_list|)
expr_stmt|;
break|break;
case|case
literal|56
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|6
argument_list|,
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
literal|57
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|57
argument_list|,
literal|58
argument_list|)
expr_stmt|;
break|break;
case|case
literal|58
case|:
if|if
condition|(
operator|(
literal|0x500000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|59
argument_list|)
expr_stmt|;
break|break;
case|case
literal|59
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|58
argument_list|,
literal|59
argument_list|)
expr_stmt|;
break|break;
case|case
literal|60
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|61
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|27
argument_list|,
literal|30
argument_list|)
expr_stmt|;
break|break;
case|case
literal|62
case|:
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAddStates
argument_list|(
literal|31
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
case|case
literal|64
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|34
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|66
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|66
argument_list|,
literal|67
argument_list|)
expr_stmt|;
break|break;
case|case
literal|67
case|:
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAdd
argument_list|(
literal|68
argument_list|)
expr_stmt|;
break|break;
case|case
literal|68
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|5
condition|)
name|kind
operator|=
literal|5
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|67
argument_list|,
literal|68
argument_list|)
expr_stmt|;
break|break;
case|case
literal|69
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|69
argument_list|,
literal|70
argument_list|)
expr_stmt|;
break|break;
case|case
literal|70
case|:
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAdd
argument_list|(
literal|71
argument_list|)
expr_stmt|;
break|break;
case|case
literal|71
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|70
argument_list|,
literal|71
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|else if
condition|(
name|curChar
operator|<
literal|128
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|38
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|14
argument_list|,
literal|26
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|41
argument_list|,
literal|42
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|43
argument_list|,
literal|44
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|13
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|21
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
expr_stmt|;
break|break;
case|case
literal|22
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|23
argument_list|)
expr_stmt|;
break|break;
case|case
literal|23
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|23
argument_list|,
literal|24
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|25
argument_list|,
literal|26
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|25
argument_list|,
literal|26
argument_list|)
expr_stmt|;
break|break;
case|case
literal|27
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|22
argument_list|,
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|28
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|28
argument_list|,
literal|29
argument_list|)
expr_stmt|;
break|break;
case|case
literal|29
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|30
argument_list|,
literal|31
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|30
argument_list|,
literal|31
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|32
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
case|case
literal|33
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|34
argument_list|)
expr_stmt|;
break|break;
case|case
literal|34
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|34
argument_list|,
literal|35
argument_list|)
expr_stmt|;
break|break;
case|case
literal|35
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|36
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|36
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|36
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|33
argument_list|,
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|39
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|39
argument_list|,
literal|40
argument_list|)
expr_stmt|;
break|break;
case|case
literal|41
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|45
argument_list|,
literal|46
argument_list|)
expr_stmt|;
break|break;
case|case
literal|42
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|43
argument_list|)
expr_stmt|;
break|break;
case|case
literal|43
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|43
argument_list|,
literal|44
argument_list|)
expr_stmt|;
break|break;
case|case
literal|44
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|45
argument_list|,
literal|46
argument_list|)
expr_stmt|;
break|break;
case|case
literal|45
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|45
argument_list|,
literal|46
argument_list|)
expr_stmt|;
break|break;
case|case
literal|47
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|47
argument_list|,
literal|48
argument_list|)
expr_stmt|;
break|break;
case|case
literal|48
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|49
argument_list|)
expr_stmt|;
break|break;
case|case
literal|49
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|44
argument_list|,
literal|49
argument_list|)
expr_stmt|;
break|break;
case|case
literal|50
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|38
argument_list|,
literal|40
argument_list|)
expr_stmt|;
break|break;
case|case
literal|51
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|51
argument_list|)
expr_stmt|;
break|break;
case|case
literal|52
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|52
argument_list|,
literal|53
argument_list|)
expr_stmt|;
break|break;
case|case
literal|54
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|49
argument_list|,
literal|50
argument_list|)
expr_stmt|;
break|break;
case|case
literal|60
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|61
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|27
argument_list|,
literal|30
argument_list|)
expr_stmt|;
break|break;
case|case
literal|63
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjCheckNAdd
argument_list|(
literal|64
argument_list|)
expr_stmt|;
break|break;
case|case
literal|64
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|34
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|65
case|:
if|if
condition|(
name|curChar
operator|==
literal|64
condition|)
name|jjCheckNAdd
argument_list|(
literal|66
argument_list|)
expr_stmt|;
break|break;
case|case
literal|66
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|66
argument_list|,
literal|67
argument_list|)
expr_stmt|;
break|break;
case|case
literal|68
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|5
condition|)
name|kind
operator|=
literal|5
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|67
argument_list|,
literal|68
argument_list|)
expr_stmt|;
break|break;
case|case
literal|69
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|69
argument_list|,
literal|70
argument_list|)
expr_stmt|;
break|break;
case|case
literal|71
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|70
argument_list|,
literal|71
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
else|else
block|{
name|int
name|hiByte
init|=
operator|(
name|int
operator|)
operator|(
name|curChar
operator|>>
literal|8
operator|)
decl_stmt|;
name|int
name|i1
init|=
name|hiByte
operator|>>
literal|6
decl_stmt|;
name|long
name|l1
init|=
literal|1L
operator|<<
operator|(
name|hiByte
operator|&
literal|077
operator|)
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|curChar
operator|&
literal|0xff
operator|)
operator|>>
literal|6
decl_stmt|;
name|long
name|l2
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|14
argument_list|,
literal|26
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|38
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|6
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|1
condition|)
name|kind
operator|=
literal|1
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|51
argument_list|,
literal|52
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|11
expr_stmt|;
break|break;
case|case
literal|12
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|53
argument_list|,
literal|54
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|16
argument_list|,
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|16
argument_list|,
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|13
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
expr_stmt|;
break|break;
case|case
literal|21
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
expr_stmt|;
break|break;
case|case
literal|23
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|55
argument_list|,
literal|56
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|57
argument_list|,
literal|58
argument_list|)
expr_stmt|;
break|break;
case|case
literal|26
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|22
argument_list|,
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|27
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|22
argument_list|,
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|28
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|28
argument_list|,
literal|29
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|59
argument_list|,
literal|60
argument_list|)
expr_stmt|;
break|break;
case|case
literal|31
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|32
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|32
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
case|case
literal|34
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|61
argument_list|,
literal|62
argument_list|)
expr_stmt|;
break|break;
case|case
literal|36
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|63
argument_list|,
literal|64
argument_list|)
expr_stmt|;
break|break;
case|case
literal|37
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|33
argument_list|,
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|33
argument_list|,
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|39
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|39
argument_list|,
literal|40
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|41
argument_list|,
literal|42
argument_list|)
expr_stmt|;
break|break;
case|case
literal|41
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|41
argument_list|,
literal|42
argument_list|)
expr_stmt|;
break|break;
case|case
literal|43
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|43
argument_list|,
literal|44
argument_list|)
expr_stmt|;
break|break;
case|case
literal|45
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|65
argument_list|,
literal|66
argument_list|)
expr_stmt|;
break|break;
case|case
literal|46
case|:
if|if
condition|(
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|47
argument_list|,
literal|48
argument_list|)
expr_stmt|;
break|break;
case|case
literal|47
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|47
argument_list|,
literal|48
argument_list|)
expr_stmt|;
break|break;
case|case
literal|49
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|44
argument_list|,
literal|49
argument_list|)
expr_stmt|;
break|break;
case|case
literal|50
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|38
argument_list|,
literal|40
argument_list|)
expr_stmt|;
break|break;
case|case
literal|51
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|2
condition|)
name|kind
operator|=
literal|2
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|51
argument_list|)
expr_stmt|;
break|break;
case|case
literal|52
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|52
argument_list|,
literal|53
argument_list|)
expr_stmt|;
break|break;
case|case
literal|54
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|49
argument_list|,
literal|50
argument_list|)
expr_stmt|;
break|break;
case|case
literal|56
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddStates
argument_list|(
literal|6
argument_list|,
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
literal|57
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|57
argument_list|,
literal|58
argument_list|)
expr_stmt|;
break|break;
case|case
literal|59
case|:
if|if
condition|(
operator|!
name|jjCanMove_1
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|3
condition|)
name|kind
operator|=
literal|3
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|58
argument_list|,
literal|59
argument_list|)
expr_stmt|;
break|break;
case|case
literal|60
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|61
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddStates
argument_list|(
literal|27
argument_list|,
literal|30
argument_list|)
expr_stmt|;
break|break;
case|case
literal|64
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddStates
argument_list|(
literal|34
argument_list|,
literal|37
argument_list|)
expr_stmt|;
break|break;
case|case
literal|66
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|66
argument_list|,
literal|67
argument_list|)
expr_stmt|;
break|break;
case|case
literal|68
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|5
condition|)
name|kind
operator|=
literal|5
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|67
argument_list|,
literal|68
argument_list|)
expr_stmt|;
break|break;
case|case
literal|69
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|69
argument_list|,
literal|70
argument_list|)
expr_stmt|;
break|break;
case|case
literal|71
case|:
if|if
condition|(
operator|!
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|70
argument_list|,
literal|71
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|if
condition|(
name|kind
operator|!=
literal|0x7fffffff
condition|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|curPos
expr_stmt|;
name|kind
operator|=
literal|0x7fffffff
expr_stmt|;
block|}
operator|++
name|curPos
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|jjnewStateCnt
operator|)
operator|==
operator|(
name|startsAt
operator|=
literal|72
operator|-
operator|(
name|jjnewStateCnt
operator|=
name|startsAt
operator|)
operator|)
condition|)
return|return
name|curPos
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|curPos
return|;
block|}
block|}
block|}
specifier|static
specifier|final
name|int
index|[]
name|jjnextStates
init|=
block|{
literal|61
block|,
literal|62
block|,
literal|63
block|,
literal|65
block|,
literal|69
block|,
literal|70
block|,
literal|57
block|,
literal|58
block|,
literal|9
block|,
literal|10
block|,
literal|21
block|,
literal|22
block|,
literal|41
block|,
literal|42
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|7
block|,
literal|8
block|,
literal|12
block|,
literal|13
block|,
literal|19
block|,
literal|20
block|,
literal|28
block|,
literal|29
block|,
literal|39
block|,
literal|40
block|,
literal|61
block|,
literal|62
block|,
literal|63
block|,
literal|65
block|,
literal|62
block|,
literal|63
block|,
literal|65
block|,
literal|62
block|,
literal|63
block|,
literal|64
block|,
literal|65
block|,
literal|51
block|,
literal|52
block|,
literal|53
block|,
literal|9
block|,
literal|10
block|,
literal|16
block|,
literal|17
block|,
literal|41
block|,
literal|42
block|,
literal|47
block|,
literal|48
block|,
literal|54
block|,
literal|55
block|,
literal|4
block|,
literal|5
block|,
literal|14
block|,
literal|15
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|30
block|,
literal|31
block|,
literal|34
block|,
literal|35
block|,
literal|36
block|,
literal|37
block|,
literal|45
block|,
literal|46
block|,  }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|jjCanMove_0
parameter_list|(
name|int
name|hiByte
parameter_list|,
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|long
name|l1
parameter_list|,
name|long
name|l2
parameter_list|)
block|{
switch|switch
condition|(
name|hiByte
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
operator|(
name|jjbitVec2
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|48
case|:
return|return
operator|(
operator|(
name|jjbitVec3
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|49
case|:
return|return
operator|(
operator|(
name|jjbitVec4
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|51
case|:
return|return
operator|(
operator|(
name|jjbitVec5
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|61
case|:
return|return
operator|(
operator|(
name|jjbitVec6
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
default|default :
if|if
condition|(
operator|(
name|jjbitVec0
index|[
name|i1
index|]
operator|&
name|l1
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|boolean
name|jjCanMove_1
parameter_list|(
name|int
name|hiByte
parameter_list|,
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|long
name|l1
parameter_list|,
name|long
name|l2
parameter_list|)
block|{
switch|switch
condition|(
name|hiByte
condition|)
block|{
case|case
literal|6
case|:
return|return
operator|(
operator|(
name|jjbitVec9
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|11
case|:
return|return
operator|(
operator|(
name|jjbitVec10
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|13
case|:
return|return
operator|(
operator|(
name|jjbitVec11
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|14
case|:
return|return
operator|(
operator|(
name|jjbitVec12
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
case|case
literal|16
case|:
return|return
operator|(
operator|(
name|jjbitVec13
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
default|default :
if|if
condition|(
operator|(
name|jjbitVec7
index|[
name|i1
index|]
operator|&
name|l1
operator|)
operator|!=
literal|0L
condition|)
if|if
condition|(
operator|(
name|jjbitVec8
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|==
literal|0L
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|jjstrLiteralImages
init|=
block|{
literal|""
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|, }
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|lexStateNames
init|=
block|{
literal|"DEFAULT"
block|,  }
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoToken
init|=
block|{
literal|0xffL
block|,  }
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoSkip
init|=
block|{
literal|0x2000L
block|,  }
decl_stmt|;
specifier|private
name|SimpleCharStream
name|input_stream
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjrounds
init|=
operator|new
name|int
index|[
literal|72
index|]
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjstateSet
init|=
operator|new
name|int
index|[
literal|144
index|]
decl_stmt|;
specifier|protected
name|char
name|curChar
decl_stmt|;
specifier|public
name|StandardTokenizerTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|SimpleCharStream
operator|.
name|staticFlag
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."
argument_list|)
throw|;
name|input_stream
operator|=
name|stream
expr_stmt|;
block|}
specifier|public
name|StandardTokenizerTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
name|jjmatchedPos
operator|=
name|jjnewStateCnt
operator|=
literal|0
expr_stmt|;
name|curLexState
operator|=
name|defaultLexState
expr_stmt|;
name|input_stream
operator|=
name|stream
expr_stmt|;
name|ReInitRounds
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|ReInitRounds
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|jjround
operator|=
literal|0x80000001
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|72
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
name|jjrounds
index|[
name|i
index|]
operator|=
literal|0x80000000
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|SwitchTo
parameter_list|(
name|int
name|lexState
parameter_list|)
block|{
if|if
condition|(
name|lexState
operator|>=
literal|1
operator|||
name|lexState
operator|<
literal|0
condition|)
throw|throw
operator|new
name|TokenMgrError
argument_list|(
literal|"Error: Ignoring invalid lexical state : "
operator|+
name|lexState
operator|+
literal|". State unchanged."
argument_list|,
name|TokenMgrError
operator|.
name|INVALID_LEXICAL_STATE
argument_list|)
throw|;
else|else
name|curLexState
operator|=
name|lexState
expr_stmt|;
block|}
specifier|private
specifier|final
name|Token
name|jjFillToken
parameter_list|()
block|{
name|Token
name|t
init|=
name|Token
operator|.
name|newToken
argument_list|(
name|jjmatchedKind
argument_list|)
decl_stmt|;
name|t
operator|.
name|kind
operator|=
name|jjmatchedKind
expr_stmt|;
name|String
name|im
init|=
name|jjstrLiteralImages
index|[
name|jjmatchedKind
index|]
decl_stmt|;
name|t
operator|.
name|image
operator|=
operator|(
name|im
operator|==
literal|null
operator|)
condition|?
name|input_stream
operator|.
name|GetImage
argument_list|()
else|:
name|im
expr_stmt|;
name|t
operator|.
name|beginLine
operator|=
name|input_stream
operator|.
name|getBeginLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|beginColumn
operator|=
name|input_stream
operator|.
name|getBeginColumn
argument_list|()
expr_stmt|;
name|t
operator|.
name|endLine
operator|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|endColumn
operator|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
name|int
name|curLexState
init|=
literal|0
decl_stmt|;
name|int
name|defaultLexState
init|=
literal|0
decl_stmt|;
name|int
name|jjnewStateCnt
decl_stmt|;
name|int
name|jjround
decl_stmt|;
name|int
name|jjmatchedPos
decl_stmt|;
name|int
name|jjmatchedKind
decl_stmt|;
specifier|public
specifier|final
name|Token
name|getNextToken
parameter_list|()
block|{
name|int
name|kind
decl_stmt|;
name|Token
name|specialToken
init|=
literal|null
decl_stmt|;
name|Token
name|matchedToken
decl_stmt|;
name|int
name|curPos
init|=
literal|0
decl_stmt|;
name|EOFLoop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjmatchedKind
operator|=
literal|0
expr_stmt|;
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_0
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjmatchedPos
operator|==
literal|0
operator|&&
name|jjmatchedKind
operator|>
literal|13
condition|)
block|{
name|jjmatchedKind
operator|=
literal|13
expr_stmt|;
block|}
if|if
condition|(
name|jjmatchedKind
operator|!=
literal|0x7fffffff
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|+
literal|1
operator|<
name|curPos
condition|)
name|input_stream
operator|.
name|backup
argument_list|(
name|curPos
operator|-
name|jjmatchedPos
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|jjtoToken
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
else|else
block|{
continue|continue
name|EOFLoop
continue|;
block|}
block|}
name|int
name|error_line
init|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
decl_stmt|;
name|int
name|error_column
init|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
decl_stmt|;
name|String
name|error_after
init|=
literal|null
decl_stmt|;
name|boolean
name|EOFSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
name|EOFSeen
operator|=
literal|true
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|==
literal|'\n'
operator|||
name|curChar
operator|==
literal|'\r'
condition|)
block|{
name|error_line
operator|++
expr_stmt|;
name|error_column
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|error_column
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|EOFSeen
condition|)
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|TokenMgrError
argument_list|(
name|EOFSeen
argument_list|,
name|curLexState
argument_list|,
name|error_line
argument_list|,
name|error_column
argument_list|,
name|error_after
argument_list|,
name|curChar
argument_list|,
name|TokenMgrError
operator|.
name|LEXICAL_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

