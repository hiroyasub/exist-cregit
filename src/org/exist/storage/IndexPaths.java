begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04,  Wolfgang Meier  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * IndexPaths contains information about which parts of a document should be  * fulltext-indexed for a specified doctype. It basically keeps a list of paths  * to include and paths to exclude from indexing. Paths are specified using  * simple XPath syntax, e.g. //SPEECH will select any SPEECH elements,  * //title/@id will select all id attributes being children of title elements.  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|IndexPaths
block|{
specifier|private
specifier|final
specifier|static
name|HashMap
name|cache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|ArrayList
name|includePath
decl_stmt|;
specifier|protected
name|ArrayList
name|excludePath
decl_stmt|;
specifier|protected
name|boolean
name|includeByDefault
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|includeAttributes
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|includeAlphaNum
init|=
literal|true
decl_stmt|;
specifier|protected
name|int
name|depth
init|=
literal|1
decl_stmt|;
comment|/**      * Constructor for the IndexPaths object      *      * @param def if set to true, include everything by default. In this case      * use exclude elements to specify the excluded parts.      */
specifier|public
name|IndexPaths
parameter_list|(
name|boolean
name|def
parameter_list|)
block|{
name|includeByDefault
operator|=
name|def
expr_stmt|;
name|includePath
operator|=
operator|new
name|ArrayList
argument_list|(  )
expr_stmt|;
name|excludePath
operator|=
operator|new
name|ArrayList
argument_list|(  )
expr_stmt|;
block|}
comment|/**      * Add a path to the list of includes      *      * @param path The feature to be added to the Include attribute      */
specifier|public
name|void
name|addInclude
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|includePath
operator|.
name|add
argument_list|(
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a path to the list of excludes      *      * @param path DOCUMENT ME!      */
specifier|public
name|void
name|addExclude
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|excludePath
operator|.
name|add
argument_list|(
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns false if all elements are indexed, true  	 * if indexation is selective. 	 *  	 * @return 	 */
specifier|public
name|boolean
name|isSelective
parameter_list|()
block|{
if|if
condition|(
operator|(
name|includeByDefault
operator|&&
name|excludePath
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
operator|(
operator|!
name|includeByDefault
operator|)
operator|&&
name|includePath
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**      * Include attribute values?      *      * @param index The new includeAttributes value      */
specifier|public
name|void
name|setIncludeAttributes
parameter_list|(
name|boolean
name|index
parameter_list|)
block|{
name|includeAttributes
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * Include attribute values?      *      * @return The includeAttributes value      */
specifier|public
name|boolean
name|getIncludeAttributes
parameter_list|(  )
block|{
return|return
name|includeAttributes
return|;
block|}
comment|/**      * Include alpha-numeric data, i.e. numbers, serials, URLs and so on?      *      * @param index include alpha-numeric data      */
specifier|public
name|void
name|setIncludeAlphaNum
parameter_list|(
name|boolean
name|index
parameter_list|)
block|{
name|includeAlphaNum
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * Include alpha-numeric data?      *      * @return       */
specifier|public
name|boolean
name|getIncludeAlphaNum
parameter_list|(  )
block|{
return|return
name|includeAlphaNum
return|;
block|}
specifier|public
name|int
name|getIndexDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
specifier|public
name|void
name|setIndexDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
comment|/**      * Check if a given path should be indexed.      *      * @param path path to the node      *      * @return Description of the Return Value      */
specifier|public
name|boolean
name|match
parameter_list|(
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|includeByDefault
condition|)
block|{
comment|// check exclusions
for|for
control|(
name|Iterator
name|i
init|=
name|excludePath
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|(  )
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|NodePath
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|includePath
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|NodePath
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

