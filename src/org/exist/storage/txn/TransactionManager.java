begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|JournalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * This is the central entry point to the transaction management service.  *   * There's only one TransactionManager per database instance that can be  * retrieved via {@link BrokerPool#getTransactionManager()}. TransactionManager  * provides methods to create, commit and rollback a transaction.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|TransactionManager
implements|implements
name|BrokerPoolService
block|{
comment|/**      * Logger for this class      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|nextTxnId
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
specifier|final
name|Optional
argument_list|<
name|JournalManager
argument_list|>
name|journalManager
decl_stmt|;
specifier|private
specifier|final
name|SystemTaskManager
name|systemTaskManager
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|TxnCounter
argument_list|>
name|transactions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**      * Initialize the transaction manager using the specified data directory.      *       * @param pool      * @param journalManager      * @param systemTaskManager      * @throws EXistException      */
specifier|public
name|TransactionManager
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|JournalManager
argument_list|>
name|journalManager
parameter_list|,
specifier|final
name|SystemTaskManager
name|systemTaskManager
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|journalManager
operator|=
name|journalManager
expr_stmt|;
name|this
operator|.
name|systemTaskManager
operator|=
name|systemTaskManager
expr_stmt|;
block|}
comment|/**      * Create a new transaction. Creates a new transaction id that will      * be logged to disk immediately.       */
specifier|public
name|Txn
name|beginTransaction
parameter_list|()
block|{
return|return
name|withLock
argument_list|(
name|broker
lambda|->
block|{
specifier|final
name|long
name|txnId
init|=
name|nextTxnId
operator|++
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting new transaction: "
operator|+
name|txnId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|journalManager
operator|.
name|get
argument_list|()
operator|.
name|journal
argument_list|(
operator|new
name|TxnStart
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JournalException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create transaction. Error writing to log file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Txn
name|txn
init|=
operator|new
name|Txn
argument_list|(
name|TransactionManager
operator|.
name|this
argument_list|,
name|txnId
argument_list|)
decl_stmt|;
name|transactions
operator|.
name|put
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|TxnCounter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|txn
return|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Commit a transaction.      *       * @param txn      * @throws TransactionException      */
specifier|public
name|void
name|commit
parameter_list|(
specifier|final
name|Txn
name|txn
parameter_list|)
throws|throws
name|TransactionException
block|{
comment|//we can only commit something which is in the STARTED state
if|if
condition|(
name|txn
operator|.
name|getState
argument_list|()
operator|!=
name|Txn
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
return|return;
block|}
name|withLock
argument_list|(
name|broker
lambda|->
block|{
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|journalManager
operator|.
name|get
argument_list|()
operator|.
name|journalGroup
argument_list|(
operator|new
name|TxnCommit
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JournalException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write commit record to journal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|txn
operator|.
name|signalCommit
argument_list|()
expr_stmt|;
name|txn
operator|.
name|releaseAll
argument_list|()
expr_stmt|;
name|transactions
operator|.
name|remove
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|processSystemTasks
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committed transaction: "
operator|+
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|Txn
name|txn
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|txn
argument_list|)
expr_stmt|;
comment|//we can only abort something which is in the STARTED state
if|if
condition|(
name|txn
operator|.
name|getState
argument_list|()
operator|!=
name|Txn
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
return|return;
block|}
name|withLock
argument_list|(
name|broker
lambda|->
block|{
name|transactions
operator|.
name|remove
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|journalManager
operator|.
name|get
argument_list|()
operator|.
name|journalGroup
argument_list|(
operator|new
name|TxnAbort
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JournalException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write abort record to journal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|txn
operator|.
name|signalAbort
argument_list|()
expr_stmt|;
name|txn
operator|.
name|releaseAll
argument_list|()
expr_stmt|;
name|processSystemTasks
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure the transaction has either been committed or aborted.      *      * @param txn      */
specifier|public
name|void
name|close
parameter_list|(
specifier|final
name|Txn
name|txn
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|txn
argument_list|)
expr_stmt|;
comment|//if the transaction is already closed, do nothing
if|if
condition|(
name|txn
operator|.
name|getState
argument_list|()
operator|==
name|Txn
operator|.
name|State
operator|.
name|CLOSED
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|//if the transaction is started, then we should auto-abort the uncommitted transaction
if|if
condition|(
name|txn
operator|.
name|getState
argument_list|()
operator|==
name|Txn
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Transaction was not committed or aborted, auto aborting!"
argument_list|)
expr_stmt|;
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|txn
operator|.
name|setState
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
comment|//transaction is now closed!
block|}
block|}
comment|/**      * Keep track of a new operation within the given transaction.      *      * @param txnId      */
specifier|public
name|void
name|trackOperation
parameter_list|(
specifier|final
name|long
name|txnId
parameter_list|)
block|{
specifier|final
name|TxnCounter
name|count
init|=
name|transactions
operator|.
name|get
argument_list|(
name|txnId
argument_list|)
decl_stmt|;
comment|// checkpoint operations do not create a transaction, so we have to check for null here
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|count
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
comment|/**      * Create a new checkpoint. A checkpoint fixes the current database state. All dirty pages      * are written to disk and the journal file is cleaned.      *      * This method is called from      * {@link org.exist.storage.BrokerPool} within pre-defined periods. It      * should not be called from somewhere else. The database needs to      * be in a stable state (all transactions completed, no operations running).      *      * @param switchFiles Indicates whether a new journal file should be started      *      * @throws TransactionException      */
specifier|public
name|void
name|checkpoint
parameter_list|(
specifier|final
name|boolean
name|switchFiles
parameter_list|)
throws|throws
name|TransactionException
block|{
specifier|final
name|long
name|txnId
init|=
name|nextTxnId
operator|++
decl_stmt|;
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|journalManager
operator|.
name|get
argument_list|()
operator|.
name|checkpoint
argument_list|(
name|txnId
argument_list|,
name|switchFiles
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|JournalException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * @Deprecated This mixes concerns and should not be here.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|reindex
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|IOException
block|{
name|broker
operator|.
name|pushSubject
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|reindexCollection
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during reindex: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|.
name|popSubject
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down transaction manager. Uncommitted transactions: "
operator|+
name|transactions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|uncommitted
init|=
name|uncommittedTransaction
argument_list|()
decl_stmt|;
name|shutdown
argument_list|(
name|uncommitted
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|(
specifier|final
name|boolean
name|checkpoint
parameter_list|)
block|{
specifier|final
name|long
name|txnId
init|=
name|nextTxnId
operator|++
decl_stmt|;
if|if
condition|(
name|journalManager
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|journalManager
operator|.
name|get
argument_list|()
operator|.
name|shutdown
argument_list|(
name|txnId
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
name|transactions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|uncommittedTransaction
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|transactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|count
return|;
block|}
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|TxnCounter
argument_list|>
name|entry
range|:
name|transactions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|counter
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found an uncommitted transaction with id "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|". Pending operations: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|counter
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There are uncommitted transactions. A recovery run may be triggered upon restart."
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|void
name|triggerSystemTask
parameter_list|(
specifier|final
name|SystemTask
name|task
parameter_list|)
block|{
name|withLock
argument_list|(
name|broker
lambda|->
block|{
name|systemTaskManager
operator|.
name|triggerSystemTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processSystemTasks
parameter_list|()
block|{
name|withLock
argument_list|(
name|broker
lambda|->
block|{
if|if
condition|(
name|transactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|systemTaskManager
operator|.
name|processTasks
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Active transactions: "
operator|+
name|transactions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run a consumer within a lock on the transaction manager.      * Make sure locks are acquired in the right order.      *      * @param lockedCn A consumer that must be run exclusively      *                 with respect to the TransactionManager      *                 instance      */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
name|void
name|withLock
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|DBBroker
argument_list|>
name|lockedCn
parameter_list|)
block|{
name|withLock
argument_list|(
name|broker
lambda|->
block|{
name|lockedCn
operator|.
name|accept
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run a function within a lock on the transaction manager.      * Make sure locks are acquired in the right order.      *      * @param lockedFn A function that must be run exclusively      *                 with respect to the TransactionManager      *                 instance      *      * @return The result of lockedFn      */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|withLock
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DBBroker
argument_list|,
name|T
argument_list|>
name|lockedFn
parameter_list|)
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|lockedFn
operator|.
name|apply
argument_list|(
name|broker
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Transaction manager failed to acquire broker for running system tasks"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Keep track of the number of operations processed within a transaction.      * This is used to determine if there are any uncommitted transactions      * during shutdown.      */
specifier|protected
specifier|final
specifier|static
class|class
name|TxnCounter
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|increment
parameter_list|()
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

