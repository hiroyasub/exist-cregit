begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_class
specifier|public
class|class
name|SystemTaskManager
block|{
comment|//private final static Logger LOG = LogManager.getLogger(SystemTaskManager.class);
comment|/** 	 * The pending system maintenance tasks of the database instance. 	 */
specifier|private
specifier|final
name|Stack
argument_list|<
name|SystemTask
argument_list|>
name|waitingSystemTasks
init|=
operator|new
name|Stack
argument_list|<
name|SystemTask
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|public
name|SystemTaskManager
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
specifier|public
name|void
name|triggerSystemTask
parameter_list|(
name|SystemTask
name|task
parameter_list|)
block|{
synchronized|synchronized
init|(
name|waitingSystemTasks
init|)
block|{
name|waitingSystemTasks
operator|.
name|push
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|processSystemTasks
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processTasks
parameter_list|()
block|{
comment|//dont run the task if we are shutting down
if|if
condition|(
name|pool
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|waitingSystemTasks
init|)
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
operator|!
name|waitingSystemTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|SystemTask
name|task
init|=
name|waitingSystemTasks
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|afterCheckpoint
argument_list|()
condition|)
block|{
name|pool
operator|.
name|sync
argument_list|(
name|broker
argument_list|,
name|Sync
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
block|}
name|runSystemTask
argument_list|(
name|task
argument_list|,
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|SystemTask
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"System maintenance task reported error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runSystemTask
parameter_list|(
name|SystemTask
name|task
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
block|{
if|if
condition|(
name|SystemTask
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|SystemTask
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running system maintenance task: "
operator|+
name|task
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|execute
argument_list|(
name|broker
argument_list|)
expr_stmt|;
if|if
condition|(
name|SystemTask
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|SystemTask
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"System task completed."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|waitingSystemTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|waitingSystemTasks
init|)
block|{
name|waitingSystemTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

