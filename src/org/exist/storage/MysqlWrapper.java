begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MysqlWrapper
extends|extends
name|DBWrapper
block|{
specifier|public
name|MysqlWrapper
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|DBConnectionPool
name|pool
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|replaceBS
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
name|StringBuffer
name|n
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fname
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|fname
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
name|n
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|n
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|n
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|loadFromFile
parameter_list|(
name|String
name|fname
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkFile
argument_list|(
name|fname
argument_list|)
condition|)
return|return;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|String
name|absolutePath
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// replace backslashes since MySQL interprets them as escape sequences
if|if
condition|(
name|absolutePath
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>
operator|-
literal|1
condition|)
comment|//absolutePath = absolutePath.replace('\\', '/');
name|absolutePath
operator|=
name|replaceBS
argument_list|(
name|absolutePath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"loading data from file '"
operator|+
name|absolutePath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"LOAD DATA INFILE '"
operator|+
name|absolutePath
operator|+
literal|"' IGNORE INTO TABLE "
operator|+
name|table
operator|+
literal|" FIELDS TERMINATED BY '|'"
decl_stmt|;
try|try
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|se
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|removeFile
argument_list|(
name|absolutePath
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|replaceBS
argument_list|(
literal|'\\'
operator|+
literal|"sql"
operator|+
literal|'\\'
operator|+
literal|"mysql.sql"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

