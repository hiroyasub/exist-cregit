begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|structural
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Internal default implementation of the structural index. It uses a single btree, in which  * each key represents a sequence of: [type, qname, documentId, nodeId]. The btree value is just a  * long pointing to the storage address of the actual node in dom.dbx.  */
end_comment

begin_class
specifier|public
class|class
name|NativeStructuralIndexWorker
implements|implements
name|IndexWorker
implements|,
name|StructuralIndex
block|{
specifier|private
name|NativeStructuralIndex
name|index
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentImpl
name|document
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|List
argument_list|<
name|NodeProxy
argument_list|>
argument_list|>
name|pending
init|=
operator|new
name|TreeMap
argument_list|<
name|QName
argument_list|,
name|List
argument_list|<
name|NodeProxy
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|NativeStructuralIndexWorker
parameter_list|(
name|NativeStructuralIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|boolean
name|matchElementsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodeSelector
name|selector
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matchDescendantsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|axis
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|ExtNodeSet
name|contextSet
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Find all nodes in the index matching a given QName. If a match is selected and returned depends on      * the specified {@link org.exist.xquery.NodeSelector}.      *      * This implementation does a scan through the index for a range of document ids in the input set.      * It will be fast for bulk-loading a large node set, but slow if you need to operate on a small      * context set.      *      * @param type      * @param docs      * @param qname      * @param selector      * @return      */
specifier|public
name|NodeSet
name|findElementsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodeSelector
name|selector
parameter_list|)
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
name|docs
operator|.
name|getDocumentCount
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|FindElementsCallback
name|callback
init|=
operator|new
name|FindElementsCallback
argument_list|(
name|type
argument_list|,
name|result
argument_list|,
name|docs
argument_list|,
name|selector
argument_list|)
decl_stmt|;
comment|// scan the document set to find document id ranges to query
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
name|Range
name|next
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|docs
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
name|next
operator|=
operator|new
name|Range
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|next
operator|.
name|end
operator|+
literal|1
operator|==
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
name|next
operator|.
name|end
operator|++
expr_stmt|;
else|else
block|{
name|ranges
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
operator|new
name|Range
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|ranges
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
comment|// for each document id range, scan the index to find matches
for|for
control|(
name|Range
name|range
range|:
name|ranges
control|)
block|{
name|byte
index|[]
name|fromKey
init|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|range
operator|.
name|start
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|range
operator|.
name|end
operator|+
literal|1
argument_list|)
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lock problem while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Query was terminated while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Internal helper class used by      * {@link NativeStructuralIndexWorker#findElementsByTagName(byte, org.exist.dom.DocumentSet, org.exist.dom.QName, org.exist.xquery.NodeSelector)}.      */
specifier|private
specifier|static
class|class
name|Range
block|{
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Range
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|start
expr_stmt|;
block|}
block|}
comment|/**      * Find all descendants (or children) of the specified node set matching the given QName.      *      * This implementation does one btree lookup for every node in contextSet. It offers superior performance      * if the number of nodes in contextSet is rather small compared to the overall number of nodes in      * the index.      */
specifier|public
name|NodeSet
name|findDescendantsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|axis
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
name|docs
operator|.
name|getDocumentCount
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|FindDescendantsCallback
name|callback
init|=
operator|new
name|FindDescendantsCallback
argument_list|(
name|type
argument_list|,
name|axis
argument_list|,
name|contextId
argument_list|,
name|result
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeProxy
name|ancestor
range|:
name|contextSet
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|ancestor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|NodeId
name|ancestorId
init|=
name|ancestor
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|callback
operator|.
name|setAncestor
argument_list|(
name|doc
argument_list|,
name|ancestor
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fromKey
decl_stmt|,
name|toKey
decl_stmt|;
if|if
condition|(
name|ancestorId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|fromKey
operator|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|toKey
operator|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromKey
operator|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|ancestorId
argument_list|)
expr_stmt|;
name|toKey
operator|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|ancestorId
operator|.
name|nextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|index
operator|.
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lock problem while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|updateNoSort
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|NodeSet
name|findAncestorsByTagName
parameter_list|(
name|byte
name|type
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|axis
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
name|docs
operator|.
name|getDocumentCount
argument_list|()
argument_list|,
literal|256
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeProxy
name|descendant
range|:
name|contextSet
control|)
block|{
name|NodeId
name|parentId
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
condition|)
name|parentId
operator|=
name|descendant
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
else|else
name|parentId
operator|=
name|descendant
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
expr_stmt|;
name|DocumentImpl
name|doc
init|=
name|descendant
operator|.
name|getDocument
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentId
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|computeKey
argument_list|(
name|type
argument_list|,
name|qname
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|parentId
argument_list|)
decl_stmt|;
name|long
name|address
init|=
name|index
operator|.
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
operator|-
literal|1
condition|)
block|{
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|parentId
argument_list|,
name|type
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|address
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|storedNode
operator|.
name|deepCopyContext
argument_list|(
name|descendant
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
name|storedNode
operator|.
name|copyContext
argument_list|(
name|descendant
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatches
argument_list|(
name|descendant
argument_list|)
expr_stmt|;
block|}
comment|// stop after first iteration if we are on the self axis
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|PARENT_AXIS
condition|)
break|break;
comment|// continue with the parent of the parent
name|parentId
operator|=
name|parentId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lock problem while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while searching structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|sort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
class|class
name|FindElementsCallback
implements|implements
name|BTreeCallback
block|{
name|byte
name|type
decl_stmt|;
name|DocumentSet
name|docs
decl_stmt|;
name|NewArrayNodeSet
name|result
decl_stmt|;
name|NodeSelector
name|selector
decl_stmt|;
name|FindElementsCallback
parameter_list|(
name|byte
name|type
parameter_list|,
name|NewArrayNodeSet
name|result
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSelector
name|selector
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|byte
index|[]
name|key
init|=
name|value
operator|.
name|getData
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|key
argument_list|,
name|pointer
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|readDocId
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|selector
operator|==
literal|null
condition|)
block|{
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|type
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|pointer
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeProxy
name|storedNode
init|=
name|selector
operator|.
name|match
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedNode
operator|!=
literal|null
condition|)
block|{
name|storedNode
operator|.
name|setNodeType
argument_list|(
name|type
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|setInternalAddress
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
class|class
name|FindDescendantsCallback
implements|implements
name|BTreeCallback
block|{
name|int
name|axis
decl_stmt|;
name|byte
name|type
decl_stmt|;
name|NodeProxy
name|ancestor
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|int
name|contextId
decl_stmt|;
name|NewArrayNodeSet
name|result
decl_stmt|;
name|FindDescendantsCallback
parameter_list|(
name|byte
name|type
parameter_list|,
name|int
name|axis
parameter_list|,
name|int
name|contextId
parameter_list|,
name|NewArrayNodeSet
name|result
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|axis
operator|=
name|axis
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
name|void
name|setAncestor
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeProxy
name|ancestor
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|ancestor
operator|=
name|ancestor
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
name|pointer
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|int
name|relation
init|=
name|nodeId
operator|.
name|computeRelation
argument_list|(
name|ancestor
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|match
operator|=
operator|(
operator|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|)
operator|||
operator|(
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|)
operator|)
operator|&&
operator|(
name|relation
operator|==
name|NodeId
operator|.
name|IS_CHILD
operator|)
operator|)
operator|||
operator|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|)
operator|&&
operator|(
operator|(
name|relation
operator|==
name|NodeId
operator|.
name|IS_DESCENDANT
operator|)
operator|||
operator|(
name|relation
operator|==
name|NodeId
operator|.
name|IS_CHILD
operator|)
operator|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|type
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|pointer
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|storedNode
operator|.
name|deepCopyContext
argument_list|(
name|ancestor
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
name|storedNode
operator|.
name|copyContext
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatches
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|NativeStructuralIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|setDocument
argument_list|(
name|doc
argument_list|,
name|StreamListener
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|node
return|;
block|}
specifier|private
name|NativeStructuralStreamListener
name|listener
init|=
operator|new
name|NativeStructuralStreamListener
argument_list|()
decl_stmt|;
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
comment|// not applicable to this index
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|processPending
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|removeDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|removeSome
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeSome
parameter_list|()
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
try|try
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|List
argument_list|<
name|NodeProxy
argument_list|>
argument_list|>
name|entry
range|:
name|pending
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|qname
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeProxy
argument_list|>
name|nodes
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeProxy
name|proxy
range|:
name|nodes
control|)
block|{
name|NodeId
name|nodeId
init|=
name|proxy
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|computeKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|qname
argument_list|,
name|document
operator|.
name|getDocId
argument_list|()
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|removeValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to lock structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught while writing to structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeDocument
parameter_list|(
name|DocumentImpl
name|docToRemove
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|btree
operator|==
literal|null
condition|)
return|return;
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|getQNamesForDoc
argument_list|(
name|docToRemove
argument_list|)
decl_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|byte
index|[]
name|fromKey
init|=
name|computeKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|qname
argument_list|,
name|docToRemove
operator|.
name|getDocId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|qname
argument_list|,
name|docToRemove
operator|.
name|getDocId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|btree
operator|.
name|remove
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to lock structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught while removing structural index for document "
operator|+
name|docToRemove
operator|.
name|getURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
name|removeQNamesForDoc
argument_list|(
name|docToRemove
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeQNamesForDoc
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|byte
index|[]
name|fromKey
init|=
name|computeDocKey
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeDocKey
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|btree
operator|.
name|remove
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to lock structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught while reading structural index for document "
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|QName
argument_list|>
name|getQNamesForDoc
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|btree
operator|==
literal|null
condition|)
return|return
name|qnames
return|;
name|byte
index|[]
name|fromKey
init|=
name|computeDocKey
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeDocKey
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|BTreeCallback
argument_list|()
block|{
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|QName
name|qname
init|=
name|readQName
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|qnames
operator|.
name|add
argument_list|(
name|qname
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to lock structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught while reading structural index for document "
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
return|return
name|qnames
return|;
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|removeDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|private
name|void
name|addNode
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|document
operator|.
name|getDocId
argument_list|()
operator|!=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Document id ('"
operator|+
name|document
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') and proxy id ('"
operator|+
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|+
literal|"') differ !"
argument_list|)
throw|;
block|}
comment|//Is this qname already pending ?
name|List
argument_list|<
name|NodeProxy
argument_list|>
name|buf
init|=
name|pending
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
comment|//Create a node list
name|buf
operator|=
operator|new
name|ArrayList
argument_list|<
name|NodeProxy
argument_list|>
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|//Add node's proxy to the list
name|buf
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the map of pending entries and store them into the btree.      */
specifier|private
name|void
name|processPending
parameter_list|()
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
try|try
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|List
argument_list|<
name|NodeProxy
argument_list|>
argument_list|>
name|entry
range|:
name|pending
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|qname
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeProxy
argument_list|>
name|nodes
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeProxy
name|proxy
range|:
name|nodes
control|)
block|{
name|NodeId
name|nodeId
init|=
name|proxy
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|computeKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|qname
argument_list|,
name|document
operator|.
name|getDocId
argument_list|()
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|addValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|,
name|computeValue
argument_list|(
name|proxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Value
name|docKey
init|=
operator|new
name|Value
argument_list|(
name|computeDocKey
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|,
name|document
operator|.
name|getDocId
argument_list|()
argument_list|,
name|qname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|btree
operator|.
name|findValue
argument_list|(
name|docKey
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|index
operator|.
name|btree
operator|.
name|addValue
argument_list|(
name|docKey
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to lock structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// } catch (ReadOnlyException e) {
comment|//    NativeStructuralIndex.LOG.warn("Read-only error: " + e.getMessage(), e);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NativeStructuralIndex
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught while writing to structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|computeKey
parameter_list|(
name|byte
name|type
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|documentId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|sym
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|nsSym
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|9
operator|+
name|nodeId
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|type
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|sym
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|nsSym
argument_list|,
name|data
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|documentId
argument_list|,
name|data
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|9
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|computeKey
parameter_list|(
name|byte
name|type
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|documentId
parameter_list|)
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|sym
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|nsSym
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|9
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|type
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|sym
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|nsSym
argument_list|,
name|data
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|documentId
argument_list|,
name|data
argument_list|,
literal|5
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|computeDocKey
parameter_list|(
name|byte
name|type
parameter_list|,
name|int
name|documentId
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|sym
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|nsSym
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|documentId
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
name|type
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|sym
argument_list|,
name|data
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|nsSym
argument_list|,
name|data
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|computeDocKey
parameter_list|(
name|int
name|documentId
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|documentId
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|long
name|computeValue
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
comment|// dirty hack: encode the extra number of bits needed for the node id into the
comment|// storage address. this way, everything fits into the long address and
comment|// we don't need to change the btree.
name|long
name|address
init|=
name|proxy
operator|.
name|getInternalAddress
argument_list|()
decl_stmt|;
name|short
name|nodeIdLen
init|=
operator|(
name|short
operator|)
operator|(
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|.
name|units
argument_list|()
operator|%
literal|8
operator|)
decl_stmt|;
return|return
name|address
operator||
operator|(
operator|(
name|long
operator|)
operator|(
name|nodeIdLen
operator|<<
literal|24
operator|)
operator|&
literal|0xFF000000L
operator|)
return|;
block|}
specifier|private
name|int
name|readDocId
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|ByteConversion
operator|.
name|byteToIntH
argument_list|(
name|key
argument_list|,
literal|5
argument_list|)
return|;
block|}
specifier|private
name|NodeId
name|readNodeId
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
comment|// extra number of bits of the node id is encoded in the long address
name|short
name|bits
init|=
operator|(
name|short
operator|)
operator|(
operator|(
name|value
operator|>>>
literal|24
operator|)
operator|&
literal|0xFFL
operator|)
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|0
condition|)
name|bits
operator|=
literal|8
expr_stmt|;
comment|// compute total number of bits for node id
name|int
name|units
init|=
operator|(
name|key
operator|.
name|length
operator|-
literal|10
operator|)
operator|*
literal|8
operator|+
name|bits
decl_stmt|;
return|return
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|units
argument_list|,
name|key
argument_list|,
literal|9
argument_list|)
return|;
block|}
specifier|private
name|QName
name|readQName
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
specifier|final
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|byte
name|type
init|=
name|key
index|[
literal|5
index|]
decl_stmt|;
name|short
name|sym
init|=
name|ByteConversion
operator|.
name|byteToShortH
argument_list|(
name|key
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|short
name|nsSym
init|=
name|ByteConversion
operator|.
name|byteToShortH
argument_list|(
name|key
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|symbols
operator|.
name|getName
argument_list|(
name|sym
argument_list|)
argument_list|,
name|symbols
operator|.
name|getNamespace
argument_list|(
name|nsSym
argument_list|)
argument_list|)
decl_stmt|;
name|qname
operator|.
name|setNameType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|qname
return|;
block|}
specifier|private
class|class
name|NativeStructuralStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|private
name|NativeStructuralStreamListener
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|StreamListener
operator|.
name|STORE
operator|||
name|mode
operator|==
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
condition|)
block|{
name|short
name|indexType
init|=
name|RangeIndexSpec
operator|.
name|NO_INDEX
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getIndexType
argument_list|()
operator|!=
name|RangeIndexSpec
operator|.
name|NO_INDEX
condition|)
name|indexType
operator|=
operator|(
name|short
operator|)
name|element
operator|.
name|getIndexType
argument_list|()
expr_stmt|;
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|element
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setIndexType
argument_list|(
name|indexType
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|StreamListener
operator|.
name|STORE
operator|||
name|mode
operator|==
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
condition|)
block|{
name|short
name|indexType
init|=
name|RangeIndexSpec
operator|.
name|NO_INDEX
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|getIndexType
argument_list|()
operator|!=
name|RangeIndexSpec
operator|.
name|NO_INDEX
condition|)
name|indexType
operator|=
operator|(
name|short
operator|)
name|attrib
operator|.
name|getIndexType
argument_list|()
expr_stmt|;
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attrib
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setIndexType
argument_list|(
name|indexType
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|NativeStructuralIndexWorker
operator|.
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

