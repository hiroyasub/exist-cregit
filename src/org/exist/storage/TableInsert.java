begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2000,  Wolfgang Meier (meier@ifs.tu-darmstadt.de)  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This class provides batch processing of inserts. Mysql allows  * to add multiple rows in one insert statement. It makes inserts  * very fast. I don't know if any other database supports this  * function, but it comes very handy here.  *  * The two static variables MAX_INSERTS and MAX_BUF_LEN control  * how much data is collected until the actual insert is done.  * MAX_INSERTS says how many rows should be inserted at a time.  * MAX_BUF_LEN contains the maximum length of the sql command  * buffer. Please note that the current version of the mm.mysql  * driver has a bug here. Normally the maximum buffer size is  * determined by a mysqld server variable called max_allowed_packet.  * With the current driver this does not work and the  * variable is set internally to 65000.  *  * I manually increased this value to 1000000 in the drivers  * source code. If you run into problems, please use the mm.mysql  * jar package contained in my distribution.  */
end_comment

begin_class
specifier|public
class|class
name|TableInsert
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|MAX_INSERTS
init|=
literal|5000
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MAX_BUF_LEN
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|TableInsert
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|DBConnectionPool
name|pool
decl_stmt|;
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|protected
name|StringBuffer
name|sql
decl_stmt|;
specifier|protected
name|String
name|sqlStart
decl_stmt|;
specifier|protected
name|String
name|table
decl_stmt|;
specifier|protected
name|Statement
name|stmt
decl_stmt|;
specifier|protected
name|boolean
name|direct
init|=
literal|false
decl_stmt|;
specifier|public
name|TableInsert
parameter_list|(
name|DBConnectionPool
name|pool
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|sqlStart
parameter_list|,
name|boolean
name|directInsert
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|sql
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|sqlStart
operator|=
name|sqlStart
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|directInsert
expr_stmt|;
name|Connection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|Object
index|[]
name|items
parameter_list|)
block|{
if|if
condition|(
name|direct
condition|)
block|{
name|directInsert
argument_list|(
name|items
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
operator|==
name|MAX_INSERTS
operator|||
name|sql
operator|.
name|length
argument_list|()
operator|>
name|MAX_BUF_LEN
condition|)
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|sql
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sql
operator|.
name|append
argument_list|(
literal|", ("
argument_list|)
expr_stmt|;
else|else
name|sql
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|String
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|items
index|[
name|i
index|]
operator|instanceof
name|String
condition|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|temp
operator|=
operator|(
name|String
operator|)
name|items
index|[
name|i
index|]
expr_stmt|;
name|temp
operator|=
name|temp
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'~'
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|sql
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
name|sql
operator|.
name|append
argument_list|(
name|items
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|sql
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|//Connection con = pool.get();
name|String
name|cmd
init|=
name|sqlStart
operator|+
name|sql
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
comment|//LOG.info(cmd);
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sql
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
comment|//pool.release(con);
block|}
specifier|protected
name|void
name|directInsert
parameter_list|(
name|Object
index|[]
name|items
parameter_list|)
block|{
name|StringBuffer
name|cmd
init|=
operator|new
name|StringBuffer
argument_list|(
name|sqlStart
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|String
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
if|if
condition|(
name|items
index|[
name|i
index|]
operator|instanceof
name|String
condition|)
block|{
name|cmd
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|temp
operator|=
operator|(
name|String
operator|)
name|items
index|[
name|i
index|]
expr_stmt|;
name|temp
operator|=
name|temp
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'~'
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|append
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
name|cmd
operator|.
name|append
argument_list|(
name|items
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|cmd
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|cmd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|cmd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

