begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2000,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ElementPool
block|{
class|class
name|CachedElementSet
block|{
name|DocumentSet
name|documents
decl_stmt|;
name|NodeSet
name|nodes
decl_stmt|;
name|String
name|elementName
decl_stmt|;
specifier|public
name|CachedElementSet
parameter_list|(
name|DocumentSet
name|documents
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|documents
operator|=
name|documents
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|elementName
operator|=
name|name
expr_stmt|;
block|}
block|}
specifier|protected
name|TreeMap
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|protected
name|long
name|lastAccess
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|LIMIT
decl_stmt|;
specifier|protected
name|int
name|TIMEOUT
decl_stmt|;
specifier|private
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|ElementPool
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ElementPool
parameter_list|()
block|{
name|LIMIT
operator|=
literal|10
expr_stmt|;
name|TIMEOUT
operator|=
literal|300000
expr_stmt|;
block|}
specifier|public
name|ElementPool
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|LIMIT
operator|=
name|limit
expr_stmt|;
name|TIMEOUT
operator|=
literal|300000
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
name|LIMIT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleaning up ..."
argument_list|)
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|String
name|name
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|j
operator|<
name|LIMIT
operator|/
literal|4
condition|;
name|j
operator|++
control|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|CachedElementSet
name|cache
init|=
operator|new
name|CachedElementSet
argument_list|(
name|docs
argument_list|,
name|nodes
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|elementName
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleaning up element pool .."
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|inCache
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
comment|//checkLastAccess();
name|CachedElementSet
name|cache
init|=
operator|(
name|CachedElementSet
operator|)
name|map
operator|.
name|get
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|cache
operator|.
name|documents
operator|.
name|contains
argument_list|(
name|docs
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// if document set in cache is bigger than 2*docs, return false
comment|//return (docs.getLength() * 2> cache.documents.getLength());
return|return
literal|false
return|;
block|}
specifier|public
name|NodeSet
name|getNodeSet
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
comment|//checkLastAccess();
name|CachedElementSet
name|cache
init|=
operator|(
name|CachedElementSet
operator|)
name|map
operator|.
name|get
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|cache
operator|.
name|documents
operator|.
name|contains
argument_list|(
name|docs
argument_list|)
condition|)
return|return
name|cache
operator|.
name|nodes
return|;
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|checkLastAccess
parameter_list|()
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastAccess
operator|>
name|TIMEOUT
condition|)
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastAccess
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

