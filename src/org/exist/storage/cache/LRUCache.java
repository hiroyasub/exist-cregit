begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Long2ObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|SequencedLongHashMap
import|;
end_import

begin_comment
comment|/**  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|LRUCache
implements|implements
name|Cache
block|{
specifier|private
name|int
name|max
decl_stmt|;
specifier|private
name|SequencedLongHashMap
name|map
decl_stmt|;
specifier|private
name|int
name|hits
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|misses
init|=
literal|0
decl_stmt|;
specifier|public
name|LRUCache
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|map
operator|=
operator|new
name|SequencedLongHashMap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#add(org.exist.storage.cache.Cacheable, int) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|Cacheable
name|item
parameter_list|,
name|int
name|initialRefCount
parameter_list|)
block|{
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#add(org.exist.storage.cache.Cacheable) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|Cacheable
name|item
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
name|max
condition|)
block|{
name|removeOne
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#get(org.exist.storage.cache.Cacheable) 	 */
specifier|public
name|Cacheable
name|get
parameter_list|(
name|Cacheable
name|item
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#get(long) 	 */
specifier|public
name|Cacheable
name|get
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|Cacheable
name|obj
init|=
operator|(
name|Cacheable
operator|)
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
operator|++
name|misses
expr_stmt|;
else|else
operator|++
name|hits
expr_stmt|;
return|return
name|obj
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#remove(org.exist.storage.cache.Cacheable) 	 */
specifier|public
name|void
name|remove
parameter_list|(
name|Cacheable
name|item
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#flush() 	 */
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|Cacheable
name|next
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|valueIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|next
operator|=
operator|(
name|Cacheable
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|next
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.storage.cache.Cache#hasDirtyItems()      */
specifier|public
name|boolean
name|hasDirtyItems
parameter_list|()
block|{
name|Cacheable
name|next
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|valueIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|next
operator|=
operator|(
name|Cacheable
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|isDirty
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#getBuffers() 	 */
specifier|public
name|int
name|getBuffers
parameter_list|()
block|{
return|return
name|max
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#getUsedBuffers() 	 */
specifier|public
name|int
name|getUsedBuffers
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#getHits() 	 */
specifier|public
name|int
name|getHits
parameter_list|()
block|{
return|return
name|hits
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#getFails() 	 */
specifier|public
name|int
name|getFails
parameter_list|()
block|{
return|return
name|misses
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.cache.Cache#setFileName(java.lang.String) 	 */
specifier|public
name|void
name|setFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
block|}
specifier|private
specifier|final
name|void
name|removeOne
parameter_list|(
name|Cacheable
name|item
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
do|do
block|{
name|Cacheable
name|cached
init|=
operator|(
name|Cacheable
operator|)
name|map
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|cached
operator|.
name|allowUnload
argument_list|()
operator|&&
name|cached
operator|.
name|getKey
argument_list|()
operator|!=
name|item
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|cached
operator|.
name|sync
argument_list|()
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|cached
operator|.
name|getKey
argument_list|()
argument_list|,
name|cached
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|removed
condition|)
do|;
block|}
block|}
end_class

end_unit

