begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist Open Source Native XML Database  * Copyright (C) 2000-01,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public  * License along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Base class for all node set implementations returned by most  * xpath expressions. It implements NodeList plus some additional  * methods needed by the xpath engine.  *  * There are three classes extending NodeSet: NodeIDSet, ArraySet  * and VirtualNodeSet. Depending on the context each of these  * implementations has its advantages and drawbacks. ArraySet  * uses a sorted array and binary search, while NodeIDSet is based  * on a HashSet. VirtualNodeSet is specifically used for steps like  * descendant::* etc..  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|NodeSet
implements|implements
name|NodeList
block|{
specifier|public
specifier|final
specifier|static
name|int
name|ANCESTOR
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DESCENDANT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
name|NodeSet
name|EMPTY_SET
init|=
operator|new
name|EmptyNodeSet
argument_list|()
decl_stmt|;
specifier|public
specifier|abstract
name|Iterator
name|iterator
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|doc
operator|==
name|doc
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeList
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
specifier|public
name|void
name|remove
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|int
name|getLength
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
function_decl|;
comment|//public abstract int getLast();
comment|/** 	 * Check if node has a parent contained in this node set. 	 * If directParent is true, only direct ancestors are considered. 	 */
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|)
block|{
return|return
name|nodeHasParent
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|directParent
parameter_list|)
block|{
return|return
name|nodeHasParent
argument_list|(
name|p
operator|.
name|doc
argument_list|,
name|p
operator|.
name|gid
argument_list|,
name|directParent
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|nodeHasParent
argument_list|(
name|p
operator|.
name|doc
argument_list|,
name|p
operator|.
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|nodeHasParent
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** 	 * Check if node has a parent contained in this node set. 	 * 	 * If directParent is true, only immediate ancestors are considered. 	 * Otherwise the method will call itself recursively for the node's 	 * parents. 	 * 	 * If includeSelf is true, the method returns also true if 	 * the node itself is contained in the node set. 	 */
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|<
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|includeSelf
operator|&&
name|contains
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
name|level
operator|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
expr_stmt|;
comment|// calculate parent's gid
name|long
name|pid
init|=
name|XMLUtil
operator|.
name|getParentId
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
decl_stmt|;
name|includeSelf
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|)
condition|)
return|return
literal|true
return|;
if|else if
condition|(
name|directParent
condition|)
return|return
literal|false
return|;
else|else
return|return
name|nodeHasParent
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
name|level
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|ArraySet
name|getChildren
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|NodeProxy
name|n
decl_stmt|,
name|p
decl_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|DESCENDANT
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|.
name|nodeHasParent
argument_list|(
name|n
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ANCESTOR
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|p
operator|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|n
operator|.
name|doc
argument_list|,
name|n
operator|.
name|gid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|ArraySet
name|getDescendants
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|NodeProxy
name|n
decl_stmt|,
name|p
decl_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|DESCENDANT
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|.
name|nodeHasParent
argument_list|(
name|n
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ANCESTOR
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|p
operator|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|n
operator|.
name|doc
argument_list|,
name|n
operator|.
name|gid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Search for a node contained in this node set, which is an 	 * ancestor of the argument node. 	 * If directParent is true, only immediate ancestors are considered. 	 */
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|)
block|{
return|return
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** 	 * Search for a node contained in this node set, which is an 	 * ancestor of the argument node. 	 * If directParent is true, only immediate ancestors are considered. 	 * If includeSelf is true, the method returns true even if 	 * the node itself is contained in the node set. 	 */
specifier|protected
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|<
literal|1
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|includeSelf
operator|&&
name|contains
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
condition|)
return|return
name|get
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
return|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
name|level
operator|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
expr_stmt|;
comment|// calculate parent's gid
name|long
name|pid
init|=
name|XMLUtil
operator|.
name|getParentId
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|)
condition|)
return|return
name|get
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|)
return|;
if|else if
condition|(
name|directParent
condition|)
return|return
literal|null
return|;
else|else
return|return
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
name|level
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|parentWithChild
argument_list|(
name|proxy
operator|.
name|doc
argument_list|,
name|proxy
operator|.
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|getParents
parameter_list|()
block|{
name|ArraySet
name|parents
init|=
operator|new
name|ArraySet
argument_list|(
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|long
name|pid
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// calculate parent's gid
name|pid
operator|=
name|XMLUtil
operator|.
name|getParentId
argument_list|(
name|p
operator|.
name|doc
argument_list|,
name|p
operator|.
name|gid
argument_list|)
expr_stmt|;
if|if
condition|(
name|pid
operator|>
operator|-
literal|1
condition|)
name|parents
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|p
operator|.
name|doc
argument_list|,
name|pid
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parents
return|;
block|}
specifier|public
name|NodeSet
name|intersection
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeIDSet
name|r
init|=
operator|new
name|NodeIDSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|l
decl_stmt|,
name|p
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|l
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|l
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|l
argument_list|)
operator|&&
operator|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|l
argument_list|)
operator|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|public
name|NodeSet
name|union
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeIDSet
name|result
init|=
operator|new
name|NodeIDSet
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|NodeProxy
name|p
decl_stmt|,
name|c
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|c
operator|=
name|other
operator|.
name|get
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|c
operator|.
name|addMatches
argument_list|(
name|p
operator|.
name|matches
argument_list|)
expr_stmt|;
block|}
else|else
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|NodeSet
name|subtract
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeIDSet
name|result
init|=
operator|new
name|NodeIDSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

