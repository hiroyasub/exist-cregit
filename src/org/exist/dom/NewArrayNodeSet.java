begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id: ExtArrayNodeSet.java 7654 2008-04-22 09:07:04Z wolfgang_m $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A fast node set implementation, based on arrays to store nodes and documents.  *  * The class uses an array to store all nodes belonging to one document. Another sorted  * array is used to keep track of the document ids. For each document, we maintain an inner  * class, Part, which stores the array of nodes.  *  * Nodes are just appended to the nodes array. No order is guaranteed and calls to  * get/contains may fail although a node is present in the array (get/contains  * do a binary search and thus assume that the set is sorted). Also, duplicates  * are allowed. If you have to ensure that calls to get/contains return valid  * results at any time and no duplicates occur, use class  * {@link org.exist.dom.AVLTreeNodeSet}.  *  * Use this class, if you can either ensure that items are added in order, or  * no calls to contains/get are required during the creation phase. Only after  * a call to one of the iterator methods, the set will get sorted and  * duplicates removed.  *  * @author Wolfgang<wolfgang@exist-db.org>  * @since 0.9.3  */
end_comment

begin_class
specifier|public
class|class
name|NewArrayNodeSet
extends|extends
name|AbstractNodeSet
implements|implements
name|ExtNodeSet
implements|,
name|DocumentSet
block|{
specifier|private
specifier|final
specifier|static
name|int
name|INITIAL_DOC_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
name|int
name|documentIds
index|[]
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
specifier|private
name|int
name|documentOffsets
index|[]
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
specifier|private
name|int
name|documentLengths
index|[]
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
specifier|private
name|int
name|documentCount
init|=
literal|0
decl_stmt|;
specifier|private
name|NodeProxy
name|nodes
index|[]
decl_stmt|;
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|isSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|hasOne
init|=
literal|false
decl_stmt|;
specifier|protected
name|NodeProxy
name|lastAdded
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|state
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentSet
name|cachedDocuments
init|=
literal|null
decl_stmt|;
comment|//  used to keep track of the type of added items.
specifier|private
name|int
name|itemType
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
comment|/**      * Creates a new<code>ExtArrayNodeSet</code> instance.      *      */
specifier|public
name|NewArrayNodeSet
parameter_list|()
block|{
name|nodes
operator|=
operator|new
name|NodeProxy
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
block|}
comment|/**      * Creates a new<code>ExtArrayNodeSet</code> instance.      *      * @param initialDocsCount an<code>int</code> value      * @param initialArraySize an<code>int</code> value      */
specifier|public
name|NewArrayNodeSet
parameter_list|(
name|int
name|initialDocsCount
parameter_list|,
name|int
name|initialArraySize
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|NodeProxy
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
block|}
comment|/**      * Creates a new<code>ExtArrayNodeSet</code> instance.      *      * @param initialArraySize an<code>int</code> value      */
specifier|public
name|NewArrayNodeSet
parameter_list|(
name|int
name|initialArraySize
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|NodeProxy
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
block|}
comment|/**      * The method<code>reset</code>      *      */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|nodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|documentCount
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|state
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * The method<code>isEmpty</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|size
operator|==
literal|0
operator|)
return|;
block|}
comment|/**      * The method<code>hasOne</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
name|hasOne
return|;
block|}
specifier|private
name|void
name|ensureCapacity
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
name|nodes
operator|.
name|length
condition|)
block|{
name|int
name|nsize
init|=
name|size
operator|<<
literal|1
decl_stmt|;
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|nsize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|temp
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>add</code>      *      * @param proxy a<code>NodeProxy</code> value      */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasOne
condition|)
block|{
if|if
condition|(
name|isSorted
condition|)
block|{
name|hasOne
operator|=
name|get
argument_list|(
name|proxy
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|hasOne
operator|=
name|lastAdded
operator|==
literal|null
operator|||
name|lastAdded
operator|.
name|compareTo
argument_list|(
name|proxy
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|hasOne
operator|=
literal|true
expr_stmt|;
block|}
name|ensureCapacity
argument_list|()
expr_stmt|;
name|nodes
index|[
name|size
operator|++
index|]
operator|=
name|proxy
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|setHasChanged
argument_list|()
expr_stmt|;
name|checkItemType
argument_list|(
name|proxy
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
name|proxy
expr_stmt|;
block|}
comment|/**      * Add a new node to the set. If a new array of nodes has to be allocated      * for the document, use the sizeHint parameter to determine the size of      * the newly allocated array. This will overwrite the default array size.      *      * If the size hint is correct, no further reallocations will be required.      */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|int
name|sizeHint
parameter_list|)
block|{
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|//    public void addAll(Sequence other) throws XPathException {
comment|//        if (other instanceof AbstractNodeSet)
comment|//            addAll((NodeSet) other);
comment|//        else
comment|//            super.addAll(other);
comment|//    }
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.NodeSet#addAll(org.exist.dom.NodeSet)      */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|other
operator|.
name|hasOne
argument_list|()
condition|)
block|{
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|other
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkItemType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|NODE
operator|||
name|itemType
operator|==
name|type
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|itemType
operator|=
name|type
expr_stmt|;
block|}
else|else
block|{
name|itemType
operator|=
name|Type
operator|.
name|NODE
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>getItemType</code>      *      * @return an<code>int</code> value      */
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|itemType
return|;
block|}
specifier|private
name|void
name|setHasChanged
parameter_list|()
block|{
name|state
operator|=
operator|(
name|state
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|state
operator|=
literal|0
else|:
name|state
operator|+
literal|1
operator|)
expr_stmt|;
name|cachedDocuments
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|int
name|findDoc
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
return|return
name|findDoc
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|findDoc
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|documentCount
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midVal
init|=
name|documentIds
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|midVal
operator|<
name|docId
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
if|else if
condition|(
name|midVal
operator|>
name|docId
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
comment|// key found
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
comment|// key not found.
block|}
comment|/**      * The method<code>getSizeHint</code>      *      * @param doc a<code>DocumentImpl</code> value      * @return an<code>int</code> value      */
specifier|public
name|int
name|getSizeHint
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
name|int
name|idx
init|=
name|findDoc
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|idx
operator|<
literal|0
condition|?
name|Constants
operator|.
name|NO_SIZE_HINT
else|:
name|documentLengths
index|[
name|idx
index|]
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.NodeSet#iterator()      */
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|NewArrayIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.xquery.value.Sequence#iterate()      */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
operator|new
name|NewArrayIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.AbstractNodeSet#unorderedIterator()      */
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|NewArrayIterator
argument_list|()
return|;
block|}
specifier|public
name|ByDocumentIterator
name|iterateByDocument
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|NewDocIterator
argument_list|()
return|;
block|}
specifier|private
name|NodeProxy
name|get
parameter_list|(
name|int
name|docIdx
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
name|int
name|low
init|=
name|documentOffsets
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|high
init|=
name|low
operator|+
operator|(
name|documentLengths
index|[
name|docIdx
index|]
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|mid
decl_stmt|,
name|cmp
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|nodes
index|[
name|mid
index|]
expr_stmt|;
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|p
return|;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.xquery.value.Sequence#getLength()      */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
comment|// sort to remove duplicates
return|return
name|size
return|;
block|}
comment|//TODO : evaluate both semantics
specifier|public
name|int
name|getItemCount
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
comment|// sort to remove duplicates
return|return
name|size
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.NodeList#item(int)      */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getNode
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.NodeSet#get(int)      */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
name|pos
operator|>=
name|size
condition|)
return|return
literal|null
return|;
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.NodeSet#contains(org.exist.dom.NodeProxy)      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|findDoc
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|get
argument_list|(
name|idx
argument_list|,
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.NodeSet#get(org.exist.dom.NodeProxy)      */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|findDoc
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|get
argument_list|(
name|idx
argument_list|,
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|findDoc
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|get
argument_list|(
name|idx
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.xquery.value.Sequence#itemAt(int)      */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**      * The method<code>getDescendantsInSet</code>      *      * @param al a<code>NodeSet</code> value      * @param childOnly a<code>boolean</code> value      * @param includeSelf a<code>boolean</code> value      * @param mode an<code>int</code> value      * @param contextId an<code>int</code> value      * @return a<code>NodeSet</code> value      */
specifier|public
name|NodeSet
name|getDescendantsInSet
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|boolean
name|childOnly
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|node
decl_stmt|;
name|int
name|docIdx
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|al
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|docIdx
operator|=
name|findDoc
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|docIdx
operator|>
operator|-
literal|1
condition|)
block|{
name|getDescendantsInSet
argument_list|(
name|docIdx
argument_list|,
name|result
argument_list|,
name|node
argument_list|,
name|childOnly
argument_list|,
name|includeSelf
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Find all nodes in the current set being children or descendants of      * the given parent node.      *      * @param result the node set to which matching nodes will be appended.      * @param parent the parent node to search for.      * @param childOnly only include child nodes, not descendant nodes      * @param includeSelf include the self:: axis      * @param mode      * @param contextId      */
specifier|private
name|NodeSet
name|getDescendantsInSet
parameter_list|(
name|int
name|docIdx
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|NodeProxy
name|parent
parameter_list|,
name|boolean
name|childOnly
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|NodeProxy
name|p
decl_stmt|;
name|NodeId
name|parentId
init|=
name|parent
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// document nodes are treated specially
if|if
condition|(
name|parentId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|int
name|end
init|=
name|documentOffsets
index|[
name|docIdx
index|]
operator|+
name|documentLengths
index|[
name|docIdx
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|documentOffsets
index|[
name|docIdx
index|]
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|add
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
block|{
name|add
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|includeSelf
condition|)
block|{
name|add
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|add
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
comment|//array[i].addContextNode(contextId, parent);
name|nodes
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|nodes
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
comment|//parent.addContextNode(contextId, array[i]);
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addMatches
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// do a binary search to pick some node in the range of valid
comment|// child ids
name|int
name|low
init|=
name|documentOffsets
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|high
init|=
name|low
operator|+
operator|(
name|documentLengths
index|[
name|docIdx
index|]
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|end
init|=
name|low
operator|+
name|documentLengths
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|mid
init|=
name|low
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|nodes
index|[
name|mid
index|]
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
break|break;
comment|// found a child node, break out.
block|}
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
block|{
return|return
name|result
return|;
comment|// no node found
block|}
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
name|documentOffsets
index|[
name|docIdx
index|]
operator|&&
name|nodes
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
operator|--
name|mid
expr_stmt|;
block|}
comment|// walk through the range of child nodes we found
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
block|{
name|add
operator|=
name|cmp
operator|==
name|NodeId
operator|.
name|IS_CHILD
expr_stmt|;
block|}
if|else if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
block|{
name|add
operator|=
name|includeSelf
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
comment|//array[i].addContextNode(contextId, parent);
name|nodes
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|nodes
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
comment|//parent.addContextNode(contextId, array[i]);
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addMatches
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * The method<code>hasDescendantsInSet</code>      *      * @param doc a<code>DocumentImpl</code> value      * @param ancestorId a<code>NodeId</code> value      * @param includeSelf a<code>boolean</code> value      * @param contextId an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
specifier|public
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|ancestorId
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|docIdx
init|=
name|findDoc
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|hasDescendantsInSet
argument_list|(
name|docIdx
argument_list|,
name|ancestorId
argument_list|,
name|contextId
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
comment|/**      * The method<code>hasDescendantsInSet</code>      *      * @param ancestorId a<code>NodeId</code> value      * @param contextId an<code>int</code> value      * @param includeSelf a<code>boolean</code> value      * @return a<code>NodeProxy</code> value      */
specifier|private
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
name|int
name|docIdx
parameter_list|,
name|NodeId
name|ancestorId
parameter_list|,
name|int
name|contextId
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
comment|// do a binary search to pick some node in the range of valid child
comment|// ids
name|int
name|low
init|=
name|documentOffsets
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|high
init|=
name|low
operator|+
operator|(
name|documentLengths
index|[
name|docIdx
index|]
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|end
init|=
name|low
operator|+
name|documentLengths
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|NodeId
name|id
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|id
operator|=
name|nodes
index|[
name|mid
index|]
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|ancestorId
argument_list|)
condition|)
block|{
break|break;
comment|// found a child node, break out.
block|}
name|cmp
operator|=
name|id
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
block|{
return|return
literal|null
return|;
comment|// no node found
block|}
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
name|documentOffsets
index|[
name|docIdx
index|]
operator|&&
name|nodes
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
operator|>=
literal|0
condition|)
block|{
operator|--
name|mid
expr_stmt|;
block|}
name|NodeProxy
name|ancestor
init|=
operator|new
name|NodeProxy
argument_list|(
name|nodes
index|[
name|documentOffsets
index|[
name|docIdx
index|]
index|]
operator|.
name|getDocument
argument_list|()
argument_list|,
name|ancestorId
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
comment|// we need to check if self should be included
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
block|{
name|add
operator|=
name|includeSelf
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|ancestor
operator|.
name|deepCopyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ancestor
operator|.
name|copyContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ancestor
operator|.
name|addMatches
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|foundOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|foundOne
condition|?
name|ancestor
else|:
literal|null
return|;
block|}
comment|/**      * The method<code>selectParentChild</code>      *      * @param al a<code>NodeSet</code> value      * @param mode an<code>int</code> value      * @param contextId an<code>int</code> value      * @return a<code>NodeSet</code> value      */
specifier|public
name|NodeSet
name|selectParentChild
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|instanceof
name|VirtualNodeSet
condition|)
return|return
name|super
operator|.
name|selectParentChild
argument_list|(
name|al
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
return|return
name|getDescendantsInSet
argument_list|(
name|al
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isSorted
parameter_list|()
block|{
return|return
name|isSorted
return|;
block|}
comment|/**      * The method<code>setSorted</code>      *      * @param document a<code>DocumentImpl</code> value      * @param sorted a<code>boolean</code> value      */
specifier|public
name|void
name|setSorted
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
comment|// has to be ignored for this node set implementation
block|}
comment|/**      * Remove all duplicate nodes, but merge their      * contexts.      */
specifier|public
name|void
name|mergeDuplicates
parameter_list|()
block|{
name|sort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>sort</code>      *      */
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|sort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>sort</code>      *      * @param mergeContexts a<code>boolean</code> value      */
specifier|public
name|void
name|sort
parameter_list|(
name|boolean
name|mergeContexts
parameter_list|)
block|{
if|if
condition|(
name|isSorted
condition|)
return|return;
if|if
condition|(
name|hasOne
condition|)
block|{
name|isSorted
operator|=
literal|true
expr_stmt|;
comment|// shortcut: don't sort if there's just one item
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
name|updateDocs
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|FastQSort
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
block|}
name|updateDocs
argument_list|()
expr_stmt|;
name|isSorted
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|updateDocs
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|documentIds
index|[
literal|0
index|]
operator|=
name|nodes
index|[
literal|0
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
expr_stmt|;
name|documentOffsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|documentLengths
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|documentCount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|documentCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// first document in the set
name|documentIds
index|[
literal|0
index|]
operator|=
name|nodes
index|[
literal|0
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
expr_stmt|;
name|documentOffsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|documentLengths
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
operator|++
name|documentCount
expr_stmt|;
block|}
if|else if
condition|(
name|documentIds
index|[
name|documentCount
operator|-
literal|1
index|]
operator|==
name|nodes
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// node belongs to same document as previous node
operator|++
name|documentLengths
index|[
name|documentCount
operator|-
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// new document
name|ensureDocCapacity
argument_list|()
expr_stmt|;
name|documentIds
index|[
name|documentCount
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
expr_stmt|;
name|documentOffsets
index|[
name|documentCount
index|]
operator|=
name|i
expr_stmt|;
name|documentLengths
index|[
name|documentCount
operator|++
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|ensureDocCapacity
parameter_list|()
block|{
if|if
condition|(
name|documentCount
operator|==
name|documentIds
operator|.
name|length
condition|)
block|{
name|int
name|nlen
init|=
name|documentCount
operator|<<
literal|1
decl_stmt|;
name|int
index|[]
name|temp
init|=
operator|new
name|int
index|[
name|nlen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|documentCount
argument_list|)
expr_stmt|;
name|documentIds
operator|=
name|temp
expr_stmt|;
name|temp
operator|=
operator|new
name|int
index|[
name|nlen
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|documentOffsets
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|documentCount
argument_list|)
expr_stmt|;
name|documentOffsets
operator|=
name|temp
expr_stmt|;
name|temp
operator|=
operator|new
name|int
index|[
name|nlen
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|documentLengths
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|documentCount
argument_list|)
expr_stmt|;
name|documentLengths
operator|=
name|temp
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>sortInDocumentOrder</code>      *      */
specifier|public
specifier|final
name|void
name|sortInDocumentOrder
parameter_list|()
block|{
name|sort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove all duplicate nodes from this set.      *      * @param mergeContext a<code>boolean</code> value      * @return the new length of the part, after removing all duplicates      */
name|int
name|removeDuplicates
parameter_list|(
name|boolean
name|mergeContext
parameter_list|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|nodes
index|[
name|j
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|!=
operator|++
name|j
condition|)
block|{
name|nodes
index|[
name|j
index|]
operator|=
name|nodes
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mergeContext
condition|)
name|nodes
index|[
name|j
index|]
operator|.
name|addContext
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|nodes
index|[
name|j
index|]
operator|.
name|addMatches
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
operator|++
name|j
expr_stmt|;
return|return
name|size
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.xquery.value.AbstractSequence#setSelfAsContext()      */
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectAncestorDescendant(org.exist.dom.NodeSet, int, boolean, boolean)      */
specifier|public
name|NodeSet
name|selectAncestorDescendant
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
return|return
name|super
operator|.
name|selectAncestorDescendant
argument_list|(
name|al
argument_list|,
name|mode
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
return|return
name|getDescendantsInSet
argument_list|(
name|al
argument_list|,
literal|false
argument_list|,
name|includeSelf
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectSiblings(org.exist.dom.NodeSet, int)      */
specifier|public
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectPrecedingSiblings
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
comment|//        if (isEmpty() || contextSet.isEmpty()) {
comment|//            return NodeSet.EMPTY_SET;
comment|//        }
comment|//        NewArrayNodeSet result = new NewArrayNodeSet();
comment|//        NodeSetIterator iReferences = contextSet.iterator();
comment|//        int idxCandidates = 0;
comment|//        NodeProxy reference = (NodeProxy) iReferences.next();
comment|//        NodeProxy candidate = nodes[idxCandidates];
comment|//        int firstCandidate = -1;
comment|//        while (true) {
comment|//            // first, try to find nodes belonging to the same doc
comment|//            if (reference.getDocument().getDocId()< candidate.getDocument()
comment|//                .getDocId()) {
comment|//                firstCandidate = -1;
comment|//                if (iReferences.hasNext())
comment|//                    reference = (NodeProxy) iReferences.next();
comment|//                else
comment|//                    break;
comment|//            } else if (reference.getDocument().getDocId()> candidate
comment|//                       .getDocument().getDocId()) {
comment|//                firstCandidate = -1;
comment|//                if (idxCandidates< size)
comment|//                    candidate = nodes[++idxCandidates];
comment|//                else
comment|//                    break;
comment|//            } else {
comment|//                // same document: check if the nodes have the same parent
comment|//                int cmp = candidate.getNodeId().getParentId().compareTo(reference.getNodeId().getParentId());
comment|//                if (cmp> 0&& candidate.getNodeId().getTreeLevel()<= reference.getNodeId().getTreeLevel()) {
comment|//                    // wrong parent: proceed
comment|//                    firstCandidate = -1;
comment|//                    if (iReferences.hasNext())
comment|//                        reference = (NodeProxy) iReferences.next();
comment|//                    else
comment|//                        break;
comment|//                } else if (cmp< 0  || (cmp> 0&& candidate.getNodeId().getTreeLevel()>= reference.getNodeId().getTreeLevel())) {
comment|//                	//Why did I have to invert the test ? ----------------------------^^^^^
comment|//                    // wrong parent: proceed
comment|//                    firstCandidate = -1;
comment|//                    if (idxCandidates< size)
comment|//                        candidate = nodes[++idxCandidates];
comment|//                    else
comment|//                        break;
comment|//                } else {
comment|//                    if (firstCandidate< 0)
comment|//                        firstCandidate = idxCandidates;
comment|//
comment|//                    // found two nodes with the same parent
comment|//                    // now, compare the ids: a node is a following sibling
comment|//                    // if its id is greater than the id of the other node
comment|//                    cmp = candidate.getNodeId().compareTo(reference.getNodeId());
comment|//                    if (cmp< 0) {
comment|//                        // found a preceding sibling
comment|//                        NodeProxy t = result.get(candidate);
comment|//                        if (t == null) {
comment|//                            if (Expression.IGNORE_CONTEXT != contextId) {
comment|//                                if (Expression.NO_CONTEXT_ID == contextId) {
comment|//                                    candidate.copyContext(reference);
comment|//                                } else {
comment|//                                    candidate.addContextNode(contextId,
comment|//                                                             reference);
comment|//                                }
comment|//                            }
comment|//                            result.add(candidate);
comment|//                        } else if (contextId> Expression.NO_CONTEXT_ID){
comment|//                            t.addContextNode(contextId, reference);
comment|//                        }
comment|//                        if (idxCandidates< size)
comment|//                            candidate = nodes[++idxCandidates];
comment|//                        else
comment|//                            break;
comment|//                    } else if (cmp> 0) {
comment|//                        // found a following sibling
comment|//                        if (idxCandidates< size)
comment|//                            candidate = nodes[++idxCandidates];
comment|//                        else
comment|//                            break;
comment|//                        // equal nodes: proceed with next node
comment|//                    } else {
comment|//                        if (iReferences.hasNext()) {
comment|//                            reference = (NodeProxy) iReferences.next();
comment|//                            idxCandidates = firstCandidate;
comment|//                            candidate = nodes[++idxCandidates];
comment|//                        } else
comment|//                            break;
comment|//                    }
comment|//                }
comment|//            }
comment|//        }
comment|//        for (Iterator i = contextSet.iterator(); i.hasNext(); ) {
comment|//            NodeProxy reference = (NodeProxy) i.next();
comment|//            int docId = reference.getDocument().getDocId();
comment|//            int docIdx = findDoc(docId);
comment|//            if (docIdx> -1) {
comment|//                NodeId referenceId = reference.getNodeId();
comment|//                NodeId parentId = referenceId.getParentId();
comment|//                for (int j = 0; j< documentLengths[docIdx]; j++) {
comment|//                    NodeProxy candidate = nodes[documentOffsets[docIdx] + j];
comment|//                    if (candidate.getNodeId().compareTo(referenceId)> 0)
comment|//                        break;
comment|//                    if (candidate.getNodeId().isChildOf(parentId)) {
comment|//                        if (Expression.IGNORE_CONTEXT != contextId) {
comment|//                            if (Expression.NO_CONTEXT_ID == contextId) {
comment|//                                candidate.copyContext(reference);
comment|//                            } else {
comment|//                                candidate.addContextNode(contextId, reference);
comment|//                            }
comment|//                        }
comment|//                        result.add(candidate);
comment|//                    }
comment|//                }
comment|//            }
comment|//        }
comment|//        return result;
block|}
comment|/**      * The method<code>selectFollowingSiblings</code>      *      * @param siblings a<code>NodeSet</code> value      * @param contextId an<code>int</code> value      * @return a<code>NodeSet</code> value      */
specifier|public
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
name|NodeSet
name|siblings
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectFollowingSiblings
argument_list|(
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectAncestors(org.exist.dom.NodeSet, boolean, boolean)      */
specifier|public
name|NodeSet
name|selectAncestors
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectAncestors
argument_list|(
name|al
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/**      * The method<code>parentWithChild</code>      *      * @param doc a<code>DocumentImpl</code> value      * @param nodeId a<code>NodeId</code> value      * @param directParent a<code>boolean</code> value      * @param includeSelf a<code>boolean</code> value      * @return a<code>NodeProxy</code> value      */
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|docIdx
init|=
name|findDoc
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|parentWithChild
argument_list|(
name|docIdx
argument_list|,
name|nodeId
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
comment|/**      * Check if the node identified by its node id has an ancestor      * contained in this node set and return the ancestor found.      *      * If directParent is true, only immediate ancestors (parents) are      * considered. Otherwise the method will call itself recursively for      * all the node's parents.      *      * If includeSelf is true, the method returns also true if the node      * itself is contained in the node set.      * @param nodeId a<code>NodeId</code> value      * @param directParent a<code>boolean</code> value      * @param includeSelf a<code>boolean</code> value      * @return a<code>NodeProxy</code> value      */
specifier|private
name|NodeProxy
name|parentWithChild
parameter_list|(
name|int
name|docIdx
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|NodeProxy
name|temp
decl_stmt|;
if|if
condition|(
name|includeSelf
operator|&&
operator|(
name|temp
operator|=
name|get
argument_list|(
name|docIdx
argument_list|,
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|temp
return|;
block|}
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
while|while
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|temp
operator|=
name|get
argument_list|(
name|docIdx
argument_list|,
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|temp
return|;
block|}
if|else if
condition|(
name|directParent
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>debugParts</code>      *      * @return a<code>String</code> value      */
specifier|public
name|String
name|debugParts
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|documentIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
comment|//Is the index type initialized ?
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|hasTextIndex
operator|=
literal|true
expr_stmt|;
name|hasMixedContent
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|NodeProxy
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
condition|)
block|{
comment|//Temporary nodes return default values
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
name|hasTextIndex
operator|=
literal|false
expr_stmt|;
name|hasMixedContent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|int
name|nodeIndexType
init|=
name|node
operator|.
name|getIndexType
argument_list|()
decl_stmt|;
comment|//Refine type
comment|//TODO : use common subtype
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|indexType
operator|=
name|nodeIndexType
expr_stmt|;
block|}
else|else
block|{
comment|//Broaden type
comment|//TODO : use common supertype
if|if
condition|(
name|indexType
operator|!=
name|nodeIndexType
condition|)
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasTextIndex
argument_list|()
condition|)
block|{
name|hasTextIndex
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasMixedContent
argument_list|()
condition|)
block|{
name|hasMixedContent
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexType
return|;
block|}
comment|/**      * The method<code>getDocumentSet</code>      *      * @return a<code>DocumentSet</code> value      */
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
return|return
name|this
return|;
comment|//        if(cachedDocuments != null)
comment|//            return cachedDocuments;
comment|//        sort();
comment|//        cachedDocuments = new DefaultDocumentSet(documentCount);
comment|//        for (int i = 0; i< documentCount; i++) {
comment|//            cachedDocuments.add(nodes[documentOffsets[i]].getDocument(), false);
comment|//        }
comment|//        isSorted = true;
comment|//        return cachedDocuments;
block|}
comment|/**      * The method<code>setDocumentSet</code>      *      * @param docs a<code>DocumentSet</code> value      */
specifier|public
name|void
name|setDocumentSet
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|cachedDocuments
operator|=
name|docs
expr_stmt|;
block|}
comment|// DocumentSet methods
specifier|public
name|Iterator
name|getDocumentIterator
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocumentIterator
argument_list|()
return|;
block|}
specifier|private
class|class
name|DocumentIterator
implements|implements
name|Iterator
block|{
name|int
name|currentDoc
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentDoc
operator|<
name|documentCount
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|currentDoc
operator|==
name|documentCount
condition|)
return|return
literal|null
return|;
else|else
return|return
name|nodes
index|[
name|documentOffsets
index|[
name|currentDoc
operator|++
index|]
index|]
operator|.
name|getDocument
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
specifier|public
name|boolean
name|equalDocs
parameter_list|(
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
comment|// we are comparing the same objects
return|return
literal|true
return|;
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|documentCount
operator|!=
name|other
operator|.
name|getDocumentCount
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|contains
argument_list|(
name|documentIds
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getDocumentCount
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|documentCount
return|;
block|}
specifier|public
name|DocumentImpl
name|getDocumentAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
name|pos
operator|>=
name|documentCount
condition|)
return|return
literal|null
return|;
return|return
name|nodes
index|[
name|documentOffsets
index|[
name|pos
index|]
index|]
operator|.
name|getDocument
argument_list|()
return|;
block|}
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|findDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|nodes
index|[
name|documentOffsets
index|[
name|idx
index|]
index|]
operator|.
name|getDocument
argument_list|()
return|;
block|}
specifier|public
name|XmldbURI
index|[]
name|getNames
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
name|XmldbURI
index|[]
name|uris
init|=
operator|new
name|XmldbURI
index|[
name|documentCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
name|uris
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|i
index|]
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
block|}
return|return
name|uris
return|;
block|}
specifier|public
name|DocumentSet
name|intersection
parameter_list|(
name|DocumentSet
name|other
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|DefaultDocumentSet
name|r
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|DocumentImpl
name|d
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|i
index|]
index|]
operator|.
name|getDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
name|r
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|d
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|)
condition|)
name|r
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentSet
name|other
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|>
name|documentCount
condition|)
return|return
literal|false
return|;
name|DocumentImpl
name|d
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|d
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|findDoc
argument_list|(
name|docId
argument_list|)
operator|>
operator|-
literal|1
return|;
block|}
specifier|public
name|NodeSet
name|docsToNodeSet
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
name|documentCount
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|i
index|]
index|]
operator|.
name|getDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// skip binary resources
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|lock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|boolean
name|exclusive
parameter_list|,
name|boolean
name|checkExisting
parameter_list|)
throws|throws
name|LockException
block|{
name|sort
argument_list|()
expr_stmt|;
name|DocumentImpl
name|d
decl_stmt|;
name|Lock
name|dlock
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|documentCount
condition|;
name|idx
operator|++
control|)
block|{
name|d
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|idx
index|]
index|]
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|dlock
operator|=
name|d
operator|.
name|getUpdateLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|exclusive
condition|)
name|dlock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
else|else
name|dlock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unlock
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|DocumentImpl
name|d
decl_stmt|;
name|Lock
name|dlock
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|documentCount
condition|;
name|idx
operator|++
control|)
block|{
name|d
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|idx
index|]
index|]
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|dlock
operator|=
name|d
operator|.
name|getUpdateLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|exclusive
condition|)
name|dlock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|else if
condition|(
name|dlock
operator|.
name|isLockedForRead
argument_list|(
name|thread
argument_list|)
condition|)
name|dlock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>getCollectionIterator</code>      *      * @return an<code>Iterator</code> value      */
specifier|public
name|Iterator
name|getCollectionIterator
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|CollectionIterator
argument_list|()
return|;
block|}
comment|/**      * The class<code>CollectionIterator</code>      *      */
specifier|private
class|class
name|CollectionIterator
implements|implements
name|Iterator
block|{
name|Iterator
name|iterator
init|=
literal|null
decl_stmt|;
name|CollectionIterator
parameter_list|()
block|{
if|if
condition|(
name|documentCount
operator|>
literal|0
condition|)
block|{
name|ObjectHashSet
name|collections
init|=
operator|new
name|ObjectHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|documentCount
condition|;
name|i
operator|++
control|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|nodes
index|[
name|documentOffsets
index|[
name|i
index|]
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|=
name|collections
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * The method<code>hasNext</code>          *          * @return a<code>boolean</code> value          */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|/**          * The method<code>next</code>          *          * @return an<code>Object</code> value          */
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
comment|/**          * The method<code>remove</code>          *          */
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// not needed
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.AbstractNodeSet#hasChanged(int)      */
specifier|public
name|boolean
name|hasChanged
parameter_list|(
name|int
name|previousState
parameter_list|)
block|{
return|return
name|state
operator|!=
name|previousState
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.dom.AbstractNodeSet#getState()      */
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * The method<code>toString</code>      *      * @return a<code>String</code> value      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"ExtArrayTree#"
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The class<code>ExtArrayIterator</code>      *      */
specifier|private
class|class
name|NewArrayIterator
implements|implements
name|NodeSetIterator
implements|,
name|SequenceIterator
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|/**          * Creates a new<code>ExtArrayIterator</code> instance.          *          */
name|NewArrayIterator
parameter_list|()
block|{
block|}
comment|/**          * The method<code>setPosition</code>          *          * @param proxy a<code>NodeProxy</code> value          */
specifier|public
name|void
name|setPosition
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|int
name|docIdx
init|=
name|findDoc
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdx
operator|>
operator|-
literal|1
condition|)
block|{
name|int
name|low
init|=
name|documentOffsets
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|high
init|=
name|low
operator|+
operator|(
name|documentLengths
index|[
name|docIdx
index|]
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|mid
decl_stmt|,
name|cmp
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|nodes
index|[
name|mid
index|]
expr_stmt|;
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
name|mid
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.util.Iterator#hasNext()          */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
argument_list|<
name|size
operator|&&
name|pos
argument_list|>
operator|-
literal|1
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.util.Iterator#next()          */
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|==
name|size
operator|||
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|nodes
index|[
name|pos
operator|++
index|]
return|;
block|}
specifier|public
name|NodeProxy
name|peekNode
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|==
name|size
operator|||
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see org.exist.xquery.value.SequenceIterator#nextItem()          */
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
return|return
operator|(
name|Item
operator|)
name|next
argument_list|()
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.util.Iterator#remove()          */
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
comment|/**      * The class<code>ExtDocIterator</code>      *      */
specifier|private
class|class
name|NewDocIterator
implements|implements
name|ByDocumentIterator
block|{
name|int
name|docIdx
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|next
init|=
literal|null
decl_stmt|;
comment|/**          * Creates a new<code>ExtDocIterator</code> instance.          *          */
specifier|public
name|NewDocIterator
parameter_list|()
block|{
if|if
condition|(
name|documentCount
operator|>
literal|0
condition|)
block|{
name|next
operator|=
name|nodes
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
comment|/**          * The method<code>nextDocument</code>          *          * @param document a<code>DocumentImpl</code> value          */
specifier|public
name|void
name|nextDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|docIdx
operator|=
name|findDoc
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|docIdx
operator|>
operator|-
literal|1
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|next
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|docIdx
index|]
index|]
expr_stmt|;
block|}
block|}
comment|/**          * The method<code>hasNextNode</code>          *          * @return a<code>boolean</code> value          */
specifier|public
name|boolean
name|hasNextNode
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
comment|/**          * The method<code>nextNode</code>          *          * @return a<code>NodeProxy</code> value          */
specifier|public
name|NodeProxy
name|nextNode
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeProxy
name|n
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|++
name|pos
operator|<
name|documentLengths
index|[
name|docIdx
index|]
condition|)
block|{
name|next
operator|=
name|nodes
index|[
name|documentOffsets
index|[
name|docIdx
index|]
operator|+
name|pos
index|]
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**          * The method<code>peekNode</code>          *          * @return a<code>NodeProxy</code> value          */
specifier|public
name|NodeProxy
name|peekNode
parameter_list|()
block|{
return|return
name|next
return|;
block|}
comment|/**          * The method<code>setPosition</code>          *          * @param node a<code>NodeProxy</code> value          */
specifier|public
name|void
name|setPosition
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
name|docIdx
operator|=
name|findDoc
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|docIdx
operator|>
operator|-
literal|1
condition|)
block|{
name|int
name|low
init|=
name|documentOffsets
index|[
name|docIdx
index|]
decl_stmt|;
name|int
name|high
init|=
name|low
operator|+
operator|(
name|documentLengths
index|[
name|docIdx
index|]
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|mid
decl_stmt|,
name|cmp
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|nodes
index|[
name|mid
index|]
expr_stmt|;
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
name|mid
operator|-
name|documentOffsets
index|[
name|docIdx
index|]
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

