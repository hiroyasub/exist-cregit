begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dbxml
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    5. September 2002  */
end_comment

begin_class
specifier|public
class|class
name|DocumentIterator
implements|implements
name|Iterator
block|{
name|DBBroker
name|broker
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|Iterator
name|iterator
init|=
literal|null
decl_stmt|;
name|NodeImpl
name|nextNode
init|=
literal|null
decl_stmt|;
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|/**      *  Constructor for the DocumentIterator object      *      *@param  doc     Description of the Parameter      *@param  broker  Description of the Parameter      */
specifier|public
name|DocumentIterator
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|ElementImpl
name|n
init|=
operator|(
name|ElementImpl
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|InternalNode
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|broker
operator|.
name|getDOMIterator
argument_list|(
name|doc
argument_list|,
name|n
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|nextNode
operator|=
name|n
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  args  Description of the Parameter      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|String
name|pathSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|"conf.xml"
argument_list|,
name|home
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|DocumentIterator
name|i
init|=
operator|new
name|DocumentIterator
argument_list|(
name|broker
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|NodeImpl
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
operator|(
name|NodeImpl
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'<'
operator|+
name|n
operator|.
name|getNodeName
argument_list|()
operator|+
literal|'>'
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'@'
operator|+
name|n
operator|.
name|getNodeName
argument_list|()
operator|+
literal|'='
operator|+
name|n
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|n
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextNode
operator|!=
literal|null
return|;
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|nextNode
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodeImpl
name|tempNode
init|=
name|nextNode
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nextNode
operator|=
literal|null
expr_stmt|;
return|return
name|tempNode
return|;
block|}
name|InternalNode
name|parent
init|=
operator|(
name|InternalNode
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Value
name|value
init|=
operator|(
name|Value
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|++
name|parent
operator|.
name|childCount
operator|==
name|parent
operator|.
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|nextNode
operator|=
name|NodeImpl
operator|.
name|deserialize
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|nextNode
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|stack
operator|.
name|push
argument_list|(
operator|new
name|InternalNode
argument_list|(
operator|(
name|ElementImpl
operator|)
name|nextNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tempNode
return|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"operation not implemented"
argument_list|)
throw|;
block|}
specifier|private
specifier|final
class|class
name|InternalNode
block|{
name|int
name|childCount
init|=
literal|0
decl_stmt|;
name|ElementImpl
name|node
decl_stmt|;
comment|/**          *  Constructor for the InternalNode object          *          *@param  node  Description of the Parameter          */
specifier|public
name|InternalNode
parameter_list|(
name|ElementImpl
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

