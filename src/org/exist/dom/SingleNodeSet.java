begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * SingleNodeSet.java - Jul 31, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SingleItemIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * A special node set containing just one, single node.  */
end_comment

begin_class
specifier|public
class|class
name|SingleNodeSet
extends|extends
name|ArraySet
block|{
specifier|public
name|SingleNodeSet
parameter_list|()
block|{
name|super
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sorted
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|SingleNodeSet
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|super
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nodes
index|[
literal|0
index|]
operator|=
name|node
expr_stmt|;
name|counter
operator|=
literal|1
expr_stmt|;
name|sorted
operator|=
literal|true
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterator() 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeSetIterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
return|return
operator|new
name|SingleItemIterator
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
return|return
name|nodes
index|[
literal|0
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|doc
operator|.
name|getDocId
argument_list|()
operator|&&
name|nodes
index|[
literal|0
index|]
operator|.
name|gid
operator|==
name|nodeId
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.NodeProxy) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
name|nodes
index|[
literal|0
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|proxy
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|&&
name|nodes
index|[
literal|0
index|]
operator|.
name|gid
operator|==
name|proxy
operator|.
name|gid
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#addAll(org.exist.dom.NodeSet) 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#add(org.exist.dom.NodeProxy) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|nodes
index|[
literal|0
index|]
operator|=
name|proxy
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.NodeList#getLength() 	 */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.NodeList#item(int) 	 */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|nodes
index|[
literal|0
index|]
operator|.
name|getNode
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(int) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|nodes
index|[
literal|0
index|]
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.NodeProxy) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|p
argument_list|)
condition|?
name|nodes
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
condition|?
name|nodes
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
block|}
specifier|private
class|class
name|SingleNodeSetIterator
implements|implements
name|Iterator
block|{
specifier|private
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasNext
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
condition|)
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|nodes
index|[
literal|0
index|]
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

