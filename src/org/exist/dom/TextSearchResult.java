begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|TextSearchResult
extends|extends
name|AbstractNodeSet
block|{
specifier|public
specifier|final
specifier|static
name|int
name|INITIAL_ARRAY_SIZE
init|=
literal|250
decl_stmt|;
specifier|private
name|Map
name|documents
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|trackMatches
init|=
literal|true
decl_stmt|;
specifier|public
name|TextSearchResult
parameter_list|(
name|boolean
name|trackMatches
parameter_list|)
block|{
name|this
operator|.
name|trackMatches
operator|=
name|trackMatches
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|String
name|matchString
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|documents
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|Entry
argument_list|(
name|trackMatches
argument_list|)
expr_stmt|;
name|documents
operator|.
name|put
argument_list|(
name|doc
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|add
argument_list|(
name|gid
argument_list|,
name|matchString
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
specifier|public
name|void
name|getDocuments
parameter_list|(
name|DocumentSet
name|allDocs
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|documents
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|allDocs
operator|.
name|add
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NodeSet
name|process
parameter_list|(
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|ArraySet
name|result
init|=
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|?
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
else|:
operator|new
name|ArraySet
argument_list|(
name|contextSet
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
name|next
decl_stmt|;
name|Entry
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|documents
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|next
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|entry
operator|=
operator|(
name|Entry
operator|)
name|next
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|entry
operator|.
name|sort
argument_list|()
expr_stmt|;
name|entry
operator|.
name|process
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|next
operator|.
name|getKey
argument_list|()
argument_list|,
name|result
argument_list|,
name|contextSet
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|NodeSet
name|asNodeSet
parameter_list|(
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|ArraySet
name|result
init|=
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|?
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
else|:
operator|new
name|ArraySet
argument_list|(
name|contextSet
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
name|next
decl_stmt|;
name|Entry
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|documents
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|next
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|entry
operator|=
operator|(
name|Entry
operator|)
name|next
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|entry
operator|.
name|sort
argument_list|()
expr_stmt|;
name|entry
operator|.
name|copyTo
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|next
operator|.
name|getKey
argument_list|()
argument_list|,
name|result
argument_list|,
name|contextSet
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|Entry
block|{
name|long
name|nodes
index|[]
decl_stmt|;
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|matched
index|[]
init|=
literal|null
decl_stmt|;
specifier|public
name|Entry
parameter_list|(
name|boolean
name|trackMatches
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|long
index|[
name|INITIAL_ARRAY_SIZE
index|]
expr_stmt|;
if|if
condition|(
name|trackMatches
condition|)
name|matched
operator|=
operator|new
name|String
index|[
name|INITIAL_ARRAY_SIZE
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|gid
parameter_list|,
name|String
name|matchString
parameter_list|)
block|{
if|if
condition|(
operator|++
name|position
operator|==
name|nodes
operator|.
name|length
condition|)
block|{
name|long
name|n
index|[]
init|=
operator|new
name|long
index|[
name|nodes
operator|.
name|length
operator|<<
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
literal|0
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|m
init|=
operator|new
name|String
index|[
name|matched
operator|.
name|length
operator|<<
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|matched
argument_list|,
literal|0
argument_list|,
name|m
argument_list|,
literal|0
argument_list|,
name|matched
operator|.
name|length
argument_list|)
expr_stmt|;
name|matched
operator|=
name|m
expr_stmt|;
block|}
block|}
name|nodes
index|[
name|position
index|]
operator|=
name|gid
expr_stmt|;
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
name|matched
index|[
name|position
index|]
operator|=
name|matchString
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|FastQSort
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|position
argument_list|,
name|matched
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|NodeProxy
name|parent
decl_stmt|,
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|position
condition|;
name|i
operator|++
control|)
block|{
name|parent
operator|=
name|XMLUtil
operator|.
name|parentWithChild
argument_list|(
name|contextSet
argument_list|,
name|doc
argument_list|,
name|nodes
index|[
name|i
index|]
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
name|parent
operator|.
name|addMatch
argument_list|(
operator|new
name|Match
argument_list|(
name|matched
index|[
name|i
index|]
argument_list|,
name|nodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyTo
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|position
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
name|contextSet
operator|.
name|get
argument_list|(
name|doc
argument_list|,
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
name|p
operator|.
name|addMatch
argument_list|(
operator|new
name|Match
argument_list|(
name|matched
index|[
name|i
index|]
argument_list|,
name|nodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* NodeSet methods. These methods are just required for compatibility.  	 * They just fail silently.  	 */
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterator() 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.AbstractNodeSet#unorderedIterator() 	 */
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.NodeProxy) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#addAll(org.exist.dom.NodeSet) 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#item(int) 	 */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(int) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.NodeProxy) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#itemAt(int) 	 */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#add(org.exist.dom.NodeProxy) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

