begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist Open Source Native XML Database  * Copyright (C) 2001-2014,  Wolfgang M. Meier (wolfgang@exist-db.org)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU Library General Public  * License along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|EmptyNodeSet
extends|extends
name|AbstractNodeSet
block|{
specifier|public
specifier|final
specifier|static
name|EmptyNodeSetIterator
name|EMPTY_ITERATOR
init|=
operator|new
name|EmptyNodeSetIterator
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|EmptyCollectionIterator
name|EMPTY_COLLECTION_ITERATOR
init|=
operator|new
name|EmptyCollectionIterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|EMPTY_ITERATOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|SequenceIterator
operator|.
name|EMPTY_ITERATOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|SequenceIterator
operator|.
name|EMPTY_ITERATOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|item
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|boolean
name|directParent
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|intersection
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|deepIntersection
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|union
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|EmptyNodeSetIterator
implements|implements
name|NodeSetIterator
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"There are no nodes in the empty set"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove node from an empty set"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|peekNode
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot peek into an empty set"
argument_list|)
throw|;
block|}
specifier|public
specifier|final
name|void
name|setPosition
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot reposition within an empty set"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"Empty#"
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|EmptyCollectionIterator
implements|implements
name|Iterator
argument_list|<
name|Collection
argument_list|>
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Collection
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"There are no collections in the empty set"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove collection from an empty set"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

