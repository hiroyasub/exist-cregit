begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist team  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StorageAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|MultiReadReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|DescendantSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  Represents a persistent document object in the database;  *  it can be an XML_FILE , a BINARY_FILE, or Xquery source code.  *    *@author     Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
argument_list|<
name|DocumentImpl
argument_list|>
implements|implements
name|Document
block|{
specifier|public
specifier|final
specifier|static
name|int
name|UNKNOWN_DOCUMENT_ID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|XML_FILE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|BINARY_FILE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
name|int
name|LENGTH_DOCUMENT_ID
init|=
literal|4
decl_stmt|;
comment|//sizeof int
specifier|public
specifier|static
name|int
name|LENGTH_DOCUMENT_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
comment|//public final static byte DOCUMENT_NODE_SIGNATURE = 0x0F;
specifier|protected
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
comment|/** number of child nodes */
specifier|private
name|int
name|children
init|=
literal|0
decl_stmt|;
specifier|private
name|long
index|[]
name|childAddress
init|=
literal|null
decl_stmt|;
comment|/** the collection this document belongs to */
specifier|private
specifier|transient
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
comment|/** the document's id */
specifier|private
name|int
name|docId
init|=
name|UNKNOWN_DOCUMENT_ID
decl_stmt|;
comment|/** the document's file name */
specifier|private
name|XmldbURI
name|fileURI
init|=
literal|null
decl_stmt|;
specifier|private
name|Permission
name|permissions
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Lock
name|updateLock
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentMetadata
name|metadata
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new<code>DocumentImpl</code> instance.      *      * @param pool a<code>BrokerPool</code> instance representing the db      */
specifier|public
name|DocumentImpl
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
argument_list|(
name|pool
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>DocumentImpl</code> instance.      *      * @param pool a<code>BrokerPool</code> instance representing the db      * @param collection a<code>Collection</code> value      * @param fileURI a<code>XmldbURI</code> value      */
specifier|public
name|DocumentImpl
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|fileURI
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|fileURI
operator|=
name|fileURI
expr_stmt|;
comment|// the permissions assigned to this document
name|this
operator|.
name|permissions
operator|=
name|PermissionFactory
operator|.
name|getDefaultResourcePermission
argument_list|()
expr_stmt|;
comment|//inherit the group to the resource if current collection is setGid
if|if
condition|(
name|collection
operator|!=
literal|null
operator|&&
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|permissions
operator|.
name|setGroupFrom
argument_list|(
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|pde
argument_list|)
throw|;
comment|//TODO improve
block|}
block|}
block|}
comment|//TODO document really should not hold a reference to the brokerpool
specifier|public
name|BrokerPool
name|getBrokerPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/**      * The method<code>getLocalPart</code>      *      * @return a<code>String</code> value      */
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/**      * The method<code>getNamespaceURI</code>      *      * @return a<code>String</code> value      */
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/************************************************      *       * Document metadata      *      ************************************************/
comment|/**      * The method<code>getCollection</code>      *      * @return a<code>Collection</code> value      */
specifier|public
name|Collection
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
comment|/**      * The method<code>setCollection</code>      *      * @param parent a<code>Collection</code> value      */
specifier|public
name|void
name|setCollection
parameter_list|(
name|Collection
name|parent
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|parent
expr_stmt|;
block|}
comment|/**      * The method<code>getDocId</code>      *      * @return an<code>int</code> value      */
specifier|public
name|int
name|getDocId
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
comment|/**      * The method<code>setDocId</code>      *      * @param docId an<code>int</code> value      */
specifier|public
name|void
name|setDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
block|}
comment|/**      * Returns the type of this resource, either  {@link #XML_FILE} or       * {@link #BINARY_FILE}.      *       */
specifier|public
name|byte
name|getResourceType
parameter_list|()
block|{
return|return
name|XML_FILE
return|;
block|}
comment|/**      * The method<code>getFileURI</code>      *      * @return a<code>XmldbURI</code> value      */
specifier|public
name|XmldbURI
name|getFileURI
parameter_list|()
block|{
comment|//checkAvail();
return|return
name|fileURI
return|;
block|}
comment|/**      * The method<code>setFileURI</code>      *      * @param fileURI a<code>XmldbURI</code> value      */
specifier|public
name|void
name|setFileURI
parameter_list|(
name|XmldbURI
name|fileURI
parameter_list|)
block|{
name|this
operator|.
name|fileURI
operator|=
name|fileURI
expr_stmt|;
block|}
comment|/**      * The method<code>getURI</code>      *      * @return a<code>XmldbURI</code> value      */
specifier|public
name|XmldbURI
name|getURI
parameter_list|()
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
name|fileURI
return|;
block|}
else|else
block|{
return|return
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|fileURI
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isCollectionConfig
parameter_list|()
block|{
return|return
name|fileURI
operator|.
name|endsWith
argument_list|(
name|CollectionConfiguration
operator|.
name|COLLECTION_CONFIG_SUFFIX_URI
argument_list|)
return|;
block|}
comment|/**      * The method<code>getMode</code>      *      * @return a<code>Permission</code> value      */
specifier|public
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
comment|/**      * The method<code>setMode</code>      *      * @param perm a<code>Permission</code> value      *       * @deprecated This function is considered a security problem      * and should be removed, move code to copyOf or Constructor      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setPermissions
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
name|permissions
operator|=
name|perm
expr_stmt|;
block|}
comment|/**      * The method<code>setMetadata</code>      *      * @param meta a<code>DocumentMetadata</code> value      *       * @deprecated This function is considered a security problem      * and should be removed, move code to copyOf or Constructor      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setMetadata
parameter_list|(
name|DocumentMetadata
name|meta
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|meta
expr_stmt|;
block|}
comment|/**      * The method<code>getMetadata</code>      *      * @return a<code>DocumentMetadata</code> value      */
specifier|public
name|DocumentMetadata
name|getMetadata
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getResourceMetadata
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while loading document metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metadata
return|;
block|}
comment|/************************************************      *       * Persistent node methods      *      ************************************************/
comment|/**      * Copy the relevant internal fields from the specified document object.      * This is called by {@link Collection} when replacing a document.      *      * @param other a<code>DocumentImpl</code> value      * @param preserve Cause copyOf to preserve the following attributes of      *                 each source file in the copy: modification time,      *                 access time, file mode, user ID, and group ID,      *                 as allowed by permissions and  Access Control      *                 Lists (ACLs)      */
specifier|public
name|void
name|copyOf
parameter_list|(
specifier|final
name|DocumentImpl
name|other
parameter_list|,
specifier|final
name|boolean
name|preserve
parameter_list|)
block|{
name|childAddress
operator|=
literal|null
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
comment|//XXX: why reusing? better to create new instance? -shabanovd
name|metadata
operator|=
name|getMetadata
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|DocumentMetadata
argument_list|()
expr_stmt|;
block|}
comment|//copy metadata
name|metadata
operator|.
name|copyOf
argument_list|(
name|other
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|preserve
condition|)
block|{
comment|//copy permission
name|permissions
operator|=
operator|(
operator|(
name|UnixStylePermission
operator|)
name|other
operator|.
name|permissions
operator|)
operator|.
name|copy
argument_list|()
expr_stmt|;
comment|//created and last modified are done by metadata.copyOf
comment|//metadata.setCreated(other.getMetadata().getCreated());
comment|//metadata.setLastModified(other.getMetadata().getLastModified());
block|}
else|else
block|{
comment|//update timestamp
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setCreated
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setLastModified
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|// reset pageCount: will be updated during storage
name|metadata
operator|.
name|setPageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>copyChildren</code>      *      * @param other a<code>DocumentImpl</code> value      */
specifier|public
name|void
name|copyChildren
parameter_list|(
name|DocumentImpl
name|other
parameter_list|)
block|{
name|childAddress
operator|=
name|other
operator|.
name|childAddress
expr_stmt|;
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
block|}
comment|/**      * Returns true if the document is currently locked for      * write.      *       */
specifier|public
specifier|synchronized
name|boolean
name|isLockedForWrite
parameter_list|()
block|{
return|return
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForWrite
argument_list|()
return|;
block|}
comment|/**      * Returns the update lock associated with this      * resource.      *       */
specifier|public
specifier|final
specifier|synchronized
name|Lock
name|getUpdateLock
parameter_list|()
block|{
if|if
condition|(
name|updateLock
operator|==
literal|null
condition|)
block|{
name|updateLock
operator|=
operator|new
name|MultiReadReentrantLock
argument_list|(
name|fileURI
argument_list|)
expr_stmt|;
block|}
return|return
name|updateLock
return|;
block|}
comment|/**      * The method<code>setUserLock</code>      *      * @param user an<code>User</code> value      */
specifier|public
name|void
name|setUserLock
parameter_list|(
name|Account
name|user
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setUserLock
argument_list|(
name|user
operator|==
literal|null
condition|?
literal|0
else|:
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>getUserLock</code>      *      * @return an<code>User</code> value      */
specifier|public
name|Account
name|getUserLock
parameter_list|()
block|{
specifier|final
name|int
name|lockOwnerId
init|=
name|getMetadata
argument_list|()
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwnerId
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SecurityManager
name|secman
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|secman
operator|.
name|getAccount
argument_list|(
name|lockOwnerId
argument_list|)
return|;
block|}
comment|/**      * Returns the estimated size of the data in this document.      *       * As an estimation, the number of pages occupied by the document      * is multiplied with the current page size.      *       */
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
specifier|final
name|long
name|length
init|=
name|getMetadata
argument_list|()
operator|.
name|getPageCount
argument_list|()
operator|*
name|pool
operator|.
name|getPageSize
argument_list|()
decl_stmt|;
return|return
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|length
return|;
block|}
comment|/**      * The method<code>triggerDefrag</code>      *      */
specifier|public
name|void
name|triggerDefrag
parameter_list|()
block|{
name|int
name|fragmentationLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Object
name|property
init|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|fragmentationLimit
operator|=
operator|(
operator|(
name|Integer
operator|)
name|property
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fragmentationLimit
operator|!=
operator|-
literal|1
condition|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setSplitCount
argument_list|(
name|fragmentationLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>getNode</code>      *      * @param nodeId a<code>NodeId</code> value      * @return a<code>Node</code> value      */
specifier|public
name|Node
name|getNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getDocumentElement
argument_list|()
return|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|this
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occured while retrieving node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getNode</code>      *      * @param p a<code>NodeProxy</code> value      * @return a<code>Node</code> value      */
specifier|public
name|Node
name|getNode
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getDocumentElement
argument_list|()
return|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occured while retrieving node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>resizeChildList</code>      *      */
specifier|private
name|void
name|resizeChildList
parameter_list|()
block|{
name|long
index|[]
name|newChildList
init|=
operator|new
name|long
index|[
name|children
index|]
decl_stmt|;
if|if
condition|(
name|childAddress
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|childAddress
argument_list|,
literal|0
argument_list|,
name|newChildList
argument_list|,
literal|0
argument_list|,
name|childAddress
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|childAddress
operator|=
name|newChildList
expr_stmt|;
block|}
comment|/**      * The method<code>appendChild</code>      *      * @param child a<code>NodeHandle</code> value      * @exception DOMException if an error occurs      */
specifier|public
name|void
name|appendChild
parameter_list|(
name|NodeHandle
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
operator|++
name|children
expr_stmt|;
name|resizeChildList
argument_list|()
expr_stmt|;
name|childAddress
index|[
name|children
operator|-
literal|1
index|]
operator|=
name|child
operator|.
name|getInternalAddress
argument_list|()
expr_stmt|;
block|}
comment|/**      * The method<code>write</code>      *      * @param ostream a<code>VariableByteOutputStream</code> value      * @exception IOException if an error occurs      */
specifier|public
name|void
name|write
parameter_list|(
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
operator|&&
operator|!
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForWrite
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"document not locked for write !"
argument_list|)
expr_stmt|;
block|}
name|ostream
operator|.
name|writeInt
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|fileURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getPermissions
argument_list|()
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|StorageAddress
operator|.
name|pageFromPointer
argument_list|(
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
name|StorageAddress
operator|.
name|tidFromPointer
argument_list|(
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|getMetadata
argument_list|()
operator|.
name|write
argument_list|(
name|pool
argument_list|,
name|ostream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"io error while writing document data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ?
block|}
block|}
comment|/**      * The method<code>read</code>      *      * @param istream a<code>VariableByteInput</code> value      * @exception IOException if an error occurs      * @exception EOFException if an error occurs      */
specifier|public
name|void
name|read
parameter_list|(
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
throws|,
name|EOFException
block|{
try|try
block|{
name|docId
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fileURI
operator|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|istream
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|getPermissions
argument_list|()
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
comment|//Should be> 0 ;-)
name|children
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|childAddress
operator|=
operator|new
name|long
index|[
name|children
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|childAddress
index|[
name|i
index|]
operator|=
name|StorageAddress
operator|.
name|createPointer
argument_list|(
name|istream
operator|.
name|readInt
argument_list|()
argument_list|,
name|istream
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IO error while reading document data for document "
operator|+
name|fileURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ?
block|}
block|}
specifier|public
name|void
name|readWithMetadata
parameter_list|(
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
throws|,
name|EOFException
block|{
try|try
block|{
name|docId
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fileURI
operator|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|istream
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|getPermissions
argument_list|()
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
comment|//Should be> 0 ;-)
name|children
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|childAddress
operator|=
operator|new
name|long
index|[
name|children
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|childAddress
index|[
name|i
index|]
operator|=
name|StorageAddress
operator|.
name|createPointer
argument_list|(
name|istream
operator|.
name|readInt
argument_list|()
argument_list|,
name|istream
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|=
operator|new
name|DocumentMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|read
argument_list|(
name|pool
argument_list|,
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IO error while reading document data for document "
operator|+
name|fileURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ?
block|}
block|}
comment|/**      * The method<code>readDocumentMeta</code>      *      * @param istream a<code>VariableByteInput</code> value      */
specifier|public
name|void
name|readDocumentMeta
parameter_list|(
name|VariableByteInput
name|istream
parameter_list|)
block|{
comment|// skip over already known document data
try|try
block|{
name|istream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//docId
name|istream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
comment|//fileURI.toString()
comment|//istream.skip(2 + 2); //uid, gid, mode, children count
name|istream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//unix style permission uses a single long
if|if
condition|(
name|permissions
operator|instanceof
name|ACLPermission
condition|)
block|{
specifier|final
name|int
name|aceCount
init|=
name|istream
operator|.
name|read
argument_list|()
decl_stmt|;
name|istream
operator|.
name|skip
argument_list|(
name|aceCount
argument_list|)
expr_stmt|;
block|}
name|istream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//children size
name|istream
operator|.
name|skip
argument_list|(
name|children
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|//actual children
name|metadata
operator|=
operator|new
name|DocumentMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|read
argument_list|(
name|pool
argument_list|,
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IO error while reading document metadata for "
operator|+
name|fileURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ?
block|}
block|}
comment|/**      * The method<code>compareTo</code>      *      * @param other an<code>DocumentImpl</code> value      * @return an<code>int</code> value      */
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|DocumentImpl
name|other
parameter_list|)
block|{
specifier|final
name|long
name|otherId
init|=
name|other
operator|.
name|docId
decl_stmt|;
if|if
condition|(
name|otherId
operator|==
name|docId
condition|)
block|{
return|return
name|Constants
operator|.
name|EQUAL
return|;
block|}
if|else if
condition|(
name|docId
operator|<
name|otherId
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.NodeImpl#updateChild(org.w3c.dom.Node, org.w3c.dom.Node)      */
annotation|@
name|Override
specifier|public
name|IStoredNode
name|updateChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|Node
name|oldChild
parameter_list|,
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Node does not belong to this document"
argument_list|)
throw|;
block|}
specifier|final
name|IStoredNode
name|oldNode
init|=
operator|(
name|IStoredNode
operator|)
name|oldChild
decl_stmt|;
specifier|final
name|IStoredNode
name|newNode
init|=
operator|(
name|IStoredNode
operator|)
name|newChild
decl_stmt|;
specifier|final
name|IStoredNode
name|previousNode
init|=
operator|(
name|IStoredNode
operator|)
name|oldNode
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"No previous sibling for the old child"
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
comment|// replace the document-element
comment|//TODO : be more precise in the type test -pb
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"A node replacing the document root needs to be an element"
argument_list|)
throw|;
block|}
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setNodeId
argument_list|(
name|oldNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
literal|null
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
specifier|final
name|NodePath
name|path
init|=
name|newNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|broker
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|newNode
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endElement
argument_list|(
name|newNode
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setNodeId
argument_list|(
name|oldNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while updating child node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : thow exception ?
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|newNode
return|;
block|}
comment|/*      * @see org.exist.dom.persistent.NodeImpl#insertBefore(org.w3c.dom.NodeList, org.w3c.dom.Node)      */
specifier|public
name|void
name|insertBefore
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"not implemented"
argument_list|)
throw|;
block|}
comment|/*      * @see org.exist.dom.persistent.NodeImpl#insertAfter(org.w3c.dom.NodeList, org.w3c.dom.Node)      */
specifier|public
name|void
name|insertAfter
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"not implemented"
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)      * @see org.w3c.dom.Node#getFirstChild()      */
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|childAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while inserting node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|NodeProxy
name|getFirstChildProxy
parameter_list|()
block|{
return|return
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|ROOT_NODE
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|childAddress
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * The method<code>getFirstChildAddress</code>      *      * @return a<code>long</code> value      */
specifier|public
name|long
name|getFirstChildAddress
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
return|return
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
return|;
block|}
return|return
name|childAddress
index|[
literal|0
index|]
return|;
block|}
comment|/**      * The method<code>getChildNodes</code>      *      * @return a<code>NodeList</code> value      */
annotation|@
name|Override
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
name|list
init|=
operator|new
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|child
init|=
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while retrieving child nodes: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * The method<code>getPreviousSibling</code>      *      * @param node a<code>NodeHanle</code> value      * @return a<code>Node</code> value      */
specifier|protected
name|Node
name|getPreviousSibling
parameter_list|(
name|NodeHandle
name|node
parameter_list|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|next
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|next
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getFollowingSibling</code>      *      * @param node a<code>NodeHandle</code> value      * @return a<code>Node</code> value      */
specifier|protected
name|Node
name|getFollowingSibling
parameter_list|(
name|NodeHandle
name|node
parameter_list|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|next
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
argument_list|,
name|next
argument_list|)
condition|)
block|{
return|return
name|i
operator|==
name|children
operator|-
literal|1
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>findElementsByTagName</code>      *      * @param root a<code>NodeHandle</code> value      * @param qname a<code>QName</code> value      * @return a<code>NodeList</code> value      */
specifier|protected
name|NodeList
name|findElementsByTagName
parameter_list|(
name|NodeHandle
name|root
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|root
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|root
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NodeSelector
name|selector
init|=
operator|new
name|DescendantSelector
argument_list|(
name|p
argument_list|,
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|)
decl_stmt|;
return|return
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qname
argument_list|,
name|selector
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while finding elements: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
comment|/************************************************      *       * NodeImpl methods      *      ************************************************/
comment|/**      * The method<code>getDoctype</code>      *      * @return a<code>DocumentType</code> value      */
annotation|@
name|Override
specifier|public
name|DocumentType
name|getDoctype
parameter_list|()
block|{
return|return
name|getMetadata
argument_list|()
operator|.
name|getDocType
argument_list|()
return|;
block|}
comment|/**      * The method<code>setDocumentType</code>      *      * @param docType a<code>DocumentType</code> value      */
specifier|public
name|void
name|setDocumentType
parameter_list|(
name|DocumentType
name|docType
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setDocType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>getOwnerDocument</code>      *      * @return a<code>Document</code> value      */
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * The method<code>setOwnerDocument</code>      *      * @param doc a<code>Document</code> value      */
specifier|public
name|void
name|setOwnerDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't set owner document"
argument_list|)
throw|;
block|}
block|}
comment|/**      * The method<code>getQName</code>      *      * @return a<code>QName</code> value      */
annotation|@
name|Override
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|QName
operator|.
name|DOCUMENT_QNAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
comment|//do nothing
block|}
comment|/**      * The method<code>getNodeType</code>      *      * @return a<code>short</code> value      */
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|Node
operator|.
name|DOCUMENT_NODE
return|;
block|}
comment|/**      * The method<code>getPreviousSibling</code>      *      * @return a<code>Node</code> value      */
annotation|@
name|Override
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getNextSibling</code>      *      * @return a<code>Node</code> value      */
annotation|@
name|Override
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>createAttribute</code>      *      * @param name a<code>String</code> value      * @return an<code>Attr</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
comment|/**      * The method<code>createAttributeNS</code>      *      * @param namespaceURI a<code>String</code> value      * @param qualifiedName a<code>String</code> value      * @return an<code>Attr</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
name|String
name|name
decl_stmt|;
name|String
name|prefix
decl_stmt|;
specifier|final
name|int
name|p
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|name
operator|=
name|qualifiedName
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|name
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
comment|/**      * The method<code>createElement</code>      *      * @param tagName a<code>String</code> value      * @return an<code>Element</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Element
name|createElement
parameter_list|(
name|String
name|tagName
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|tagName
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
comment|/**      * The method<code>createElementNS</code>      *      * @param namespaceURI a<code>String</code> value      * @param qualifiedName a<code>String</code> value      * @return an<code>Element</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Element
name|createElementNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
name|String
name|name
decl_stmt|;
name|String
name|prefix
decl_stmt|;
specifier|final
name|int
name|p
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|name
operator|=
name|qualifiedName
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|name
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
comment|/**      * The method<code>createTextNode</code>      *      * @param data a<code>String</code> value      * @return a<code>Text</code> value      */
annotation|@
name|Override
specifier|public
name|Text
name|createTextNode
parameter_list|(
name|String
name|data
parameter_list|)
block|{
specifier|final
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/*      *  W3C Document-Methods      */
comment|/**      * The method<code>getDocumentElement</code>      *      * @return an<code>Element</code> value      */
annotation|@
name|Override
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getElementsByTagName</code>      *      * @param tagname a<code>String</code> value      * @return a<code>NodeList</code> value      */
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|tagname
parameter_list|)
block|{
return|return
name|getElementsByTagNameNS
argument_list|(
literal|""
argument_list|,
name|tagname
argument_list|)
return|;
block|}
comment|/**      * The method<code>getElementsByTagNameNS</code>      *      * @param namespaceURI a<code>String</code> value      * @param localName a<code>String</code> value      * @return a<code>NodeList</code> value      */
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qname
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while finding elements: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
comment|/* (non-Javadoc)      * @see org.w3c.dom.Node#getParentNode()      */
annotation|@
name|Override
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
comment|//Documents don't have parents
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getChildCount</code>      *      * @return an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
return|;
block|}
comment|/**      * The method<code>setChildCount</code>      *      * @param count an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|setChildCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|children
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
name|childAddress
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>getEncoding</code>      *      * @return a<code>String</code> value      */
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
comment|//TODO : on demand result (e.g. from serializer's settings) ? -pb
return|return
literal|"UTF-8"
return|;
block|}
comment|/**      * The method<code>setEncoding</code>      *      * @param enc a<code>String</code> value      */
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|enc
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>getVersion</code>      *      * @return a<code>String</code> value      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>setVersion</code>      *      * @param version a<code>String</code> value      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>getStandalone</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|getStandalone
parameter_list|()
block|{
comment|//TODO : on demand result (e.g. from serializer's settings) ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>setStandalone</code>      *      * @param alone a<code>boolean</code> value      */
specifier|public
name|void
name|setStandalone
parameter_list|(
name|boolean
name|alone
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>createCDATASection</code>      *      * @param data a<code>String</code> value      * @return a<code>CDATASection</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|CDATASection
name|createCDATASection
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createCDATASection not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>createComment</code>      *      * @param data a<code>String</code> value      * @return a<code>Comment</code> value      */
annotation|@
name|Override
specifier|public
name|Comment
name|createComment
parameter_list|(
name|String
name|data
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createComment not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>createDocumentFragment</code>      *      * @return a<code>DocumentFragment</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|DocumentFragment
name|createDocumentFragment
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createDocumentFragment not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>createEntityReference</code>      *      * @param name a<code>String</code> value      * @return an<code>EntityReference</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|EntityReference
name|createEntityReference
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createEntityReference not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>createProcessingInstruction</code>      *      * @param target a<code>String</code> value      * @param data a<code>String</code> value      * @return a<code>ProcessingInstruction</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|ProcessingInstruction
name|createProcessingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createProcessingInstruction not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>getElementById</code>      *      * @param elementId a<code>String</code> value      * @return an<code>Element</code> value      */
annotation|@
name|Override
specifier|public
name|Element
name|getElementById
parameter_list|(
name|String
name|elementId
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getElementById not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>getImplementation</code>      *      * @return an<code>org.w3c.dom.DOMImplementation</code> value      */
annotation|@
name|Override
specifier|public
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
name|getImplementation
parameter_list|()
block|{
return|return
operator|new
name|StoredDOMImplementation
argument_list|()
return|;
block|}
comment|/**      * The method<code>getStrictErrorChecking</code>      *      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|getStrictErrorChecking
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getStrictErrorChecking not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>adoptNode</code>      *      * @param node a<code>Node</code> value      * @return a<code>Node</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Node
name|adoptNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"adoptNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>importNode</code>      *      * @param importedNode a<code>Node</code> value      * @param deep a<code>boolean</code> value      * @return a<code>Node</code> value      * @exception DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Node
name|importNode
parameter_list|(
name|Node
name|importedNode
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"importNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>isSupported</code>      *      * @param type a<code>String</code> value      * @param value a<code>String</code> value      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isSupported not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>setStrictErrorChecking</code>      *      * @param strict a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|setStrictErrorChecking
parameter_list|(
name|boolean
name|strict
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setStrictErrorChecking not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getInputEncoding()      */
annotation|@
name|Override
specifier|public
name|String
name|getInputEncoding
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"String getInputEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlEncoding()      */
annotation|@
name|Override
specifier|public
name|String
name|getXmlEncoding
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getXmlEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlStandalone()      */
annotation|@
name|Override
specifier|public
name|boolean
name|getXmlStandalone
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getXmlStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlStandalone(boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|setXmlStandalone
parameter_list|(
name|boolean
name|xmlStandalone
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setXmlStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlVersion()      */
annotation|@
name|Override
specifier|public
name|String
name|getXmlVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlVersion(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|void
name|setXmlVersion
parameter_list|(
name|String
name|xmlVersion
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setXmlVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getDocumentURI()      */
annotation|@
name|Override
specifier|public
name|String
name|getDocumentURI
parameter_list|()
block|{
return|return
name|getBaseURI
argument_list|()
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setDocumentURI(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|void
name|setDocumentURI
parameter_list|(
name|String
name|documentURI
parameter_list|)
block|{
comment|//TODO : non-writable -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setDocumentURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getDomConfig()      */
annotation|@
name|Override
specifier|public
name|DOMConfiguration
name|getDomConfig
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getDomConfig not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#normalizeDocument()      */
annotation|@
name|Override
specifier|public
name|void
name|normalizeDocument
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"normalizeDocument not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Node
name|renameNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"renameNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getBaseURI()      */
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
try|try
block|{
return|return
name|getURI
argument_list|()
operator|+
literal|""
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dom/DocumentImpl::getBaseURI() 2 exception catched: "
argument_list|)
expr_stmt|;
block|}
return|return
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|+
literal|""
return|;
block|}
comment|/** ? @see org.w3c.dom.Node#compareDocumentPosition(org.w3c.dom.Node)      */
annotation|@
name|Override
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
name|Node
name|other
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"compareDocumentPosition not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getTextContent()      */
annotation|@
name|Override
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getTextContent not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setTextContent(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|void
name|setTextContent
parameter_list|(
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setTextContent not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isSameNode(org.w3c.dom.Node)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isSameNode
parameter_list|(
name|Node
name|other
parameter_list|)
block|{
comment|//TODO : compare node identities ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isSameNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupPrefix(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|String
name|lookupPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupPrefix(String namespaceURI) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isDefaultNamespace(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isDefaultNamespace not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupNamespaceURI(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|//TODO : use broker's context ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupNamespaceURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isEqualNode(org.w3c.dom.Node)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
name|Node
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isEqualNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getFeature(java.lang.String, java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getFeature not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler)      */
annotation|@
name|Override
specifier|public
name|Object
name|setUserData
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|data
parameter_list|,
name|UserDataHandler
name|handler
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setUserData not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getUserData(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Object
name|getUserData
parameter_list|(
name|String
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getUserData not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * The method<code>toString</code>      *      * @return a<code>String</code> value      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getURI
argument_list|()
operator|+
literal|" -<"
operator|+
operator|(
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|?
name|getDocumentElement
argument_list|()
operator|.
name|getNodeName
argument_list|()
else|:
literal|null
operator|)
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

