begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2000-2014 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Manages a set of documents.  *  * This class implements the NodeList interface for a collection of documents.  * It also contains methods to retrieve the collections these documents  * belong to.  *  * @author wolf  * @author aretter  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|DefaultDocumentSet
implements|implements
name|MutableDocumentSet
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SIZE
init|=
literal|29
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_GROWTH
init|=
literal|1.75f
decl_stmt|;
specifier|private
specifier|final
name|BitSet
name|docIds
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocumentImpl
argument_list|>
name|docs
decl_stmt|;
specifier|private
specifier|final
name|BitSet
name|collectionIds
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Collection
argument_list|>
name|collections
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|Runnable
argument_list|>
name|lockReleasers
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|DefaultDocumentSet
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultDocumentSet
parameter_list|(
specifier|final
name|int
name|initialSize
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|initialSize
argument_list|,
name|DEFAULT_GROWTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|docIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|docs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|collectionIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|collections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|add
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|boolean
name|checkDuplicates
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkDuplicates
operator|&&
name|contains
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return;
block|}
name|docIds
operator|.
name|set
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|docs
operator|.
name|put
argument_list|(
name|docId
argument_list|,
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|doc
operator|.
name|getCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
operator|&&
operator|!
name|collectionIds
operator|.
name|get
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|collectionIds
operator|.
name|set
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|collections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|DocumentImpl
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong implementation"
argument_list|)
throw|;
block|}
name|add
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addCollection
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|)
block|{
if|if
condition|(
operator|!
name|collectionIds
operator|.
name|get
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|collectionIds
operator|.
name|set
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|collections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|getDocumentIterator
parameter_list|()
block|{
return|return
name|docs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
name|collections
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocumentCount
parameter_list|()
block|{
return|return
name|docs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getCollectionCount
parameter_list|()
block|{
return|return
name|collections
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
return|return
name|docs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
index|[]
name|getNames
parameter_list|()
block|{
specifier|final
name|XmldbURI
index|[]
name|result
init|=
name|docs
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DocumentImpl
operator|::
name|getFileURI
argument_list|)
operator|.
name|toArray
argument_list|(
name|XmldbURI
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|intersection
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
specifier|final
name|DefaultDocumentSet
name|result
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|DocumentSet
name|union
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
specifier|final
name|DefaultDocumentSet
name|result
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|>
name|getDocumentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|DefaultDocumentSet
condition|)
block|{
comment|// optimization for fast comparison when other is also a DefaultDocumentSet
specifier|final
name|DefaultDocumentSet
name|otherDDS
init|=
operator|(
name|DefaultDocumentSet
operator|)
name|other
decl_stmt|;
specifier|final
name|BitSet
name|compare
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|compare
operator|.
name|or
argument_list|(
name|docIds
argument_list|)
expr_stmt|;
name|compare
operator|.
name|and
argument_list|(
name|otherDDS
operator|.
name|docIds
argument_list|)
expr_stmt|;
return|return
name|compare
operator|.
name|equals
argument_list|(
name|otherDDS
operator|.
name|docIds
argument_list|)
return|;
block|}
else|else
block|{
comment|// otherwise, fallback to general comparison
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|otherDocumentIterator
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|otherDocumentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DocumentImpl
name|otherDocument
init|=
name|otherDocumentIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|otherDocument
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
name|docIds
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|docsToNodeSet
parameter_list|()
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// skip binary resources
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|int
name|getMinDocId
parameter_list|()
block|{
return|return
name|docIds
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMaxDocId
parameter_list|()
block|{
name|int
name|max
init|=
name|DocumentImpl
operator|.
name|UNKNOWN_DOCUMENT_ID
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getDocId
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|d
operator|.
name|getDocId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|max
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalDocs
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
comment|// we are comparing the same objects
return|return
literal|true
return|;
block|}
if|if
condition|(
name|getDocumentCount
argument_list|()
operator|!=
name|other
operator|.
name|getDocumentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|DefaultDocumentSet
condition|)
block|{
comment|// optimization for fast comparison when other is also a DefaultDocumentSet
specifier|final
name|DefaultDocumentSet
name|otherDDS
init|=
operator|(
name|DefaultDocumentSet
operator|)
name|other
decl_stmt|;
return|return
name|docIds
operator|.
name|equals
argument_list|(
name|otherDDS
operator|.
name|docIds
argument_list|)
return|;
block|}
else|else
block|{
comment|// otherwise, fallback to general comparison
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|otherDocumentIterator
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|otherDocumentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DocumentImpl
name|otherDocument
init|=
name|otherDocumentIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|otherDocument
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lock
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|documentIterator
init|=
name|getDocumentIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|documentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DocumentImpl
name|document
init|=
name|documentIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|dlock
init|=
name|document
operator|.
name|getUpdateLock
argument_list|()
decl_stmt|;
name|dlock
operator|.
name|acquire
argument_list|(
name|exclusive
condition|?
name|LockMode
operator|.
name|WRITE_LOCK
else|:
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockReleasers
operator|.
name|push
argument_list|(
parameter_list|()
lambda|->
name|dlock
operator|.
name|release
argument_list|(
name|exclusive
condition|?
name|LockMode
operator|.
name|WRITE_LOCK
else|:
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|()
block|{
comment|// NOTE: locks are released in the reverse order that they were acquired
while|while
condition|(
operator|!
name|lockReleasers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lockReleasers
operator|.
name|pop
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

