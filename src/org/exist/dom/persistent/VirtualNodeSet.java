begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StructuralIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * This node set is called virtual because it is just a placeholder for  * the set of relevant nodes. For XPath expressions like //* or //node(),   * it would be totally unefficient to actually retrieve all descendant nodes.  * In many cases, the expression can be resolved at a later point in time  * without retrieving the whole node set.   *  * VirtualNodeSet basically provides method getFirstParent to retrieve the first  * matching descendant of its context according to the primary type axis.  *  * Class LocationStep will always return an instance of VirtualNodeSet  * if it finds something like descendant::* etc..  *  * @author Wolfgang Meier  * @author Timo Boehme  */
end_comment

begin_class
specifier|public
class|class
name|VirtualNodeSet
extends|extends
name|AbstractNodeSet
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CHILD_COUNT_FOR_OPTIMIZE
init|=
literal|5
decl_stmt|;
specifier|protected
name|int
name|axis
init|=
name|Constants
operator|.
name|UNKNOWN_AXIS
decl_stmt|;
specifier|protected
name|NodeTest
name|test
decl_stmt|;
specifier|protected
name|NodeSet
name|context
decl_stmt|;
specifier|protected
name|NodeSet
name|realSet
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|realSetIsComplete
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|inPredicate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|useSelfAsContext
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|contextId
init|=
name|Expression
operator|.
name|NO_CONTEXT_ID
decl_stmt|;
specifier|private
name|DocumentSet
name|realDocumentSet
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|knownIsEmptyCardinality
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|knownHasOneCardinality
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|knownHasManyCardinality
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|hasMany
init|=
literal|false
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
comment|/**      * Creates a new<code>VirtualNodeSet</code> instance.      *      * @param axis an<code>int</code> value      * @param test a<code>NodeTest</code> value      * @param contextId an<code>int</code> value      * @param context a<code>NodeSet</code> value      */
specifier|public
name|VirtualNodeSet
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|int
name|axis
parameter_list|,
name|NodeTest
name|test
parameter_list|,
name|int
name|contextId
parameter_list|,
name|NodeSet
name|context
parameter_list|)
block|{
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|hasOne
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|axis
operator|=
name|axis
expr_stmt|;
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
comment|/**      * The method<code>contains</code>      *      * @param p a<code>NodeProxy</code> value      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
specifier|final
name|NodeProxy
name|firstParent
init|=
name|getFirstParent
argument_list|(
name|p
argument_list|,
literal|null
argument_list|,
operator|(
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Timo Boehme: getFirstParent returns now only real parents
comment|// therefore test if node is child of context
if|if
condition|(
name|firstParent
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * The method<code>setInPredicate</code>      *      * @param predicate a<code>boolean</code> value      */
specifier|public
name|void
name|setInPredicate
parameter_list|(
name|boolean
name|predicate
parameter_list|)
block|{
name|inPredicate
operator|=
name|predicate
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.AbstractNodeSet#getDocumentSet()      */
annotation|@
name|Override
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
comment|//If we know what are our documents, return them...
if|if
condition|(
name|realDocumentSet
operator|!=
literal|null
condition|)
block|{
return|return
name|realDocumentSet
return|;
block|}
comment|//... otherwise, we default to every *ptotentially* concerned document
return|return
name|context
operator|.
name|getDocumentSet
argument_list|()
return|;
block|}
comment|/**      * The method<code>getCollectionIterator</code>      *      * @return an<code>Iterator</code> value      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
name|context
operator|.
name|getCollectionIterator
argument_list|()
return|;
block|}
comment|/**      * The method<code>getFirstParent</code>      *      * @param node a<code>NodeProxy</code> value      * @param first a<code>NodeProxy</code> value      * @param includeSelf a<code>boolean</code> value      * @param recursions an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
specifier|private
name|NodeProxy
name|getFirstParent
parameter_list|(
name|NodeProxy
name|self
parameter_list|,
name|NodeProxy
name|firstParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|recursions
parameter_list|)
block|{
return|return
name|getFirstParent
argument_list|(
name|self
argument_list|,
name|firstParent
argument_list|,
name|includeSelf
argument_list|,
literal|true
argument_list|,
name|recursions
argument_list|)
return|;
block|}
comment|/**      * The method<code>getFirstParent</code>      *      * @param node a<code>NodeProxy</code> value      * @param first a<code>NodeProxy</code> value      * @param includeSelf a<code>boolean</code> value      * @param directParent a<code>boolean</code> value      * @param recursions an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
specifier|private
name|NodeProxy
name|getFirstParent
parameter_list|(
name|NodeProxy
name|self
parameter_list|,
name|NodeProxy
name|candidateFirstParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|boolean
name|restrictToDirectParent
parameter_list|,
name|int
name|recursions
parameter_list|)
block|{
comment|/* if the node is a doument node we still need to           * complete this method to check if we have found a potential parent          * in one of the iterations before.          */
specifier|final
name|NodeId
name|parentOfSelfId
init|=
name|self
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
comment|// check if the start-node should be included, e.g. to process an
comment|// expression like *[. = 'xxx']
comment|//TODO : investigate on expression like *[.//* = 'xxx']
if|if
condition|(
name|recursions
operator|==
literal|0
operator|&&
name|includeSelf
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|self
argument_list|)
condition|)
block|{
comment|// if we're on the child axis, test if
comment|// the node is a direct child of the context node
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
condition|)
block|{
comment|//WARNING : get() realizes virtual node sets
comment|//TODO : investigate more efficient solutions
specifier|final
name|NodeProxy
name|parent
init|=
name|context
operator|.
name|get
argument_list|(
name|self
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentOfSelfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|self
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|self
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|self
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|self
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|self
return|;
block|}
block|}
else|else
block|{
comment|// descendant axis: remember the node and continue
name|candidateFirstParent
operator|=
name|self
expr_stmt|;
block|}
block|}
comment|// if this is the first call to this method, remember the first
comment|// parent node and continue to evaluate the method. We can't just return
comment|// the first parent as we need a parent that is *actually* contained
comment|// in the context set. We will thus call the method again to complete.
if|if
condition|(
name|candidateFirstParent
operator|==
literal|null
condition|)
block|{
comment|//given node was already document element -> no parent
if|if
condition|(
name|parentOfSelfId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|candidateFirstParent
operator|=
operator|new
name|NodeProxy
argument_list|(
name|self
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentOfSelfId
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
comment|// if we are on the self axis, check if the first parent can be selected
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
condition|)
block|{
comment|//WARNING : get() realizes virtual node sets
comment|//TODO : investigate more efficient solutions
specifier|final
name|NodeProxy
name|parent
init|=
name|context
operator|.
name|get
argument_list|(
name|candidateFirstParent
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentOfSelfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|candidateFirstParent
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|candidateFirstParent
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|candidateFirstParent
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|candidateFirstParent
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|candidateFirstParent
return|;
block|}
block|}
comment|// We need a real parent : keep the candidate and continue to iterate from this one
return|return
name|getFirstParent
argument_list|(
name|candidateFirstParent
argument_list|,
name|candidateFirstParent
argument_list|,
literal|false
argument_list|,
name|restrictToDirectParent
argument_list|,
name|recursions
operator|+
literal|1
argument_list|)
return|;
block|}
comment|// is the node's parent in the context set?
comment|//WARNING : get() realizes virtual node sets
comment|//TODO : investigate more efficient solutions
name|NodeProxy
name|parentOfSelf
init|=
name|context
operator|.
name|get
argument_list|(
name|self
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentOfSelfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOfSelf
operator|!=
literal|null
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|self
argument_list|)
condition|)
block|{
if|if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|CHILD_AXIS
condition|)
block|{
comment|// if we are on the descendant axis, we return the first node
comment|// we found while walking bottom-up.
comment|// Otherwise, we return the last one (which is the node itself)
name|self
operator|=
name|candidateFirstParent
expr_stmt|;
block|}
name|self
operator|.
name|copyContext
argument_list|(
name|parentOfSelf
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|self
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|self
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|self
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|parentOfSelf
argument_list|)
expr_stmt|;
block|}
comment|// Timo Boehme: we return the ancestor which is child of context
return|return
name|self
return|;
block|}
if|else if
condition|(
name|parentOfSelfId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
comment|// no matching node has been found in the context
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|restrictToDirectParent
operator|&&
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|&&
name|recursions
operator|==
literal|1
condition|)
block|{
comment|// break here if the expression is like /*/n
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// continue for expressions like //*/n or /*//n
name|parentOfSelf
operator|=
operator|new
name|NodeProxy
argument_list|(
name|self
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentOfSelfId
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
return|return
name|getFirstParent
argument_list|(
name|parentOfSelf
argument_list|,
name|candidateFirstParent
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|recursions
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|addInternal
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|realSet
operator|==
literal|null
condition|)
block|{
name|realSet
operator|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
name|realSet
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|knownIsEmptyCardinality
operator|=
literal|true
expr_stmt|;
name|knownHasOneCardinality
operator|=
literal|true
expr_stmt|;
name|knownHasManyCardinality
operator|=
literal|true
expr_stmt|;
name|isEmpty
operator|=
name|realSet
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|hasOne
operator|=
name|realSet
operator|.
name|hasOne
argument_list|()
expr_stmt|;
name|hasMany
operator|=
operator|!
operator|(
name|isEmpty
operator|||
name|hasOne
operator|)
expr_stmt|;
comment|//Reset the real document set
comment|//TODO : use realDocumentSet.add(p.getDocument()) ?
name|realDocumentSet
operator|=
literal|null
expr_stmt|;
name|realSetIsComplete
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * The method<code>parentWithChild</code>      *      * @param proxy a<code>NodeProxy</code> value      * @param restrictToDirectParent a<code>boolean</code> value      * @param includeSelf a<code>boolean</code> value      * @param level an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|boolean
name|restrictToDirectParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
return|return
name|realSet
operator|.
name|parentWithChild
argument_list|(
name|proxy
argument_list|,
name|restrictToDirectParent
argument_list|,
name|includeSelf
argument_list|,
name|level
argument_list|)
return|;
block|}
specifier|final
name|NodeProxy
name|first
init|=
name|getFirstParent
argument_list|(
name|proxy
argument_list|,
literal|null
argument_list|,
name|includeSelf
argument_list|,
name|restrictToDirectParent
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
comment|//TODO : should we set an empty cardinality here ?
block|{
name|addInternal
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
return|return
name|first
return|;
block|}
comment|/**      * The method<code>parentWithChild</code>      *      * @param doc a<code>DocumentImpl</code> value      * @param nodeId a<code>NodeId</code> value      * @param restrictToDirectParent a<code>boolean</code> value      * @param includeSelf a<code>boolean</code> value      * @return a<code>NodeProxy</code> value      */
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|restrictToDirectParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
return|return
name|realSet
operator|.
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|restrictToDirectParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
specifier|final
name|NodeProxy
name|first
init|=
name|getFirstParent
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
argument_list|,
literal|null
argument_list|,
name|includeSelf
argument_list|,
name|restrictToDirectParent
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
comment|//TODO : should we set an empty cardinality here ?
block|{
name|addInternal
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
return|return
name|first
return|;
block|}
comment|/**      * Realize the node set by recursively scanning the      * DOM.      */
specifier|private
specifier|final
name|NodeSet
name|getNodes
parameter_list|()
block|{
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|context
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|proxy
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
if|if
condition|(
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
comment|// skip binary resources
continue|continue;
block|}
comment|// Add root node if axis is either self, ancestor-self or descendant-self /ljo
if|if
condition|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|proxy
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|)
operator|&&
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Optimization: if the document has just 1 child node, we know that
comment|// it has to be an element. Instead of calling Document.getChildNodes(),
comment|// we just create a NodeProxy for the first child and return it if the
comment|// test matches
specifier|final
name|NodeProxy
name|p
init|=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getFirstChildProxy
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|addMatches
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|NodeList
name|cl
init|=
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|StoredNode
name|node
init|=
operator|(
name|StoredNode
operator|)
name|cl
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
comment|// fixme! check for unwanted
comment|// side effects. /ljo
comment|//p.deepCopyContext(proxy);
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
operator|)
condition|)
block|{
comment|// note: we create a copy of the docElemProxy here to
comment|// be used as context when traversing the tree.
specifier|final
name|NodeProxy
name|contextNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|contextNode
operator|.
name|deepCopyContext
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|//TODO : is this StoredNode construction necessary ?
specifier|final
name|Iterator
argument_list|<
name|StoredNode
argument_list|>
name|domIter
init|=
name|broker
operator|.
name|getNodeIterator
argument_list|(
operator|new
name|StoredNode
argument_list|(
name|contextNode
argument_list|)
argument_list|)
decl_stmt|;
name|domIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|contextNode
operator|.
name|setMatches
argument_list|(
name|proxy
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|contextNode
argument_list|,
name|result
argument_list|,
name|node
argument_list|,
name|domIter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|&&
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|||
comment|// fixme! self axis probably not needed /ljo
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|FOLLOWING_AXIS
operator|)
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
continue|continue;
block|}
if|if
condition|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|proxy
argument_list|)
condition|)
block|{
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|proxy
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|COMMENT
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|CDATA_SECTION
condition|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|proxy
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_AXIS
condition|)
block|{
name|StoredNode
name|ps
init|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
specifier|final
name|StoredNode
name|pe
init|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
while|while
condition|(
name|ps
operator|!=
literal|null
operator|&&
operator|!
name|ps
operator|.
name|equals
argument_list|(
name|pe
argument_list|)
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|ps
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ps
operator|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getFollowingSibling
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|FOLLOWING_AXIS
condition|)
block|{
specifier|final
name|StoredNode
name|pe
init|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|StoredNode
name|pf
init|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getFollowingSibling
argument_list|(
name|pe
argument_list|)
decl_stmt|;
while|while
condition|(
name|pf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|pf
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|pf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pf
operator|=
operator|(
name|StoredNode
operator|)
name|doc
operator|.
name|getFollowingSibling
argument_list|(
name|pf
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|SELF_AXIS
condition|)
block|{
name|addChildren
argument_list|(
name|proxy
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|realDocumentSet
operator|=
name|result
operator|.
name|getDocumentSet
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Realize the node set by scanning the structural index.      * This is usually cheaper than calling {@link #getNodes()}.      */
specifier|private
name|NodeSet
name|getNodesFromIndex
parameter_list|()
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|type
init|=
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ELEMENT
condition|?
name|ElementValue
operator|.
name|ELEMENT
else|:
name|ElementValue
operator|.
name|ATTRIBUTE
decl_stmt|;
specifier|final
name|NodeSet
name|result
init|=
name|index
operator|.
name|scanByType
argument_list|(
name|type
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|useSelfAsContext
operator|&&
name|inPredicate
argument_list|,
name|context
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|context
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
name|realDocumentSet
operator|=
name|result
operator|.
name|getDocumentSet
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * recursively adds child nodes      * @param contextNode a<code>NodeProxy</code> value      * @param result a<code>NodeSet</code> value      * @param node a<code>StoredNode</code> value      * @param iter an<code>Iterator</code> value      * @param recursions an<code>int</code> value      */
specifier|private
name|void
name|addChildren
parameter_list|(
name|NodeProxy
name|contextNode
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|StoredNode
name|node
parameter_list|,
name|Iterator
argument_list|<
name|StoredNode
argument_list|>
name|iter
parameter_list|,
name|int
name|recursions
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StoredNode
name|child
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CHILD == NULL; doc = "
operator|+
operator|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ? -pb
return|return;
block|}
if|if
condition|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DOC == NULL"
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ? -pb
return|return;
block|}
name|child
operator|.
name|setOwnerDocument
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|p
operator|.
name|setMatches
argument_list|(
name|contextNode
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|child
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|)
operator|&&
name|recursions
operator|==
literal|0
operator|)
operator|||
operator|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
operator|)
condition|)
block|{
name|p
operator|.
name|deepCopyContext
argument_list|(
name|contextNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|addChildren
argument_list|(
name|contextNode
argument_list|,
name|result
argument_list|,
name|child
argument_list|,
name|iter
argument_list|,
name|recursions
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addChildren
parameter_list|(
name|NodeProxy
name|contextNode
parameter_list|,
name|NodeSet
name|result
parameter_list|)
block|{
try|try
block|{
specifier|final
name|EmbeddedXMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|contextNode
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|status
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|&&
name|status
operator|!=
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
operator|--
name|level
operator|<
literal|0
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
if|if
condition|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|&&
name|level
operator|==
literal|0
operator|)
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
block|{
specifier|final
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|reader
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|attr
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|attr
argument_list|)
decl_stmt|;
name|p
operator|.
name|deepCopyContext
argument_list|(
name|contextNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
if|if
condition|(
operator|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|&&
name|level
operator|==
literal|0
operator|)
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|reader
argument_list|)
condition|)
block|{
specifier|final
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|ExtendedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|contextNode
operator|.
name|getDocument
argument_list|()
argument_list|,
name|nodeId
argument_list|,
name|reader
operator|.
name|getNodeType
argument_list|()
argument_list|,
name|reader
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|deepCopyContext
argument_list|(
name|contextNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSelfAsContext
operator|&&
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inPredicate
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|status
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
operator|++
name|level
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//TODO : throw exception ,
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//TODO : throw exception ? -pb
block|}
block|}
comment|/**      * Realize the node set. This should only be done if the      * wildcard step is the last step in a path expression.      *      */
specifier|public
specifier|final
name|void
name|realize
parameter_list|()
block|{
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
return|return;
block|}
comment|// check if we can use the structural index or need to do a scan over the nodes
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ELEMENT
operator|&&
operator|(
name|axis
operator|==
name|Constants
operator|.
name|CHILD_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|)
condition|)
block|{
name|realSet
operator|=
name|getNodesFromIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|realSet
operator|=
name|getNodes
argument_list|()
expr_stmt|;
block|}
name|knownIsEmptyCardinality
operator|=
literal|true
expr_stmt|;
name|knownHasOneCardinality
operator|=
literal|true
expr_stmt|;
name|knownHasManyCardinality
operator|=
literal|true
expr_stmt|;
name|isEmpty
operator|=
name|realSet
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|hasOne
operator|=
name|realSet
operator|.
name|hasOne
argument_list|()
expr_stmt|;
name|hasMany
operator|=
name|realSet
operator|.
name|hasMany
argument_list|()
expr_stmt|;
name|realSetIsComplete
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * The method<code>preferTreeTraversal</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|preferTreeTraversal
parameter_list|()
block|{
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|CHILD_AXIS
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|contextLen
init|=
name|context
operator|.
name|getLength
argument_list|()
decl_stmt|;
specifier|final
name|int
name|docs
init|=
name|context
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextLen
operator|>
name|docs
operator|*
name|MAX_CHILD_COUNT_FOR_OPTIMIZE
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// more than 5 nodes per document
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|context
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeImpl
name|n
init|=
operator|(
name|NodeImpl
operator|)
name|p
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|n
operator|.
name|getChildCount
argument_list|()
operator|>
name|MAX_CHILD_COUNT_FOR_OPTIMIZE
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * The method<code>setSelfIsContext</code>      *      */
specifier|public
name|void
name|setSelfIsContext
parameter_list|()
block|{
name|useSelfAsContext
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|realSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The method<code>setContextId</code>      *      * @param contextId an<code>int</code> value      */
specifier|public
name|void
name|setContextId
parameter_list|(
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.NodeSet#hasIndex()      */
specifier|public
name|boolean
name|hasIndex
parameter_list|()
block|{
comment|// Always return false: there's no index
return|return
literal|false
return|;
block|}
comment|/* the following methods are normally never called in this context,      * we just provide them because they are declared abstract      * in the super class      */
comment|/**      * The method<code>isEmpty</code>      *      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|knownIsEmptyCardinality
condition|)
block|{
return|return
name|isEmpty
return|;
block|}
return|return
name|getLength
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * The method<code>hasOne</code>      *      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
if|if
condition|(
name|knownHasOneCardinality
condition|)
block|{
return|return
name|hasOne
return|;
block|}
return|return
name|getLength
argument_list|()
operator|==
literal|1
return|;
block|}
comment|/**      * The method<code>hasMany</code>      *      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasMany
parameter_list|()
block|{
if|if
condition|(
name|knownHasManyCardinality
condition|)
block|{
return|return
name|hasMany
return|;
block|}
return|return
name|getLength
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/**      * The method<code>add</code>      *      * @param doc a<code>DocumentImpl</code> value      * @param nodeId a<code>long</code> value      */
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>add</code>      *      * @param node a<code>Node</code> value      */
specifier|public
name|void
name|add
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>add</code>      *      * @param proxy a<code>NodeProxy</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>addAll</code>      *      * @param other a<code>NodeList</code> value      */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeList
name|other
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>addAll</code>      *      * @param other a<code>NodeSet</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>set</code>      *      * @param position an<code>int</code> value      * @param doc a<code>DocumentImpl</code> value      * @param nodeId a<code>long</code> value      */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|position
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>remove</code>      *      * @param node a<code>NodeProxy</code> value      */
specifier|public
name|void
name|remove
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * The method<code>getLength</code>      *      * @return an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
if|if
condition|(
name|realSet
operator|!=
literal|null
operator|&&
name|realSetIsComplete
condition|)
block|{
return|return
name|realSet
operator|.
name|getItemType
argument_list|()
return|;
block|}
return|return
name|Type
operator|.
name|NODE
return|;
block|}
comment|/**      * The method<code>getItemCount</code>      *      * @return an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|int
name|getItemCount
parameter_list|()
block|{
comment|//TODO : evaluate both semantics
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|getItemCount
argument_list|()
return|;
block|}
comment|/**      * The method<code>item</code>      *      * @param pos an<code>int</code> value      * @return a<code>Node</code> value      */
annotation|@
name|Override
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|item
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**      * The method<code>get</code>      *      * @param pos an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**      * The method<code>itemAt</code>      *      * @param pos an<code>int</code> value      * @return an<code>Item</code> value      */
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|itemAt
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**      * The method<code>get</code>      *      * @param doc a<code>DocumentImpl</code> value      * @param nodeId a<code>NodeId</code> value      * @return a<code>NodeProxy</code> value      */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|get
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
comment|/**      * The method<code>get</code>      *      * @param proxy a<code>NodeProxy</code> value      * @return a<code>NodeProxy</code> value      */
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|get
argument_list|(
name|proxy
argument_list|)
return|;
block|}
comment|/**      * The method<code>iterator</code>      *      * @return a<code>NodeSetIterator</code> value      */
annotation|@
name|Override
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.NodeSet#iterate()      */
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|iterate
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.AbstractNodeSet#unorderedIterator()      */
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
throws|throws
name|XPathException
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|unorderedIterator
argument_list|()
return|;
block|}
comment|/**      * The method<code>intersection</code>      *      * @param other a<code>NodeSet</code> value      * @return a<code>NodeSet</code> value      */
annotation|@
name|Override
specifier|public
name|NodeSet
name|intersection
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|intersection
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**      * The method<code>union</code>      *      * @param other a<code>NodeSet</code> value      * @return a<code>NodeSet</code> value      */
annotation|@
name|Override
specifier|public
name|NodeSet
name|union
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
name|realize
argument_list|()
expr_stmt|;
return|return
name|realSet
operator|.
name|union
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**      * The method<code>filterDocuments</code>      *      * @param otherSet a<code>NodeSet</code> value      * @return a<code>NodeSet</code> value      */
annotation|@
name|Override
specifier|public
name|NodeSet
name|filterDocuments
parameter_list|(
name|NodeSet
name|otherSet
parameter_list|)
block|{
return|return
name|this
return|;
block|}
comment|/**      * The method<code>clearContext</code>      *      */
specifier|public
name|void
name|clearContext
parameter_list|()
block|{
comment|// ignored for a virtual set
block|}
comment|/**      * The method<code>toString</code>      *      * @return a<code>String</code> value      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|realSet
operator|==
literal|null
condition|)
block|{
return|return
literal|"Virtual#unknown"
return|;
block|}
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

