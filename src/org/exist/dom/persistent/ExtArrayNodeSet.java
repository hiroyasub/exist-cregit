begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * A fast node set implementation, based on arrays to store nodes and documents.  *<p/>  * The class uses an array to store all nodes belonging to one document. Another sorted  * array is used to keep track of the document ids. For each document, we maintain an inner  * class, Part, which stores the array of nodes.  *<p/>  * Nodes are just appended to the nodes array. No order is guaranteed and calls to  * get/contains may fail although a node is present in the array (get/contains  * do a binary search and thus assume that the set is sorted). Also, duplicates  * are allowed. If you have to ensure that calls to get/contains return valid  * results at any time and no duplicates occur, use class  * {@link org.exist.dom.persistent.AVLTreeNodeSet}.  *<p/>  * Use this class, if you can either ensure that items are added in order, or  * no calls to contains/get are required during the creation phase. Only after  * a call to one of the iterator methods, the set will get sorted and  * duplicates removed.  *  * @author Wolfgang<wolfgang@exist-db.org>  * @since 0.9.3  */
end_comment

begin_class
specifier|public
class|class
name|ExtArrayNodeSet
extends|extends
name|AbstractArrayNodeSet
implements|implements
name|DocumentSet
block|{
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_INITIAL_SIZE
init|=
literal|128
decl_stmt|;
specifier|private
specifier|final
name|int
name|initialSize
decl_stmt|;
specifier|private
name|int
name|documentIds
index|[]
decl_stmt|;
specifier|protected
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Part
name|parts
index|[]
decl_stmt|;
specifier|private
name|int
name|partCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|Part
name|lastPart
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|keepUnOrdered
init|=
literal|false
decl_stmt|;
specifier|public
name|ExtArrayNodeSet
parameter_list|()
block|{
name|this
operator|.
name|initialSize
operator|=
name|DEFAULT_INITIAL_SIZE
expr_stmt|;
name|this
operator|.
name|documentIds
operator|=
operator|new
name|int
index|[
name|INITIAL_SIZE
index|]
expr_stmt|;
name|this
operator|.
name|parts
operator|=
operator|new
name|Part
index|[
name|INITIAL_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtArrayNodeSet
parameter_list|(
specifier|final
name|int
name|initialDocsCount
parameter_list|,
specifier|final
name|int
name|initialArraySize
parameter_list|)
block|{
name|this
operator|.
name|initialSize
operator|=
name|initialArraySize
expr_stmt|;
name|this
operator|.
name|documentIds
operator|=
operator|new
name|int
index|[
name|initialDocsCount
operator|>
literal|0
condition|?
name|initialDocsCount
else|:
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|parts
operator|=
operator|new
name|Part
index|[
name|initialDocsCount
operator|>
literal|0
condition|?
name|initialDocsCount
else|:
literal|1
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>ExtArrayNodeSet</code> instance.      *      * @param initialArraySize an<code>int</code> value      */
specifier|public
name|ExtArrayNodeSet
parameter_list|(
specifier|final
name|int
name|initialArraySize
parameter_list|)
block|{
name|this
operator|.
name|initialSize
operator|=
name|initialArraySize
expr_stmt|;
name|this
operator|.
name|documentIds
operator|=
operator|new
name|int
index|[
name|INITIAL_SIZE
index|]
expr_stmt|;
name|this
operator|.
name|parts
operator|=
operator|new
name|Part
index|[
name|INITIAL_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|keepUnOrdered
parameter_list|(
specifier|final
name|boolean
name|flag
parameter_list|)
block|{
name|keepUnOrdered
operator|=
name|flag
expr_stmt|;
block|}
comment|/**      * The method<code>getPart</code>      *      * @param doc      a<code>DocumentImpl</code> value      * @param create   a<code>boolean</code> value      * @param sizeHint an<code>int</code> value      * @return a<code>Part</code> value      */
specifier|private
name|Part
name|getPart
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|boolean
name|create
parameter_list|,
specifier|final
name|int
name|sizeHint
parameter_list|)
block|{
if|if
condition|(
name|lastPart
operator|!=
literal|null
operator|&&
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|lastDoc
condition|)
block|{
return|return
name|lastPart
return|;
block|}
name|int
name|idx
init|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|partCount
argument_list|)
decl_stmt|;
name|Part
name|part
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|part
operator|=
name|parts
index|[
name|idx
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|create
condition|)
block|{
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
expr_stmt|;
name|part
operator|=
operator|new
name|Part
argument_list|(
name|sizeHint
argument_list|)
expr_stmt|;
name|insertPart
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|part
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|private
name|void
name|insertPart
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|Part
name|part
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|partCount
operator|==
name|parts
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|nsize
init|=
name|parts
operator|.
name|length
operator|==
literal|0
condition|?
literal|1
else|:
name|parts
operator|.
name|length
operator|*
literal|2
decl_stmt|;
name|int
name|ndocs
index|[]
init|=
operator|new
name|int
index|[
name|nsize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|,
name|ndocs
argument_list|,
literal|0
argument_list|,
name|documentIds
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Part
name|nparts
index|[]
init|=
operator|new
name|Part
index|[
name|nsize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parts
argument_list|,
literal|0
argument_list|,
name|nparts
argument_list|,
literal|0
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|documentIds
operator|=
name|ndocs
expr_stmt|;
name|parts
operator|=
name|nparts
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|partCount
condition|)
block|{
comment|// insert at the end
name|documentIds
index|[
name|idx
index|]
operator|=
name|docId
expr_stmt|;
name|parts
index|[
name|idx
index|]
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
comment|// insert at idx
name|System
operator|.
name|arraycopy
argument_list|(
name|documentIds
argument_list|,
name|idx
argument_list|,
name|documentIds
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|partCount
operator|-
name|idx
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parts
argument_list|,
name|idx
argument_list|,
name|parts
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|partCount
operator|-
name|idx
argument_list|)
expr_stmt|;
name|documentIds
index|[
name|idx
index|]
operator|=
name|docId
expr_stmt|;
name|parts
index|[
name|idx
index|]
operator|=
name|part
expr_stmt|;
block|}
operator|++
name|partCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|documentIds
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
name|partCount
operator|=
literal|0
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|lastPart
operator|=
literal|null
expr_stmt|;
name|lastDoc
operator|=
operator|-
literal|1
expr_stmt|;
name|state
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|addInternal
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|,
specifier|final
name|int
name|sizeHint
parameter_list|)
block|{
name|getPart
argument_list|(
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
literal|true
argument_list|,
name|sizeHint
operator|!=
name|Constants
operator|.
name|NO_SIZE_HINT
condition|?
name|sizeHint
else|:
name|initialSize
argument_list|)
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSizeHint
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
name|Constants
operator|.
name|NO_SIZE_HINT
else|:
name|part
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|false
else|:
name|part
operator|.
name|contains
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Part
name|part
init|=
name|parts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|+
name|part
operator|.
name|length
operator|>
name|pos
condition|)
block|{
return|return
name|part
operator|.
name|get
argument_list|(
name|pos
operator|-
name|count
argument_list|)
return|;
block|}
name|count
operator|+=
name|part
operator|.
name|length
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|NodeProxy
name|p
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|final
name|NodeSet
name|getDescendantsInSet
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|boolean
name|childOnly
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|copyMatches
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|Part
name|part
decl_stmt|;
for|for
control|(
specifier|final
name|NodeProxy
name|node
range|:
name|al
control|)
block|{
name|part
operator|=
name|getPart
argument_list|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getDescendantsInSet
argument_list|(
name|result
argument_list|,
name|node
argument_list|,
name|childOnly
argument_list|,
name|includeSelf
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|,
name|copyMatches
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * The method<code>hasDescendantsInSet</code>      *      * @param doc         a<code>DocumentImpl</code> value      * @param ancestorId  a<code>NodeId</code> value      * @param includeSelf a<code>boolean</code> value      * @param contextId   an<code>int</code> value      * @return a<code>NodeProxy</code> value      */
specifier|public
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|ancestorId
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|hasDescendantsInSet
argument_list|(
name|ancestorId
argument_list|,
name|contextId
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
comment|/**      * The method<code>sort</code>      *      * @param mergeContexts a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|sort
parameter_list|(
specifier|final
name|boolean
name|mergeContexts
parameter_list|)
block|{
if|if
condition|(
name|isSorted
operator|||
name|keepUnOrdered
condition|)
block|{
return|return;
block|}
if|else if
condition|(
name|hasOne
condition|)
block|{
name|isSorted
operator|=
literal|true
expr_stmt|;
comment|// shortcut: don't sort if there's just one item
name|size
operator|=
name|parts
index|[
literal|0
index|]
operator|.
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Part
name|part
init|=
name|parts
index|[
name|i
index|]
decl_stmt|;
name|part
operator|.
name|sort
argument_list|()
expr_stmt|;
name|size
operator|+=
name|part
operator|.
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
block|}
name|isSorted
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|.
name|setSelfAsContext
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
specifier|final
name|NodeSet
name|siblings
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectPrecedingSiblings
argument_list|(
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
specifier|final
name|NodeSet
name|siblings
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectFollowingSiblings
argument_list|(
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|boolean
name|directParent
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|lastPart
operator|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
return|return
name|lastPart
operator|==
literal|null
condition|?
literal|null
else|:
name|lastPart
operator|.
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
comment|/**      * The method<code>debugParts</code>      *      * @return a<code>String</code> value      */
specifier|public
name|String
name|debugParts
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|documentIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
comment|//Is the index type initialized ?
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|.
name|determineIndexType
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|indexType
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalDocs
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|partCount
operator|!=
name|other
operator|.
name|getDocumentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|contains
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
operator|new
name|CollectionIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|getDocumentIterator
parameter_list|()
block|{
return|return
operator|new
name|DocumentIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocumentCount
parameter_list|()
block|{
return|return
name|partCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|idx
init|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|docId
argument_list|,
name|partCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|parts
index|[
name|idx
index|]
operator|.
name|getOwnerDocument
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
index|[]
name|getNames
parameter_list|()
block|{
specifier|final
name|XmldbURI
index|[]
name|uris
init|=
operator|new
name|XmldbURI
index|[
name|partCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|uris
index|[
name|i
index|]
operator|=
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
block|}
return|return
name|uris
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|intersection
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
specifier|final
name|DefaultDocumentSet
name|set
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
comment|//left
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|//right
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|>
name|partCount
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|other
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
return|return
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|docId
argument_list|,
name|partCount
argument_list|)
operator|>
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|docsToNodeSet
parameter_list|()
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|partCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// skip binary resources
name|result
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lock
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|boolean
name|exclusive
parameter_list|,
specifier|final
name|boolean
name|checkExisting
parameter_list|)
throws|throws
name|LockException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|docLock
init|=
name|doc
operator|.
name|getUpdateLock
argument_list|()
decl_stmt|;
name|docLock
operator|.
name|acquire
argument_list|(
name|exclusive
condition|?
name|Lock
operator|.
name|WRITE_LOCK
else|:
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
specifier|final
name|boolean
name|exclusive
parameter_list|)
block|{
specifier|final
name|Thread
name|thread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|docLock
init|=
name|doc
operator|.
name|getUpdateLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
name|docLock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|docLock
operator|.
name|isLockedForRead
argument_list|(
name|thread
argument_list|)
condition|)
block|{
name|docLock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DocumentIterator
implements|implements
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
block|{
specifier|private
name|int
name|currentDoc
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentDoc
operator|<
name|partCount
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|DocumentImpl
name|next
parameter_list|()
block|{
if|if
condition|(
name|currentDoc
operator|==
name|partCount
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|parts
index|[
name|currentDoc
operator|++
index|]
operator|.
name|getOwnerDocument
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
class|class
name|CollectionIterator
implements|implements
name|Iterator
argument_list|<
name|Collection
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|iterator
decl_stmt|;
name|CollectionIterator
parameter_list|()
block|{
if|if
condition|(
name|partCount
operator|>
literal|0
condition|)
block|{
specifier|final
name|ObjectHashSet
argument_list|<
name|Collection
argument_list|>
name|collections
init|=
operator|new
name|ObjectHashSet
argument_list|<>
argument_list|(
name|partCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|=
name|collections
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iterator
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Collection
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|Part
block|{
specifier|private
name|boolean
name|isSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|NodeProxy
name|array
index|[]
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
name|Part
parameter_list|(
specifier|final
name|int
name|initialSize
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
operator|new
name|NodeProxy
index|[
name|initialSize
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|selectParentChild
parameter_list|(
specifier|final
name|NodeSet
name|result
parameter_list|,
name|NodeProxy
name|na
parameter_list|,
specifier|final
name|NodeSetIterator
name|ia
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|startPos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|nb
init|=
name|array
index|[
name|pos
index|]
decl_stmt|;
name|NodeId
name|lastMarked
init|=
name|na
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// first, try to find nodes belonging to the same doc
if|if
condition|(
name|na
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|!=
name|nb
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// same document
specifier|final
name|NodeId
name|pa
init|=
name|na
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|pb
init|=
name|nb
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|int
name|relation
init|=
name|pb
operator|.
name|computeRelation
argument_list|(
name|pa
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|relation
operator|==
name|NodeId
operator|.
name|IS_CHILD
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|NodeSet
operator|.
name|DESCENDANT
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|nb
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|na
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nb
operator|.
name|copyContext
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|na
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|nb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|na
operator|.
name|copyContext
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|++
name|pos
operator|<
name|length
condition|)
block|{
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|NodeProxy
name|next
init|=
name|ia
operator|.
name|peekNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
name|na
operator|=
name|ia
operator|.
name|next
argument_list|()
expr_stmt|;
name|startPos
operator|=
name|pos
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
specifier|final
name|int
name|cmp
init|=
name|pa
operator|.
name|compareTo
argument_list|(
name|pb
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeProxy
name|next
init|=
name|ia
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|lastMarked
argument_list|)
condition|)
block|{
name|lastMarked
operator|=
name|next
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|startPos
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|na
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|++
name|pos
operator|<
name|length
condition|)
block|{
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeProxy
name|next
init|=
name|ia
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
name|na
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|void
name|add
parameter_list|(
specifier|final
name|NodeProxy
name|p
parameter_list|)
block|{
comment|// just check if this node has already been added. We only
comment|// check the last entry, which should avoid most of the likely
comment|// duplicates. The remaining duplicates are removed by
comment|// removeDuplicates().
comment|/* ljo's modification, currently breaks the test suite (in-memory vs stored nodes ?) :                NodeId nodeId = p.getNodeId();                if (!NodeId.ROOT_NODE.equals(nodeId)) {                if (length> 0&&                array[length - 1].getNodeId().equals(nodeId)) {             */
if|if
condition|(
name|length
operator|>
literal|0
operator|&&
name|array
index|[
name|length
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|array
index|[
name|length
operator|-
literal|1
index|]
operator|.
name|addMatches
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
comment|//} ljo's modification
block|}
if|else if
condition|(
name|length
operator|==
name|array
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|newLength
init|=
name|length
operator|<<
literal|1
decl_stmt|;
specifier|final
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|newLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|array
operator|=
name|temp
expr_stmt|;
block|}
name|array
index|[
name|length
operator|++
index|]
operator|=
name|p
expr_stmt|;
block|}
name|boolean
name|contains
parameter_list|(
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|nodeId
argument_list|)
operator|!=
literal|null
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|array
index|[
name|pos
index|]
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|,
name|cmp
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|array
index|[
name|mid
index|]
expr_stmt|;
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|p
return|;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|DocumentImpl
name|getOwnerDocument
parameter_list|()
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|array
index|[
literal|0
index|]
operator|.
name|getOwnerDocument
argument_list|()
return|;
block|}
block|}
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|isSorted
condition|)
block|{
return|return;
block|}
name|FastQSort
operator|.
name|sortByNodeId
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**          * Check if the node identified by its node id has an ancestor          * contained in this node set and return the ancestor found.          *<p/>          * If directParent is true, only immediate ancestors (parents) are          * considered. Otherwise the method will call itself recursively for          * all the node's parents.          *<p/>          * If includeSelf is true, the method returns also true if the node          * itself is contained in the node set.          *          * @param doc          a<code>DocumentImpl</code> value          * @param nodeId       a<code>NodeId</code> value          * @param directParent a<code>boolean</code> value          * @param includeSelf  a<code>boolean</code> value          * @return a<code>NodeProxy</code> value          */
name|NodeProxy
name|parentWithChild
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|boolean
name|directParent
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
name|NodeProxy
name|temp
decl_stmt|;
if|if
condition|(
name|includeSelf
operator|&&
operator|(
name|temp
operator|=
name|get
argument_list|(
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|temp
return|;
block|}
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
while|while
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|temp
operator|=
name|get
argument_list|(
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|temp
return|;
block|}
if|else if
condition|(
name|directParent
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
specifier|final
name|NodeId
name|ancestorId
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
comment|// do a binary search to pick some node in the range
comment|// of valid child ids
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|NodeId
name|id
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|id
operator|=
name|array
index|[
name|mid
index|]
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|ancestorId
argument_list|)
condition|)
block|{
break|break;
comment|// found a child node, break out.
block|}
name|cmp
operator|=
name|id
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
block|{
return|return
literal|null
return|;
comment|// no node found
block|}
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|array
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
operator|>=
literal|0
condition|)
block|{
operator|--
name|mid
expr_stmt|;
block|}
specifier|final
name|NodeProxy
name|ancestor
init|=
operator|new
name|NodeProxy
argument_list|(
name|getOwnerDocument
argument_list|()
argument_list|,
name|ancestorId
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
comment|// we need to check if self should be included
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
block|{
name|add
operator|=
name|includeSelf
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|ancestor
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ancestor
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ancestor
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|foundOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|foundOne
condition|?
name|ancestor
else|:
literal|null
return|;
block|}
comment|/**          * Find all nodes in the current set being children or descendants of          * the given parent node.          *          * @param result      the node set to which matching nodes will be appended.          * @param parent      the parent node to search for.          * @param childOnly   only include child nodes, not descendant nodes          * @param includeSelf include the self:: axis          * @param mode          * @param contextId          */
name|NodeSet
name|getDescendantsInSet
parameter_list|(
specifier|final
name|NodeSet
name|result
parameter_list|,
specifier|final
name|NodeProxy
name|parent
parameter_list|,
specifier|final
name|boolean
name|childOnly
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|copyMatches
parameter_list|)
block|{
specifier|final
name|NodeId
name|parentId
init|=
name|parent
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// document nodes are treated specially
if|if
condition|(
name|parentId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|add
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
block|{
name|add
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|includeSelf
condition|)
block|{
name|add
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|add
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|array
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyMatches
condition|)
block|{
name|array
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyMatches
condition|)
block|{
name|parent
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// do a binary search to pick some node in the range of valid
comment|// child ids
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
specifier|final
name|NodeProxy
name|p
init|=
name|array
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
break|break;
comment|// found a child node, break out.
block|}
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
block|{
return|return
name|result
return|;
comment|// no node found
block|}
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|array
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
operator|--
name|mid
expr_stmt|;
block|}
comment|// walk through the range of child nodes we found
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
block|{
name|add
operator|=
name|cmp
operator|==
name|NodeId
operator|.
name|IS_CHILD
expr_stmt|;
block|}
if|else if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
block|{
name|add
operator|=
name|includeSelf
expr_stmt|;
block|}
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|array
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|array
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
comment|//parent.addContextNode(contextId, array[i]);
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**          * Remove all duplicate nodes from this part.          *          * @param mergeContext a<code>boolean</code> value          * @return the new length of the part, after removing all duplicates          */
name|int
name|removeDuplicates
parameter_list|(
specifier|final
name|boolean
name|mergeContext
parameter_list|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|array
index|[
name|j
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|!=
operator|++
name|j
condition|)
block|{
name|array
index|[
name|j
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mergeContext
condition|)
block|{
name|array
index|[
name|j
index|]
operator|.
name|addContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|array
index|[
name|j
index|]
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|length
operator|=
operator|++
name|j
expr_stmt|;
return|return
name|length
return|;
block|}
name|void
name|determineIndexType
parameter_list|()
block|{
comment|//Is the index type initialized ?
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeProxy
name|node
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
condition|)
block|{
comment|//Temporary nodes return default values
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
break|break;
block|}
name|int
name|nodeIndexType
init|=
name|node
operator|.
name|getIndexType
argument_list|()
decl_stmt|;
comment|//Refine type
comment|//TODO : use common subtype
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|indexType
operator|=
name|nodeIndexType
expr_stmt|;
block|}
else|else
block|{
comment|//Broaden type
comment|//TODO : use common supertype
if|if
condition|(
name|indexType
operator|!=
name|nodeIndexType
condition|)
block|{
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|void
name|setSelfAsContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ExtArrayIterator
implements|implements
name|NodeSetIterator
implements|,
name|SequenceIterator
block|{
name|Part
name|currentPart
init|=
literal|null
decl_stmt|;
name|int
name|partPos
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|next
init|=
literal|null
decl_stmt|;
name|ExtArrayIterator
parameter_list|()
block|{
if|if
condition|(
name|partPos
operator|<
name|partCount
condition|)
block|{
name|this
operator|.
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
block|}
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setPosition
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|partPos
operator|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
argument_list|,
name|partCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|partPos
operator|>=
literal|0
condition|)
block|{
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|currentPart
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|currentPart
operator|.
name|array
index|[
name|mid
index|]
expr_stmt|;
specifier|final
name|int
name|cmp
init|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
name|mid
expr_stmt|;
name|next
operator|=
name|p
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|next
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|NodeProxy
name|n
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|++
name|pos
operator|==
name|currentPart
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|++
name|partPos
operator|<
name|partCount
condition|)
block|{
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|peekNode
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Item
name|nextItem
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

