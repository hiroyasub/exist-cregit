begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|ManagedLocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedDocumentLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * An Empty DocumentSet  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|EmptyDocumentSet
implements|implements
name|DocumentSet
block|{
comment|/**      * Use {@link DocumentSet#EMPTY_DOCUMENT_SET}      */
name|EmptyDocumentSet
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|getDocumentIterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocumentCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|XmldbURI
index|[]
name|NO_NAMES
init|=
operator|new
name|XmldbURI
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|XmldbURI
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|NO_NAMES
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|intersection
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
return|return
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|docsToNodeSet
parameter_list|()
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedLocks
argument_list|<
name|ManagedDocumentLock
argument_list|>
name|lock
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|LockException
block|{
return|return
operator|new
name|ManagedLocks
argument_list|<>
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalDocs
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

