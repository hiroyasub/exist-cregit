begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StorageAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|MultiReadReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|DescendantSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_comment
comment|/**  *  Represents a persistent document object in the database.  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
implements|implements
name|Document
implements|,
name|Comparable
block|{
specifier|public
specifier|final
specifier|static
name|int
name|UNKNOWN_DOCUMENT_ID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|XML_FILE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|BINARY_FILE
init|=
literal|1
decl_stmt|;
comment|//public final static byte DOCUMENT_NODE_SIGNATURE = 0x0F;
specifier|private
specifier|transient
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
comment|// number of child nodes
specifier|private
name|int
name|children
init|=
literal|0
decl_stmt|;
specifier|private
name|long
index|[]
name|childList
init|=
literal|null
decl_stmt|;
comment|// the collection this document belongs to
specifier|private
specifier|transient
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
comment|// the document's id
specifier|private
name|int
name|docId
init|=
name|UNKNOWN_DOCUMENT_ID
decl_stmt|;
comment|// the document's file name
specifier|private
name|String
name|fileName
init|=
literal|null
decl_stmt|;
comment|//TODO : make private
specifier|protected
name|Permission
name|permissions
init|=
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|DEFAULT_PERM
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|Lock
name|updateLock
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentMetadata
name|metadata
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|long
name|metadataLocation
init|=
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
decl_stmt|;
comment|//number of levels in this DOM tree
specifier|private
name|int
name|maxDepth
init|=
literal|0
decl_stmt|;
comment|// arity of the tree at every level
specifier|private
name|int
name|treeLevelOrder
index|[]
init|=
operator|new
name|int
index|[
literal|15
index|]
decl_stmt|;
comment|//TODO : make private
specifier|private
specifier|transient
name|long
name|treeLevelStartPoints
index|[]
init|=
operator|new
name|long
index|[
literal|15
index|]
decl_stmt|;
specifier|public
name|DocumentImpl
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|)
block|{
name|this
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|treeLevelOrder
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|//	public DocumentImpl(DocumentImpl old) {
comment|//		this.broker = old.broker;
comment|//		this.fileName = old.fileName;
comment|//		this.collection = old.collection;
comment|//		if(old.collection == null)
comment|//			throw new RuntimeException("Collection == null");
comment|//		this.children = old.children;
comment|//		this.maxDepth = old.maxDepth;
comment|//		this.docId = old.docId;
comment|//		this.childList = old.childList;
comment|//		this.docType = old.docType;
comment|//		this.permissions = old.permissions;
comment|//		treeLevelOrder = new int[old.treeLevelOrder.length];
comment|//		for (int i = 0; i< treeLevelOrder.length; i++)
comment|//			treeLevelOrder[i] = old.treeLevelOrder[i];
comment|//		treeLevelStartPoints = new long[old.treeLevelStartPoints.length];
comment|//		for (int i = 0; i< treeLevelStartPoints.length; i++)
comment|//			treeLevelStartPoints[i] = old.treeLevelStartPoints[i];
comment|//	}
comment|/************************************************      *       * Document metadata      *      ************************************************/
specifier|public
name|Collection
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
specifier|public
name|void
name|setCollection
parameter_list|(
name|Collection
name|parent
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|int
name|getDocId
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
specifier|public
name|void
name|setDocId
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
block|}
comment|/**      * Returns the type of this resource, either  {@link #XML_FILE} or       * {@link #BINARY_FILE}.      *       * @return      */
specifier|public
name|byte
name|getResourceType
parameter_list|()
block|{
return|return
name|XML_FILE
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
comment|//checkAvail();
return|return
name|fileName
return|;
block|}
specifier|public
name|void
name|setFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
comment|//TODO : use dedicated function in XmldbURI
return|return
name|collection
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|fileName
return|;
block|}
specifier|public
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|permissions
operator|.
name|setPermissions
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|SyntaxException
block|{
name|permissions
operator|.
name|setPermissions
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
name|permissions
operator|=
name|perm
expr_stmt|;
block|}
specifier|public
name|void
name|setMetadata
parameter_list|(
name|DocumentMetadata
name|meta
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|meta
expr_stmt|;
block|}
specifier|public
name|DocumentMetadata
name|getMetadata
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|broker
operator|.
name|getResourceMetadata
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
specifier|public
name|void
name|setMetadataLocation
parameter_list|(
name|long
name|pointer
parameter_list|)
block|{
name|this
operator|.
name|metadataLocation
operator|=
name|pointer
expr_stmt|;
block|}
specifier|public
name|long
name|getMetadataLocation
parameter_list|()
block|{
return|return
name|metadataLocation
return|;
block|}
comment|/************************************************      *       * Persistent node methods      *      ************************************************/
specifier|public
name|int
name|getMaxDepth
parameter_list|()
block|{
return|return
name|maxDepth
return|;
block|}
comment|/** 	 * Copy the relevant internal fields from the specified document object. 	 * This is called by {@link Collection} when replacing a document. 	 *  	 * @param other 	 */
specifier|public
name|void
name|copyOf
parameter_list|(
name|DocumentImpl
name|other
parameter_list|)
block|{
name|maxDepth
operator|=
name|other
operator|.
name|maxDepth
expr_stmt|;
name|childList
operator|=
literal|null
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
name|treeLevelOrder
operator|=
name|other
operator|.
name|treeLevelOrder
expr_stmt|;
name|treeLevelStartPoints
operator|=
name|other
operator|.
name|treeLevelStartPoints
expr_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
name|metadata
operator|=
operator|new
name|DocumentMetadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|setLastModified
argument_list|(
name|other
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset pageCount: will be updated during storage
name|metadata
operator|.
name|setPageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyChildren
parameter_list|(
name|DocumentImpl
name|other
parameter_list|)
block|{
name|childList
operator|=
name|other
operator|.
name|childList
expr_stmt|;
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
block|}
comment|/** 	 * Returns true if the document is currently locked for 	 * write. 	 *  	 * @return 	 */
specifier|public
name|boolean
name|isLockedForWrite
parameter_list|()
block|{
return|return
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForWrite
argument_list|()
return|;
block|}
comment|/**      * Returns the update lock associated with this      * resource.      *       * @return      */
specifier|public
specifier|final
specifier|synchronized
name|Lock
name|getUpdateLock
parameter_list|()
block|{
if|if
condition|(
name|updateLock
operator|==
literal|null
condition|)
name|updateLock
operator|=
operator|new
name|MultiReadReentrantLock
argument_list|()
expr_stmt|;
return|return
name|updateLock
return|;
block|}
specifier|public
name|void
name|setUserLock
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setUserLock
argument_list|(
name|user
operator|==
literal|null
condition|?
literal|0
else|:
name|user
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|User
name|getUserLock
parameter_list|()
block|{
name|int
name|lockOwnerId
init|=
name|getMetadata
argument_list|()
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwnerId
operator|==
literal|0
condition|)
return|return
literal|null
return|;
specifier|final
name|SecurityManager
name|secman
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|secman
operator|.
name|getUser
argument_list|(
name|lockOwnerId
argument_list|)
return|;
block|}
comment|/** 	 * Returns the estimated size of the data in this document. 	 *  	 * As an estimation, the number of pages occupied by the document 	 * is multiplied with the current page size. 	 *  	 * @return 	 */
specifier|public
name|int
name|getContentLength
parameter_list|()
block|{
return|return
name|getMetadata
argument_list|()
operator|.
name|getPageCount
argument_list|()
operator|*
name|broker
operator|.
name|getPageSize
argument_list|()
return|;
block|}
specifier|public
name|void
name|triggerDefrag
parameter_list|()
block|{
name|getMetadata
argument_list|()
operator|.
name|setSplitCount
argument_list|(
name|broker
operator|.
name|getFragmentationLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeList
name|getRange
parameter_list|(
name|long
name|first
parameter_list|,
name|long
name|last
parameter_list|)
block|{
return|return
name|broker
operator|.
name|getNodeRange
argument_list|(
name|this
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
return|;
block|}
specifier|public
name|SymbolTable
name|getSymbols
parameter_list|()
block|{
return|return
name|broker
operator|.
name|getSymbols
argument_list|()
return|;
block|}
specifier|public
name|Node
name|getNode
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|==
name|StoredNode
operator|.
name|NODE_IMPL_ROOT_NODE_GID
condition|)
return|return
name|getDocumentElement
argument_list|()
return|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|this
argument_list|,
name|gid
argument_list|)
return|;
block|}
specifier|public
name|Node
name|getNode
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|getGID
argument_list|()
operator|==
name|NodeProxy
operator|.
name|DOCUMENT_NODE_GID
condition|)
return|return
name|getDocumentElement
argument_list|()
return|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|private
name|void
name|resizeChildList
parameter_list|()
block|{
name|long
index|[]
name|newChildList
init|=
operator|new
name|long
index|[
name|children
index|]
decl_stmt|;
if|if
condition|(
name|childList
operator|!=
literal|null
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|childList
argument_list|,
literal|0
argument_list|,
name|newChildList
argument_list|,
literal|0
argument_list|,
name|childList
operator|.
name|length
argument_list|)
expr_stmt|;
name|childList
operator|=
name|newChildList
expr_stmt|;
block|}
specifier|public
name|void
name|appendChild
parameter_list|(
name|StoredNode
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
operator|++
name|children
expr_stmt|;
name|resizeChildList
argument_list|()
expr_stmt|;
name|childList
index|[
name|children
operator|-
literal|1
index|]
operator|=
name|child
operator|.
name|getInternalAddress
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
specifier|final
name|SecurityManager
name|secman
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|secman
operator|==
literal|null
condition|)
block|{
comment|//TODO : explain those 2 values -pb
name|ostream
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|User
name|user
init|=
name|secman
operator|.
name|getUser
argument_list|(
name|permissions
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
name|secman
operator|.
name|getGroup
argument_list|(
name|permissions
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
decl_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|user
operator|.
name|getUID
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ostream
operator|.
name|writeInt
argument_list|(
name|permissions
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|maxDepth
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|treeLevelOrder
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ostream
operator|.
name|writeInt
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|StorageAddress
operator|.
name|pageFromPointer
argument_list|(
name|childList
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
name|StorageAddress
operator|.
name|tidFromPointer
argument_list|(
name|childList
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|StorageAddress
operator|.
name|write
argument_list|(
name|metadataLocation
argument_list|,
name|ostream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"io error while writing document data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|read
parameter_list|(
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
throws|,
name|EOFException
block|{
try|try
block|{
name|docId
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fileName
operator|=
name|istream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
specifier|final
name|SecurityManager
name|secman
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|int
name|uid
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|gid
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//TODO : Why such a mask ? -pb
specifier|final
name|int
name|perm
init|=
operator|(
name|istream
operator|.
name|readInt
argument_list|()
operator|&
literal|0777
operator|)
decl_stmt|;
if|if
condition|(
name|secman
operator|==
literal|null
condition|)
block|{
name|permissions
operator|.
name|setOwner
argument_list|(
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|setGroup
argument_list|(
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissions
operator|.
name|setOwner
argument_list|(
name|secman
operator|.
name|getUser
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
name|secman
operator|.
name|getGroup
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
name|permissions
operator|.
name|setGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|permissions
operator|.
name|setPermissions
argument_list|(
name|perm
argument_list|)
expr_stmt|;
name|maxDepth
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|treeLevelOrder
operator|=
operator|new
name|int
index|[
name|maxDepth
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
name|treeLevelOrder
index|[
name|i
index|]
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|//Should be> 0 ;-)
name|children
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|childList
operator|=
operator|new
name|long
index|[
name|children
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|childList
index|[
name|i
index|]
operator|=
name|StorageAddress
operator|.
name|createPointer
argument_list|(
name|istream
operator|.
name|readInt
argument_list|()
argument_list|,
name|istream
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataLocation
operator|=
name|StorageAddress
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IO error while reading document data for document "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|calculateTreeLevelStartPoints
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO :rethrow ? -pb
block|}
block|}
specifier|public
name|int
name|getTreeLevel
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|gid
operator|<
name|treeLevelStartPoints
index|[
name|i
index|]
condition|)
continue|continue;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|maxDepth
operator|||
name|gid
operator|<
name|treeLevelStartPoints
index|[
name|i
operator|+
literal|1
index|]
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|long
name|getLevelStartPoint
parameter_list|(
name|int
name|level
parameter_list|)
block|{
comment|//TODO : check *before* calling ? -pb
if|if
condition|(
name|level
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|level
operator|>
name|maxDepth
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"tree level "
operator|+
name|level
operator|+
literal|" does not exist (maximum "
operator|+
name|maxDepth
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|//throw an exception ? -pb
return|return
operator|-
literal|1
return|;
block|}
return|return
name|treeLevelStartPoints
index|[
name|level
index|]
return|;
block|}
specifier|public
name|int
name|getTreeLevelOrder
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|>
name|maxDepth
condition|)
block|{
comment|//throw an exception ? -pb
name|LOG
operator|.
name|error
argument_list|(
literal|"tree level "
operator|+
name|level
operator|+
literal|" does not exist (maximum "
operator|+
name|maxDepth
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|treeLevelOrder
index|[
name|level
index|]
return|;
block|}
specifier|public
name|int
name|getTreeLevelOrder
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|gid
operator|<
name|treeLevelStartPoints
index|[
name|i
index|]
condition|)
continue|continue;
if|if
condition|(
name|gid
operator|<
name|treeLevelStartPoints
index|[
name|i
operator|+
literal|1
index|]
condition|)
block|{
name|order
operator|=
name|treeLevelOrder
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|order
return|;
block|}
specifier|public
name|void
name|setTreeLevelOrder
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|order
parameter_list|)
block|{
comment|//TODO : range check ? -pb
name|treeLevelOrder
index|[
name|level
index|]
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|maxDepth
operator|=
name|depth
expr_stmt|;
comment|//Expand the array if maxDepth is now too big
if|if
condition|(
name|treeLevelOrder
operator|.
name|length
operator|<=
name|maxDepth
condition|)
block|{
name|int
name|temp
index|[]
init|=
operator|new
name|int
index|[
name|maxDepth
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|treeLevelOrder
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|treeLevelOrder
operator|.
name|length
argument_list|)
expr_stmt|;
name|temp
index|[
name|maxDepth
index|]
operator|=
literal|0
expr_stmt|;
name|treeLevelOrder
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|incMaxDepth
parameter_list|()
block|{
operator|++
name|maxDepth
expr_stmt|;
comment|//Expand the array if maxDepth is now too big
if|if
condition|(
name|treeLevelOrder
operator|.
name|length
operator|<
name|maxDepth
condition|)
block|{
name|int
name|temp
index|[]
init|=
operator|new
name|int
index|[
name|maxDepth
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|treeLevelOrder
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
name|treeLevelOrder
index|[
name|maxDepth
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|treeLevelOrder
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|calculateTreeLevelStartPoints
parameter_list|()
throws|throws
name|EXistException
block|{
name|calculateTreeLevelStartPoints
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|calculateTreeLevelStartPoints
parameter_list|(
name|boolean
name|failOnError
parameter_list|)
throws|throws
name|EXistException
block|{
name|treeLevelStartPoints
operator|=
operator|new
name|long
index|[
name|maxDepth
operator|+
literal|1
index|]
expr_stmt|;
comment|// we know the start point of the root element (which is always 1)
comment|// and the start point of the first non-root node (children + 1)
name|treeLevelStartPoints
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|treeLevelStartPoints
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
name|treeLevelStartPoints
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|treeLevelStartPoints
index|[
name|i
index|]
operator|-
name|treeLevelStartPoints
index|[
name|i
operator|-
literal|1
index|]
operator|)
operator|*
name|treeLevelOrder
index|[
name|i
index|]
operator|+
name|treeLevelStartPoints
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|treeLevelStartPoints
index|[
name|i
operator|+
literal|1
index|]
operator|<
literal|0
operator|||
name|treeLevelStartPoints
index|[
name|i
operator|+
literal|1
index|]
operator|>
literal|0x6fffffffffffffffL
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"The document is too complex/irregularily structured "
operator|+
literal|"to be mapped into eXist's numbering scheme. Number of children per level of the "
operator|+
literal|"tree: "
operator|+
name|printTreeLevelOrder
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|String
name|printTreeLevelOrder
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"[ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDepth
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|treeLevelOrder
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" ]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
specifier|final
name|long
name|otherId
init|=
operator|(
operator|(
name|DocumentImpl
operator|)
name|other
operator|)
operator|.
name|docId
decl_stmt|;
if|if
condition|(
name|otherId
operator|==
name|docId
condition|)
return|return
name|Constants
operator|.
name|EQUAL
return|;
if|else if
condition|(
name|docId
operator|<
name|otherId
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
else|else
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
block|{
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
comment|/*     public long getGID() {         //TOUNDERSTAND : what are the semantics of this 0 ? -pb         return 0;     }      public void setGID(long gid) {     }      public long getInternalAddress() {         return StoredNode.UNKNOWN_NODE_IMPL_ADDRESS;     }      public void setInternalAddress(long address) {     }          public long getParentGID() {         return StoredNode.NODE_IMPL_UNKNOWN_GID;     }     */
comment|/* (non-Javadoc)      * @see org.exist.dom.NodeImpl#updateChild(org.w3c.dom.Node, org.w3c.dom.Node)      */
specifier|public
name|void
name|updateChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|Node
name|oldChild
parameter_list|,
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Node does not belong to this document"
argument_list|)
throw|;
specifier|final
name|StoredNode
name|oldNode
init|=
operator|(
name|StoredNode
operator|)
name|oldChild
decl_stmt|;
specifier|final
name|StoredNode
name|newNode
init|=
operator|(
name|StoredNode
operator|)
name|newChild
decl_stmt|;
specifier|final
name|StoredNode
name|previousNode
init|=
operator|(
name|StoredNode
operator|)
name|oldNode
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousNode
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"No previous sibling for the old child"
argument_list|)
throw|;
if|if
condition|(
name|oldChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
comment|// replace the document-element
comment|//TODO : be more precise in the type test -pb
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"A node replacing the document root needs to be an element"
argument_list|)
throw|;
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
name|newNode
operator|.
name|setGID
argument_list|(
name|oldNode
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
literal|null
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
name|NodePath
name|path
init|=
name|newNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|broker
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|newNode
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endElement
argument_list|(
name|newNode
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
comment|//TOUNDERSTAND : what are the semantics of this 0 ? -pb
name|newNode
operator|.
name|setGID
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * @see org.exist.dom.NodeImpl#insertBefore(org.w3c.dom.NodeList, org.w3c.dom.Node)      */
specifier|public
name|void
name|insertBefore
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"not implemented"
argument_list|)
throw|;
comment|/*         if (!(refChild instanceof StoredNode))             throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, "wrong node type");         StoredNode ref = (StoredNode) refChild;         long next, last = -1;         int idx = -1;         for(int i = children - 1; i>= 0; i--) {             next = childList[i];             if (StorageAddress.equals(ref.internalAddress, next)) {                 idx = i - 1;                 break;             }         }         if (idx< 0)             throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "reference node not found");         last = childList[idx];         StoredNode prev = (StoredNode) broker.objectWith(                 new NodeProxy(this, NodeProxy.UNKNOWN_NODE_GID, last));         for (int i = 0; i< nodes.getLength(); i++) {             prev = (StoredNode) appendChild(null, prev, nodes.item(i));             ++children;             resizeChildList();             childList[++idx] = prev.internalAddress;         }         broker.storeDocument(null, this);         */
block|}
specifier|public
name|void
name|insertAfter
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"not implemented"
argument_list|)
throw|;
comment|/*         if (!(refChild instanceof StoredNode))             throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, "wrong node type");         StoredNode ref = (StoredNode) refChild;         long next, last = -1;         int idx = -1;         for(int i = 0; i< children; i++) {             next = childList[i];             if (StorageAddress.equals(ref.internalAddress, next)) {                 last = next;                 idx = i + 1;                 break;             }         }         if (last< 0)             throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "reference node not found");         StoredNode prev = getLastNode( (StoredNode) broker.objectWith(                 new NodeProxy(this, NodeProxy.UNKNOWN_NODE_GID, last)) );         for (int i = 0; i< nodes.getLength(); i++) {             prev = (StoredNode) appendChild(null, prev, nodes.item(i));             ++children;             resizeChildList();             childList[idx] = prev.internalAddress;         }         broker.storeDocument(null, this);         */
block|}
specifier|private
name|Node
name|appendChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|StoredNode
name|last
parameter_list|,
name|Node
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
specifier|final
name|ProcessingInstructionImpl
name|pi
init|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setTarget
argument_list|(
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|child
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setData
argument_list|(
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
argument_list|,
name|pi
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
specifier|final
name|CommentImpl
name|comment
init|=
operator|new
name|CommentImpl
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|Comment
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
argument_list|,
name|comment
argument_list|)
expr_stmt|;
return|return
name|comment
return|;
default|default :
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"you cannot append a node of this type"
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getFirstChild() 	 */
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|long
name|address
init|=
name|childList
index|[
literal|0
index|]
decl_stmt|;
return|return
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeProxy
operator|.
name|DOCUMENT_ELEMENT_GID
argument_list|,
name|address
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|long
name|getFirstChildAddress
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
return|return
name|NodeProxy
operator|.
name|UNKNOWN_NODE_ADDRESS
return|;
return|return
name|childList
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
name|NodeListImpl
name|list
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeProxy
operator|.
name|DOCUMENT_ELEMENT_GID
argument_list|,
name|childList
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|Node
name|getPreviousSibling
parameter_list|(
name|StoredNode
name|node
parameter_list|)
block|{
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StoredNode
name|next
init|=
operator|(
name|StoredNode
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|next
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
condition|)
return|return
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Node
name|getFollowingSibling
parameter_list|(
name|StoredNode
name|node
parameter_list|)
block|{
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StoredNode
name|next
init|=
operator|(
name|StoredNode
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|next
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
condition|)
return|return
name|i
operator|==
name|children
operator|-
literal|1
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|NodeList
name|findElementsByTagName
parameter_list|(
name|StoredNode
name|root
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|root
operator|.
name|getGID
argument_list|()
argument_list|,
name|root
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
name|NodeSelector
name|selector
init|=
operator|new
name|DescendantSelector
argument_list|(
name|p
argument_list|,
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|)
decl_stmt|;
return|return
operator|(
name|NodeSet
operator|)
name|broker
operator|.
name|getElementIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qname
argument_list|,
name|selector
argument_list|)
return|;
block|}
comment|/************************************************      *       * NodeImpl methods      *      ************************************************/
specifier|protected
specifier|static
name|NodeImpl
name|createNode
parameter_list|(
name|long
name|gid
parameter_list|,
name|short
name|type
parameter_list|)
block|{
name|NodeImpl
name|node
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|node
operator|=
operator|new
name|TextImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|node
operator|=
operator|new
name|AttrImpl
argument_list|(
name|gid
argument_list|)
expr_stmt|;
break|break;
default|default :
name|LOG
operator|.
name|error
argument_list|(
literal|"unknown node type"
argument_list|)
expr_stmt|;
name|node
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|DocumentType
name|getDoctype
parameter_list|()
block|{
return|return
name|getMetadata
argument_list|()
operator|.
name|getDocType
argument_list|()
return|;
block|}
specifier|public
name|void
name|setDocumentType
parameter_list|(
name|DocumentType
name|docType
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setDocType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Document
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|void
name|setOwnerDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|!=
name|this
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't set owner document"
argument_list|)
throw|;
block|}
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|QName
operator|.
name|DOCUMENT_QNAME
return|;
block|}
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|Node
operator|.
name|DOCUMENT_NODE
return|;
block|}
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
specifier|public
name|Attr
name|createAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
specifier|public
name|Attr
name|createAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
name|String
name|name
decl_stmt|;
name|String
name|prefix
decl_stmt|;
name|int
name|p
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|name
operator|=
name|qualifiedName
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|name
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
specifier|public
name|Element
name|createElement
parameter_list|(
name|String
name|tagName
parameter_list|)
throws|throws
name|DOMException
block|{
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|tagName
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
specifier|public
name|Element
name|createElementNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
name|String
name|name
decl_stmt|;
name|String
name|prefix
decl_stmt|;
name|int
name|p
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|name
operator|=
name|qualifiedName
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|name
operator|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
specifier|public
name|Text
name|createTextNode
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/*      *  W3C Document-Methods      */
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
return|return
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|tagname
parameter_list|)
block|{
return|return
name|getElementsByTagNameNS
argument_list|(
literal|""
argument_list|,
name|tagname
argument_list|)
return|;
block|}
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|broker
operator|.
name|getElementIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qname
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.w3c.dom.Node#getParentNode()      */
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
comment|//Documents d'on have parents
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|void
name|setChildCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|children
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
name|childList
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
comment|//TODO : on demand result (e.g. from serializer's settings) ? -pb
return|return
literal|"UTF-8"
return|;
block|}
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|enc
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|getStandalone
parameter_list|()
block|{
comment|//TODO : on demand result (e.g. from serializer's settings) ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setStandalone
parameter_list|(
name|boolean
name|alone
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|CDATASection
name|createCDATASection
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createCDATASection not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Comment
name|createComment
parameter_list|(
name|String
name|data
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createComment not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|DocumentFragment
name|createDocumentFragment
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createDocumentFragment not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|EntityReference
name|createEntityReference
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createEntityReference not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|ProcessingInstruction
name|createProcessingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"createProcessingInstruction not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Element
name|getElementById
parameter_list|(
name|String
name|elementId
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getElementById not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
name|getImplementation
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getImplementation not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|getStrictErrorChecking
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getStrictErrorChecking not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Node
name|adoptNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"adoptNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Node
name|importNode
parameter_list|(
name|Node
name|importedNode
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"importNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isSupported not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setStrictErrorChecking
parameter_list|(
name|boolean
name|strict
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setStrictErrorChecking not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getInputEncoding() 	 */
specifier|public
name|String
name|getInputEncoding
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"String getInputEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlEncoding() 	 */
specifier|public
name|String
name|getXmlEncoding
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getXmlEncoding not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlStandalone() 	 */
specifier|public
name|boolean
name|getXmlStandalone
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getXmlStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlStandalone(boolean) 	 */
specifier|public
name|void
name|setXmlStandalone
parameter_list|(
name|boolean
name|xmlStandalone
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setXmlStandalone not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlVersion() 	 */
specifier|public
name|String
name|getXmlVersion
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getXmlVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlVersion(java.lang.String) 	 */
specifier|public
name|void
name|setXmlVersion
parameter_list|(
name|String
name|xmlVersion
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setXmlVersion not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getDocumentURI() 	 */
specifier|public
name|String
name|getDocumentURI
parameter_list|()
block|{
comment|//TODO : easy to implement once we have stabule base-URIs -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getDocumentURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#setDocumentURI(java.lang.String) 	 */
specifier|public
name|void
name|setDocumentURI
parameter_list|(
name|String
name|documentURI
parameter_list|)
block|{
comment|//TODO : non-writable -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setDocumentURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#getDomConfig() 	 */
specifier|public
name|DOMConfiguration
name|getDomConfig
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getDomConfig not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#normalizeDocument() 	 */
specifier|public
name|void
name|normalizeDocument
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"normalizeDocument not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Document#renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String) 	 */
specifier|public
name|Node
name|renameNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"renameNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getBaseURI() 	 */
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
comment|//TODO : read it from broker's context -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getBaseURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#compareDocumentPosition(org.w3c.dom.Node) 	 */
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
name|Node
name|other
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"compareDocumentPosition not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getTextContent() 	 */
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getTextContent not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setTextContent(java.lang.String) 	 */
specifier|public
name|void
name|setTextContent
parameter_list|(
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setTextContent not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isSameNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isSameNode
parameter_list|(
name|Node
name|other
parameter_list|)
block|{
comment|//TODO : compare node identities ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isSameNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupPrefix(java.lang.String) 	 */
specifier|public
name|String
name|lookupPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupPrefix(String namespaceURI) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isDefaultNamespace(java.lang.String) 	 */
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isDefaultNamespace not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupNamespaceURI(java.lang.String) 	 */
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|//TODO : use broker's context ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupNamespaceURI not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isEqualNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
name|Node
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isEqualNode not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getFeature(java.lang.String, java.lang.String) 	 */
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getFeature not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler) 	 */
specifier|public
name|Object
name|setUserData
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|data
parameter_list|,
name|UserDataHandler
name|handler
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setUserData not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getUserData(java.lang.String) 	 */
specifier|public
name|Object
name|getUserData
parameter_list|(
name|String
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getUserData not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

