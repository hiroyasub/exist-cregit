begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|TIntObjectHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|TObjectIntHashMap
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|TObjectIntProcedure
import|;
end_import

begin_class
specifier|public
class|class
name|SymbolTable
block|{
specifier|protected
name|TObjectIntHashMap
name|symbols
init|=
operator|new
name|TObjectIntHashMap
argument_list|()
decl_stmt|;
specifier|protected
name|TIntObjectHashMap
name|names
init|=
operator|new
name|TIntObjectHashMap
argument_list|()
decl_stmt|;
specifier|protected
name|short
name|max
init|=
literal|0
decl_stmt|;
specifier|protected
name|short
name|nextPartition
init|=
literal|0
decl_stmt|;
specifier|protected
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
specifier|public
name|SymbolTable
parameter_list|()
block|{
block|}
specifier|public
specifier|synchronized
name|short
name|getSymbol
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|symbols
operator|.
name|containsKey
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
return|return
operator|(
name|short
operator|)
name|symbols
operator|.
name|get
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
return|;
name|short
name|id
init|=
operator|++
name|max
decl_stmt|;
name|symbols
operator|.
name|put
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
specifier|synchronized
name|short
name|getSymbol
parameter_list|(
name|Attr
name|attr
parameter_list|)
block|{
if|if
condition|(
name|symbols
operator|.
name|containsKey
argument_list|(
literal|"@"
operator|+
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
operator|(
name|short
operator|)
name|symbols
operator|.
name|get
argument_list|(
literal|"@"
operator|+
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
return|;
name|short
name|id
init|=
operator|++
name|max
decl_stmt|;
name|symbols
operator|.
name|put
argument_list|(
literal|"@"
operator|+
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
specifier|synchronized
name|short
name|getSymbol
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|symbols
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
return|return
operator|(
name|short
operator|)
name|symbols
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
name|short
name|id
init|=
operator|++
name|max
decl_stmt|;
name|symbols
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|hasChanged
parameter_list|()
block|{
return|return
name|changed
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|getName
parameter_list|(
name|short
name|id
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|names
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|short
name|getNextIndexPartition
parameter_list|()
block|{
return|return
operator|++
name|nextPartition
return|;
block|}
specifier|public
name|String
index|[]
name|getSymbols
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|symbols
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Object
index|[]
name|keys
init|=
name|symbols
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|result
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
name|ostream
operator|.
name|writeShort
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
name|nextPartition
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|symbols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|symbols
operator|.
name|forEachEntry
argument_list|(
operator|new
name|TObjectIntProcedure
argument_list|()
block|{
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|ostream
operator|.
name|writeUTF
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
specifier|final
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
name|ostream
operator|.
name|writeShort
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
name|nextPartition
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|symbols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"symbols = "
operator|+
name|symbols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|symbols
operator|.
name|forEachEntry
argument_list|(
operator|new
name|TObjectIntProcedure
argument_list|()
block|{
specifier|public
name|boolean
name|execute
parameter_list|(
name|Object
name|key
parameter_list|,
name|int
name|val
parameter_list|)
block|{
try|try
block|{
name|ostream
operator|.
name|writeUTF
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
block|}
specifier|protected
name|void
name|read
parameter_list|(
name|DataInput
name|istream
parameter_list|)
throws|throws
name|IOException
block|{
name|max
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|nextPartition
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|;
name|short
name|id
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|=
name|istream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|id
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|symbols
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'@'
condition|)
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|read
parameter_list|(
name|VariableByteInputStream
name|istream
parameter_list|)
throws|throws
name|IOException
block|{
name|max
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|nextPartition
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|;
name|short
name|id
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|=
name|istream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|id
operator|=
name|istream
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|symbols
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'@'
condition|)
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|names
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

