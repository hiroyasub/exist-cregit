begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2000-04,  Wolfgang Meier (wolfgang@exist-db.org)  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_class
specifier|public
class|class
name|CharacterDataImpl
extends|extends
name|StoredNode
implements|implements
name|CharacterData
block|{
specifier|protected
name|XMLString
name|cdata
init|=
literal|null
decl_stmt|;
specifier|public
name|CharacterDataImpl
parameter_list|(
name|short
name|nodeType
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CharacterDataImpl
parameter_list|(
name|short
name|nodeType
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CharacterDataImpl
parameter_list|(
name|short
name|nodeType
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CharacterDataImpl
parameter_list|(
name|short
name|nodeType
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CharacterDataImpl
parameter_list|(
name|short
name|nodeType
parameter_list|,
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|)
block|{
name|super
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cdata
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|appendData
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|arg
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cdata
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|appendData
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
else|else
name|cdata
operator|.
name|append
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteData
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|!=
literal|null
condition|)
name|cdata
operator|.
name|delete
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getData
parameter_list|()
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|cdata
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|XMLString
name|getXMLString
parameter_list|()
block|{
return|return
name|cdata
return|;
block|}
specifier|public
name|String
name|getLowerCaseData
parameter_list|()
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|cdata
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|cdata
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNodeValue
parameter_list|()
block|{
return|return
name|cdata
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|insertData
parameter_list|(
name|int
name|offset
parameter_list|,
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|arg
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cdata
operator|.
name|insert
argument_list|(
name|offset
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|replaceData
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|DOMSTRING_SIZE_ERR
argument_list|,
literal|"string index out of bounds"
argument_list|)
throw|;
name|cdata
operator|.
name|replace
argument_list|(
name|offset
argument_list|,
name|count
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cdata
operator|.
name|setData
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|XMLString
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
name|cdata
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|howmany
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
name|cdata
operator|=
operator|new
name|XMLString
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
else|else
name|cdata
operator|.
name|setData
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|substringData
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|DOMSTRING_SIZE_ERR
argument_list|,
literal|"string index out of bounds"
argument_list|)
throw|;
return|return
name|cdata
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|cdata
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|cdata
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Release all resources hold by this object.      */
specifier|public
name|void
name|release
parameter_list|()
block|{
name|cdata
operator|.
name|release
argument_list|()
expr_stmt|;
name|super
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

