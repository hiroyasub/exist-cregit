begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Int2ObjectAVLTreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  * To change the template for this generated type comment go to  * Window - Preferences - Java - Code Generation - Code and Comments  */
end_comment

begin_class
specifier|public
class|class
name|ExtArrayNodeSet
extends|extends
name|NodeSet
block|{
specifier|private
name|Int2ObjectAVLTreeMap
name|map
init|=
operator|new
name|Int2ObjectAVLTreeMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|initalSize
init|=
literal|128
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|isSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Part
name|lastPart
init|=
literal|null
decl_stmt|;
specifier|public
name|ExtArrayNodeSet
parameter_list|()
block|{
block|}
specifier|public
name|ExtArrayNodeSet
parameter_list|(
name|int
name|initialArraySize
parameter_list|)
block|{
name|this
operator|.
name|initalSize
operator|=
name|initialArraySize
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|add
argument_list|(
name|proxy
argument_list|,
name|initalSize
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#add(org.exist.dom.NodeProxy) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|int
name|sizeHint
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|proxy
operator|.
name|doc
operator|.
name|docId
argument_list|,
literal|true
argument_list|,
name|sizeHint
operator|>
literal|0
condition|?
name|sizeHint
else|:
name|initalSize
argument_list|)
decl_stmt|;
name|part
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getSizeHint
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
operator|.
name|docId
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|part
operator|.
name|length
return|;
block|}
specifier|private
specifier|final
name|Part
name|getPart
parameter_list|(
name|int
name|docId
parameter_list|,
name|boolean
name|create
parameter_list|,
name|int
name|sizeHint
parameter_list|)
block|{
name|Part
name|part
decl_stmt|;
if|if
condition|(
name|docId
operator|==
name|lastDoc
operator|&&
name|lastPart
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
name|lastPart
expr_stmt|;
return|return
name|part
return|;
block|}
else|else
name|part
operator|=
operator|(
name|Part
operator|)
name|map
operator|.
name|get
argument_list|(
name|docId
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|part
operator|=
operator|new
name|Part
argument_list|(
name|sizeHint
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docId
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
name|lastPart
operator|=
name|part
expr_stmt|;
name|lastDoc
operator|=
name|docId
expr_stmt|;
return|return
name|part
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterator() 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#containsDoc(org.exist.dom.DocumentImpl) 	 */
specifier|public
name|boolean
name|containsDoc
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|doc
operator|.
name|docId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
operator|.
name|docId
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|false
else|:
name|part
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#contains(org.exist.dom.NodeProxy) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|proxy
operator|.
name|doc
operator|.
name|docId
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|false
else|:
name|part
operator|.
name|contains
argument_list|(
name|proxy
operator|.
name|gid
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#addAll(org.exist.dom.NodeSet) 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#getLength() 	 */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.NodeList#item(int) 	 */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getNode
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(int) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Part
name|part
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|part
operator|=
operator|(
name|Part
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|+
name|part
operator|.
name|length
operator|>
name|pos
condition|)
return|return
name|part
operator|.
name|get
argument_list|(
name|pos
operator|-
name|count
argument_list|)
return|;
name|count
operator|+=
name|part
operator|.
name|length
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.NodeProxy) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|p
operator|.
name|doc
operator|.
name|docId
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|p
operator|.
name|gid
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#get(org.exist.dom.DocumentImpl, long) 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
operator|.
name|docId
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#itemAt(int) 	 */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|isSorted
condition|)
return|return;
name|Part
name|part
decl_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|part
operator|=
operator|(
name|Part
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|part
operator|.
name|sort
argument_list|()
expr_stmt|;
name|size
operator|+=
name|part
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
block|}
name|isSorted
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|Part
block|{
name|NodeProxy
name|array
index|[]
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
name|Part
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|array
operator|=
operator|new
name|NodeProxy
index|[
name|initialSize
index|]
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
comment|// just check if this node has already been added. We only
comment|// check the last entry, which should avoid most of the likely
comment|// duplicates. The remaining duplicates are removed by
comment|// removeDuplicates().
if|if
condition|(
name|length
operator|>
literal|0
operator|&&
name|array
index|[
name|length
operator|-
literal|1
index|]
operator|.
name|gid
operator|==
name|p
operator|.
name|gid
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|length
operator|==
name|array
operator|.
name|length
condition|)
block|{
name|int
name|newLength
init|=
operator|(
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"reallocating "
operator|+
name|length
operator|+
literal|" -> "
operator|+
name|newLength
argument_list|)
expr_stmt|;
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|newLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|array
operator|=
name|temp
expr_stmt|;
block|}
name|array
index|[
name|length
operator|++
index|]
operator|=
name|p
expr_stmt|;
block|}
name|boolean
name|contains
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
return|return
name|search
argument_list|(
name|gid
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|array
index|[
name|pos
index|]
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
name|int
name|p
init|=
name|search
argument_list|(
name|gid
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|array
index|[
name|p
index|]
return|;
block|}
name|void
name|sort
parameter_list|()
block|{
name|FastQSort
operator|.
name|sortByNodeId
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|search
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|array
index|[
name|mid
index|]
operator|.
name|gid
operator|==
name|gid
condition|)
return|return
name|mid
return|;
if|if
condition|(
name|array
index|[
name|mid
index|]
operator|.
name|gid
operator|>
name|gid
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
name|int
name|removeDuplicates
parameter_list|()
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|.
name|gid
operator|!=
name|array
index|[
name|j
index|]
operator|.
name|gid
condition|)
block|{
if|if
condition|(
name|i
operator|!=
operator|++
name|j
condition|)
name|array
index|[
name|j
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|length
operator|=
operator|++
name|j
expr_stmt|;
return|return
name|length
return|;
block|}
block|}
specifier|private
class|class
name|ExtArrayIterator
implements|implements
name|Iterator
implements|,
name|SequenceIterator
block|{
name|Iterator
name|docsIterator
decl_stmt|;
name|Part
name|currentPart
init|=
literal|null
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|next
init|=
literal|null
decl_stmt|;
name|ExtArrayIterator
parameter_list|()
block|{
name|docsIterator
operator|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsIterator
operator|.
name|hasNext
argument_list|()
condition|)
name|currentPart
operator|=
operator|(
name|Part
operator|)
name|docsIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see java.util.Iterator#hasNext() 		 */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
comment|/* (non-Javadoc) 		 * @see java.util.Iterator#next() 		 */
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodeProxy
name|n
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|++
name|pos
operator|==
name|currentPart
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|docsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentPart
operator|=
operator|(
name|Part
operator|)
name|docsIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xpath.value.SequenceIterator#nextItem() 		 */
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
return|return
operator|(
name|Item
operator|)
name|next
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 		 * @see java.util.Iterator#remove() 		 */
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

