begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * A fast node set implementation, based on arrays to store nodes and documents.  *   * The class uses an array to store all nodes belonging to one document. Another sorted  * array is used to keep track of the document ids. For each document, we maintain an inner  * class, Part, which stores the array of nodes.  *   * Nodes are just appended to the nodes array. No order is guaranteed and calls to  * get/contains may fail although a node is present in the array (get/contains  * do a binary search and thus assume that the set is sorted). Also, duplicates  * are allowed. If you have to ensure that calls to get/contains return valid  * results at any time and no duplicates occur, use class  * {@link org.exist.dom.AVLTreeNodeSet}.  *   * Use this class, if you can either ensure that items are added in order, or  * no calls to contains/get are required during the creation phase. Only after  * a call to one of the iterator methods, the set will get sorted and  * duplicates removed.  *   * @author Wolfgang<wolfgang@exist-db.org>  * @since 0.9.3  */
end_comment

begin_class
specifier|public
class|class
name|ExtArrayNodeSet
extends|extends
name|AbstractNodeSet
block|{
specifier|private
specifier|final
specifier|static
name|int
name|INITIAL_DOC_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
name|int
name|documentIds
index|[]
decl_stmt|;
specifier|private
name|Part
name|parts
index|[]
decl_stmt|;
specifier|protected
name|int
name|initalSize
init|=
literal|128
decl_stmt|;
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|partCount
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|isSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|hasOne
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|Part
name|lastPart
init|=
literal|null
decl_stmt|;
specifier|protected
name|NodeProxy
name|lastAdded
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|state
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentSet
name|cachedDocuments
init|=
literal|null
decl_stmt|;
comment|//  used to keep track of the type of added items.
specifier|private
name|int
name|itemType
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
specifier|public
name|ExtArrayNodeSet
parameter_list|()
block|{
name|documentIds
operator|=
operator|new
name|int
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
name|parts
operator|=
operator|new
name|Part
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtArrayNodeSet
parameter_list|(
name|int
name|initialDocsCount
parameter_list|,
name|int
name|initialArraySize
parameter_list|)
block|{
name|initalSize
operator|=
name|initialArraySize
expr_stmt|;
name|documentIds
operator|=
operator|new
name|int
index|[
name|initialDocsCount
index|]
expr_stmt|;
name|parts
operator|=
operator|new
name|Part
index|[
name|initialDocsCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtArrayNodeSet
parameter_list|(
name|int
name|initialArraySize
parameter_list|)
block|{
name|initalSize
operator|=
name|initialArraySize
expr_stmt|;
name|documentIds
operator|=
operator|new
name|int
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
name|parts
operator|=
operator|new
name|Part
index|[
name|INITIAL_DOC_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Part
name|getPart
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|boolean
name|create
parameter_list|,
name|int
name|sizeHint
parameter_list|)
block|{
if|if
condition|(
name|lastPart
operator|!=
literal|null
operator|&&
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|lastDoc
condition|)
return|return
name|lastPart
return|;
name|int
name|idx
init|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|partCount
argument_list|)
decl_stmt|;
name|Part
name|part
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|part
operator|=
name|parts
index|[
name|idx
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|create
condition|)
block|{
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
expr_stmt|;
name|part
operator|=
operator|new
name|Part
argument_list|(
name|sizeHint
argument_list|)
expr_stmt|;
name|insertPart
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|part
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|documentIds
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
name|partCount
operator|=
literal|0
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|lastPart
operator|=
literal|null
expr_stmt|;
name|lastDoc
operator|=
operator|-
literal|1
expr_stmt|;
name|state
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|insertPart
parameter_list|(
name|int
name|docId
parameter_list|,
name|Part
name|part
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|partCount
operator|==
name|parts
operator|.
name|length
condition|)
block|{
name|int
name|ndocs
index|[]
init|=
operator|new
name|int
index|[
name|documentIds
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|documentIds
argument_list|,
literal|0
argument_list|,
name|ndocs
argument_list|,
literal|0
argument_list|,
name|documentIds
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|documentIds
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Part
name|nparts
index|[]
init|=
operator|new
name|Part
index|[
name|parts
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parts
argument_list|,
literal|0
argument_list|,
name|nparts
argument_list|,
literal|0
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|documentIds
operator|=
name|ndocs
expr_stmt|;
name|parts
operator|=
name|nparts
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|partCount
condition|)
block|{
comment|// insert at the end
name|documentIds
index|[
name|idx
index|]
operator|=
name|docId
expr_stmt|;
name|parts
index|[
name|idx
index|]
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
comment|// insert at idx
name|System
operator|.
name|arraycopy
argument_list|(
name|documentIds
argument_list|,
name|idx
argument_list|,
name|documentIds
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|partCount
operator|-
name|idx
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parts
argument_list|,
name|idx
argument_list|,
name|parts
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|partCount
operator|-
name|idx
argument_list|)
expr_stmt|;
name|documentIds
index|[
name|idx
index|]
operator|=
name|docId
expr_stmt|;
name|parts
index|[
name|idx
index|]
operator|=
name|part
expr_stmt|;
block|}
operator|++
name|partCount
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|size
operator|==
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
name|hasOne
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasOne
condition|)
block|{
if|if
condition|(
name|isSorted
condition|)
name|hasOne
operator|=
name|get
argument_list|(
name|proxy
argument_list|)
operator|==
literal|null
expr_stmt|;
else|else
name|hasOne
operator|=
name|lastAdded
operator|==
literal|null
operator|||
name|lastAdded
operator|.
name|compareTo
argument_list|(
name|proxy
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
block|}
else|else
name|hasOne
operator|=
literal|true
expr_stmt|;
name|getPart
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|true
argument_list|,
name|initalSize
argument_list|)
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|setHasChanged
argument_list|()
expr_stmt|;
name|checkItemType
argument_list|(
name|proxy
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
name|proxy
expr_stmt|;
block|}
comment|/**      * Add a new node to the set. If a new array of nodes has to be allocated      * for the document, use the sizeHint parameter to determine the size of      * the newly allocated array. This will overwrite the default array size.      *       * If the size hint is correct, no further reallocations will be required.      */
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|int
name|sizeHint
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasOne
condition|)
block|{
if|if
condition|(
name|isSorted
condition|)
name|hasOne
operator|=
name|get
argument_list|(
name|proxy
argument_list|)
operator|==
literal|null
expr_stmt|;
else|else
name|hasOne
operator|=
name|lastAdded
operator|==
literal|null
operator|||
name|lastAdded
operator|.
name|compareTo
argument_list|(
name|proxy
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
block|}
else|else
name|hasOne
operator|=
literal|true
expr_stmt|;
name|getPart
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|true
argument_list|,
name|sizeHint
operator|!=
name|Constants
operator|.
name|NO_SIZE_HINT
condition|?
name|sizeHint
else|:
name|initalSize
argument_list|)
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
operator|++
name|size
expr_stmt|;
name|isSorted
operator|=
literal|false
expr_stmt|;
name|setHasChanged
argument_list|()
expr_stmt|;
name|checkItemType
argument_list|(
name|proxy
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|lastAdded
operator|=
name|proxy
expr_stmt|;
block|}
specifier|private
name|void
name|checkItemType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|NODE
operator|||
name|itemType
operator|==
name|type
condition|)
return|return;
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
name|itemType
operator|=
name|type
expr_stmt|;
else|else
name|itemType
operator|=
name|Type
operator|.
name|NODE
expr_stmt|;
block|}
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|itemType
return|;
block|}
specifier|private
name|void
name|setHasChanged
parameter_list|()
block|{
name|state
operator|=
operator|(
name|state
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|state
operator|=
literal|0
else|:
name|state
operator|+
literal|1
operator|)
expr_stmt|;
name|cachedDocuments
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSizeHint
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
name|Constants
operator|.
name|NO_SIZE_HINT
else|:
name|part
operator|.
name|length
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.NodeSet#iterator()      */
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.value.Sequence#iterate()      */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.AbstractNodeSet#unorderedIterator()      */
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtArrayIterator
argument_list|()
return|;
block|}
specifier|public
name|ByDocumentIterator
name|iterateByDocument
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtDocIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.NodeSet#contains(org.exist.dom.NodeProxy)      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|false
else|:
name|part
operator|.
name|contains
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.NodeSet#addAll(org.exist.dom.NodeSet)      */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|other
operator|.
name|hasOne
argument_list|()
condition|)
block|{
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|other
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.value.Sequence#getLength()      */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSorted
argument_list|()
condition|)
name|sort
argument_list|()
expr_stmt|;
comment|// sort to remove duplicates
return|return
name|size
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.NodeList#item(int)      */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getNode
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.NodeSet#get(int)      */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Part
name|part
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|part
operator|=
name|parts
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|count
operator|+
name|part
operator|.
name|length
operator|>
name|pos
condition|)
return|return
name|part
operator|.
name|get
argument_list|(
name|pos
operator|-
name|count
argument_list|)
return|;
name|count
operator|+=
name|part
operator|.
name|length
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.NodeSet#get(org.exist.dom.NodeProxy)      */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|p
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.value.Sequence#itemAt(int)      */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|getDescendantsInSet
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|boolean
name|childOnly
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|node
decl_stmt|;
name|Part
name|part
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|al
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|part
operator|=
name|getPart
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
name|part
operator|.
name|getDescendantsInSet
argument_list|(
name|result
argument_list|,
name|node
argument_list|,
name|childOnly
argument_list|,
name|includeSelf
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|ancestorId
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
specifier|final
name|Part
name|part
init|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|hasDescendantsInSet
argument_list|(
name|ancestorId
argument_list|,
name|contextId
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|selectParentChild
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|instanceof
name|VirtualNodeSet
condition|)
return|return
name|super
operator|.
name|selectParentChild
argument_list|(
name|al
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
return|return
name|getDescendantsInSet
argument_list|(
name|al
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|filterDocuments
parameter_list|(
name|ExtArrayNodeSet
name|otherSet
parameter_list|)
block|{
name|ExtArrayNodeSet
name|other
init|=
name|otherSet
decl_stmt|;
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|partCount
argument_list|,
name|other
operator|.
name|initalSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|other
operator|.
name|documentIds
index|[
name|i
index|]
argument_list|,
name|partCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
name|Part
name|part
init|=
name|parts
index|[
name|idx
index|]
decl_stmt|;
name|int
name|otherIdx
init|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|result
operator|.
name|documentIds
argument_list|,
name|documentIds
index|[
name|idx
index|]
argument_list|,
name|result
operator|.
name|partCount
argument_list|)
decl_stmt|;
name|otherIdx
operator|=
operator|-
operator|(
name|otherIdx
operator|+
literal|1
operator|)
expr_stmt|;
name|result
operator|.
name|insertPart
argument_list|(
name|documentIds
index|[
name|idx
index|]
argument_list|,
name|part
argument_list|,
name|otherIdx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isSorted
parameter_list|()
block|{
return|return
name|isSorted
return|;
block|}
specifier|public
name|void
name|setSorted
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Part
name|part
init|=
name|getPart
argument_list|(
name|document
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
name|part
operator|.
name|setIsSorted
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove all duplicate nodes, but merge their      * contexts.      */
specifier|public
name|void
name|mergeDuplicates
parameter_list|()
block|{
name|sort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|sort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|(
name|boolean
name|mergeContexts
parameter_list|)
block|{
if|if
condition|(
name|isSorted
condition|)
return|return;
if|if
condition|(
name|hasOne
condition|)
block|{
name|isSorted
operator|=
literal|true
expr_stmt|;
comment|// shortcut: don't sort if there's just one item
name|size
operator|=
name|parts
index|[
literal|0
index|]
operator|.
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//        long start = System.currentTimeMillis();
name|Part
name|part
decl_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|part
operator|=
name|parts
index|[
name|i
index|]
expr_stmt|;
name|part
operator|.
name|sort
argument_list|()
expr_stmt|;
name|size
operator|+=
name|part
operator|.
name|removeDuplicates
argument_list|(
name|mergeContexts
argument_list|)
expr_stmt|;
block|}
name|isSorted
operator|=
literal|true
expr_stmt|;
comment|//        System.out.println("sort took " + (System.currentTimeMillis() -
comment|//                start) + "ms.");
block|}
specifier|public
specifier|final
name|void
name|sortInDocumentOrder
parameter_list|()
block|{
name|sort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.value.AbstractSequence#setSelfAsContext()      */
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
name|int
name|contextId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|.
name|setSelfAsContext
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectAncestorDescendant(org.exist.dom.NodeSet, int, boolean, boolean)      */
specifier|public
name|NodeSet
name|selectAncestorDescendant
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|al
operator|instanceof
name|VirtualNodeSet
condition|)
return|return
name|super
operator|.
name|selectAncestorDescendant
argument_list|(
name|al
argument_list|,
name|mode
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
return|return
name|getDescendantsInSet
argument_list|(
name|al
argument_list|,
literal|false
argument_list|,
name|includeSelf
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectSiblings(org.exist.dom.NodeSet, int)      */
specifier|public
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
name|NodeSet
name|siblings
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectPrecedingSiblings
argument_list|(
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
name|NodeSet
name|siblings
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectFollowingSiblings
argument_list|(
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#selectAncestors(org.exist.dom.NodeSet, boolean, boolean)      */
specifier|public
name|NodeSet
name|selectAncestors
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|selectAncestors
argument_list|(
name|al
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|lastPart
operator|=
name|getPart
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|,
name|initalSize
argument_list|)
expr_stmt|;
return|return
name|lastPart
operator|==
literal|null
condition|?
literal|null
else|:
name|lastPart
operator|.
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
specifier|public
name|String
name|debugParts
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|documentIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.NodeSet#getIndexType()      */
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
comment|//Is the index type initialized ?
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|hasTextIndex
operator|=
literal|false
expr_stmt|;
name|hasMixedContent
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|.
name|determineIndexType
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|indexType
return|;
block|}
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
if|if
condition|(
name|cachedDocuments
operator|!=
literal|null
condition|)
return|return
name|cachedDocuments
return|;
name|cachedDocuments
operator|=
operator|new
name|DocumentSet
argument_list|(
name|partCount
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCount
condition|;
name|i
operator|++
control|)
block|{
name|cachedDocuments
operator|.
name|add
argument_list|(
name|parts
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|isSorted
operator|=
literal|true
expr_stmt|;
return|return
name|cachedDocuments
return|;
block|}
specifier|public
name|void
name|setDocumentSet
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|cachedDocuments
operator|=
name|docs
expr_stmt|;
block|}
specifier|public
name|Iterator
name|getCollectionIterator
parameter_list|()
block|{
return|return
operator|new
name|CollectionIterator
argument_list|()
return|;
block|}
specifier|private
class|class
name|CollectionIterator
implements|implements
name|Iterator
block|{
name|Collection
name|nextCollection
init|=
literal|null
decl_stmt|;
name|int
name|currentPart
init|=
literal|0
decl_stmt|;
name|CollectionIterator
parameter_list|()
block|{
if|if
condition|(
name|partCount
operator|>
literal|0
condition|)
block|{
name|Part
name|part
init|=
name|parts
index|[
name|currentPart
operator|++
index|]
decl_stmt|;
name|nextCollection
operator|=
name|part
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextCollection
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Collection
name|oldCollection
init|=
name|nextCollection
decl_stmt|;
name|nextCollection
operator|=
literal|null
expr_stmt|;
name|Collection
name|col
decl_stmt|;
while|while
condition|(
name|currentPart
operator|<
name|partCount
condition|)
block|{
name|col
operator|=
name|parts
index|[
name|currentPart
operator|++
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|col
operator|.
name|equals
argument_list|(
name|oldCollection
argument_list|)
condition|)
block|{
name|nextCollection
operator|=
name|col
expr_stmt|;
break|break;
block|}
block|}
return|return
name|oldCollection
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// not needed
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.AbstractNodeSet#hasChanged(int)      */
specifier|public
name|boolean
name|hasChanged
parameter_list|(
name|int
name|previousState
parameter_list|)
block|{
return|return
name|state
operator|!=
name|previousState
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.dom.AbstractNodeSet#getState()      */
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"ExtArrayTree#"
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|final
class|class
name|Part
block|{
specifier|private
name|boolean
name|isSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|NodeProxy
name|array
index|[]
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
name|Part
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|array
operator|=
operator|new
name|NodeProxy
index|[
name|initialSize
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|selectParentChild
parameter_list|(
name|NodeSet
name|result
parameter_list|,
name|NodeProxy
name|na
parameter_list|,
name|NodeSetIterator
name|ia
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|startPos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|nb
init|=
name|array
index|[
name|pos
index|]
decl_stmt|;
name|NodeId
name|lastMarked
init|=
name|na
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// first, try to find nodes belonging to the same doc
if|if
condition|(
name|na
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|!=
name|nb
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
break|break;
comment|// same document
name|NodeId
name|pa
init|=
name|na
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|NodeId
name|pb
init|=
name|nb
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|int
name|relation
init|=
name|pb
operator|.
name|computeRelation
argument_list|(
name|pa
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|relation
operator|==
name|NodeId
operator|.
name|IS_CHILD
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|NodeSet
operator|.
name|DESCENDANT
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|nb
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|na
argument_list|)
expr_stmt|;
else|else
name|nb
operator|.
name|copyContext
argument_list|(
name|na
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|na
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|nb
argument_list|)
expr_stmt|;
else|else
name|na
operator|.
name|copyContext
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|++
name|pos
operator|<
name|length
condition|)
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
if|else if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeProxy
name|next
init|=
name|ia
operator|.
name|peekNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
name|na
operator|=
operator|(
name|NodeProxy
operator|)
name|ia
operator|.
name|next
argument_list|()
expr_stmt|;
name|startPos
operator|=
name|pos
expr_stmt|;
block|}
else|else
break|break;
block|}
else|else
break|break;
block|}
else|else
block|{
name|int
name|cmp
init|=
name|pa
operator|.
name|compareTo
argument_list|(
name|pb
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeProxy
name|next
init|=
operator|(
name|NodeProxy
operator|)
name|ia
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|lastMarked
argument_list|)
condition|)
block|{
name|lastMarked
operator|=
name|next
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|startPos
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|na
operator|=
name|next
expr_stmt|;
block|}
else|else
break|break;
block|}
else|else
block|{
if|if
condition|(
operator|++
name|pos
operator|<
name|length
condition|)
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
else|else
block|{
if|if
condition|(
name|ia
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeProxy
name|next
init|=
operator|(
name|NodeProxy
operator|)
name|ia
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|pa
argument_list|)
condition|)
block|{
name|pos
operator|=
name|startPos
expr_stmt|;
name|nb
operator|=
name|array
index|[
name|pos
index|]
expr_stmt|;
block|}
name|na
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|void
name|add
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
comment|// just check if this node has already been added. We only
comment|// check the last entry, which should avoid most of the likely
comment|// duplicates. The remaining duplicates are removed by
comment|// removeDuplicates().
if|if
condition|(
name|length
operator|>
literal|0
operator|&&
name|array
index|[
name|length
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|length
operator|==
name|array
operator|.
name|length
condition|)
block|{
comment|//int newLength = (length * 3)/2 + 1;
specifier|final
name|int
name|newLength
init|=
name|length
operator|<<
literal|1
decl_stmt|;
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|newLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|array
operator|=
name|temp
expr_stmt|;
block|}
name|array
index|[
name|length
operator|++
index|]
operator|=
name|p
expr_stmt|;
block|}
name|boolean
name|contains
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|nodeId
argument_list|)
operator|!=
literal|null
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|array
index|[
name|pos
index|]
return|;
block|}
name|NodeProxy
name|get
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|,
name|cmp
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|array
index|[
name|mid
index|]
expr_stmt|;
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|p
return|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|array
index|[
literal|0
index|]
operator|.
name|getDocument
argument_list|()
return|;
block|}
name|void
name|setIsSorted
parameter_list|(
name|boolean
name|sorted
parameter_list|)
block|{
name|this
operator|.
name|isSorted
operator|=
name|sorted
expr_stmt|;
block|}
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|isSorted
condition|)
return|return;
name|FastQSort
operator|.
name|sortByNodeId
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|sortInDocumentOrder
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
comment|/**          * Check if the node identified by its node id has an ancestor          * contained in this node set and return the ancestor found.          *           * If directParent is true, only immediate ancestors (parents) are          * considered. Otherwise the method will call itself recursively for          * all the node's parents.          *           * If includeSelf is true, the method returns also true if the node          * itself is contained in the node set.          */
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|NodeProxy
name|temp
decl_stmt|;
if|if
condition|(
name|includeSelf
operator|&&
operator|(
name|temp
operator|=
name|get
argument_list|(
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
return|return
name|temp
return|;
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
while|while
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|temp
operator|=
name|get
argument_list|(
name|nodeId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|temp
return|;
block|}
if|else if
condition|(
name|directParent
condition|)
return|return
literal|null
return|;
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|NodeProxy
name|hasDescendantsInSet
parameter_list|(
name|NodeId
name|ancestorId
parameter_list|,
name|int
name|contextId
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
comment|// do a binary search to pick some node in the range of valid child
comment|// ids
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|NodeId
name|id
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|id
operator|=
name|array
index|[
name|mid
index|]
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|ancestorId
argument_list|)
condition|)
break|break;
comment|// found a child node, break out.
name|cmp
operator|=
name|id
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
return|return
literal|null
return|;
comment|// no node found
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|array
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ancestorId
argument_list|)
operator|>=
literal|0
condition|)
operator|--
name|mid
expr_stmt|;
name|NodeProxy
name|ancestor
init|=
operator|new
name|NodeProxy
argument_list|(
name|getDocument
argument_list|()
argument_list|,
name|ancestorId
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|ancestorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
name|add
operator|=
name|includeSelf
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|ancestor
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|ancestor
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//                        ancestor.addMatches(array[i]);
block|}
block|}
else|else
break|break;
block|}
return|return
name|ancestor
return|;
block|}
comment|/**          * Find all nodes in the current set being children or descendants of the given parent          * node.          *           * @param result the node set to which matching nodes will be appended.          * @param parent the parent node to search for.          * @param childOnly only include child nodes, not descendant nodes          * @param includeSelf include the self:: axis          * @param mode          * @param contextId          */
name|NodeSet
name|getDescendantsInSet
parameter_list|(
name|NodeSet
name|result
parameter_list|,
name|NodeProxy
name|parent
parameter_list|,
name|boolean
name|childOnly
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|NodeProxy
name|p
decl_stmt|;
name|NodeId
name|parentId
init|=
name|parent
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// document nodes are treated specially
if|if
condition|(
name|parentId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|add
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
name|add
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
expr_stmt|;
if|else if
condition|(
name|includeSelf
condition|)
name|add
operator|=
literal|true
expr_stmt|;
else|else
name|add
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|array
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
comment|//            					array[i].addContextNode(contextId, parent);
else|else
name|array
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
comment|//            					parent.addContextNode(contextId, array[i]);
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|parent
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// do a binary search to pick some node in the range of valid child
comment|// ids
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|array
index|[
name|mid
index|]
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|parentId
argument_list|)
condition|)
break|break;
comment|// found a child node, break out.
name|cmp
operator|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|low
operator|>
name|high
condition|)
return|return
name|result
return|;
comment|// no node found
comment|// find the first child node in the range
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|array
index|[
name|mid
operator|-
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|parentId
argument_list|)
operator|>
literal|0
condition|)
operator|--
name|mid
expr_stmt|;
comment|// walk through the range of child nodes we found
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|computeRelation
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
operator|-
literal|1
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|childOnly
condition|)
name|add
operator|=
name|cmp
operator|==
name|NodeId
operator|.
name|IS_CHILD
expr_stmt|;
if|else if
condition|(
name|cmp
operator|==
name|NodeId
operator|.
name|IS_SELF
condition|)
name|add
operator|=
name|includeSelf
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
comment|//            						array[i].addContextNode(contextId, parent);
name|array
index|[
name|i
index|]
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|array
index|[
name|i
index|]
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|.
name|addMatches
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
comment|//            						parent.addContextNode(contextId, array[i]);
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|parent
operator|.
name|copyContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addMatches
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**          * Remove all duplicate nodes from this part.          *           * @return the new length of the part, after removing all duplicates          */
name|int
name|removeDuplicates
parameter_list|(
name|boolean
name|mergeContext
parameter_list|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|array
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|array
index|[
name|j
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|!=
operator|++
name|j
condition|)
name|array
index|[
name|j
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|mergeContext
condition|)
block|{
name|array
index|[
name|j
index|]
operator|.
name|addContext
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|length
operator|=
operator|++
name|j
expr_stmt|;
return|return
name|length
return|;
block|}
name|void
name|determineIndexType
parameter_list|()
block|{
comment|//Is the index type initialized ?
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|hasTextIndex
operator|=
literal|true
expr_stmt|;
name|hasMixedContent
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|NodeProxy
name|node
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
condition|)
block|{
comment|//Temporary nodes return default values
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
name|hasTextIndex
operator|=
literal|false
expr_stmt|;
name|hasMixedContent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|int
name|nodeIndexType
init|=
name|node
operator|.
name|getIndexType
argument_list|()
decl_stmt|;
comment|//Refine type
comment|//TODO : use common subtype
if|if
condition|(
name|indexType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|indexType
operator|=
name|nodeIndexType
expr_stmt|;
block|}
else|else
block|{
comment|//Broaden type
comment|//TODO : use common supertype
if|if
condition|(
name|indexType
operator|!=
name|nodeIndexType
condition|)
name|indexType
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasTextIndex
argument_list|()
condition|)
block|{
name|hasTextIndex
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasMixedContent
argument_list|()
condition|)
block|{
name|hasMixedContent
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|setSelfAsContext
parameter_list|(
name|int
name|contextId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ExtArrayIterator
implements|implements
name|NodeSetIterator
implements|,
name|SequenceIterator
block|{
name|Part
name|currentPart
init|=
literal|null
decl_stmt|;
name|int
name|partPos
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|next
init|=
literal|null
decl_stmt|;
name|ExtArrayIterator
parameter_list|()
block|{
if|if
condition|(
name|partPos
operator|<
name|partCount
condition|)
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPosition
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|partPos
operator|=
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|documentIds
argument_list|,
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
argument_list|,
name|partCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|partPos
operator|>=
literal|0
condition|)
block|{
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|currentPart
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|currentPart
operator|.
name|array
index|[
name|mid
index|]
expr_stmt|;
name|int
name|cmp
init|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
name|mid
expr_stmt|;
name|next
operator|=
name|p
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|next
operator|=
literal|null
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *           * @see java.util.Iterator#hasNext()          */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
comment|/*          * (non-Javadoc)          *           * @see java.util.Iterator#next()          */
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodeProxy
name|n
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|++
name|pos
operator|==
name|currentPart
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|++
name|partPos
operator|<
name|partCount
condition|)
block|{
name|currentPart
operator|=
name|parts
index|[
name|partPos
index|]
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
specifier|public
name|NodeProxy
name|peekNode
parameter_list|()
block|{
return|return
name|next
return|;
block|}
comment|/*          * (non-Javadoc)          *           * @see org.exist.xquery.value.SequenceIterator#nextItem()          */
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
return|return
operator|(
name|Item
operator|)
name|next
argument_list|()
return|;
block|}
comment|/*          * (non-Javadoc)          *           * @see java.util.Iterator#remove()          */
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
specifier|private
class|class
name|ExtDocIterator
implements|implements
name|ByDocumentIterator
block|{
name|Part
name|currentPart
init|=
literal|null
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|NodeProxy
name|next
init|=
literal|null
decl_stmt|;
specifier|public
name|ExtDocIterator
parameter_list|()
block|{
if|if
condition|(
name|partCount
operator|>
literal|0
condition|)
name|currentPart
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nextDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|currentPart
operator|=
name|getPart
argument_list|(
name|document
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|currentPart
operator|!=
literal|null
operator|&&
name|currentPart
operator|.
name|length
operator|>
literal|0
condition|)
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|next
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNextNode
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
specifier|public
name|NodeProxy
name|nextNode
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodeProxy
name|n
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|++
name|pos
operator|<
name|currentPart
operator|.
name|length
condition|)
name|next
operator|=
name|currentPart
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
specifier|public
name|NodeProxy
name|peekNode
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|void
name|setPosition
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|currentPart
operator|=
name|getPart
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|currentPart
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|mid
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|p
operator|=
name|currentPart
operator|.
name|array
index|[
name|mid
index|]
expr_stmt|;
name|int
name|cmp
init|=
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|pos
operator|=
name|mid
expr_stmt|;
name|next
operator|=
name|p
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

