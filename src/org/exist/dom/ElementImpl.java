begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  meier@ifs.tu-darmstadt.de  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id:  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RelationalBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Signatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * ElementImpl.java  *   * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|ElementImpl
extends|extends
name|NodeImpl
implements|implements
name|Element
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ElementImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|children
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|firstChild
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
specifier|protected
name|ArrayList
name|prefixes
init|=
literal|null
decl_stmt|;
comment|/**  Constructor for the ElementImpl object */
specifier|public
name|ElementImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the ElementImpl object 	 * 	 *@param  gid  Description of the Parameter 	 */
specifier|public
name|ElementImpl
parameter_list|(
name|long
name|gid
parameter_list|)
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|gid
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the ElementImpl object 	 * 	 *@param  nodeName  Description of the Parameter 	 */
specifier|public
name|ElementImpl
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
comment|/** 	 *  Constructor for the ElementImpl object 	 * 	 *@param  gid       Description of the Parameter 	 *@param  nodeName  Description of the Parameter 	 */
specifier|public
name|ElementImpl
parameter_list|(
name|long
name|gid
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodeName
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
comment|/** 	 * Reset this element to its initial state. 	 *  	 * @see org.exist.dom.NodeImpl#clear() 	 */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|firstChild
operator|=
operator|-
literal|1
expr_stmt|;
name|gid
operator|=
literal|0
expr_stmt|;
name|loaded
operator|=
literal|false
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|prefixes
operator|!=
literal|null
condition|)
name|prefixes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  data  Description of the Parameter 	 *@param  doc   Description of the Parameter 	 *@return       Description of the Return Value 	 */
specifier|public
specifier|static
name|NodeImpl
name|deserialize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|byte
name|attrSizeType
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|data
index|[
name|start
index|]
operator|&
literal|0x0C
operator|)
operator|>>
literal|0x2
operator|)
decl_stmt|;
name|byte
name|idSizeType
init|=
operator|(
name|byte
operator|)
operator|(
name|data
index|[
name|start
index|]
operator|&
literal|0x03
operator|)
decl_stmt|;
name|int
name|children
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|start
operator|+
literal|1
argument_list|)
decl_stmt|;
name|short
name|attributes
init|=
operator|(
name|short
operator|)
name|Signatures
operator|.
name|read
argument_list|(
name|attrSizeType
argument_list|,
name|data
argument_list|,
name|start
operator|+
literal|5
argument_list|)
decl_stmt|;
name|int
name|next
init|=
name|start
operator|+
literal|5
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|attrSizeType
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|len
decl_stmt|;
name|short
name|id
init|=
operator|(
name|short
operator|)
name|Signatures
operator|.
name|read
argument_list|(
name|idSizeType
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|doc
operator|.
name|getSymbols
argument_list|()
operator|.
name|getName
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ElementImpl
name|node
init|=
operator|new
name|ElementImpl
argument_list|(
literal|0
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|node
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|node
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
name|node
operator|.
name|ownerDocument
operator|=
name|doc
expr_stmt|;
name|next
operator|+=
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|>
name|next
condition|)
block|{
name|byte
index|[]
name|pfxData
init|=
operator|new
name|byte
index|[
name|end
operator|-
name|next
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|next
argument_list|,
name|pfxData
argument_list|,
literal|0
argument_list|,
name|end
operator|-
name|next
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|pfxData
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
try|try
block|{
name|short
name|prefixCount
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|String
name|prefix
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixCount
condition|;
name|i
operator|++
control|)
block|{
name|prefix
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|node
operator|.
name|addNamespacePrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|public
name|int
name|getSymbol
parameter_list|()
block|{
return|return
name|ownerDocument
operator|.
name|getSymbols
argument_list|()
operator|.
name|getSymbol
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|addNamespacePrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
name|prefixes
operator|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|temp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefixes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
return|return;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Append a child to this node. This method does not rearrange the 	 * node tree and is only used internally by the parser. 	 *  	 * @param child 	 * @throws DOMException 	 */
specifier|public
name|void
name|appendChildInternal
parameter_list|(
name|NodeImpl
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|gid
operator|>
literal|0
condition|)
block|{
name|child
operator|.
name|setGID
argument_list|(
name|firstChildID
argument_list|()
operator|+
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getGID
argument_list|()
operator|<
literal|0
condition|)
block|{
specifier|final
name|int
name|level
init|=
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
specifier|final
name|int
name|order
init|=
name|ownerDocument
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_STATE_ERR
argument_list|,
literal|"internal error: node "
operator|+
name|gid
operator|+
literal|"; first-child: "
operator|+
name|firstChildID
argument_list|()
operator|+
literal|"; level: "
operator|+
name|level
operator|+
literal|"; maxDepth: "
operator|+
name|ownerDocument
operator|.
name|maxDepth
operator|+
literal|"; order(level+1): "
operator|+
name|order
operator|+
literal|"; start0: "
operator|+
name|ownerDocument
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|+
literal|"; start1: "
operator|+
name|ownerDocument
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|+
literal|1
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
name|child
operator|.
name|setGID
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|++
name|children
expr_stmt|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#appendChild(org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|appendChild
parameter_list|(
name|Node
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
name|node
operator|=
name|appendChild
argument_list|(
name|firstChildID
argument_list|()
argument_list|,
name|this
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|long
name|last
init|=
name|lastChildID
argument_list|()
decl_stmt|;
name|node
operator|=
name|appendChild
argument_list|(
name|last
operator|+
literal|1
argument_list|,
operator|(
name|NodeImpl
operator|)
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|last
argument_list|)
argument_list|,
name|child
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|ownerDocument
operator|.
name|broker
operator|.
name|saveCollection
argument_list|(
name|ownerDocument
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_ACCESS_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|child
return|;
block|}
specifier|private
name|void
name|checkTree
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|EXistException
block|{
comment|// check if the tree structure needs to be changed
name|int
name|level
init|=
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerDocument
operator|.
name|getMaxDepth
argument_list|()
operator|==
name|level
operator|+
literal|1
condition|)
block|{
name|ownerDocument
operator|.
name|incMaxDepth
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"setting maxDepth = "
operator|+
name|ownerDocument
operator|.
name|getMaxDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ownerDocument
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
operator|<
name|children
operator|+
name|size
condition|)
block|{
comment|// recompute the order of the tree
name|ownerDocument
operator|.
name|setTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|,
name|children
operator|+
name|size
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|calculateTreeLevelStartPoints
argument_list|()
expr_stmt|;
if|if
condition|(
name|ownerDocument
operator|.
name|reindex
operator|<
literal|0
operator|||
name|ownerDocument
operator|.
name|reindex
operator|>
name|level
operator|+
literal|1
condition|)
block|{
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Node
name|appendChildren
parameter_list|(
name|NodeList
name|nodes
parameter_list|)
throws|throws
name|DOMException
block|{
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
name|node
operator|=
name|appendChildren
argument_list|(
name|firstChildID
argument_list|()
argument_list|,
name|this
argument_list|,
name|nodes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|long
name|last
init|=
name|lastChildID
argument_list|()
decl_stmt|;
name|node
operator|=
name|appendChildren
argument_list|(
name|last
operator|+
literal|1
argument_list|,
name|getLastNode
argument_list|(
operator|(
name|NodeImpl
operator|)
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|last
argument_list|)
argument_list|)
argument_list|,
name|nodes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//		try {
comment|//			ownerDocument.broker.saveCollection(ownerDocument.getCollection());
comment|//		} catch (PermissionDeniedException e) {
comment|//			throw new DOMException(DOMException.INVALID_ACCESS_ERR, e.getMessage());
comment|//		}
return|return
name|node
return|;
block|}
comment|/** 	 * Internal append. 	 *  	 * @param last 	 * @param child 	 * @return Node 	 * @throws DOMException 	 */
specifier|private
name|Node
name|appendChildren
parameter_list|(
name|long
name|gid
parameter_list|,
name|NodeImpl
name|last
parameter_list|,
name|NodeList
name|nodes
parameter_list|,
name|boolean
name|index
parameter_list|)
throws|throws
name|DOMException
block|{
try|try
block|{
name|checkTree
argument_list|(
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"max. document size exceeded"
argument_list|)
throw|;
block|}
name|children
operator|+=
name|nodes
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|Node
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|last
operator|=
operator|(
name|NodeImpl
operator|)
name|appendChild
argument_list|(
name|gid
operator|+
name|i
argument_list|,
name|last
argument_list|,
name|child
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|last
return|;
block|}
specifier|private
name|Node
name|appendChild
parameter_list|(
name|long
name|gid
parameter_list|,
name|NodeImpl
name|last
parameter_list|,
name|Node
name|child
parameter_list|,
name|boolean
name|index
parameter_list|)
throws|throws
name|DOMException
block|{
name|String
name|ns
decl_stmt|,
name|prefix
decl_stmt|;
name|Attr
name|attr
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
comment|// create new element
specifier|final
name|ElementImpl
name|elem
init|=
operator|new
name|ElementImpl
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getTagName
argument_list|()
argument_list|)
decl_stmt|;
name|elem
operator|.
name|setGID
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setOwnerDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
comment|// handle namespaces
name|ns
operator|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|child
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
condition|?
name|child
operator|.
name|getPrefix
argument_list|()
else|:
literal|'#'
operator|+
name|ns
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|registerNamespace
argument_list|(
name|ns
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|elem
operator|.
name|setNodeName
argument_list|(
name|prefix
operator|+
literal|':'
operator|+
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|elem
operator|.
name|addPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|// add attributes to list of child nodes
specifier|final
name|NodeListImpl
name|ch
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
specifier|final
name|NamedNodeMap
name|attribs
init|=
name|child
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attribs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|attr
operator|=
operator|(
name|Attr
operator|)
name|attribs
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// register namespace prefixes
name|ns
operator|=
name|attr
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|attr
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
condition|?
name|attr
operator|.
name|getPrefix
argument_list|()
else|:
literal|'#'
operator|+
name|ns
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|registerNamespace
argument_list|(
name|ns
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|elem
operator|.
name|addPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getChildNodes
argument_list|()
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setChildCount
argument_list|(
name|ch
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert the node
name|ownerDocument
operator|.
name|broker
operator|.
name|insertAfter
argument_list|(
name|last
argument_list|,
name|elem
argument_list|)
expr_stmt|;
comment|// index now?
if|if
condition|(
operator|(
name|ownerDocument
operator|.
name|reindex
operator|<
literal|0
operator|||
name|ownerDocument
operator|.
name|reindex
operator|>
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
operator|)
operator|&&
name|index
condition|)
name|ownerDocument
operator|.
name|broker
operator|.
name|index
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setChildCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|elem
operator|.
name|checkTree
argument_list|(
name|ch
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"max. document size exceeded"
argument_list|)
throw|;
block|}
comment|// process child nodes
name|last
operator|=
operator|(
name|NodeImpl
operator|)
name|elem
operator|.
name|appendChildren
argument_list|(
name|elem
operator|.
name|firstChildID
argument_list|()
argument_list|,
name|elem
argument_list|,
name|ch
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|last
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
specifier|final
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|.
name|setGID
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
comment|// insert the node
name|ownerDocument
operator|.
name|broker
operator|.
name|insertAfter
argument_list|(
name|last
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ownerDocument
operator|.
name|reindex
operator|<
literal|0
operator|||
name|ownerDocument
operator|.
name|reindex
operator|>
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
operator|)
operator|&&
name|index
condition|)
name|ownerDocument
operator|.
name|broker
operator|.
name|index
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|text
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|attr
operator|=
operator|(
name|Attr
operator|)
name|child
expr_stmt|;
specifier|final
name|AttrImpl
name|attrib
init|=
operator|new
name|AttrImpl
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|attrib
operator|.
name|setGID
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setOwnerDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
comment|// handle namespaces
name|ns
operator|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setNodeName
argument_list|(
name|prefix
operator|+
literal|':'
operator|+
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// insert the node
name|ownerDocument
operator|.
name|broker
operator|.
name|insertAfter
argument_list|(
name|last
argument_list|,
name|attrib
argument_list|)
expr_stmt|;
comment|// index now?
if|if
condition|(
operator|(
name|ownerDocument
operator|.
name|reindex
operator|<
literal|0
operator|||
name|ownerDocument
operator|.
name|reindex
operator|>
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
operator|)
operator|&&
name|index
condition|)
name|ownerDocument
operator|.
name|broker
operator|.
name|index
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
return|return
name|attrib
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * @see org.w3c.dom.Node#getNamespaceURI() 	 */
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
if|if
condition|(
name|nodeName
operator|!=
literal|null
operator|&&
name|nodeName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|<
literal|0
operator|&&
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
comment|// check for default namespaces
name|String
name|ns
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefixes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ns
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ns
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
return|return
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|ns
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|nodeName
operator|!=
literal|null
operator|&&
name|nodeName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|prefix
init|=
name|nodeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nodeName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
return|return
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|boolean
name|declaresNamespacePrefixes
parameter_list|()
block|{
return|return
name|prefixes
operator|!=
literal|null
operator|&&
name|prefixes
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/** 	 * @see org.exist.dom.NodeImpl#firstChildID() 	 */
specifier|public
name|long
name|firstChildID
parameter_list|()
block|{
if|if
condition|(
name|gid
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|firstChild
operator|>
operator|-
literal|1
condition|)
return|return
name|firstChild
return|;
name|firstChild
operator|=
name|XMLUtil
operator|.
name|getFirstChildId
argument_list|(
name|ownerDocument
argument_list|,
name|gid
argument_list|)
expr_stmt|;
return|return
name|firstChild
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getAttribute(java.lang.String) 	 */
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|start
init|=
name|firstChildID
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|children
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|&&
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
operator|(
operator|(
name|AttrImpl
operator|)
name|child
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|String
name|getAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|localName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getAttributeNode(java.lang.String) 	 */
specifier|public
name|Attr
name|getAttributeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|start
init|=
name|firstChildID
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|children
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|&&
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
operator|(
name|Attr
operator|)
name|child
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getAttributeNodeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|Attr
name|getAttributeNodeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|getAttributeNode
argument_list|(
name|localName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#getAttributes() 	 */
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
name|NamedNodeMapImpl
name|map
init|=
operator|new
name|NamedNodeMapImpl
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|firstChildID
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAttributesCount
argument_list|()
operator|==
literal|0
condition|)
return|return
name|map
return|;
for|for
control|(
name|long
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|children
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
name|map
operator|.
name|setNamedItem
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/** 	 * @see org.exist.dom.NodeImpl#getChildCount() 	 */
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#getChildNodes() 	 */
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
return|return
operator|new
name|NodeListImpl
argument_list|()
return|;
name|long
name|first
init|=
name|firstChildID
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|1
condition|)
block|{
name|NodeListImpl
name|childList
init|=
operator|new
name|NodeListImpl
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|childList
operator|.
name|add
argument_list|(
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|childList
return|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|PRELOAD
argument_list|)
expr_stmt|;
name|NodeList
name|result
init|=
name|ownerDocument
operator|.
name|getRange
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|children
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|SINGLE
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getElementsByTagName(java.lang.String) 	 */
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
return|return
operator|(
name|NodeSet
operator|)
name|ownerDocument
operator|.
name|findElementsByTagName
argument_list|(
name|this
argument_list|,
name|tagName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#getElementsByTagNameNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|String
name|prefix
init|=
name|ownerDocument
operator|.
name|broker
operator|.
name|getNamespacePrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
name|String
name|qname
init|=
operator|(
name|prefix
operator|!=
literal|null
operator|)
condition|?
name|prefix
operator|+
literal|':'
operator|+
name|localName
else|:
name|localName
decl_stmt|;
return|return
name|getElementsByTagName
argument_list|(
name|qname
argument_list|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#getFirstChild() 	 */
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasChildNodes
argument_list|()
condition|)
return|return
literal|null
return|;
name|long
name|first
init|=
name|firstChildID
argument_list|()
operator|+
name|getAttributesCount
argument_list|()
decl_stmt|;
return|return
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|first
argument_list|)
return|;
comment|/* 		 *  long last = first + children + 1; 		 *  Node n = ownerDocument.getNode(first); 		 *  while(n.getNodeType() == Node.ATTRIBUTE_NODE&& 		 *  first<= last) 		 *  n = ownerDocument.getNode(++first); 		 *  return  first == last ? null : n; 		 */
block|}
comment|/** 	 * @see org.w3c.dom.Node#getLastChild() 	 */
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasChildNodes
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|lastChildID
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the namespacePrefixes attribute of the DocumentImpl object 	 * 	 *@return    The namespacePrefixes value 	 */
specifier|public
name|Iterator
name|getNamespacePrefixes
parameter_list|()
block|{
return|return
name|prefixes
operator|==
literal|null
condition|?
literal|null
else|:
name|prefixes
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#getNodeName() 	 */
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
name|loaded
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|elementWith
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|nodeName
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#getNodeValue() 	 */
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
comment|//        if ( !loaded )
comment|//            loaded = ownerDocument.broker.elementWith( this );
comment|//
comment|//        StringBuffer buf = new StringBuffer();
comment|//        long start = firstChildID();
comment|//        Node child;
comment|//        String childData;
comment|//        for ( long i = start; i< start + children; i++ ) {
comment|//            child = ownerDocument.getNode( i );
comment|//            if ( child.getNodeType() == Node.TEXT_NODE ||
comment|//                child.getNodeType() == Node.ELEMENT_NODE ) {
comment|//                childData = child.getNodeValue();
comment|//                if ( childData != null )
comment|//                    buf.append( childData );
comment|//
comment|//            }
comment|//        }
comment|//        return buf.toString();
block|}
comment|/** 	 * @see org.w3c.dom.Element#getTagName() 	 */
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
name|loaded
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|elementWith
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|nodeName
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#hasAttribute(java.lang.String) 	 */
specifier|public
name|boolean
name|hasAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|first
init|=
name|firstChildID
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|ownerDocument
operator|.
name|getNode
argument_list|(
name|first
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|&&
name|n
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#hasAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|boolean
name|hasAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|hasAttribute
argument_list|(
name|localName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#hasAttributes() 	 */
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
return|return
operator|(
name|getAttributesCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#hasChildNodes() 	 */
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
if|if
condition|(
name|children
operator|>
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|long
name|lastChildID
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasChildNodes
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|firstChildID
argument_list|()
operator|+
name|children
operator|-
literal|1
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Element#removeAttribute(java.lang.String) 	 */
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
comment|/** 	 * @see org.w3c.dom.Element#removeAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|removeAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  oldAttr           Description of the Parameter 	 *@return                   Description of the Return Value 	 *@exception  DOMException  Description of the Exception 	 */
specifier|public
name|Attr
name|removeAttributeNode
parameter_list|(
name|Attr
name|oldAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|byte
index|[]
name|serialize
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|prefixData
init|=
literal|null
decl_stmt|;
comment|// serialize namespace prefixes declared in this element
if|if
condition|(
name|prefixes
operator|!=
literal|null
operator|&&
name|prefixes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|prefixes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pfx
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefixes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pfx
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
name|prefixData
operator|=
name|bout
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
specifier|final
name|short
name|id
init|=
name|ownerDocument
operator|.
name|getSymbols
argument_list|()
operator|.
name|getSymbol
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|attrSizeType
init|=
name|Signatures
operator|.
name|getSizeType
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|idSizeType
init|=
name|Signatures
operator|.
name|getSizeType
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|signature
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|Signatures
operator|.
name|Elem
operator|<<
literal|0x5
operator|)
operator||
operator|(
name|attrSizeType
operator|<<
literal|0x2
operator|)
operator||
name|idSizeType
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|5
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|attrSizeType
argument_list|)
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
operator|+
operator|(
name|prefixData
operator|!=
literal|null
condition|?
name|prefixData
operator|.
name|length
else|:
literal|0
operator|)
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|signature
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|children
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Signatures
operator|.
name|write
argument_list|(
name|attrSizeType
argument_list|,
name|attributes
argument_list|,
name|data
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Signatures
operator|.
name|write
argument_list|(
name|idSizeType
argument_list|,
name|id
argument_list|,
name|data
argument_list|,
literal|5
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|attrSizeType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixData
operator|!=
literal|null
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|prefixData
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|5
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|attrSizeType
argument_list|)
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
argument_list|,
name|prefixData
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Sets the attribute attribute of the ElementImpl object 	 * 	 *@param  name              The new attribute value 	 *@param  value             The new attribute value 	 *@exception  DOMException  Description of the Exception 	 */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
comment|/** 	 *  Sets the attributeNS attribute of the ElementImpl object 	 * 	 *@param  namespaceURI      The new attributeNS value 	 *@param  qualifiedName     The new attributeNS value 	 *@param  value             The new attributeNS value 	 *@exception  DOMException  Description of the Exception 	 */
specifier|public
name|void
name|setAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
comment|/** 	 *  Sets the attributeNode attribute of the ElementImpl object 	 * 	 *@param  newAttr           The new attributeNode value 	 *@return                   Description of the Return Value 	 *@exception  DOMException  Description of the Exception 	 */
specifier|public
name|Attr
name|setAttributeNode
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Sets the attributeNodeNS attribute of the ElementImpl object 	 * 	 *@param  newAttr  The new attributeNodeNS value 	 *@return          Description of the Return Value 	 */
specifier|public
name|Attr
name|setAttributeNodeNS
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 *  Sets the childCount attribute of the ElementImpl object 	 * 	 *@param  count  The new childCount value 	 */
specifier|public
name|void
name|setChildCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|children
operator|=
name|count
expr_stmt|;
block|}
comment|/** 	 *  Sets the nodeName attribute of the ElementImpl object 	 * 	 *@param  name  The new nodeName value 	 */
specifier|public
name|void
name|setNodeName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
name|nodeName
operator|=
name|name
expr_stmt|;
block|}
comment|/** 	 *  Sets the prefixes attribute of the ElementImpl object 	 * 	 *@param  pfx  The new prefixes value 	 */
specifier|public
name|void
name|setPrefixes
parameter_list|(
name|Collection
name|pfx
parameter_list|)
block|{
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
name|prefixes
operator|=
operator|new
name|ArrayList
argument_list|(
name|pfx
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixes
operator|.
name|addAll
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPrefix
parameter_list|(
name|String
name|pfx
parameter_list|)
block|{
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
name|prefixes
operator|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  contentHandler    Description of the Parameter 	 *@param  lexicalHandler    Description of the Parameter 	 *@param  first             Description of the Parameter 	 *@param  prefixes          Description of the Parameter 	 *@exception  SAXException  Description of the Exception 	 */
specifier|public
name|void
name|toSAX
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|LexicalHandler
name|lexicalHandler
parameter_list|,
name|boolean
name|first
parameter_list|,
name|ArrayList
name|prefixes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
name|loaded
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|elementWith
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|NodeList
name|childNodes
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
name|NodeImpl
name|child
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
name|ownerDocument
operator|.
name|getBroker
argument_list|()
decl_stmt|;
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|ArrayList
name|myPrefixes
init|=
literal|null
decl_stmt|;
name|String
name|defaultNS
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
comment|// declare namespaces used by this element
name|String
name|prefix
decl_stmt|;
name|myPrefixes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getNamespacePrefixes
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefix
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
if|if
condition|(
name|prefix
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|defaultNS
operator|=
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|defaultNS
argument_list|)
expr_stmt|;
block|}
else|else
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|myPrefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"id"
argument_list|,
literal|"exist:id"
argument_list|,
literal|"CDATA"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|gid
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"source"
argument_list|,
literal|"exist:source"
argument_list|,
literal|"CDATA"
argument_list|,
name|ownerDocument
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|child
operator|=
operator|(
name|NodeImpl
operator|)
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|"CDATA"
argument_list|,
operator|(
operator|(
name|AttrImpl
operator|)
name|child
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
break|break;
block|}
name|String
name|ns
init|=
name|defaultNS
operator|==
literal|null
condition|?
name|getNamespaceURI
argument_list|()
else|:
name|defaultNS
decl_stmt|;
name|contentHandler
operator|.
name|startElement
argument_list|(
name|ns
argument_list|,
name|getLocalName
argument_list|()
argument_list|,
name|getNodeName
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|child
operator|.
name|toSAX
argument_list|(
name|contentHandler
argument_list|,
name|lexicalHandler
argument_list|,
literal|false
argument_list|,
name|prefixes
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|)
name|child
operator|=
operator|(
name|NodeImpl
operator|)
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
name|contentHandler
operator|.
name|endElement
argument_list|(
name|ns
argument_list|,
name|getLocalName
argument_list|()
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
operator|&&
name|myPrefixes
operator|!=
literal|null
condition|)
block|{
name|String
name|prefix
decl_stmt|;
for|for
control|(
name|Iterator
name|pi
init|=
name|myPrefixes
operator|.
name|iterator
argument_list|()
init|;
name|pi
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefix
operator|=
operator|(
name|String
operator|)
name|pi
operator|.
name|next
argument_list|()
expr_stmt|;
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see java.lang.Object#toString() 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * @see org.exist.dom.NodeImpl#toString(boolean) 	 */
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|top
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|top
argument_list|,
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * Method toString. 	 * @param top 	 * @param prefixes 	 * @return String 	 */
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|top
parameter_list|,
name|ArrayList
name|prefixes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
name|loaded
operator|=
name|ownerDocument
operator|.
name|broker
operator|.
name|elementWith
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
name|ownerDocument
operator|.
name|getBroker
argument_list|()
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|attributes
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|children
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns:exist=\"http://exist.sourceforge.net/NS/exist\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" exist:id=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" exist:document=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ownerDocument
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|ArrayList
name|myPrefixes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
comment|// declare namespaces used by this element
name|String
name|prefix
decl_stmt|;
name|myPrefixes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getNamespacePrefixes
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefix
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
if|if
condition|(
name|prefix
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"xmlns=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"xmlns:"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|broker
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|myPrefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|NodeList
name|childNodes
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|attributes
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|child
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|child
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|children
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
operator|.
name|toString
argument_list|(
literal|false
argument_list|,
name|prefixes
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default :
name|children
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attributes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
return|return
name|appendChild
argument_list|(
name|newChild
argument_list|)
return|;
name|NodeImpl
name|ref
init|=
operator|(
name|NodeImpl
operator|)
name|refChild
decl_stmt|;
name|long
name|first
init|=
name|firstChildID
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|gid
argument_list|<
name|first
operator|||
name|ref
operator|.
name|gid
argument_list|>
name|ref
operator|.
name|gid
operator|+
name|children
operator|-
literal|1
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"reference node is not a child of the selected node"
argument_list|)
throw|;
name|Node
name|result
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|gid
operator|==
name|first
condition|)
name|result
operator|=
name|appendChild
argument_list|(
name|first
argument_list|,
name|this
argument_list|,
name|newChild
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
name|NodeImpl
name|prev
init|=
operator|(
name|NodeImpl
operator|)
name|ref
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
name|result
operator|=
name|appendChild
argument_list|(
name|ref
operator|.
name|gid
argument_list|,
name|getLastNode
argument_list|(
name|prev
argument_list|)
argument_list|,
name|newChild
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|ownerDocument
operator|.
name|broker
operator|.
name|saveCollection
argument_list|(
name|ownerDocument
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Insert a list of nodes at the position before the reference 	 * child. 	 *  	 */
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
return|return
name|appendChildren
argument_list|(
name|nodes
argument_list|)
return|;
name|NodeImpl
name|ref
init|=
operator|(
name|NodeImpl
operator|)
name|refChild
decl_stmt|;
specifier|final
name|long
name|first
init|=
name|firstChildID
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|gid
argument_list|<
name|first
operator|||
name|ref
operator|.
name|gid
argument_list|>
name|ref
operator|.
name|gid
operator|+
name|children
operator|-
literal|1
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"reference node is not a child of the selected node"
argument_list|)
throw|;
specifier|final
name|int
name|level
init|=
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|Node
name|result
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|gid
operator|==
name|first
condition|)
name|result
operator|=
name|appendChildren
argument_list|(
name|first
argument_list|,
name|this
argument_list|,
name|nodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
name|NodeImpl
name|prev
init|=
operator|(
name|NodeImpl
operator|)
name|ref
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
name|result
operator|=
name|appendChildren
argument_list|(
name|ref
operator|.
name|gid
argument_list|,
name|getLastNode
argument_list|(
name|prev
argument_list|)
argument_list|,
name|nodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerDocument
operator|.
name|reindex
operator|>
operator|-
literal|1
condition|)
block|{
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|//		try {
comment|//			ownerDocument.broker.saveCollection(ownerDocument.getCollection());
comment|//		} catch (PermissionDeniedException e) {
comment|//			// TODO Auto-generated catch block
comment|//			e.printStackTrace();
comment|//		}
return|return
name|result
return|;
block|}
comment|/** 	 * Insert a list of nodes at the position following the reference 	 * child. 	 */
specifier|public
name|Node
name|insertAfter
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
specifier|final
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
return|return
name|appendChildren
argument_list|(
name|nodes
argument_list|)
return|;
specifier|final
name|NodeImpl
name|ref
init|=
operator|(
name|NodeImpl
operator|)
name|refChild
decl_stmt|;
specifier|final
name|long
name|first
init|=
name|firstChildID
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|gid
argument_list|<
name|first
operator|||
name|ref
operator|.
name|gid
argument_list|>
name|ref
operator|.
name|gid
operator|+
name|children
operator|-
literal|1
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"reference node is not a child of the selected node"
argument_list|)
throw|;
specifier|final
name|int
name|level
init|=
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|Node
name|result
init|=
name|appendChildren
argument_list|(
name|ref
operator|.
name|gid
operator|+
literal|1
argument_list|,
name|getLastNode
argument_list|(
name|ref
argument_list|)
argument_list|,
name|nodes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerDocument
operator|.
name|reindex
operator|>
operator|-
literal|1
condition|)
block|{
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Update the contents of this element. The passed list of nodes  	 * becomes the new content. 	 *   	 * @param newContent 	 * @throws DOMException 	 */
specifier|public
name|void
name|update
parameter_list|(
name|NodeList
name|newContent
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
comment|// remove old child nodes
name|NodeList
name|nodes
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
name|NodeImpl
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
operator|(
name|NodeImpl
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|removeAll
argument_list|(
name|child
argument_list|,
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|?
name|path
operator|+
literal|'/'
operator|+
name|child
operator|.
name|getNodeName
argument_list|()
else|:
name|path
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
comment|// append new content
name|appendChildren
argument_list|(
name|firstChildID
argument_list|()
argument_list|,
name|this
argument_list|,
name|newContent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// reindex if required
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//		try {
comment|//			ownerDocument.broker.saveCollection(ownerDocument.getCollection());
comment|//		} catch (PermissionDeniedException e) {
comment|//			throw new DOMException(DOMException.INVALID_ACCESS_ERR, e.getMessage());
comment|//		}
block|}
comment|/** 	 * Update a child node. This method will only update the child node 	 * but not its potential descendant nodes. 	 *  	 * @param oldChild 	 * @param newChild 	 * @throws DOMException 	 */
specifier|public
name|void
name|updateChild
parameter_list|(
name|Node
name|oldChild
parameter_list|,
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|NodeImpl
name|old
init|=
operator|(
name|NodeImpl
operator|)
name|oldChild
decl_stmt|;
name|NodeImpl
name|newNode
init|=
operator|(
name|NodeImpl
operator|)
name|newChild
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|getParentGID
argument_list|()
operator|!=
name|gid
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
name|NodeImpl
name|previous
init|=
operator|(
name|NodeImpl
operator|)
name|old
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
name|previous
operator|=
name|this
expr_stmt|;
else|else
name|previous
operator|=
name|getLastNode
argument_list|(
name|previous
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|removeNode
argument_list|(
name|old
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
name|newNode
operator|.
name|gid
operator|=
name|old
operator|.
name|gid
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|insertAfter
argument_list|(
name|previous
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|index
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.w3c.dom.Node#removeChild(org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|removeChild
parameter_list|(
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|NodeImpl
name|old
init|=
operator|(
name|NodeImpl
operator|)
name|oldChild
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|getParentGID
argument_list|()
operator|!=
name|gid
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
specifier|final
name|int
name|level
init|=
name|ownerDocument
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
name|removeAll
argument_list|(
name|old
argument_list|,
name|old
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|children
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|reindex
operator|=
name|level
operator|+
literal|1
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
specifier|private
name|void
name|removeAll
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|String
name|currentPath
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|NodeImpl
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|children
operator|.
name|getLength
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|child
operator|=
operator|(
name|NodeImpl
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|nodeType
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|removeAll
argument_list|(
name|child
argument_list|,
name|currentPath
operator|+
literal|'/'
operator|+
name|child
operator|.
name|nodeName
argument_list|)
expr_stmt|;
else|else
name|removeAll
argument_list|(
name|child
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
name|ownerDocument
operator|.
name|broker
operator|.
name|removeNode
argument_list|(
name|node
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
break|break;
default|default :
name|ownerDocument
operator|.
name|broker
operator|.
name|removeNode
argument_list|(
name|node
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|replaceChild
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|NodeImpl
name|old
init|=
operator|(
name|NodeImpl
operator|)
name|oldChild
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|getParentGID
argument_list|()
operator|!=
name|gid
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
specifier|final
name|DocumentImpl
name|prevDoc
init|=
operator|new
name|DocumentImpl
argument_list|(
name|ownerDocument
argument_list|)
decl_stmt|;
name|NodeImpl
name|previous
init|=
operator|(
name|NodeImpl
operator|)
name|old
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
name|previous
operator|=
name|this
expr_stmt|;
else|else
name|previous
operator|=
name|getLastNode
argument_list|(
name|previous
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|removeNode
argument_list|(
name|old
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ownerDocument
operator|.
name|broker
operator|.
name|endRemove
argument_list|()
expr_stmt|;
name|appendChild
argument_list|(
name|old
operator|.
name|gid
argument_list|,
name|previous
argument_list|,
name|newChild
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// reindex if required
name|ownerDocument
operator|.
name|broker
operator|.
name|reindex
argument_list|(
name|prevDoc
argument_list|,
name|ownerDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|ownerDocument
operator|.
name|broker
operator|.
name|saveCollection
argument_list|(
name|ownerDocument
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_ACCESS_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|newChild
return|;
block|}
block|}
end_class

end_unit

