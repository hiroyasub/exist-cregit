begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist team  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RangeIndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Signatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteArrayPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_comment
comment|/**  * ElementImpl.java  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|ElementImpl
extends|extends
name|NamedNode
implements|implements
name|Element
block|{
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_ELEMENT_CHILD_COUNT
init|=
literal|4
decl_stmt|;
comment|//sizeof int
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_ATTRIBUTES_COUNT
init|=
literal|2
decl_stmt|;
comment|//sizeof short
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_NS_ID
init|=
literal|2
decl_stmt|;
comment|//sizeof short
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_PREFIX_LENGTH
init|=
literal|2
decl_stmt|;
comment|//sizeof short
specifier|private
name|short
name|attributes
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|children
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|position
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
name|namespaceMappings
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|indexType
init|=
name|RangeIndexSpec
operator|.
name|NO_INDEX
decl_stmt|;
specifier|private
name|boolean
name|preserveWS
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isDirty
init|=
literal|false
decl_stmt|;
specifier|public
name|ElementImpl
parameter_list|()
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for the ElementImpl object      *      * @param nodeName Description of the Parameter      */
specifier|public
name|ElementImpl
parameter_list|(
name|QName
name|nodeName
parameter_list|)
block|{
name|super
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
specifier|public
name|ElementImpl
parameter_list|(
name|ElementImpl
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|other
operator|.
name|attributes
expr_stmt|;
name|this
operator|.
name|namespaceMappings
operator|=
name|other
operator|.
name|namespaceMappings
expr_stmt|;
name|this
operator|.
name|indexType
operator|=
name|other
operator|.
name|indexType
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|other
operator|.
name|position
expr_stmt|;
block|}
comment|/**      * Reset this element to its initial state.      *      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attributes
operator|=
literal|0
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|namespaceMappings
operator|=
literal|null
expr_stmt|;
comment|//TODO : reset below as well ? -pb
comment|//indexType
comment|//preserveWS
block|}
specifier|public
name|void
name|setIndexType
parameter_list|(
name|int
name|idxType
parameter_list|)
block|{
name|this
operator|.
name|indexType
operator|=
name|idxType
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
return|return
name|indexType
return|;
block|}
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|isDirty
return|;
block|}
specifier|public
name|void
name|setDirty
parameter_list|(
name|boolean
name|dirty
parameter_list|)
block|{
name|this
operator|.
name|isDirty
operator|=
name|dirty
expr_stmt|;
block|}
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|boolean
name|declaresNamespacePrefixes
parameter_list|()
block|{
if|if
condition|(
name|namespaceMappings
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|namespaceMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
specifier|public
name|byte
index|[]
name|serialize
parameter_list|()
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"nodeId = null for element: "
operator|+
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
throw|;
try|try
block|{
name|byte
index|[]
name|prefixData
init|=
literal|null
decl_stmt|;
comment|// serialize namespace prefixes declared in this element
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|namespaceMappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMappings
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|short
name|nsId
init|=
name|getBroker
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNSSymbol
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
name|prefixData
operator|=
name|bout
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
specifier|final
name|short
name|id
init|=
name|getBroker
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getSymbol
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasNamespace
init|=
name|nodeName
operator|.
name|needsNamespaceDecl
argument_list|()
decl_stmt|;
name|short
name|nsId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasNamespace
condition|)
name|nsId
operator|=
name|getBroker
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNSSymbol
argument_list|(
name|nodeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|idSizeType
init|=
name|Signatures
operator|.
name|getSizeType
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
name|signature
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|Signatures
operator|.
name|Elem
operator|<<
literal|0x5
operator|)
operator||
name|idSizeType
operator|)
decl_stmt|;
name|int
name|prefixLen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasNamespace
condition|)
block|{
if|if
condition|(
name|nodeName
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeName
operator|.
name|getPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|prefixLen
operator|=
name|UTF8
operator|.
name|encoded
argument_list|(
name|nodeName
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|signature
operator||=
literal|0x10
expr_stmt|;
block|}
if|if
condition|(
name|isDirty
condition|)
name|signature
operator||=
literal|0x8
expr_stmt|;
specifier|final
name|int
name|nodeIdLen
init|=
name|nodeId
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteArrayPool
operator|.
name|getByteArray
argument_list|(
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
operator|+
name|LENGTH_ELEMENT_CHILD_COUNT
operator|+
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
operator|+
operator|+
name|nodeIdLen
operator|+
name|LENGTH_ATTRIBUTES_COUNT
operator|+
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
operator|+
operator|(
name|hasNamespace
condition|?
name|prefixLen
operator|+
literal|4
else|:
literal|0
operator|)
operator|+
operator|(
name|prefixData
operator|!=
literal|null
condition|?
name|prefixData
operator|.
name|length
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
name|int
name|next
init|=
literal|0
decl_stmt|;
name|data
index|[
name|next
index|]
operator|=
name|signature
expr_stmt|;
name|next
operator|+=
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|children
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|LENGTH_ELEMENT_CHILD_COUNT
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|nodeId
operator|.
name|units
argument_list|()
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
expr_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|nodeIdLen
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|attributes
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|LENGTH_ATTRIBUTES_COUNT
expr_stmt|;
name|Signatures
operator|.
name|write
argument_list|(
name|idSizeType
argument_list|,
name|id
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNamespace
condition|)
block|{
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|nsId
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|LENGTH_NS_ID
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|prefixLen
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|LENGTH_PREFIX_LENGTH
expr_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeName
operator|.
name|getPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|UTF8
operator|.
name|encode
argument_list|(
name|nodeName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|data
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|+=
name|prefixLen
expr_stmt|;
block|}
if|if
condition|(
name|prefixData
operator|!=
literal|null
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|prefixData
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|next
argument_list|,
name|prefixData
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|StoredNode
name|deserialize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|boolean
name|pooled
parameter_list|)
block|{
name|int
name|end
init|=
name|start
operator|+
name|len
decl_stmt|;
name|int
name|pos
init|=
name|start
decl_stmt|;
name|byte
name|idSizeType
init|=
operator|(
name|byte
operator|)
operator|(
name|data
index|[
name|pos
index|]
operator|&
literal|0x03
operator|)
decl_stmt|;
name|boolean
name|isDirty
init|=
operator|(
name|data
index|[
name|pos
index|]
operator|&
literal|0x8
operator|)
operator|==
literal|0x8
decl_stmt|;
name|boolean
name|hasNamespace
init|=
operator|(
name|data
index|[
name|pos
index|]
operator|&
literal|0x10
operator|)
operator|==
literal|0x10
decl_stmt|;
name|pos
operator|+=
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
expr_stmt|;
name|int
name|children
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|LENGTH_ELEMENT_CHILD_COUNT
expr_stmt|;
name|int
name|dlnLen
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
expr_stmt|;
name|NodeId
name|dln
init|=
name|doc
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|dlnLen
argument_list|,
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|dln
operator|.
name|size
argument_list|()
expr_stmt|;
name|short
name|attributes
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|LENGTH_ATTRIBUTES_COUNT
expr_stmt|;
name|short
name|id
init|=
operator|(
name|short
operator|)
name|Signatures
operator|.
name|read
argument_list|(
name|idSizeType
argument_list|,
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
expr_stmt|;
name|short
name|nsId
init|=
literal|0
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasNamespace
condition|)
block|{
name|nsId
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|LENGTH_NS_ID
expr_stmt|;
name|int
name|prefixLen
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|LENGTH_PREFIX_LENGTH
expr_stmt|;
if|if
condition|(
name|prefixLen
operator|>
literal|0
condition|)
name|prefix
operator|=
name|UTF8
operator|.
name|decode
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|prefixLen
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|prefixLen
expr_stmt|;
block|}
name|String
name|name
init|=
name|doc
operator|.
name|getSymbols
argument_list|()
operator|.
name|getName
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nsId
operator|!=
literal|0
condition|)
name|namespace
operator|=
name|doc
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
name|ElementImpl
name|node
decl_stmt|;
if|if
condition|(
name|pooled
condition|)
name|node
operator|=
operator|(
name|ElementImpl
operator|)
name|NodeObjectPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowNode
argument_list|(
name|ElementImpl
operator|.
name|class
argument_list|)
expr_stmt|;
else|else
name|node
operator|=
operator|new
name|ElementImpl
argument_list|()
expr_stmt|;
name|node
operator|.
name|setNodeId
argument_list|(
name|dln
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeName
operator|=
name|doc
operator|.
name|getSymbols
argument_list|()
operator|.
name|getQName
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|namespace
argument_list|,
name|name
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|node
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|node
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
name|node
operator|.
name|isDirty
operator|=
name|isDirty
expr_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|//TO UNDERSTAND : why is this code here ?
if|if
condition|(
name|end
operator|>
name|pos
condition|)
block|{
name|byte
index|[]
name|pfxData
init|=
operator|new
name|byte
index|[
name|end
operator|-
name|pos
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|pfxData
argument_list|,
literal|0
argument_list|,
name|end
operator|-
name|pos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|pfxData
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
try|try
block|{
name|short
name|prefixCount
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixCount
condition|;
name|i
operator|++
control|)
block|{
name|prefix
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|nsId
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|node
operator|.
name|addNamespaceMapping
argument_list|(
name|prefix
argument_list|,
name|doc
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|nsId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|public
specifier|static
name|QName
name|readQName
parameter_list|(
name|Value
name|value
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|value
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|value
operator|.
name|start
argument_list|()
decl_stmt|;
name|byte
name|idSizeType
init|=
operator|(
name|byte
operator|)
operator|(
name|data
index|[
name|offset
index|]
operator|&
literal|0x03
operator|)
decl_stmt|;
name|boolean
name|hasNamespace
init|=
operator|(
name|data
index|[
name|offset
index|]
operator|&
literal|0x10
operator|)
operator|==
literal|0x10
decl_stmt|;
name|offset
operator|+=
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
expr_stmt|;
name|offset
operator|+=
name|LENGTH_ELEMENT_CHILD_COUNT
expr_stmt|;
name|offset
operator|+=
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
expr_stmt|;
name|offset
operator|+=
name|nodeId
operator|.
name|size
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|LENGTH_ATTRIBUTES_COUNT
expr_stmt|;
name|short
name|id
init|=
operator|(
name|short
operator|)
name|Signatures
operator|.
name|read
argument_list|(
name|idSizeType
argument_list|,
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|Signatures
operator|.
name|getLength
argument_list|(
name|idSizeType
argument_list|)
expr_stmt|;
name|short
name|nsId
init|=
literal|0
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasNamespace
condition|)
block|{
name|nsId
operator|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|LENGTH_NS_ID
expr_stmt|;
name|int
name|prefixLen
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|LENGTH_PREFIX_LENGTH
expr_stmt|;
if|if
condition|(
name|prefixLen
operator|>
literal|0
condition|)
name|prefix
operator|=
name|UTF8
operator|.
name|decode
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|prefixLen
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|prefixLen
expr_stmt|;
block|}
name|String
name|name
init|=
name|document
operator|.
name|getSymbols
argument_list|()
operator|.
name|getName
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nsId
operator|!=
literal|0
condition|)
name|namespace
operator|=
name|document
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|void
name|addNamespaceMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|namespaceMappings
operator|==
literal|null
condition|)
name|namespaceMappings
operator|=
operator|new
name|HashMap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|namespaceMappings
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
return|return;
name|namespaceMappings
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a child to this node. This method does not rearrange the      * node tree and is only used internally by the parser.      *      * @param child      * @throws DOMException      */
specifier|public
name|void
name|appendChildInternal
parameter_list|(
name|StoredNode
name|prevNode
parameter_list|,
name|StoredNode
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
name|NodeId
name|childId
decl_stmt|;
if|if
condition|(
name|prevNode
operator|==
literal|null
condition|)
block|{
name|childId
operator|=
name|getNodeId
argument_list|()
operator|.
name|newChild
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|prevNode
operator|.
name|getNodeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getQName
argument_list|()
operator|+
literal|" : "
operator|+
name|prevNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|childId
operator|=
name|prevNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
name|child
operator|.
name|setNodeId
argument_list|(
name|childId
argument_list|)
expr_stmt|;
operator|++
name|children
expr_stmt|;
block|}
comment|/**      * @see org.w3c.dom.Node#appendChild(org.w3c.dom.Node)      */
specifier|public
name|Node
name|appendChild
parameter_list|(
name|Node
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
name|TransactionManager
name|transact
init|=
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|nl
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getLastChild
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_STATE_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|appendAttributes
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|attribs
parameter_list|)
throws|throws
name|DOMException
block|{
name|NodeList
name|duplicateAttrs
init|=
name|findDupAttributes
argument_list|(
name|attribs
argument_list|)
decl_stmt|;
name|removeAppendAttributes
argument_list|(
name|transaction
argument_list|,
name|duplicateAttrs
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeList
name|checkForAttributes
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|nodes
parameter_list|)
throws|throws
name|DOMException
block|{
name|NodeListImpl
name|attribs
init|=
literal|null
decl_stmt|;
name|NodeListImpl
name|rest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|next
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
if|if
condition|(
operator|!
name|next
operator|.
name|getNodeName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
if|if
condition|(
name|attribs
operator|==
literal|null
condition|)
name|attribs
operator|=
operator|new
name|NodeListImpl
argument_list|()
expr_stmt|;
name|attribs
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|attribs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rest
operator|==
literal|null
condition|)
name|rest
operator|=
operator|new
name|NodeListImpl
argument_list|()
expr_stmt|;
name|rest
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribs
operator|==
literal|null
condition|)
return|return
name|nodes
return|;
name|appendAttributes
argument_list|(
name|transaction
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
return|return
name|rest
return|;
block|}
specifier|public
name|void
name|appendChildren
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|nodes
parameter_list|,
name|int
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// attributes are handled differently. Call checkForAttributes to extract them.
name|nodes
operator|=
name|checkForAttributes
argument_list|(
name|transaction
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
operator|||
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|NodePath
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|this
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
comment|// no children: append a new child
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|nodeId
operator|.
name|newChild
argument_list|()
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|this
argument_list|)
argument_list|,
name|path
argument_list|,
name|nodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|Node
name|firstChild
init|=
name|getFirstChild
argument_list|()
decl_stmt|;
name|insertBefore
argument_list|(
name|transaction
argument_list|,
name|nodes
argument_list|,
name|firstChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|child
operator|>
literal|1
operator|&&
name|child
operator|<=
name|children
condition|)
block|{
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
name|StoredNode
name|last
init|=
operator|(
name|StoredNode
operator|)
name|cl
operator|.
name|item
argument_list|(
name|child
operator|-
literal|2
argument_list|)
decl_stmt|;
name|insertAfter
argument_list|(
name|transaction
argument_list|,
name|nodes
argument_list|,
name|getLastNode
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StoredNode
name|last
init|=
operator|(
name|StoredNode
operator|)
name|getLastChild
argument_list|()
decl_stmt|;
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNodeId
argument_list|()
operator|.
name|nextSibling
argument_list|()
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|getLastNode
argument_list|(
name|last
argument_list|)
argument_list|)
argument_list|,
name|path
argument_list|,
name|nodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Internal append.      *          * @throws DOMException      */
specifier|protected
name|void
name|appendChildren
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeId
name|newNodeId
parameter_list|,
name|NodeImplRef
name|last
parameter_list|,
name|NodePath
name|lastPath
parameter_list|,
name|NodeList
name|nodes
parameter_list|,
name|StreamListener
name|listener
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|last
operator|.
name|getNode
argument_list|()
operator|==
literal|null
operator|||
name|last
operator|.
name|getNode
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"invalid node"
argument_list|)
throw|;
name|children
operator|+=
name|nodes
operator|.
name|getLength
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
name|last
argument_list|,
name|lastPath
argument_list|,
name|child
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|newNodeId
operator|=
name|newNodeId
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|appendChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeId
name|newNodeId
parameter_list|,
name|NodeImplRef
name|last
parameter_list|,
name|NodePath
name|lastPath
parameter_list|,
name|Node
name|child
parameter_list|,
name|StreamListener
name|listener
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|last
operator|.
name|getNode
argument_list|()
operator|==
literal|null
condition|)
comment|//TODO : same test as above ? -pb
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"invalid node"
argument_list|)
throw|;
specifier|final
name|DocumentImpl
name|owner
init|=
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_FRAGMENT_NODE
case|:
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
name|last
argument_list|,
name|lastPath
argument_list|,
name|child
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// TODO: implement document fragments so we can return all newly appended children
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
comment|// create new element
specifier|final
name|ElementImpl
name|elem
init|=
operator|new
name|ElementImpl
argument_list|(
operator|new
name|QName
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|==
literal|null
condition|?
name|child
operator|.
name|getNodeName
argument_list|()
else|:
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|child
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|elem
operator|.
name|setNodeId
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
specifier|final
name|NodeListImpl
name|ch
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
specifier|final
name|NamedNodeMap
name|attribs
init|=
name|child
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attribs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|attribs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attr
operator|.
name|getNodeName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
name|ch
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|xmlnsDecl
init|=
name|attr
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|xmlnsDecl
operator|.
name|length
argument_list|()
operator|==
literal|5
condition|?
literal|""
else|:
name|xmlnsDecl
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|elem
operator|.
name|addNamespaceMapping
argument_list|(
name|prefix
argument_list|,
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeList
name|cl
init|=
name|child
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
name|ch
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|elem
operator|.
name|setChildCount
argument_list|(
name|ch
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
operator|(
name|elem
operator|.
name|getAttributesCount
argument_list|()
operator|+
name|attribs
operator|.
name|getLength
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|lastPath
operator|.
name|addComponent
argument_list|(
name|elem
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert the node
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|elem
argument_list|)
expr_stmt|;
comment|// index now?
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|elem
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|elem
argument_list|,
name|lastPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setChildCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// process child nodes
name|last
operator|.
name|setNode
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|.
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
operator|.
name|newChild
argument_list|()
argument_list|,
name|last
argument_list|,
name|lastPath
argument_list|,
name|ch
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|endElement
argument_list|(
name|elem
argument_list|,
name|lastPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|indexEndElement
argument_list|(
name|transaction
argument_list|,
name|elem
argument_list|,
name|lastPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|lastPath
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
return|return
name|elem
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
specifier|final
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|(
name|newNodeId
argument_list|,
operator|(
operator|(
name|Text
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
comment|// insert the node
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|lastPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|last
operator|.
name|setNode
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|text
return|;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
specifier|final
name|CDATASectionImpl
name|cdata
init|=
operator|new
name|CDATASectionImpl
argument_list|(
name|newNodeId
argument_list|,
operator|(
operator|(
name|CDATASection
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|cdata
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
comment|// insert the node
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|cdata
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|cdata
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|last
operator|.
name|setNode
argument_list|(
name|cdata
argument_list|)
expr_stmt|;
return|return
name|cdata
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|child
decl_stmt|;
name|String
name|ns
init|=
name|attr
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
operator|(
name|Namespaces
operator|.
name|XML_NS
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|?
literal|"xml"
else|:
name|attr
operator|.
name|getPrefix
argument_list|()
operator|)
decl_stmt|;
name|String
name|name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
name|name
operator|=
name|attr
operator|.
name|getName
argument_list|()
expr_stmt|;
name|QName
name|attrName
init|=
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|ns
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
specifier|final
name|AttrImpl
name|attrib
init|=
operator|new
name|AttrImpl
argument_list|(
name|attrName
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|attrib
operator|.
name|setNodeId
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|attrName
operator|.
name|compareTo
argument_list|(
name|Namespaces
operator|.
name|XML_ID_QNAME
argument_list|)
operator|==
name|Constants
operator|.
name|EQUAL
condition|)
block|{
comment|// an xml:id attribute. Normalize the attribute and set its type to ID
name|attrib
operator|.
name|setValue
argument_list|(
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|StringValue
operator|.
name|collapseWhitespace
argument_list|(
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|ID
argument_list|)
expr_stmt|;
block|}
else|else
name|attrName
operator|.
name|setNameType
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|attrib
argument_list|)
expr_stmt|;
comment|// index now?
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|lastPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|last
operator|.
name|setNode
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
return|return
name|attrib
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
specifier|final
name|CommentImpl
name|comment
init|=
operator|new
name|CommentImpl
argument_list|(
operator|(
operator|(
name|Comment
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setNodeId
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|comment
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
comment|// insert the node
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|comment
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|last
operator|.
name|setNode
argument_list|(
name|comment
argument_list|)
expr_stmt|;
return|return
name|comment
return|;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
specifier|final
name|ProcessingInstructionImpl
name|pi
init|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|newNodeId
argument_list|,
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|child
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|,
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setOwnerDocument
argument_list|(
name|owner
argument_list|)
expr_stmt|;
comment|//          insert the node
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|last
operator|.
name|getNode
argument_list|()
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|pi
argument_list|,
name|lastPath
argument_list|)
expr_stmt|;
name|last
operator|.
name|setNode
argument_list|(
name|pi
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
default|default :
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"unknown node type: "
operator|+
name|child
operator|.
name|getNodeType
argument_list|()
operator|+
literal|" "
operator|+
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|short
name|getAttributesCount
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
comment|/**      * Set the attributes that belong to this node.      *      * @param attribNum The new attributes value      */
specifier|public
name|void
name|setAttributes
parameter_list|(
name|short
name|attribNum
parameter_list|)
block|{
name|attributes
operator|=
name|attribNum
expr_stmt|;
block|}
comment|/**      * @see org.w3c.dom.Element#getAttribute(java.lang.String)      */
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Attr
name|attr
init|=
name|findAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|attr
operator|!=
literal|null
condition|?
name|attr
operator|.
name|getValue
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getAttributeNS(java.lang.String, java.lang.String)      */
specifier|public
name|String
name|getAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|Attr
name|attr
init|=
name|findAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|attr
operator|!=
literal|null
condition|?
name|attr
operator|.
name|getValue
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getAttributeNode(java.lang.String)      */
specifier|public
name|Attr
name|getAttributeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getAttributeNodeNS(java.lang.String, java.lang.String)      */
specifier|public
name|Attr
name|getAttributeNodeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|findAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#getAttributes()      */
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
name|NamedNodeMapImpl
name|map
init|=
operator|new
name|NamedNodeMapImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAttributesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Iterator
name|iterator
init|=
name|getBroker
argument_list|()
operator|.
name|getNodeIterator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|int
name|ccount
init|=
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ccount
condition|;
name|i
operator|++
control|)
block|{
name|StoredNode
name|next
init|=
operator|(
name|StoredNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
break|break;
name|map
operator|.
name|setNamedItem
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMappings
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QName
name|attrName
init|=
operator|new
name|QName
argument_list|(
name|prefix
argument_list|,
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"xmlns"
argument_list|)
decl_stmt|;
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
name|attrName
argument_list|,
name|ns
argument_list|)
decl_stmt|;
name|map
operator|.
name|setNamedItem
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|AttrImpl
name|findAttribute
parameter_list|(
name|String
name|qname
parameter_list|)
block|{
specifier|final
name|Iterator
name|iterator
init|=
name|getBroker
argument_list|()
operator|.
name|getNodeIterator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|findAttribute
argument_list|(
name|qname
argument_list|,
name|iterator
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
name|AttrImpl
name|findAttribute
parameter_list|(
name|String
name|qname
parameter_list|,
name|Iterator
name|iterator
parameter_list|,
name|StoredNode
name|current
parameter_list|)
block|{
specifier|final
name|int
name|ccount
init|=
name|current
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
name|StoredNode
name|next
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ccount
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
name|StoredNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
break|break;
if|if
condition|(
name|next
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
return|return
operator|(
name|AttrImpl
operator|)
name|next
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|AttrImpl
name|findAttribute
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
specifier|final
name|Iterator
name|iterator
init|=
name|getBroker
argument_list|()
operator|.
name|getNodeIterator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|findAttribute
argument_list|(
name|qname
argument_list|,
name|iterator
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
name|AttrImpl
name|findAttribute
parameter_list|(
name|QName
name|qname
parameter_list|,
name|Iterator
name|iterator
parameter_list|,
name|StoredNode
name|current
parameter_list|)
block|{
specifier|final
name|int
name|ccount
init|=
name|current
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ccount
condition|;
name|i
operator|++
control|)
block|{
name|StoredNode
name|next
init|=
operator|(
name|StoredNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
break|break;
if|if
condition|(
name|next
operator|.
name|getQName
argument_list|()
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
return|return
operator|(
name|AttrImpl
operator|)
name|next
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a list of all attribute nodes in attrs that are already present      * in the current element.      *      * @param attrs      * @return The attributes list      * @throws DOMException      */
specifier|private
name|NodeList
name|findDupAttributes
parameter_list|(
name|NodeList
name|attrs
parameter_list|)
throws|throws
name|DOMException
block|{
name|NodeListImpl
name|dupList
init|=
literal|null
decl_stmt|;
name|NamedNodeMap
name|map
init|=
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Workaround: xerces sometimes returns null for getLocalName() !!!!
name|String
name|localName
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
name|localName
operator|=
name|attr
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
name|Node
name|duplicate
init|=
name|map
operator|.
name|getNamedItemNS
argument_list|(
name|attr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|duplicate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dupList
operator|==
literal|null
condition|)
name|dupList
operator|=
operator|new
name|NodeListImpl
argument_list|()
expr_stmt|;
name|dupList
operator|.
name|add
argument_list|(
name|duplicate
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dupList
return|;
block|}
comment|/**      * @see org.exist.dom.NodeImpl#getChildCount()      */
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
specifier|final
name|NodeListImpl
name|childList
init|=
operator|new
name|NodeListImpl
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|EmbeddedXMLStreamReader
name|reader
init|=
name|ownerDocument
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLStreamReader
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
init|;
name|reader
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|EmbeddedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
operator|)
operator|.
name|isChildOf
argument_list|(
name|nodeId
argument_list|)
condition|)
name|childList
operator|.
name|add
argument_list|(
name|reader
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error while reading child nodes: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error while reading child nodes: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//        accept(new NodeVisitor() {
comment|//            public boolean visit(StoredNode node) {
comment|//                if(node.nodeId.isChildOf(nodeId))
comment|//                    childList.add(node);
comment|//                return true;
comment|//            }
comment|//        });
return|return
name|childList
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getElementsByTagName(java.lang.String)      */
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|tagName
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|(
name|NodeSet
operator|)
operator|(
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|findElementsByTagName
argument_list|(
name|this
argument_list|,
name|qname
argument_list|)
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getElementsByTagNameNS(java.lang.String, java.lang.String)      */
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|(
name|NodeSet
operator|)
operator|(
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|findElementsByTagName
argument_list|(
name|this
argument_list|,
name|qname
argument_list|)
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#getFirstChild()      */
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasChildNodes
argument_list|()
operator|||
name|getChildCount
argument_list|()
operator|==
name|getAttributesCount
argument_list|()
condition|)
return|return
literal|null
return|;
specifier|final
name|Iterator
name|iterator
init|=
name|getBroker
argument_list|()
operator|.
name|getNodeIterator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|StoredNode
name|next
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
name|StoredNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
return|return
name|next
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasChildNodes
argument_list|()
condition|)
return|return
literal|null
return|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isDirty
condition|)
block|{
name|NodeId
name|child
init|=
name|nodeId
operator|.
name|getChild
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|node
operator|=
name|getBroker
argument_list|()
operator|.
name|objectWith
argument_list|(
name|ownerDocument
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
return|return
name|cl
operator|.
name|item
argument_list|(
name|cl
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#getTagName()      */
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
return|return
name|nodeName
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#hasAttribute(java.lang.String)      */
specifier|public
name|boolean
name|hasAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findAttribute
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @see org.w3c.dom.Element#hasAttributeNS(java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|hasAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|findAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#hasAttributes()      */
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
return|return
operator|(
name|getAttributesCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#hasChildNodes()      */
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
name|children
operator|>
literal|0
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#getNodeValue()      */
specifier|public
name|String
name|getNodeValue
parameter_list|()
comment|/*throws DOMException*/
block|{
comment|//TODO : parametrize the boolea value ?
return|return
name|getBroker
argument_list|()
operator|.
name|getNodeValue
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
return|;
comment|//throw new DOMException(DOMException.NOT_SUPPORTED_ERR, "getNodeValue() not implemented on class " + getClass().getName());
block|}
comment|/**      * @see org.w3c.dom.Element#removeAttribute(java.lang.String)      */
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"removeAttribute(String name) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * @see org.w3c.dom.Element#removeAttributeNS(java.lang.String, java.lang.String)      */
specifier|public
name|void
name|removeAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"removeAttributeNS(String namespaceURI, String name) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Attr
name|removeAttributeNode
parameter_list|(
name|Attr
name|oldAttr
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"removeAttributeNode(Attr oldAttr) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setAttribute(String name, String value) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setAttributeNS(String namespaceURI, String qualifiedName, String value) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Attr
name|setAttributeNode
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setAttributeNode(Attr newAttr) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|Attr
name|setAttributeNodeNS
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setAttributeNodeNS(Attr newAttr) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setChildCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|children
operator|=
name|count
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespaceMappings
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|namespaceMappings
operator|=
operator|new
name|HashMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|String
name|ns
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMappings
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ns
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getNSSymbol
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Iterator
name|getPrefixes
parameter_list|()
block|{
return|return
name|namespaceMappings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNamespaceForPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|namespaceMappings
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPrefixCount
parameter_list|()
block|{
return|return
name|namespaceMappings
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @see java.lang.Object#toString()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      */
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|top
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|top
argument_list|,
operator|new
name|TreeSet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Method toString.      *      */
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|top
parameter_list|,
name|TreeSet
name|namespaces
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|attributes
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|children
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
comment|//Remove false to have a verbose output
if|if
condition|(
name|top
operator|&&
literal|false
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" exist:id=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" exist:document=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
operator|)
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
comment|// declare namespaces used by this element
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
name|String
name|namespace
decl_stmt|,
name|prefix
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMappings
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|prefix
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|namespace
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns=\""
argument_list|)
expr_stmt|;
comment|//buf.append(namespace);
name|buf
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns:"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
comment|//buf.append(namespace);
name|buf
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
operator|!
name|namespaces
operator|.
name|contains
argument_list|(
name|nodeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns:"
argument_list|)
operator|.
name|append
argument_list|(
name|nodeName
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nodeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|childNodes
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|attributes
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|child
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|escapeXml
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|children
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
operator|.
name|toString
argument_list|(
literal|false
argument_list|,
name|namespaces
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default :
name|children
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attributes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
name|attributes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|children
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#insertBefore(org.w3c.dom.Node, org.w3c.dom.Node)      */
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
return|return
name|appendChild
argument_list|(
name|newChild
argument_list|)
return|;
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
name|TransactionManager
name|transact
init|=
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|insertBefore
argument_list|(
name|transaction
argument_list|,
name|nl
argument_list|,
name|refChild
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
name|refChild
operator|.
name|getPreviousSibling
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NO_MODIFICATION_ALLOWED_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Insert a list of nodes at the position before the reference      * child.      */
specifier|public
name|void
name|insertBefore
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
block|{
comment|//TODO : use NodeImpl.UNKNOWN_NODE_IMPL_GID ? -pb
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|nodes
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|NodePath
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|this
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
block|}
name|StoredNode
name|following
init|=
operator|(
name|StoredNode
operator|)
name|refChild
decl_stmt|;
name|StoredNode
name|previous
init|=
operator|(
name|StoredNode
operator|)
name|following
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|following
operator|.
name|getNodeId
argument_list|()
operator|.
name|insertBefore
argument_list|()
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|this
argument_list|)
argument_list|,
name|path
argument_list|,
name|nodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
else|else
block|{
name|NodeId
name|newId
init|=
name|previous
operator|.
name|getNodeId
argument_list|()
operator|.
name|insertNode
argument_list|(
name|following
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|getLastNode
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|,
name|path
argument_list|,
name|nodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Insert a list of nodes at the position following the reference      * child.      */
specifier|public
name|void
name|insertAfter
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|nodes
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|refChild
operator|==
literal|null
condition|)
block|{
comment|//TODO : use NodeImpl.UNKNOWN_NODE_IMPL_GID ? -pb
name|appendChildren
argument_list|(
literal|null
argument_list|,
name|nodes
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|refChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type: "
argument_list|)
throw|;
name|NodePath
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|this
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
block|}
name|StoredNode
name|previous
init|=
operator|(
name|StoredNode
operator|)
name|refChild
decl_stmt|;
name|StoredNode
name|following
init|=
operator|(
name|StoredNode
operator|)
name|previous
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|NodeId
name|newNodeId
init|=
name|previous
operator|.
name|getNodeId
argument_list|()
operator|.
name|insertNode
argument_list|(
name|following
operator|==
literal|null
condition|?
literal|null
else|:
name|following
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|getLastNode
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|,
name|path
argument_list|,
name|nodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Update the contents of this element. The passed list of nodes      * becomes the new content.      *      * @param newContent      * @throws DOMException      */
specifier|public
name|void
name|update
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|newContent
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|NodePath
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
comment|// remove old child nodes
name|NodeList
name|nodes
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|this
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
block|}
name|StoredNode
name|last
init|=
name|this
decl_stmt|;
name|int
name|i
init|=
name|nodes
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StoredNode
name|child
init|=
operator|(
name|StoredNode
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|last
operator|=
name|child
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|path
operator|.
name|addComponent
argument_list|(
name|child
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|removeAllNodes
argument_list|(
name|transaction
argument_list|,
name|child
argument_list|,
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|path
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
block|}
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|children
operator|=
name|i
expr_stmt|;
name|NodeId
name|newNodeId
init|=
name|last
operator|==
name|this
condition|?
name|nodeId
operator|.
name|newChild
argument_list|()
else|:
name|last
operator|.
name|nodeId
operator|.
name|nextSibling
argument_list|()
decl_stmt|;
comment|// append new content
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|last
argument_list|)
argument_list|,
name|path
argument_list|,
name|newContent
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Update a child node. This method will only update the child node      * but not its potential descendant nodes.      *      * @param oldChild      * @param newChild      * @throws DOMException      */
specifier|public
name|StoredNode
name|updateChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|Node
name|oldChild
parameter_list|,
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|(
name|newChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|StoredNode
name|oldNode
init|=
operator|(
name|StoredNode
operator|)
name|oldChild
decl_stmt|;
name|StoredNode
name|newNode
init|=
operator|(
name|StoredNode
operator|)
name|newChild
decl_stmt|;
if|if
condition|(
operator|!
name|oldNode
operator|.
name|nodeId
operator|.
name|getParentId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
if|if
condition|(
name|newNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
if|if
condition|(
name|newNode
operator|.
name|getQName
argument_list|()
operator|.
name|equalsSimple
argument_list|(
name|Namespaces
operator|.
name|XML_ID_QNAME
argument_list|)
condition|)
block|{
comment|// an xml:id attribute. Normalize the attribute and set its type to ID
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|newNode
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|StringValue
operator|.
name|collapseWhitespace
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
name|StoredNode
name|previousNode
init|=
operator|(
name|StoredNode
operator|)
name|oldNode
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousNode
operator|==
literal|null
condition|)
name|previousNode
operator|=
name|this
expr_stmt|;
else|else
name|previousNode
operator|=
name|getLastNode
argument_list|(
name|previousNode
argument_list|)
expr_stmt|;
specifier|final
name|NodePath
name|currentPath
init|=
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|NodePath
name|oldPath
init|=
name|oldNode
operator|.
name|getPath
argument_list|(
name|currentPath
argument_list|)
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
comment|// check if the change affects any ancestor nodes, which then need to be reindexed later
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|oldNode
argument_list|,
name|oldPath
argument_list|)
decl_stmt|;
comment|// Remove indexes
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
name|reindexRoot
operator|=
name|oldNode
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
comment|// Remove the actual node data
name|getBroker
argument_list|()
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|nodeId
operator|=
name|oldNode
operator|.
name|nodeId
expr_stmt|;
comment|// Reinsert the new node data
name|getBroker
argument_list|()
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
specifier|final
name|NodePath
name|path
init|=
name|newNode
operator|.
name|getPath
argument_list|(
name|currentPath
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|newNode
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|newNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|getBroker
argument_list|()
operator|.
name|endElement
argument_list|(
name|newNode
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Recreate indexes on ancestor nodes
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|newNode
return|;
block|}
comment|/**      * @see org.w3c.dom.Node#removeChild(org.w3c.dom.Node)      */
specifier|public
name|Node
name|removeChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
specifier|final
name|StoredNode
name|oldNode
init|=
operator|(
name|StoredNode
operator|)
name|oldChild
decl_stmt|;
if|if
condition|(
operator|!
name|oldNode
operator|.
name|nodeId
operator|.
name|getParentId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
name|NodePath
name|oldPath
init|=
name|oldNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|oldNode
argument_list|,
name|oldPath
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
block|}
name|getBroker
argument_list|()
operator|.
name|removeAllNodes
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
operator|--
name|children
expr_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
operator|--
name|attributes
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
return|return
name|oldNode
return|;
block|}
specifier|public
name|void
name|removeAppendAttributes
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|NodeList
name|removeList
parameter_list|,
name|NodeList
name|appendList
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|removeList
operator|!=
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|removeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|oldChild
init|=
name|removeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|StoredNode
name|old
init|=
operator|(
name|StoredNode
operator|)
name|oldChild
decl_stmt|;
if|if
condition|(
operator|!
name|old
operator|.
name|nodeId
operator|.
name|isChildOf
argument_list|(
name|nodeId
argument_list|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node "
operator|+
name|old
operator|.
name|nodeId
operator|.
name|getParentId
argument_list|()
operator|+
literal|" is not a child of element "
operator|+
name|nodeId
argument_list|)
throw|;
specifier|final
name|NodePath
name|oldPath
init|=
name|old
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// remove old custom indexes
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|old
argument_list|,
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|old
argument_list|,
name|oldPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|--
expr_stmt|;
name|attributes
operator|--
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|getBroker
argument_list|()
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
name|NodePath
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|StreamListener
name|listener
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|nodeId
operator|.
name|newChild
argument_list|()
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|this
argument_list|)
argument_list|,
name|path
argument_list|,
name|appendList
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|attributes
operator|==
literal|0
condition|)
block|{
name|StoredNode
name|firstChild
init|=
operator|(
name|StoredNode
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
name|NodeId
name|newNodeId
init|=
name|firstChild
operator|.
name|nodeId
operator|.
name|insertBefore
argument_list|()
decl_stmt|;
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|this
argument_list|)
argument_list|,
name|path
argument_list|,
name|appendList
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AttribVisitor
name|visitor
init|=
operator|new
name|AttribVisitor
argument_list|()
decl_stmt|;
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|NodeId
name|firstChildId
init|=
name|visitor
operator|.
name|firstChild
operator|==
literal|null
condition|?
literal|null
else|:
name|visitor
operator|.
name|firstChild
operator|.
name|nodeId
decl_stmt|;
name|NodeId
name|newNodeId
init|=
name|visitor
operator|.
name|lastAttrib
operator|.
name|nodeId
operator|.
name|insertNode
argument_list|(
name|firstChildId
argument_list|)
decl_stmt|;
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|newNodeId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|visitor
operator|.
name|lastAttrib
argument_list|)
argument_list|,
name|path
argument_list|,
name|appendList
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|attributes
operator|+=
name|appendList
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|AttribVisitor
implements|implements
name|NodeVisitor
block|{
specifier|private
name|StoredNode
name|lastAttrib
init|=
literal|null
decl_stmt|;
specifier|private
name|StoredNode
name|firstChild
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|visit
parameter_list|(
name|StoredNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|lastAttrib
operator|=
name|node
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|nodeId
operator|.
name|isChildOf
argument_list|(
name|ElementImpl
operator|.
name|this
operator|.
name|nodeId
argument_list|)
condition|)
block|{
name|firstChild
operator|=
name|node
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Replaces the oldNode with the newChild      *       * @param transaction      * @param newChild      * @param oldChild      *       * @return The new node (this differs from the {@link org.w3c.dom.Node#replaceChild(Node, Node)} specification)      *       * @see org.w3c.dom.Node#replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)      */
specifier|public
name|Node
name|replaceChild
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|Node
name|newChild
parameter_list|,
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"wrong node type"
argument_list|)
throw|;
name|StoredNode
name|oldNode
init|=
operator|(
name|StoredNode
operator|)
name|oldChild
decl_stmt|;
if|if
condition|(
operator|!
name|oldNode
operator|.
name|nodeId
operator|.
name|getParentId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node is not a child of this element"
argument_list|)
throw|;
name|StoredNode
name|previous
init|=
operator|(
name|StoredNode
operator|)
name|oldNode
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
name|previous
operator|=
name|this
expr_stmt|;
else|else
name|previous
operator|=
name|getLastNode
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|NodePath
name|oldPath
init|=
name|oldNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|StreamListener
name|listener
init|=
literal|null
decl_stmt|;
comment|//May help getReindexRoot() to make some useful things
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|ownerDocument
argument_list|)
expr_stmt|;
name|StoredNode
name|reindexRoot
init|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getReindexRoot
argument_list|(
name|oldNode
argument_list|,
name|oldPath
argument_list|)
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindexRoot
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|REMOVE_NODES
argument_list|)
expr_stmt|;
block|}
name|getBroker
argument_list|()
operator|.
name|removeAllNodes
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldPath
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|setMode
argument_list|(
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|listener
operator|=
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
name|Node
name|newNode
init|=
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|oldNode
operator|.
name|nodeId
argument_list|,
operator|new
name|NodeImplRef
argument_list|(
name|previous
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|,
name|newChild
argument_list|,
name|listener
argument_list|)
decl_stmt|;
comment|// reindex if required
specifier|final
name|DocumentImpl
name|owner
init|=
operator|(
name|DocumentImpl
operator|)
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|reindex
argument_list|(
name|transaction
argument_list|,
name|reindexRoot
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//return oldChild;	// method is spec'd to return the old child, even though that's probably useless in this case
return|return
name|newNode
return|;
comment|//returning the newNode is more sensible than returning the oldNode
block|}
specifier|private
name|String
name|escapeXml
parameter_list|(
name|Node
name|child
parameter_list|)
block|{
specifier|final
name|String
name|str
init|=
operator|(
operator|(
name|Attr
operator|)
name|child
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
literal|null
decl_stmt|;
name|String
name|entity
init|=
literal|null
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'"'
case|:
name|entity
operator|=
literal|"&quot;"
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|entity
operator|=
literal|"&lt;"
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|entity
operator|=
literal|"&gt;"
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|entity
operator|=
literal|"&apos;"
expr_stmt|;
break|break;
default|default :
name|entity
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|.
name|append
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|buffer
operator|==
literal|null
operator|)
condition|?
name|str
else|:
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPreserveSpace
parameter_list|(
name|boolean
name|preserveWS
parameter_list|)
block|{
name|this
operator|.
name|preserveWS
operator|=
name|preserveWS
expr_stmt|;
block|}
specifier|public
name|boolean
name|preserveSpace
parameter_list|()
block|{
return|return
name|preserveWS
return|;
block|}
comment|/** ? @see org.w3c.dom.Element#getSchemaTypeInfo() 	 */
specifier|public
name|TypeInfo
name|getSchemaTypeInfo
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getSchemaTypeInfo() not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Element#setIdAttribute(java.lang.String, boolean) 	 */
specifier|public
name|void
name|setIdAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setIdAttribute(String name, boolean isId) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Element#setIdAttributeNS(java.lang.String, java.lang.String, boolean) 	 */
specifier|public
name|void
name|setIdAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setIdAttributeNS(String namespaceURI, String localName, boolean isId) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Element#setIdAttributeNode(org.w3c.dom.Attr, boolean) 	 */
specifier|public
name|void
name|setIdAttributeNode
parameter_list|(
name|Attr
name|idAttr
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setIdAttributeNode(Attr idAttr, boolean isId) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getBaseURI() 	 */
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getBaseURI() not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#compareDocumentPosition(org.w3c.dom.Node) 	 */
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
name|Node
name|other
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"compareDocumentPosition(Node other) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getTextContent() 	 */
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getTextContent() not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setTextContent(java.lang.String) 	 */
specifier|public
name|void
name|setTextContent
parameter_list|(
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setTextContent(String textContent) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isSameNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isSameNode
parameter_list|(
name|Node
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isSameNode(Node other) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupPrefix(java.lang.String) 	 */
specifier|public
name|String
name|lookupPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupPrefix(String namespaceURI) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isDefaultNamespace(java.lang.String) 	 */
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isDefaultNamespace(String namespaceURI) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#lookupNamespaceURI(java.lang.String) 	 */
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"lookupNamespaceURI(String prefix) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#isEqualNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
name|Node
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"isEqualNode(Node arg) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getFeature(java.lang.String, java.lang.String) 	 */
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getFeature(String feature, String version) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler) 	 */
specifier|public
name|Object
name|setUserData
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|data
parameter_list|,
name|UserDataHandler
name|handler
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"setUserData(String key, Object data, UserDataHandler handler) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/** ? @see org.w3c.dom.Node#getUserData(java.lang.String) 	 */
specifier|public
name|Object
name|getUserData
parameter_list|(
name|String
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"getUserData(String key) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|NodeVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasChildNodes
argument_list|()
condition|)
block|{
specifier|final
name|int
name|ccount
init|=
name|getChildCount
argument_list|()
decl_stmt|;
name|StoredNode
name|next
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ccount
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
name|StoredNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|next
operator|.
name|accept
argument_list|(
name|iterator
argument_list|,
name|visitor
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

