begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_class
specifier|public
class|class
name|ArraySet
extends|extends
name|NodeSet
block|{
specifier|public
specifier|final
specifier|static
name|int
name|ANCESTOR
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DESCENDANT
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ArraySet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|length
decl_stmt|;
specifier|protected
name|NodeProxy
name|nodes
index|[]
decl_stmt|;
specifier|protected
name|boolean
name|sorted
init|=
literal|false
decl_stmt|;
comment|/** 	 *  Constructor for the ArraySet object 	 * 	 *@param  initialCapacity  Description of the Parameter 	 */
specifier|public
name|ArraySet
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|NodeProxy
index|[
name|initialCapacity
index|]
expr_stmt|;
name|length
operator|=
name|initialCapacity
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|boolean
name|getParentSet
parameter_list|(
name|NodeProxy
index|[]
name|nl
parameter_list|)
block|{
name|int
name|level
decl_stmt|;
name|boolean
name|foundValid
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|nl
operator|.
name|length
decl_stmt|;
name|long
name|pid
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// skip invalid nodes
if|if
condition|(
name|nl
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|nl
index|[
name|i
index|]
operator|.
name|gid
operator|<
literal|0
condition|)
block|{
name|nl
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|level
operator|=
name|nl
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|nl
index|[
name|i
index|]
operator|.
name|gid
argument_list|)
expr_stmt|;
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|nl
index|[
name|i
index|]
operator|.
name|gid
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// calculate parent's gid
name|pid
operator|=
operator|(
name|nl
index|[
name|i
index|]
operator|.
name|gid
operator|-
name|nl
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|treeLevelStartPoints
index|[
name|level
index|]
operator|)
operator|/
name|nl
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|treeLevelOrder
index|[
name|level
index|]
operator|+
name|nl
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|treeLevelStartPoints
index|[
name|level
operator|-
literal|1
index|]
expr_stmt|;
comment|//System.out.println(nl[i].doc.getDocId() + ":" + nl[i].gid + "->" + pid);
name|nl
index|[
name|i
index|]
operator|.
name|gid
operator|=
name|pid
expr_stmt|;
block|}
comment|//if (nl[i].gid> 0)
comment|// continue until all nodes are set to null
name|foundValid
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|foundValid
return|;
block|}
comment|/** 	 *  QuickSort - sorting is needed once before we do binary search 	 * 	 *@param  list  Description of the Parameter 	 *@param  low   Description of the Parameter 	 *@param  high  Description of the Parameter 	 */
specifier|private
specifier|final
specifier|static
name|void
name|quickSort
parameter_list|(
name|NodeProxy
index|[]
name|list
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
if|if
condition|(
name|low
operator|>=
name|high
condition|)
return|return;
name|int
name|left_index
init|=
name|low
decl_stmt|;
name|int
name|right_index
init|=
name|high
decl_stmt|;
specifier|final
name|NodeProxy
name|pivot
init|=
name|list
index|[
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
index|]
decl_stmt|;
name|NodeProxy
name|temp
decl_stmt|;
do|do
block|{
while|while
condition|(
name|left_index
operator|<=
name|high
operator|&&
name|list
index|[
name|left_index
index|]
operator|.
name|compareTo
argument_list|(
name|pivot
argument_list|)
operator|<
literal|0
condition|)
name|left_index
operator|++
expr_stmt|;
while|while
condition|(
name|right_index
operator|>=
name|low
operator|&&
name|list
index|[
name|right_index
index|]
operator|.
name|compareTo
argument_list|(
name|pivot
argument_list|)
operator|>
literal|0
condition|)
name|right_index
operator|--
expr_stmt|;
if|if
condition|(
name|left_index
operator|<=
name|right_index
condition|)
block|{
if|if
condition|(
name|list
index|[
name|left_index
index|]
operator|.
name|compareTo
argument_list|(
name|list
index|[
name|right_index
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|left_index
operator|++
expr_stmt|;
name|right_index
operator|--
expr_stmt|;
block|}
else|else
block|{
name|temp
operator|=
name|list
index|[
name|right_index
index|]
expr_stmt|;
name|list
index|[
name|right_index
operator|--
index|]
operator|=
name|list
index|[
name|left_index
index|]
expr_stmt|;
name|list
index|[
name|left_index
operator|++
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|left_index
operator|<=
name|right_index
condition|)
do|;
name|quickSort
argument_list|(
name|list
argument_list|,
name|low
argument_list|,
name|right_index
argument_list|)
expr_stmt|;
name|quickSort
argument_list|(
name|list
argument_list|,
name|left_index
argument_list|,
name|high
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  BinarySearch algorithm 	 * 	 *@param  items    Description of the Parameter 	 *@param  low      Description of the Parameter 	 *@param  high     Description of the Parameter 	 *@param  cmpItem  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|private
specifier|final
specifier|static
name|int
name|search
parameter_list|(
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|NodeProxy
name|cmpItem
parameter_list|)
block|{
name|int
name|mid
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|cmp
operator|=
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|cmpItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|mid
return|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** 	 *  get all nodes contained in the set, which are greater or equal to lower 	 *  and less or equal to upper. This is basically needed by all functions 	 *  that determine the position of a node in the node set. 	 * 	 *@param  items  Description of the Parameter 	 *@param  low    Description of the Parameter 	 *@param  high   Description of the Parameter 	 *@param  lower  Description of the Parameter 	 *@param  upper  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|private
specifier|final
specifier|static
name|NodeSet
name|searchRange
parameter_list|(
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|NodeProxy
name|lower
parameter_list|,
name|NodeProxy
name|upper
parameter_list|)
block|{
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
name|high
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|cmp
operator|=
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
operator|>
literal|0
condition|)
name|mid
operator|--
expr_stmt|;
if|if
condition|(
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
operator|<
literal|0
condition|)
name|mid
operator|++
expr_stmt|;
while|while
condition|(
name|mid
operator|<=
name|max
operator|&&
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|upper
argument_list|)
operator|<=
literal|0
condition|)
name|result
operator|.
name|add
argument_list|(
name|items
index|[
name|mid
operator|++
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setIsSorted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|counter
operator|<
name|length
condition|)
name|nodes
index|[
name|counter
operator|++
index|]
operator|=
name|proxy
expr_stmt|;
else|else
block|{
name|int
name|grow
init|=
operator|(
name|length
operator|<
literal|10
operator|)
condition|?
literal|50
else|:
name|length
operator|>>
literal|1
decl_stmt|;
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|length
operator|+
name|grow
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|length
operator|=
name|length
operator|+
name|grow
expr_stmt|;
name|nodes
operator|=
name|temp
expr_stmt|;
name|nodes
index|[
name|counter
operator|++
index|]
operator|=
name|proxy
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|NodeImpl
operator|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wrong implementation"
argument_list|)
throw|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
operator|(
operator|(
name|NodeImpl
operator|)
name|node
operator|)
operator|.
name|ownerDocument
argument_list|,
operator|(
operator|(
name|NodeImpl
operator|)
name|node
operator|)
operator|.
name|gid
argument_list|,
operator|(
operator|(
name|NodeImpl
operator|)
name|node
operator|)
operator|.
name|internalAddress
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Adds a feature to the All attribute of the ArraySet object 	 * 	 *@param  other  The feature to be added to the All attribute 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Adds a feature to the All attribute of the ArraySet object 	 * 	 *@param  other  The feature to be added to the All attribute 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeList
name|other
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
name|add
argument_list|(
name|other
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasIndex
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|nodes
index|[
name|i
index|]
operator|.
name|hasIndex
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|/**  Description of the Method */
specifier|protected
name|void
name|checkSorted
parameter_list|()
block|{
if|if
condition|(
name|counter
operator|>
literal|1
operator|&&
name|nodes
index|[
name|counter
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|nodes
index|[
name|counter
operator|-
literal|2
index|]
argument_list|)
operator|<
literal|0
condition|)
name|sorted
operator|=
literal|false
expr_stmt|;
else|else
name|sorted
operator|=
literal|true
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|counter
operator|=
literal|0
expr_stmt|;
name|sorted
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc     Description of the Parameter 	 *@param  nodeId  Description of the Parameter 	 *@return         Description of the Return Value 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|contains
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  proxy  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
operator|<
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|proxy
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc     Description of the Parameter 	 *@param  nodeId  Description of the Parameter 	 *@return         Description of the Return Value 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pos  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|counter
operator|||
name|pos
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|sort
argument_list|()
expr_stmt|;
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
comment|/** 	 *  Gets the childNodes attribute of the ArraySet object 	 * 	 *@param  parent  Description of the Parameter 	 *@return         The childNodes value 	 */
specifier|public
name|ArraySet
name|getChildNodes
parameter_list|(
name|NodeProxy
name|parent
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|level
init|=
name|parent
operator|.
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|parent
operator|.
name|gid
argument_list|)
decl_stmt|;
name|long
name|first
init|=
operator|(
name|parent
operator|.
name|gid
operator|-
name|parent
operator|.
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|*
name|parent
operator|.
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
operator|+
name|parent
operator|.
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
name|long
name|last
init|=
name|first
operator|+
name|parent
operator|.
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|ArraySet
operator|)
name|getRange
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|parent
operator|.
name|doc
argument_list|,
name|first
argument_list|)
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|parent
operator|.
name|doc
argument_list|,
name|last
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the children attribute of the ArraySet object 	 * 	 *@param  doc  Description of the Parameter 	 *@param  gid  Description of the Parameter 	 *@return      The children value 	 */
specifier|public
name|NodeSet
name|getChildren
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
comment|// get parents id
name|long
name|pid
init|=
operator|(
name|gid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|/
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// get first childs id
name|long
name|f_gid
init|=
operator|(
name|pid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
operator|)
operator|*
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
decl_stmt|;
comment|// get last childs id
name|long
name|e_gid
init|=
name|f_gid
operator|+
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
decl_stmt|;
comment|// get all nodes between first and last childs id
name|NodeSet
name|set
init|=
name|getRange
argument_list|(
name|doc
argument_list|,
name|f_gid
argument_list|,
name|e_gid
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
specifier|public
name|ArraySet
name|getChildren
parameter_list|(
name|NodeSet
name|ancestors
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ancestors
operator|instanceof
name|ArraySet
operator|)
condition|)
return|return
name|super
operator|.
name|getChildren
argument_list|(
name|ancestors
argument_list|,
name|mode
argument_list|)
return|;
name|ArraySet
name|al
init|=
operator|(
name|ArraySet
operator|)
name|ancestors
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|counter
operator|==
literal|0
condition|)
return|return
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
return|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sort
argument_list|()
expr_stmt|;
name|al
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|// get a deep copy of array - will be modified
name|NodeProxy
index|[]
name|dl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|DESCENDANT
condition|)
block|{
name|dl
operator|=
operator|new
name|NodeProxy
index|[
name|counter
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
name|dl
index|[
name|i
index|]
operator|=
operator|new
name|NodeProxy
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
name|dl
operator|=
name|nodes
expr_stmt|;
specifier|final
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|al
operator|.
name|counter
argument_list|)
decl_stmt|;
name|int
name|ax
init|=
literal|0
decl_stmt|;
name|int
name|dx
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|dlen
init|=
name|dl
operator|.
name|length
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|getParentSet
argument_list|(
name|dl
argument_list|)
expr_stmt|;
while|while
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
if|if
condition|(
name|dl
index|[
name|dx
index|]
operator|==
literal|null
condition|)
block|{
comment|// || dl[dx].gid< 1) {
name|dx
operator|++
expr_stmt|;
continue|continue;
block|}
comment|//			System.out.println(
comment|//				dl[dx].doc.getDocId()
comment|//					+ ":"
comment|//					+ dl[dx].gid
comment|//					+ " = "
comment|//					+ al.nodes[ax].doc.getDocId()
comment|//					+ ':'
comment|//					+ al.nodes[ax].gid);
name|cmp
operator|=
name|dl
index|[
name|dx
index|]
operator|.
name|compareTo
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|al
operator|.
name|counter
operator|-
literal|1
condition|)
name|ax
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|dx
operator|++
expr_stmt|;
else|else
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ANCESTOR
case|:
name|dl
index|[
name|dx
index|]
operator|.
name|addMatches
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|matches
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|dl
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCENDANT
case|:
name|nodes
index|[
name|dx
index|]
operator|.
name|addMatches
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|matches
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|dx
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getChildren found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  Gets the descendants attribute of the ArraySet object 	 * 	 *@param  ancestor  Description of the Parameter 	 *@return           The descendants value 	 */
specifier|public
name|ArraySet
name|getDescendantNodes
parameter_list|(
name|NodeProxy
name|ancestor
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|counter
operator|-
literal|1
decl_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|cmp
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|nodes
index|[
name|mid
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|nodes
index|[
name|mid
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|mid
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|ancestor
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|nodes
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasAncestor
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|ancestor
operator|.
name|gid
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|gid
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
for|for
control|(
name|int
name|i
init|=
name|mid
operator|+
literal|1
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|ancestor
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|nodes
index|[
name|i
index|]
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasAncestor
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|ancestor
operator|.
name|gid
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|gid
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|NodeSet
name|getDescendants
parameter_list|(
name|NodeSet
name|other
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
return|return
name|getDescendants
argument_list|(
name|other
argument_list|,
name|mode
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 *  For a given set of potential ancestor nodes, get the 	 * descendants in this node set 	 * 	 *@param  al    Description of the Parameter 	 *@param  mode  Description of the Parameter 	 *@return       The descendants value 	 */
specifier|public
name|NodeSet
name|getDescendants
parameter_list|(
name|NodeSet
name|other
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ArraySet
operator|)
condition|)
return|return
name|super
operator|.
name|getDescendants
argument_list|(
name|other
argument_list|,
name|mode
argument_list|)
return|;
name|ArraySet
name|al
init|=
operator|(
name|ArraySet
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|counter
operator|==
literal|0
operator|||
name|counter
operator|==
literal|0
condition|)
return|return
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
return|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|al
operator|.
name|sort
argument_list|()
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
comment|// the descendant set will be modified: copy if required
name|NodeProxy
index|[]
name|dl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|DESCENDANT
condition|)
block|{
name|dl
operator|=
operator|new
name|NodeProxy
index|[
name|counter
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
name|dl
index|[
name|i
index|]
operator|=
operator|new
name|NodeProxy
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
name|dl
operator|=
name|nodes
expr_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|int
name|ax
decl_stmt|;
name|int
name|dx
decl_stmt|;
name|int
name|cmp
decl_stmt|;
specifier|final
name|int
name|dlen
init|=
name|dl
operator|.
name|length
decl_stmt|;
name|boolean
name|more
init|=
name|includeSelf
condition|?
literal|true
else|:
name|getParentSet
argument_list|(
name|dl
argument_list|)
decl_stmt|;
while|while
condition|(
name|more
condition|)
block|{
name|ax
operator|=
literal|0
expr_stmt|;
name|dx
operator|=
literal|0
expr_stmt|;
comment|//more = getParentSet(dl);
while|while
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
if|if
condition|(
name|dl
index|[
name|dx
index|]
operator|==
literal|null
condition|)
block|{
comment|// || dl[dx].gid< 1) {
name|dx
operator|++
expr_stmt|;
continue|continue;
block|}
comment|//System.out.println(dl[dx].gid + " == " + al.nodes[ax].gid);
name|cmp
operator|=
name|dl
index|[
name|dx
index|]
operator|.
name|compareTo
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|al
operator|.
name|counter
operator|-
literal|1
condition|)
name|ax
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|dx
operator|++
expr_stmt|;
else|else
block|{
comment|// found a matching node
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ANCESTOR
case|:
comment|// remember the ancestor-node
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addMatches
argument_list|(
name|dl
index|[
name|dx
index|]
operator|.
name|matches
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
comment|//System.out.println("found: " + al.nodes[ax]);
break|break;
case|case
name|DESCENDANT
case|:
comment|// remember the descendant-node
name|nodes
index|[
name|dx
index|]
operator|.
name|addMatches
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|matches
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|dx
operator|++
expr_stmt|;
block|}
block|}
comment|// calculate parent id for each node in the
comment|// descendant set. Returns false if no more
comment|// valid nodes are found
name|more
operator|=
name|getParentSet
argument_list|(
name|dl
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getDescendants found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  Gets the last attribute of the ArraySet object 	 * 	 *@return    The last value 	 */
specifier|public
name|int
name|getLast
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
comment|/** 	 *  Gets the length attribute of the ArraySet object 	 * 	 *@return    The length value 	 */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
comment|/** 	 *  Gets the range attribute of the ArraySet object 	 * 	 *@param  lower  Description of the Parameter 	 *@param  upper  Description of the Parameter 	 *@return        The range value 	 */
specifier|public
name|NodeSet
name|getRange
parameter_list|(
name|NodeProxy
name|lower
parameter_list|,
name|NodeProxy
name|upper
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|searchRange
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
comment|/** 	 *  Gets the range attribute of the ArraySet object 	 * 	 *@param  doc    Description of the Parameter 	 *@param  lower  Description of the Parameter 	 *@param  upper  Description of the Parameter 	 *@return        The range value 	 */
specifier|public
name|NodeSet
name|getRange
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
return|return
name|getRange
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|lower
argument_list|)
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|upper
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasAncestor
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|ancestor
parameter_list|,
name|long
name|node
parameter_list|)
block|{
name|int
name|level
decl_stmt|;
name|long
name|pid
decl_stmt|;
while|while
condition|(
name|node
operator|>
name|ancestor
condition|)
block|{
name|level
operator|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// calculate parent's gid
name|pid
operator|=
operator|(
name|node
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|/
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pid
operator|==
name|ancestor
condition|)
return|return
literal|true
return|;
name|node
operator|=
name|pid
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|parent
parameter_list|,
name|long
name|node
parameter_list|)
block|{
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// calculate parent's gid
name|long
name|pid
init|=
operator|(
name|node
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|/
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|pid
operator|==
name|parent
return|;
block|}
comment|/** 	 *  Gets the sorted attribute of the ArraySet object 	 * 	 *@return    The sorted value 	 */
specifier|protected
name|boolean
name|isSorted
parameter_list|()
block|{
return|return
name|sorted
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  pos  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|counter
operator|||
name|pos
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|sort
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
name|nodes
index|[
name|pos
index|]
decl_stmt|;
return|return
name|p
operator|.
name|doc
operator|.
name|getNode
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@return    Description of the Return Value 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ArraySetIterator
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc           Description of the Parameter 	 *@param  gid           Description of the Parameter 	 *@param  directParent  Description of the Parameter 	 *@param  includeSelf   Description of the Parameter 	 *@return               Description of the Return Value 	 */
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|nodeHasParent
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc           Description of the Parameter 	 *@param  gid           Description of the Parameter 	 *@param  directParent  Description of the Parameter 	 *@return               Description of the Return Value 	 */
specifier|public
name|boolean
name|nodeHasParent
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|nodeHasParent
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  doc           Description of the Parameter 	 *@param  gid           Description of the Parameter 	 *@param  directParent  Description of the Parameter 	 *@param  includeSelf   Description of the Parameter 	 *@return               Description of the Return Value 	 */
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|parentWithChild
argument_list|(
name|doc
argument_list|,
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|parentWithChild
argument_list|(
name|proxy
operator|.
name|doc
argument_list|,
name|proxy
operator|.
name|gid
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|position
parameter_list|(
name|NodeImpl
name|test
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|test
operator|.
name|ownerDocument
argument_list|,
name|test
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
name|int
name|position
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|proxy
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
return|return;
name|NodeProxy
index|[]
name|temp
init|=
operator|new
name|NodeProxy
index|[
name|counter
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|pos
operator|-
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|temp
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|temp
operator|.
name|length
operator|-
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|temp
expr_stmt|;
name|counter
operator|--
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removal of node took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|position
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|position
operator|>=
name|counter
condition|)
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"out of bounds"
argument_list|)
throw|;
name|nodes
index|[
name|position
index|]
operator|.
name|gid
operator|=
name|nodeId
expr_stmt|;
name|nodes
index|[
name|position
index|]
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|void
name|setIsSorted
parameter_list|(
name|boolean
name|sorted
parameter_list|)
block|{
comment|//this.sorted = sorted;
block|}
specifier|public
specifier|final
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sorted
operator|||
name|counter
operator|<
literal|2
condition|)
return|return;
comment|//quickSort(nodes, 0, counter - 1);
comment|//Arrays.sort(nodes, 0, counter - 1);
name|FastQSort
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sorted
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
class|class
name|ArraySetIterator
implements|implements
name|Iterator
block|{
specifier|protected
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|counter
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|hasNext
argument_list|()
condition|?
name|nodes
index|[
name|pos
operator|++
index|]
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

