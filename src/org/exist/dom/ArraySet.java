begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03,  Wolfgang M. Meier (wolfgang@exist-db.org)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|ArraySet
extends|extends
name|AbstractNodeSet
block|{
specifier|protected
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|length
decl_stmt|;
specifier|protected
name|NodeProxy
name|nodes
index|[]
decl_stmt|;
specifier|protected
name|boolean
name|sortedNaturally
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|sortedInDocumentOrder
init|=
literal|false
decl_stmt|;
specifier|private
name|DocumentOrderComparator
name|docOrderComparator
init|=
operator|new
name|DocumentOrderComparator
argument_list|()
decl_stmt|;
comment|/** 	 *  Constructor for the ArraySet object 	 * 	 *@param  initialCapacity  Description of the Parameter 	 */
specifier|public
name|ArraySet
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|nodes
operator|=
operator|new
name|NodeProxy
index|[
name|initialCapacity
index|]
expr_stmt|;
name|length
operator|=
name|initialCapacity
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|boolean
name|getParentSet
parameter_list|(
name|NodeProxy
index|[]
name|nl
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|boolean
name|foundValid
init|=
literal|false
decl_stmt|;
name|long
name|pid
decl_stmt|;
name|NodeProxy
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|nl
index|[
name|i
index|]
expr_stmt|;
comment|// skip invalid nodes
if|if
condition|(
name|node
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|node
operator|.
name|getGID
argument_list|()
operator|==
name|NodeProxy
operator|.
name|DOCUMENT_NODE_GID
condition|)
block|{
name|nl
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|pid
operator|=
name|XMLUtil
operator|.
name|getParentId
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|//System.out.println(node.doc.getDocId() + ":" + node.gid + "->" + pid);
comment|//TODO : gid should be private ! -pb
name|node
operator|.
name|gid
operator|=
name|pid
expr_stmt|;
comment|// continue until all nodes are set to invalid
name|foundValid
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|foundValid
return|;
block|}
comment|/** 	 *  BinarySearch algorithm 	 * 	 *@param  items    Description of the Parameter 	 *@param  low      Description of the Parameter 	 *@param  high     Description of the Parameter 	 *@param  cmpItem  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|private
specifier|final
specifier|static
name|int
name|search
parameter_list|(
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|NodeProxy
name|cmpItem
parameter_list|)
block|{
name|int
name|mid
decl_stmt|;
name|int
name|cmp
decl_stmt|;
comment|//Remember that items must be sorted !
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|cmp
operator|=
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|cmpItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|mid
return|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** 		 *  BinarySearch algorithm 		 * 		 *@param  items    Description of the Parameter 		 *@param  low      Description of the Parameter 		 *@param  high     Description of the Parameter 		 *@param  cmpItem  Description of the Parameter 		 *@return          Description of the Return Value 		 */
specifier|private
specifier|final
specifier|static
name|int
name|search
parameter_list|(
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|DocumentImpl
name|cmpDoc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|int
name|mid
decl_stmt|;
name|NodeProxy
name|cmp
decl_stmt|;
comment|//Remember that items must be sorted !
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|cmp
operator|=
name|items
index|[
name|mid
index|]
expr_stmt|;
if|if
condition|(
name|cmp
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
operator|==
name|cmpDoc
operator|.
name|docId
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|getGID
argument_list|()
operator|==
name|gid
condition|)
return|return
name|mid
return|;
if|else if
condition|(
name|cmp
operator|.
name|getGID
argument_list|()
operator|>
name|gid
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|cmp
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
operator|>
name|cmpDoc
operator|.
name|docId
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|final
specifier|static
name|NodeSet
name|searchRange
parameter_list|(
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|NodeProxy
name|lower
parameter_list|,
name|NodeProxy
name|upper
parameter_list|)
block|{
comment|//TODO : dimension as high - low ?
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
return|return
name|searchRange
argument_list|(
name|result
argument_list|,
name|items
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
comment|/** 	 *  get all nodes contained in the set, which are greater or equal to lower 	 *  and less or equal to upper. This is basically needed by all functions 	 *  that determine the position of a node in the node set. 	 * 	 *@param  items  Description of the Parameter 	 *@param  low    Description of the Parameter 	 *@param  high   Description of the Parameter 	 *@param  lower  Description of the Parameter 	 *@param  upper  Description of the Parameter 	 *@return        Description of the Return Value 	 */
specifier|private
specifier|final
specifier|static
name|NodeSet
name|searchRange
parameter_list|(
name|ArraySet
name|result
parameter_list|,
name|NodeProxy
index|[]
name|items
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|,
name|NodeProxy
name|lower
parameter_list|,
name|NodeProxy
name|upper
parameter_list|)
block|{
name|int
name|mid
init|=
literal|0
decl_stmt|;
name|int
name|max
init|=
name|high
decl_stmt|;
name|int
name|cmp
decl_stmt|;
comment|//Remember that items must be sorted !
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
expr_stmt|;
name|cmp
operator|=
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|mid
operator|>
literal|0
operator|&&
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
operator|>
literal|0
condition|)
name|mid
operator|--
expr_stmt|;
if|if
condition|(
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|lower
argument_list|)
operator|<
literal|0
condition|)
name|mid
operator|++
expr_stmt|;
while|while
condition|(
name|mid
operator|<=
name|max
operator|&&
name|items
index|[
name|mid
index|]
operator|.
name|compareTo
argument_list|(
name|upper
argument_list|)
operator|<=
literal|0
condition|)
name|result
operator|.
name|add
argument_list|(
name|items
index|[
name|mid
operator|++
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|counter
operator|<
name|length
condition|)
name|nodes
index|[
name|counter
operator|++
index|]
operator|=
name|proxy
expr_stmt|;
else|else
block|{
name|int
name|grow
init|=
operator|(
name|length
operator|<
literal|10
operator|)
condition|?
literal|50
else|:
name|length
operator|>>
literal|1
decl_stmt|;
name|NodeProxy
name|temp
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|length
operator|+
name|grow
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|length
operator|=
name|length
operator|+
name|grow
expr_stmt|;
name|nodes
operator|=
name|temp
expr_stmt|;
name|nodes
index|[
name|counter
operator|++
index|]
operator|=
name|proxy
expr_stmt|;
block|}
name|sortedNaturally
operator|=
literal|false
expr_stmt|;
name|sortedInDocumentOrder
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|other
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|contains
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
operator|<
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|proxy
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|nodeId
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|counter
operator|||
name|pos
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|sort
argument_list|()
expr_stmt|;
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|NodeProxy
name|getUnsorted
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
comment|//TODO : what if the Array has been sorted ?
if|if
condition|(
name|pos
operator|>=
name|counter
operator|||
name|pos
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|nodes
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|getChildrenX
parameter_list|(
name|NodeSet
name|ancestors
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|rememberContext
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ancestors
operator|instanceof
name|ArraySet
operator|)
condition|)
return|return
name|super
operator|.
name|selectParentChild
argument_list|(
name|ancestors
argument_list|,
name|mode
argument_list|,
name|rememberContext
argument_list|)
return|;
name|ArraySet
name|al
init|=
operator|(
name|ArraySet
operator|)
name|ancestors
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|counter
operator|==
literal|0
operator|||
name|counter
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sort
argument_list|()
expr_stmt|;
name|al
operator|.
name|sort
argument_list|()
expr_stmt|;
specifier|final
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|al
operator|.
name|counter
argument_list|)
decl_stmt|;
comment|// get a deep copy of array - will be modified
name|NodeProxy
index|[]
name|dl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|DESCENDANT
condition|)
block|{
name|dl
operator|=
name|copyNodeSet
argument_list|(
name|al
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//TODO : understand why this can be true ?  -pb
comment|//Would, at best, have expected result.sortedNaturally = this.sortedNaturally
comment|//Why not also handle sortedInDocumentOrder ?
name|result
operator|.
name|sortedNaturally
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|dl
operator|=
name|nodes
expr_stmt|;
comment|//result.sorted = true;
name|int
name|ax
init|=
literal|0
decl_stmt|;
name|int
name|dx
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|dlen
init|=
name|dl
operator|.
name|length
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|getParentSet
argument_list|(
name|dl
argument_list|,
name|dlen
argument_list|)
expr_stmt|;
while|while
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
while|while
condition|(
name|dl
index|[
name|dx
index|]
operator|==
literal|null
operator|&&
operator|++
name|dx
operator|<
name|dlen
condition|)
empty_stmt|;
if|if
condition|(
name|dx
operator|==
name|dlen
condition|)
break|break;
comment|//			          System.out.println(
comment|//			              dl[dx].doc.getDocId()
comment|//			                  + ":"
comment|//			                  + dl[dx].gid
comment|//			                  + " = "
comment|//			                  + al.nodes[ax].doc.getDocId()
comment|//			                  + ':'
comment|//			                  + al.nodes[ax].gid);
name|cmp
operator|=
name|dl
index|[
name|dx
index|]
operator|.
name|compareTo
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|al
operator|.
name|counter
operator|-
literal|1
condition|)
name|ax
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|dx
operator|++
expr_stmt|;
else|else
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ANCESTOR
case|:
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addMatches
argument_list|(
name|dl
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberContext
condition|)
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addContextNode
argument_list|(
name|dl
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
else|else
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|copyContext
argument_list|(
name|dl
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCENDANT
case|:
name|nodes
index|[
name|dx
index|]
operator|.
name|addMatches
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberContext
condition|)
name|nodes
index|[
name|dx
index|]
operator|.
name|addContextNode
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
else|else
name|nodes
index|[
name|dx
index|]
operator|.
name|copyContext
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|dx
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getChildren found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  For a given set of potential ancestor nodes, get the 	 * descendants in this node set 	 * 	 *@param  al    Description of the Parameter 	 *@param  mode  Description of the Parameter 	 *@return       The descendants value 	 */
specifier|public
name|NodeSet
name|getDescendantsX
parameter_list|(
name|NodeSet
name|other
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|boolean
name|rememberContext
parameter_list|)
block|{
comment|//		if (other.getLength()< CHOOSE_TOP_DOWN_MAX)
comment|//			return getDescendantsTopDown(other, mode, rememberContext);
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ArraySet
operator|)
condition|)
return|return
name|super
operator|.
name|selectAncestorDescendant
argument_list|(
name|other
argument_list|,
name|mode
argument_list|,
name|includeSelf
argument_list|,
name|rememberContext
argument_list|)
return|;
name|ArraySet
name|al
init|=
operator|(
name|ArraySet
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|counter
operator|==
literal|0
operator|||
name|counter
operator|==
literal|0
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|al
operator|.
name|sort
argument_list|()
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
comment|// the descendant set will be modified: copy if required
name|NodeProxy
index|[]
name|dl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|DESCENDANT
condition|)
block|{
name|dl
operator|=
name|copyNodeSet
argument_list|(
name|al
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//			dl = new NodeProxy[counter];
comment|//			LOG.debug("copying " + counter + " nodes");
comment|//			for(int i = 0; i< dl.length; i++) {
comment|//				dl[i] = new NodeProxy( nodes[i] );
comment|//			}
comment|//			LOG.debug("nodes copied");
block|}
else|else
name|dl
operator|=
name|nodes
expr_stmt|;
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|dl
operator|.
name|length
argument_list|)
decl_stmt|;
comment|//result.sorted = true;
name|int
name|ax
decl_stmt|;
name|int
name|dx
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|NodeProxy
name|node
decl_stmt|;
specifier|final
name|int
name|dlen
init|=
name|dl
operator|.
name|length
decl_stmt|;
name|boolean
name|more
init|=
name|includeSelf
condition|?
literal|true
else|:
name|getParentSet
argument_list|(
name|dl
argument_list|,
name|dlen
argument_list|)
decl_stmt|;
while|while
condition|(
name|more
condition|)
block|{
name|ax
operator|=
literal|0
expr_stmt|;
name|dx
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
if|if
condition|(
name|dl
index|[
name|dx
index|]
operator|==
literal|null
condition|)
block|{
comment|// || dl[dx].gid< 1) {
name|dx
operator|++
expr_stmt|;
continue|continue;
block|}
comment|//System.out.println(dl[dx].gid + " == " + al.nodes[ax].gid);
name|cmp
operator|=
name|dl
index|[
name|dx
index|]
operator|.
name|compareTo
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|al
operator|.
name|counter
operator|-
literal|1
condition|)
name|ax
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|dx
operator|++
expr_stmt|;
else|else
block|{
comment|// found a matching node
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ANCESTOR
case|:
comment|// remember the ancestor-node
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addMatches
argument_list|(
name|dl
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberContext
condition|)
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addContextNode
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
else|else
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|copyContext
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
comment|//System.out.println("found: " + al.nodes[ax]);
break|break;
case|case
name|DESCENDANT
case|:
comment|// remember the descendant-node
name|nodes
index|[
name|dx
index|]
operator|.
name|addMatches
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberContext
condition|)
name|nodes
index|[
name|dx
index|]
operator|.
name|addContextNode
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
else|else
name|nodes
index|[
name|dx
index|]
operator|.
name|copyContext
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|dx
operator|++
expr_stmt|;
block|}
block|}
comment|// calculate parent id for each node in the
comment|// descendant set. Returns false if no more
comment|// valid nodes are found
name|more
operator|=
name|getParentSet
argument_list|(
name|dl
argument_list|,
name|dlen
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getDescendants found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 		 *  For a given set of potential ancestor nodes, get the 		 * descendants in this node set 		 * 		 *@param  al    Description of the Parameter 		 *@param  mode  Description of the Parameter 		 *@return       The descendants value 		 */
specifier|public
name|NodeSet
name|selectAncestors
parameter_list|(
name|NodeSet
name|other
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|boolean
name|rememberContext
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ArraySet
operator|)
condition|)
return|return
name|super
operator|.
name|selectAncestors
argument_list|(
name|other
argument_list|,
name|includeSelf
argument_list|,
name|rememberContext
argument_list|)
return|;
name|ArraySet
name|al
init|=
operator|(
name|ArraySet
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|al
operator|.
name|counter
operator|==
literal|0
operator|||
name|counter
operator|==
literal|0
condition|)
return|return
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
return|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|al
operator|.
name|sort
argument_list|()
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
comment|// the descendant set will be modified: copy if required
name|NodeProxy
index|[]
name|dl
init|=
name|copyNodeSet
argument_list|(
name|al
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|//NodeSet result = new NodeIDSet();
name|NodeSet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|NodeProxy
name|temp
decl_stmt|;
name|int
name|ax
decl_stmt|;
name|int
name|dx
decl_stmt|;
name|int
name|cmp
decl_stmt|;
specifier|final
name|int
name|dlen
init|=
name|dl
operator|.
name|length
decl_stmt|;
name|boolean
name|more
init|=
name|includeSelf
condition|?
literal|true
else|:
name|getParentSet
argument_list|(
name|dl
argument_list|,
name|dlen
argument_list|)
decl_stmt|;
while|while
condition|(
name|more
condition|)
block|{
name|ax
operator|=
literal|0
expr_stmt|;
name|dx
operator|=
literal|0
expr_stmt|;
comment|//more = getParentSet(dl);
while|while
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
if|if
condition|(
name|dl
index|[
name|dx
index|]
operator|==
literal|null
condition|)
block|{
comment|// || dl[dx].gid< 1) {
name|dx
operator|++
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"skipping "
operator|+
name|dx
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//System.out.println(dl[dx].gid + " == " + al.nodes[ax].gid);
name|cmp
operator|=
name|dl
index|[
name|dx
index|]
operator|.
name|compareTo
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|al
operator|.
name|counter
operator|-
literal|1
condition|)
name|ax
operator|++
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|dx
operator|++
expr_stmt|;
else|else
block|{
comment|// found a matching node
if|if
condition|(
operator|(
name|temp
operator|=
name|result
operator|.
name|get
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
comment|// remember the ancestor-node
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addMatches
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberContext
condition|)
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|addContextNode
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
else|else
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|copyContext
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|al
operator|.
name|nodes
index|[
name|ax
index|]
argument_list|)
expr_stmt|;
comment|//System.out.println("found: " + al.nodes[ax]);
block|}
if|else if
condition|(
name|rememberContext
condition|)
name|temp
operator|.
name|addContextNode
argument_list|(
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
name|dx
operator|++
expr_stmt|;
block|}
block|}
comment|// calculate parent id for each node in the
comment|// descendant set. Returns false if no more
comment|// valid nodes are found
name|more
operator|=
name|getParentSet
argument_list|(
name|dl
argument_list|,
name|dlen
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getAncestors found "
operator|+
name|result
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
specifier|public
name|NodeSet
name|getRange
parameter_list|(
name|NodeProxy
name|lower
parameter_list|,
name|NodeProxy
name|upper
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|searchRange
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|getRange
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
return|return
name|getRange
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|lower
argument_list|)
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|upper
argument_list|)
argument_list|)
return|;
block|}
comment|//protected boolean isSorted() {
comment|//	return sorted;
comment|//}
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|NodeProxy
name|p
init|=
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
return|return
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|p
operator|.
name|getNode
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ArraySetIterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.NodeSet#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
name|sortInDocumentOrder
argument_list|()
expr_stmt|;
return|return
operator|new
name|ArraySequenceIterator
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.AbstractNodeSet#unorderedIterator() 	 */
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
comment|//TODO : explain this sort -pb
name|sort
argument_list|()
expr_stmt|;
return|return
operator|new
name|ArraySequenceIterator
argument_list|()
return|;
block|}
specifier|public
name|int
name|position
parameter_list|(
name|NodeImpl
name|test
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|test
operator|.
name|ownerDocument
argument_list|,
name|test
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
name|int
name|position
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|sort
argument_list|()
expr_stmt|;
return|return
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|proxy
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|search
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
operator|-
literal|1
condition|)
block|{
name|NodeProxy
index|[]
name|temp
init|=
operator|new
name|NodeProxy
index|[
name|counter
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|pos
operator|-
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|temp
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|temp
operator|.
name|length
operator|-
name|pos
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|temp
expr_stmt|;
name|counter
operator|--
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removal of node took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.AbstractNodeSet#getDocumentSet()      */
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|DocumentImpl
name|lastDoc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lastDoc
operator|==
literal|null
operator|||
name|lastDoc
operator|.
name|getDocId
argument_list|()
operator|!=
name|nodes
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|lastDoc
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
comment|//public void setIsSorted(boolean sorted) {
comment|//this.sorted = sorted;
comment|//}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sortedNaturally
operator|||
name|counter
operator|<
literal|2
condition|)
return|return;
name|FastQSort
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|removeDuplicateNodes
argument_list|()
expr_stmt|;
name|sortedNaturally
operator|=
literal|true
expr_stmt|;
name|sortedInDocumentOrder
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|sortInDocumentOrder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sortedInDocumentOrder
operator|||
name|counter
operator|<
literal|2
condition|)
return|return;
name|FastQSort
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
name|docOrderComparator
argument_list|,
literal|0
argument_list|,
name|counter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|removeDuplicateNodes
argument_list|()
expr_stmt|;
name|sortedNaturally
operator|=
literal|false
expr_stmt|;
name|sortedInDocumentOrder
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|removeDuplicateNodes
parameter_list|()
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|nodes
index|[
name|j
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|!=
operator|++
name|j
condition|)
name|nodes
index|[
name|j
index|]
operator|=
name|nodes
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|counter
operator|=
operator|++
name|j
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|counter
operator|=
literal|0
expr_stmt|;
name|sortedNaturally
operator|=
literal|false
expr_stmt|;
name|sortedInDocumentOrder
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|NodeProxy
index|[]
name|copyNodeSet
parameter_list|(
name|ArraySet
name|al
parameter_list|,
name|ArraySet
name|dl
parameter_list|)
block|{
name|int
name|ax
init|=
literal|0
decl_stmt|,
name|dx
init|=
literal|0
decl_stmt|;
name|int
name|ad
init|=
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
decl_stmt|,
name|dd
init|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
decl_stmt|;
specifier|final
name|int
name|alen
init|=
name|al
operator|.
name|counter
operator|-
literal|1
decl_stmt|,
name|dlen
init|=
name|dl
operator|.
name|counter
operator|-
literal|1
decl_stmt|;
specifier|final
name|NodeProxy
index|[]
name|ol
init|=
operator|new
name|NodeProxy
index|[
name|dl
operator|.
name|counter
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ad
operator|<
name|dd
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|alen
condition|)
block|{
operator|++
name|ax
expr_stmt|;
name|ad
operator|=
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
if|else if
condition|(
name|ad
operator|>
name|dd
condition|)
block|{
if|if
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
name|ol
index|[
name|dx
index|]
operator|=
literal|null
expr_stmt|;
operator|++
name|dx
expr_stmt|;
name|dd
operator|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
else|else
block|{
name|ol
index|[
name|dx
index|]
operator|=
operator|new
name|NodeProxy
argument_list|(
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
operator|++
name|dx
expr_stmt|;
name|dd
operator|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
block|}
return|return
name|ol
return|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|trimNodeSet
parameter_list|(
name|ArraySet
name|al
parameter_list|,
name|ArraySet
name|dl
parameter_list|)
block|{
name|int
name|ax
init|=
literal|0
decl_stmt|,
name|dx
init|=
literal|0
decl_stmt|;
name|int
name|ad
init|=
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
decl_stmt|,
name|dd
init|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|alen
init|=
name|al
operator|.
name|counter
operator|-
literal|1
decl_stmt|,
name|dlen
init|=
name|dl
operator|.
name|counter
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ad
operator|<
name|dd
condition|)
block|{
if|if
condition|(
name|ax
operator|<
name|alen
condition|)
block|{
operator|++
name|ax
expr_stmt|;
name|ad
operator|=
name|al
operator|.
name|nodes
index|[
name|ax
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
if|else if
condition|(
name|ad
operator|>
name|dd
condition|)
block|{
if|if
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
operator|++
name|dx
expr_stmt|;
name|dd
operator|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
else|else
block|{
if|if
condition|(
name|dx
operator|<
name|dlen
condition|)
block|{
operator|++
name|dx
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|dd
operator|=
name|dl
operator|.
name|nodes
index|[
name|dx
index|]
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
expr_stmt|;
block|}
else|else
break|break;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dl = "
operator|+
name|dlen
operator|+
literal|"; copy = "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ArraySetIterator
implements|implements
name|Iterator
block|{
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|counter
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|hasNext
argument_list|()
condition|?
name|nodes
index|[
name|pos
operator|++
index|]
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
block|}
block|}
specifier|private
class|class
name|ArraySequenceIterator
implements|implements
name|SequenceIterator
block|{
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|counter
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.SequenceIterator#nextItem() 		 */
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|counter
operator|)
condition|?
name|nodes
index|[
name|pos
operator|++
index|]
else|:
literal|null
return|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.util.Sortable#compare(int, int) 	 */
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|NodeProxy
name|anode
init|=
name|nodes
index|[
name|a
index|]
decl_stmt|,
name|bnode
init|=
name|nodes
index|[
name|b
index|]
decl_stmt|;
if|if
condition|(
name|anode
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
operator|==
name|bnode
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
condition|)
block|{
return|return
name|anode
operator|.
name|getGID
argument_list|()
operator|==
name|bnode
operator|.
name|getGID
argument_list|()
condition|?
literal|0
else|:
operator|(
name|anode
operator|.
name|getGID
argument_list|()
operator|<
name|bnode
operator|.
name|getGID
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
return|return
name|anode
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
operator|<
name|bnode
operator|.
name|getDocument
argument_list|()
operator|.
name|docId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.util.Sortable#swap(int, int) 	 */
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|NodeProxy
name|t
init|=
name|nodes
index|[
name|a
index|]
decl_stmt|;
name|nodes
index|[
name|a
index|]
operator|=
name|nodes
index|[
name|b
index|]
expr_stmt|;
name|nodes
index|[
name|b
index|]
operator|=
name|t
expr_stmt|;
block|}
specifier|public
name|Comparable
index|[]
name|array
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
block|}
end_class

end_unit

