begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* *  eXist Open Source Native XML Database *  Copyright (C) 2001-04 Wolfgang M. Meier (wolfgang@exist-db.org)  *  and others (see http://exist-db.org) * *  This program is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public License *  as published by the Free Software Foundation; either version 2 *  of the License, or (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public License *  along with this program; if not, write to the Free Software *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. *  *  $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  * TODO To change the template for this generated type comment go to  * Window - Preferences - Java - Code Style - Code Templates  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractNodeSetBase
extends|extends
name|AbstractNodeSet
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AbstractNodeSetBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|UNKNOWN
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NOT_INDEXED
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ALL_NODES_IN_INDEX
init|=
literal|1
decl_stmt|;
comment|// indicates if the nodes in this set and their descendant nodes
comment|// have been fulltext indexed
specifier|private
name|int
name|hasIndex
init|=
name|UNKNOWN
decl_stmt|;
specifier|private
name|boolean
name|isCached
init|=
literal|false
decl_stmt|;
specifier|protected
name|AbstractNodeSetBase
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setIsCached
parameter_list|(
name|boolean
name|cached
parameter_list|)
block|{
name|isCached
operator|=
name|cached
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCached
parameter_list|()
block|{
return|return
name|isCached
return|;
block|}
comment|/** 	 * Returns true if all nodes in this node set and their descendants 	 * are included in the fulltext index. This information is required 	 * to determine if comparison operators can use the 	 * fulltext index to speed up equality comparisons. 	 *  	 * @see org.exist.xquery.GeneralComparison 	 * @see org.exist.xquery.ValueComparison 	 * @return 	 */
specifier|public
name|boolean
name|hasIndex
parameter_list|()
block|{
if|if
condition|(
name|hasIndex
operator|==
name|UNKNOWN
condition|)
block|{
name|hasIndex
operator|=
name|ALL_NODES_IN_INDEX
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|hasIndex
argument_list|()
condition|)
block|{
name|hasIndex
operator|=
name|NOT_INDEXED
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|hasIndex
operator|==
name|ALL_NODES_IN_INDEX
return|;
block|}
block|}
end_class

end_unit

