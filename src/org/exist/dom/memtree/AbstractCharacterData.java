begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|CharArrayPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCharacterData
extends|extends
name|NodeImpl
implements|implements
name|CharacterData
block|{
specifier|public
name|AbstractCharacterData
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|int
name|nodeNumber
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|nodeNumber
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getData
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|substringData
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|length
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|inDocOffset
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|length
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|+
name|count
operator|>
name|length
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|inDocOffset
operator|+
name|offset
argument_list|,
name|length
operator|-
name|offset
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|inDocOffset
operator|+
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceData
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
specifier|final
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|existingDataLen
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|existingDataLen
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|+
name|count
operator|>
name|existingDataLen
condition|)
block|{
name|count
operator|=
name|existingDataLen
operator|-
name|offset
expr_stmt|;
block|}
specifier|final
name|int
name|len
init|=
name|arg
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|existingCharactersLen
init|=
name|document
operator|.
name|characters
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|existingDataOffset
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
comment|// 1) create a new array of the correct size for the data
specifier|final
name|int
name|change
init|=
name|len
operator|-
name|count
decl_stmt|;
specifier|final
name|int
name|newCharactersLength
init|=
name|existingCharactersLen
operator|+
name|change
decl_stmt|;
specifier|final
name|char
name|newCharacters
index|[]
init|=
operator|new
name|char
index|[
name|newCharactersLength
index|]
decl_stmt|;
comment|// 2) copy everything from document.characters to newCharacters that is before our offset
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
literal|0
argument_list|,
name|existingDataOffset
operator|+
name|offset
argument_list|)
expr_stmt|;
comment|// 3) insert our replacement data at the offset
name|System
operator|.
name|arraycopy
argument_list|(
name|arg
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// 4) copy everything from document.characters to newCharacters that is after our offset + count
specifier|final
name|int
name|remainingExistingCharacters
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
operator|&&
name|existingDataLen
operator|<
name|len
condition|)
block|{
comment|// document.characters is expanding or staying the same length
name|remainingExistingCharacters
operator|=
name|existingCharactersLen
operator|-
name|count
expr_stmt|;
block|}
else|else
block|{
comment|// empty `data` (i.e. replacement), or shrinking of value_
name|remainingExistingCharacters
operator|=
name|existingCharactersLen
operator|-
name|existingDataOffset
operator|-
name|offset
operator|-
name|count
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|existingDataOffset
operator|+
name|offset
operator|+
name|count
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|offset
operator|+
name|len
argument_list|,
name|remainingExistingCharacters
argument_list|)
expr_stmt|;
comment|// 5) replace document.characters with our newCharacters
name|document
operator|.
name|characters
operator|=
name|newCharacters
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|existingDataLen
operator|+
name|change
expr_stmt|;
comment|// 6) renumber all offsets following our offset
for|for
control|(
name|int
name|i
init|=
name|nodeNumber
operator|+
literal|1
init|;
name|i
operator|<
name|document
operator|.
name|alpha
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|document
operator|.
name|alpha
index|[
name|i
index|]
operator|>
operator|-
literal|1
condition|)
block|{
name|document
operator|.
name|alpha
index|[
name|i
index|]
operator|+=
name|change
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertData
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|existingDataLen
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|existingDataLen
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INDEX_SIZE_ERR
argument_list|,
literal|"offset is out of bounds"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|len
init|=
name|arg
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|existingDataOffset
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
comment|// expand space for existing data and set
comment|// 1) create a new array of the correct size for the data
specifier|final
name|int
name|existingCharactersLen
init|=
name|document
operator|.
name|characters
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|extraRequired
init|=
name|len
decl_stmt|;
specifier|final
name|int
name|newCharactersLen
init|=
name|existingCharactersLen
operator|+
name|extraRequired
decl_stmt|;
specifier|final
name|char
name|newCharacters
index|[]
init|=
operator|new
name|char
index|[
name|newCharactersLen
index|]
decl_stmt|;
comment|// 2) copy everything from data to newData that is upto the end of our offset + provided offset
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
literal|0
argument_list|,
name|existingDataOffset
operator|+
name|offset
argument_list|)
expr_stmt|;
comment|// 3) insert our new data at the offset
name|System
operator|.
name|arraycopy
argument_list|(
name|arg
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// 4) copy everything from data to newData that is after our our offset + provided offset
specifier|final
name|int
name|remainingExistingCharacters
init|=
name|existingCharactersLen
operator|-
operator|(
name|existingDataOffset
operator|+
name|existingDataLen
operator|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|existingDataOffset
operator|+
name|offset
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|offset
operator|+
name|len
argument_list|,
name|remainingExistingCharacters
argument_list|)
expr_stmt|;
comment|// 5) replace document.characters with our new characters
name|document
operator|.
name|characters
operator|=
name|newCharacters
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|existingDataLen
operator|+
name|len
expr_stmt|;
comment|// 6) renumber all offsets following our offset
for|for
control|(
name|int
name|i
init|=
name|nodeNumber
operator|+
literal|1
init|;
name|i
operator|<
name|document
operator|.
name|alpha
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|document
operator|.
name|alpha
index|[
name|i
index|]
operator|+=
name|extraRequired
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendData
parameter_list|(
specifier|final
name|String
name|arg
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|arg
operator|==
literal|null
operator|||
name|arg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|len
init|=
name|arg
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|existingDataOffset
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|existingDataLen
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
comment|// expand space for existing data and set
comment|// 1) create a new array of the correct size for the data
specifier|final
name|int
name|existingCharactersLen
init|=
name|document
operator|.
name|characters
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|extraRequired
init|=
name|len
decl_stmt|;
specifier|final
name|int
name|newCharactersLen
init|=
name|existingCharactersLen
operator|+
name|extraRequired
decl_stmt|;
specifier|final
name|char
name|newCharacters
index|[]
init|=
operator|new
name|char
index|[
name|newCharactersLen
index|]
decl_stmt|;
comment|// 2) copy everything from data to newData that is upto the end of our offset + len
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
literal|0
argument_list|,
name|existingDataOffset
operator|+
name|existingDataLen
argument_list|)
expr_stmt|;
comment|// 3) insert our new data after the existing data
name|System
operator|.
name|arraycopy
argument_list|(
name|arg
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|existingDataLen
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// 4) copy everything from data to newData that is after our our offset + len
specifier|final
name|int
name|remainingExistingCharacters
init|=
name|existingCharactersLen
operator|-
operator|(
name|existingDataOffset
operator|+
name|existingDataLen
operator|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|existingDataOffset
operator|+
name|existingDataLen
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|existingDataLen
operator|+
name|len
argument_list|,
name|remainingExistingCharacters
argument_list|)
expr_stmt|;
comment|// 5) replace document.characters with our new characters
name|document
operator|.
name|characters
operator|=
name|newCharacters
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|existingDataLen
operator|+
name|len
expr_stmt|;
comment|// 6) renumber all offsets following our offset
for|for
control|(
name|int
name|i
init|=
name|nodeNumber
operator|+
literal|1
init|;
name|i
operator|<
name|document
operator|.
name|alpha
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|document
operator|.
name|alpha
index|[
name|i
index|]
operator|+=
name|extraRequired
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
literal|""
expr_stmt|;
block|}
specifier|final
name|int
name|len
init|=
name|data
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|existingDataOffset
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|existingDataLen
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|len
operator|<=
name|existingDataLen
condition|)
block|{
comment|// replace existing data
name|System
operator|.
name|arraycopy
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|document
operator|.
name|characters
argument_list|,
name|existingDataOffset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|len
expr_stmt|;
block|}
else|else
block|{
comment|// expand space for existing data and set
comment|// 1) create a new array of the correct size for the data
specifier|final
name|int
name|existingCharactersLen
init|=
name|document
operator|.
name|characters
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|extraRequired
init|=
name|len
operator|-
name|existingDataLen
decl_stmt|;
specifier|final
name|int
name|newCharactersLen
init|=
name|existingCharactersLen
operator|+
name|extraRequired
decl_stmt|;
specifier|final
name|char
name|newCharacters
index|[]
init|=
operator|new
name|char
index|[
name|newCharactersLen
index|]
decl_stmt|;
comment|// 2) copy everything from data to newData that is before our offset
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
literal|0
argument_list|,
name|existingDataOffset
argument_list|)
expr_stmt|;
comment|// 3) insert our new data
name|System
operator|.
name|arraycopy
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// 4) copy everything from data to newData that is after our offset
specifier|final
name|int
name|remainingExistingCharacters
init|=
name|existingCharactersLen
operator|-
operator|(
name|existingDataOffset
operator|+
name|existingDataLen
operator|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|existingDataOffset
operator|+
name|existingDataLen
argument_list|,
name|newCharacters
argument_list|,
name|existingDataOffset
operator|+
name|len
argument_list|,
name|remainingExistingCharacters
argument_list|)
expr_stmt|;
comment|// 5) replace document.characters with our new characters
name|document
operator|.
name|characters
operator|=
name|newCharacters
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|len
expr_stmt|;
comment|// 6) renumber all offsets following our offset
for|for
control|(
name|int
name|i
init|=
name|nodeNumber
operator|+
literal|1
init|;
name|i
operator|<
name|document
operator|.
name|alpha
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|document
operator|.
name|alpha
index|[
name|i
index|]
operator|+=
name|extraRequired
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteData
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|DOMException
block|{
name|replaceData
argument_list|(
name|offset
argument_list|,
name|count
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
name|getData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeValue
parameter_list|(
specifier|final
name|String
name|nodeValue
parameter_list|)
throws|throws
name|DOMException
block|{
name|setData
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
name|getNodeValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTextContent
parameter_list|(
specifier|final
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
name|setNodeValue
argument_list|(
name|textContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
name|getData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
block|}
end_class

end_unit

