begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NamedNodeMapImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
specifier|public
class|class
name|ElementImpl
extends|extends
name|NodeImpl
implements|implements
name|Element
block|{
specifier|public
name|ElementImpl
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|int
name|nodeNumber
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|nodeNumber
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
return|return
name|getNodeName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
operator|(
name|nodeNumber
operator|+
literal|1
operator|)
operator|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
operator|+
literal|1
index|]
operator|>
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
specifier|final
name|short
name|level
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|nextNode
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextNode
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
argument_list|>
name|level
condition|)
block|{
return|return
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
specifier|final
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nodeNumber
condition|)
block|{
specifier|final
name|Node
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|nextNode
operator|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
specifier|private
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|document
operator|.
name|getChildCountFor
argument_list|(
name|nodeNumber
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
return|return
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
operator|>
operator|-
literal|1
operator|||
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|>
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
if|if
condition|(
name|attrQName
operator|.
name|getStringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|document
operator|.
name|attrValue
index|[
name|attr
index|]
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
name|nsQName
operator|.
name|getStringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
try|try
block|{
specifier|final
name|QName
name|attrName
init|=
name|QName
operator|.
name|parse
argument_list|(
name|document
operator|.
name|context
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|setAttribute
argument_list|(
name|attrName
argument_list|,
name|value
argument_list|,
name|qname
lambda|->
name|getAttributeNode
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|SYNTAX_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|qualifiedName
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|QName
name|name
init|=
name|QName
operator|.
name|parse
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|)
decl_stmt|;
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|qname
lambda|->
name|getAttributeNodeNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setAttribute
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|Function
argument_list|<
name|QName
argument_list|,
name|Attr
argument_list|>
name|getFn
parameter_list|)
block|{
specifier|final
name|Attr
name|existingAttr
init|=
name|getFn
operator|.
name|apply
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingAttr
operator|!=
literal|null
condition|)
block|{
comment|// update an existing attribute
name|existingAttr
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a new attribute
specifier|final
name|int
name|lastNode
init|=
name|document
operator|.
name|getLastNode
argument_list|()
decl_stmt|;
name|document
operator|.
name|addAttribute
argument_list|(
name|lastNode
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|AttrImpl
operator|.
name|ATTR_CDATA_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
specifier|final
name|NamedNodeMapImpl
name|map
init|=
operator|new
name|NamedNodeMapImpl
argument_list|(
name|document
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
name|map
operator|.
name|setNamedItem
argument_list|(
operator|new
name|AttrImpl
argument_list|(
name|document
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
comment|// add namespace declarations attached to this element
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|ns
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|map
operator|)
return|;
block|}
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|NamespaceNode
name|node
init|=
operator|new
name|NamespaceNode
argument_list|(
name|document
argument_list|,
name|ns
argument_list|)
decl_stmt|;
name|map
operator|.
name|setNamedItem
argument_list|(
name|node
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|getAttributeNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
if|if
condition|(
name|attrQName
operator|.
name|getStringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|AttrImpl
argument_list|(
name|document
argument_list|,
name|attr
argument_list|)
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
name|nsQName
operator|.
name|getStringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|NamespaceNode
argument_list|(
name|document
argument_list|,
name|ns
argument_list|)
return|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|setAttributeNode
parameter_list|(
specifier|final
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|setAttributeNode
argument_list|(
name|newAttr
argument_list|,
name|qname
lambda|->
name|getAttributeNode
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Attr
name|setAttributeNode
parameter_list|(
specifier|final
name|Attr
name|newAttr
parameter_list|,
specifier|final
name|Function
argument_list|<
name|QName
argument_list|,
name|Attr
argument_list|>
name|getFn
parameter_list|)
block|{
specifier|final
name|QName
name|attrName
init|=
operator|new
name|QName
argument_list|(
name|newAttr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|newAttr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|newAttr
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|Attr
name|existingAttr
init|=
name|getFn
operator|.
name|apply
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingAttr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingAttr
operator|.
name|equals
argument_list|(
name|newAttr
argument_list|)
condition|)
block|{
return|return
name|newAttr
return|;
block|}
comment|// update an existing attribute
name|existingAttr
operator|.
name|setValue
argument_list|(
name|newAttr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|existingAttr
return|;
block|}
else|else
block|{
comment|// create a new attribute
specifier|final
name|int
name|lastNode
init|=
name|document
operator|.
name|getLastNode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|attrNodeNum
init|=
name|document
operator|.
name|addAttribute
argument_list|(
name|lastNode
argument_list|,
name|attrName
argument_list|,
name|newAttr
operator|.
name|getValue
argument_list|()
argument_list|,
name|AttrImpl
operator|.
name|ATTR_CDATA_TYPE
argument_list|)
decl_stmt|;
return|return
operator|new
name|AttrImpl
argument_list|(
name|document
argument_list|,
name|attrNodeNum
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|removeAttributeNode
parameter_list|(
specifier|final
name|Attr
name|oldAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|AttrImpl
name|attrib
init|=
operator|new
name|AttrImpl
argument_list|(
name|document
argument_list|,
name|attr
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|attrib
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|treeLevel
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
name|int
name|nextNode
init|=
name|nodeNumber
decl_stmt|;
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
name|n
operator|.
name|selectAttributes
argument_list|(
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
while|while
condition|(
operator|++
name|nextNode
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
argument_list|>
name|treeLevel
condition|)
block|{
name|n
operator|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|n
operator|.
name|selectAttributes
argument_list|(
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nodeNumber
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|nextNode
operator|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
block|}
specifier|public
name|NodeImpl
name|getFirstChild
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ValueSequence
name|seq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|selectChildren
argument_list|(
name|test
argument_list|,
name|seq
argument_list|)
expr_stmt|;
return|return
name|seq
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|seq
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendants
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|treeLevel
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
name|int
name|nextNode
init|=
name|nodeNumber
decl_stmt|;
if|if
condition|(
name|includeSelf
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|++
name|nextNode
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
argument_list|>
name|treeLevel
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|document
operator|.
name|context
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|getElementsByTagName
argument_list|(
name|qname
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
specifier|final
name|boolean
name|wildcardNS
init|=
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|wildcardLocalPart
init|=
name|localName
operator|!=
literal|null
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildcardNS
operator|&&
name|wildcardLocalPart
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
name|QName
operator|.
name|WildcardQName
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|wildcardNS
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardNamespaceURIQName
argument_list|(
name|localName
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|wildcardLocalPart
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|document
operator|.
name|context
argument_list|,
name|localName
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
return|return
name|getElementsByTagName
argument_list|(
name|qname
argument_list|)
return|;
block|}
block|}
specifier|private
name|NodeList
name|getElementsByTagName
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
specifier|final
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
name|int
name|nextNode
init|=
name|nodeNumber
decl_stmt|;
specifier|final
name|int
name|treeLevel
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
while|while
condition|(
operator|++
name|nextNode
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
argument_list|>
name|treeLevel
condition|)
block|{
if|if
condition|(
name|document
operator|.
name|nodeKind
index|[
name|nextNode
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
specifier|final
name|QName
name|qn
init|=
name|document
operator|.
name|nodeName
index|[
name|nextNode
index|]
decl_stmt|;
if|if
condition|(
name|qname
operator|.
name|matches
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nl
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|name
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|document
operator|.
name|attrValue
index|[
name|attr
index|]
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Namespaces
operator|.
name|XMLNS_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|getAttributeNodeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
specifier|final
name|QName
name|name
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|AttrImpl
argument_list|(
name|document
argument_list|,
name|attr
argument_list|)
operator|)
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Namespaces
operator|.
name|XMLNS_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
operator|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|)
operator|&&
operator|(
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|NamespaceNode
argument_list|(
name|document
argument_list|,
name|ns
argument_list|)
operator|)
return|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Attr
name|setAttributeNodeNS
parameter_list|(
specifier|final
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|setAttributeNode
argument_list|(
name|newAttr
argument_list|,
name|qname
lambda|->
name|getAttributeNodeNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
return|return
name|getAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * The method<code>getPrefixes.</code>      *      * @return a<code>Set</code> value      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|nsQName
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
comment|/**      * The method<code>declaresNamespacePrefixes.</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|declaresNamespacePrefixes
parameter_list|()
block|{
return|return
name|document
operator|.
name|getNamespacesCountFor
argument_list|(
name|nodeNumber
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * The method<code>getNamespaceMap.</code>      *      * @return a<code>Map</code> value      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|()
block|{
return|return
name|getNamespaceMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
condition|)
block|{
specifier|final
name|QName
name|qname
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
if|if
condition|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|qname
operator|.
name|getPrefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ELEMENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
specifier|final
name|XmldbURI
name|baseURI
init|=
name|calculateBaseURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseURI
operator|!=
literal|null
condition|)
block|{
return|return
name|baseURI
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
comment|//UNDERSTAND: is it ok?
block|}
comment|//TODO please, keep in sync with org.exist.dom.persistent.ElementImpl
specifier|private
name|XmldbURI
name|calculateBaseURI
parameter_list|()
block|{
name|XmldbURI
name|baseURI
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|nodeBaseURI
init|=
name|getAttributeNS
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeBaseURI
operator|!=
literal|null
condition|)
block|{
name|baseURI
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|nodeBaseURI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseURI
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|baseURI
return|;
block|}
block|}
name|int
name|parent
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
name|test
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|nodeKind
index|[
name|test
index|]
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|parent
operator|=
name|test
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|nodeBaseURI
operator|==
literal|null
condition|)
block|{
name|baseURI
operator|=
operator|(
operator|(
name|ElementImpl
operator|)
name|document
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
operator|)
operator|.
name|calculateBaseURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|XmldbURI
name|parentsBaseURI
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|document
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
operator|)
operator|.
name|calculateBaseURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeBaseURI
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|baseURI
operator|=
name|parentsBaseURI
expr_stmt|;
block|}
else|else
block|{
name|baseURI
operator|=
name|parentsBaseURI
operator|.
name|append
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|nodeBaseURI
operator|==
literal|null
condition|)
block|{
return|return
name|XmldbURI
operator|.
name|create
argument_list|(
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|nodeNumber
operator|==
literal|1
condition|)
block|{
comment|//nothing to do
block|}
else|else
block|{
specifier|final
name|String
name|docBaseURI
init|=
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|docBaseURI
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseURI
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseURI
operator|.
name|append
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseURI
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseURI
operator|=
name|baseURI
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
name|baseURI
operator|.
name|append
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|baseURI
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeInfo
name|getSchemaTypeInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIdAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIdAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIdAttributeNode
parameter_list|(
specifier|final
name|Attr
name|idAttr
parameter_list|,
specifier|final
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTextContent
parameter_list|(
specifier|final
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|int
name|nodeNr
init|=
name|document
operator|.
name|addNode
argument_list|(
name|Node
operator|.
name|TEXT_NODE
argument_list|,
operator|(
name|short
operator|)
operator|(
name|document
operator|.
name|getTreeLevel
argument_list|(
name|nodeNumber
argument_list|)
operator|+
literal|1
operator|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|document
operator|.
name|addChars
argument_list|(
name|nodeNr
argument_list|,
name|textContent
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|textContent
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"in-memory#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"element {"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"} {"
argument_list|)
expr_stmt|;
specifier|final
name|NamedNodeMap
name|theAttrs
init|=
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|theAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|theAttrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Node
name|natt
init|=
name|theAttrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|natt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Node
name|child
init|=
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|child
init|=
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Text
condition|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|appendChild
parameter_list|(
specifier|final
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|newChild
operator|.
name|getOwnerDocument
argument_list|()
operator|!=
name|document
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Owning document IDs do not match"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"Cannot append an element to itself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|DOCUMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"A Document Node may not be appended to an element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|DOCUMENT_TYPE_NODE
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"A Document Type Node may not be appended to an element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|instanceof
name|NodeImpl
condition|)
block|{
specifier|final
name|int
name|treeLevel
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|newChildTreeLevel
init|=
name|document
operator|.
name|treeLevel
index|[
operator|(
operator|(
name|NodeImpl
operator|)
name|newChild
operator|)
operator|.
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
name|newChildTreeLevel
operator|<
name|treeLevel
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"The node to append is one of this node's ancestors"
argument_list|)
throw|;
block|}
block|}
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

