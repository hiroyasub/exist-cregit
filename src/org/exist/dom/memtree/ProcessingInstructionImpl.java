begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|ProcessingInstructionImpl
extends|extends
name|NodeImpl
implements|implements
name|ProcessingInstruction
block|{
comment|/**      * Creates a new ProcessingInstructionImpl object.      *      * @param doc      * @param nodeNumber      */
specifier|public
name|ProcessingInstructionImpl
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|int
name|nodeNumber
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|nodeNumber
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|getLocalName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
name|getData
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"^\\s+"
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
name|getData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|atomize
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|StringValue
argument_list|(
name|getData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setData
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
name|document
operator|.
name|characters
operator|=
name|data
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
operator|=
literal|0
expr_stmt|;
name|document
operator|.
name|alphaLen
index|[
name|nodeNumber
index|]
operator|=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
name|String
name|baseURI
init|=
literal|""
decl_stmt|;
name|int
name|parent
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|test
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|nodeKind
index|[
name|test
index|]
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|parent
operator|=
name|test
expr_stmt|;
block|}
comment|// fixme! Testa med 0/ljo
while|while
condition|(
operator|(
name|parent
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|document
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
operator|.
name|getBaseURI
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|baseURI
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|baseURI
operator|=
name|document
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
operator|.
name|getBaseURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseURI
operator|=
name|document
operator|.
name|getNode
argument_list|(
name|parent
argument_list|)
operator|.
name|getBaseURI
argument_list|()
operator|+
literal|"/"
operator|+
name|baseURI
expr_stmt|;
block|}
name|test
operator|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|nodeKind
index|[
name|test
index|]
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
return|return
operator|(
name|baseURI
operator|)
return|;
block|}
else|else
block|{
name|parent
operator|=
name|test
expr_stmt|;
block|}
block|}
if|if
condition|(
name|baseURI
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|baseURI
operator|=
name|getOwnerDocument
argument_list|()
operator|.
name|getBaseURI
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|baseURI
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
comment|//No child
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|PROCESSING_INSTRUCTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"in-memory#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"processing-instruction {"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"} {"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//do nothing, which will return an empty sequence
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//do nothing, which will return an empty sequence
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//do nothing, which will return an empty sequence
block|}
block|}
end_class

end_unit

