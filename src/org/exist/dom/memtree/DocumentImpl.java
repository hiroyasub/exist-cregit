begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2010 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|NamePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * An in-memory implementation of Document.  *  *<p>This implementation stores all node data in the document object. Nodes from another document, i.e. a persistent document in the database, can be  * stored as reference nodes, i.e. the nodes are not copied into this document object. Instead a reference is inserted which will only be expanded  * during serialization.</p>  *  * @author  wolf  */
end_comment

begin_class
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
implements|implements
name|DocumentAtExist
block|{
specifier|private
specifier|static
name|long
name|nextDocId
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NODE_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ATTR_SIZE
init|=
literal|8
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|CHAR_BUF_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REF_SIZE
init|=
literal|8
decl_stmt|;
specifier|protected
name|XQueryContext
name|context
decl_stmt|;
specifier|protected
name|NamePool
name|namePool
decl_stmt|;
comment|// holds the node type of a node
specifier|protected
name|short
index|[]
name|nodeKind
init|=
literal|null
decl_stmt|;
comment|// the tree level of a node
specifier|protected
name|short
index|[]
name|treeLevel
decl_stmt|;
comment|// the node number of the next sibling
specifier|protected
name|int
index|[]
name|next
decl_stmt|;
comment|// pointer into the namePool
specifier|protected
name|QName
index|[]
name|nodeName
decl_stmt|;
specifier|protected
name|NodeId
index|[]
name|nodeId
decl_stmt|;
specifier|protected
name|int
index|[]
name|alpha
decl_stmt|;
specifier|protected
name|int
index|[]
name|alphaLen
decl_stmt|;
specifier|protected
name|char
index|[]
name|characters
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|nextChar
init|=
literal|0
decl_stmt|;
comment|// attributes
specifier|protected
name|QName
index|[]
name|attrName
decl_stmt|;
specifier|protected
name|int
index|[]
name|attrType
decl_stmt|;
specifier|protected
name|NodeId
index|[]
name|attrNodeId
decl_stmt|;
specifier|protected
name|int
index|[]
name|attrParent
decl_stmt|;
specifier|protected
name|String
index|[]
name|attrValue
decl_stmt|;
specifier|protected
name|int
name|nextAttr
init|=
literal|0
decl_stmt|;
comment|// namespaces
specifier|protected
name|int
index|[]
name|namespaceParent
init|=
literal|null
decl_stmt|;
specifier|protected
name|QName
index|[]
name|namespaceCode
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|nextNamespace
init|=
literal|0
decl_stmt|;
comment|// the current number of nodes in the doc
specifier|protected
name|int
name|size
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|documentRootNode
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|String
name|documentURI
init|=
literal|null
decl_stmt|;
comment|// reference nodes (link to an external, persistent document fragment)
specifier|protected
name|NodeProxy
index|[]
name|references
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|nextRef
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|docId
decl_stmt|;
name|boolean
name|explicitCreation
init|=
literal|false
decl_stmt|;
name|boolean
name|replaceAttribute
init|=
literal|false
decl_stmt|;
specifier|private
name|Database
name|db
init|=
literal|null
decl_stmt|;
specifier|public
name|DocumentImpl
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|boolean
name|explicitCreation
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|explicitCreation
operator|=
name|explicitCreation
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|createDocId
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|namePool
operator|=
operator|new
name|NamePool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
name|context
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
name|namePool
operator|=
name|context
operator|.
name|getSharedNamePool
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|()
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
return|return
name|db
return|;
block|}
specifier|private
specifier|static
name|long
name|createDocId
parameter_list|()
block|{
return|return
operator|(
name|nextDocId
operator|++
operator|)
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|nodeKind
operator|=
operator|new
name|short
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|treeLevel
operator|=
operator|new
name|short
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|next
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|next
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nodeName
operator|=
operator|new
name|QName
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|nodeId
operator|=
operator|new
name|NodeId
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|alpha
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|alphaLen
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|alphaLen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|attrName
operator|=
operator|new
name|QName
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrParent
operator|=
operator|new
name|int
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrValue
operator|=
operator|new
name|String
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrType
operator|=
operator|new
name|int
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrNodeId
operator|=
operator|new
name|NodeId
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|treeLevel
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|nodeKind
index|[
literal|0
index|]
operator|=
name|Node
operator|.
name|DOCUMENT_NODE
expr_stmt|;
name|document
operator|=
name|this
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|nextChar
operator|=
literal|0
expr_stmt|;
name|nextAttr
operator|=
literal|0
expr_stmt|;
name|nextRef
operator|=
literal|0
expr_stmt|;
name|references
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
operator|(
name|size
operator|)
return|;
block|}
specifier|public
name|int
name|addNode
parameter_list|(
name|short
name|kind
parameter_list|,
name|short
name|level
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|==
name|nodeKind
operator|.
name|length
condition|)
block|{
name|grow
argument_list|()
expr_stmt|;
block|}
name|nodeKind
index|[
name|size
index|]
operator|=
name|kind
expr_stmt|;
name|treeLevel
index|[
name|size
index|]
operator|=
name|level
expr_stmt|;
name|nodeName
index|[
name|size
index|]
operator|=
name|qname
operator|!=
literal|null
condition|?
name|namePool
operator|.
name|getSharedName
argument_list|(
name|qname
argument_list|)
else|:
literal|null
expr_stmt|;
name|alpha
index|[
name|size
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// undefined
name|next
index|[
name|size
index|]
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|(
name|size
operator|++
operator|)
return|;
block|}
specifier|public
name|void
name|addChars
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|characters
operator|=
operator|new
name|char
index|[
name|len
operator|>
name|CHAR_BUF_SIZE
condition|?
name|len
else|:
name|CHAR_BUF_SIZE
index|]
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|nextChar
operator|+
name|len
operator|)
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
operator|(
name|nextChar
operator|+
name|len
operator|)
condition|)
block|{
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
block|}
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alpha
index|[
name|nodeNum
index|]
operator|=
name|nextChar
expr_stmt|;
name|alphaLen
index|[
name|nodeNum
index|]
operator|=
name|len
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|characters
argument_list|,
name|nextChar
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|nextChar
operator|+=
name|len
expr_stmt|;
block|}
specifier|public
name|void
name|addChars
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|CharSequence
name|s
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|s
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|characters
operator|=
operator|new
name|char
index|[
operator|(
name|len
operator|>
name|CHAR_BUF_SIZE
operator|)
condition|?
name|len
else|:
name|CHAR_BUF_SIZE
index|]
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|nextChar
operator|+
name|len
operator|)
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
operator|(
name|nextChar
operator|+
name|len
operator|)
condition|)
block|{
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
block|}
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alpha
index|[
name|nodeNum
index|]
operator|=
name|nextChar
expr_stmt|;
name|alphaLen
index|[
name|nodeNum
index|]
operator|=
name|len
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|characters
index|[
name|nextChar
operator|++
index|]
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|appendChars
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|characters
operator|=
operator|new
name|char
index|[
operator|(
name|len
operator|>
name|CHAR_BUF_SIZE
operator|)
condition|?
name|len
else|:
name|CHAR_BUF_SIZE
index|]
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|nextChar
operator|+
name|len
operator|)
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
operator|(
name|nextChar
operator|+
name|len
operator|)
condition|)
block|{
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
block|}
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alphaLen
index|[
name|nodeNum
index|]
operator|=
name|alphaLen
index|[
name|nodeNum
index|]
operator|+
name|len
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|characters
argument_list|,
name|nextChar
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|nextChar
operator|+=
name|len
expr_stmt|;
block|}
specifier|public
name|void
name|appendChars
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|CharSequence
name|s
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|characters
operator|=
operator|new
name|char
index|[
operator|(
name|len
operator|>
name|CHAR_BUF_SIZE
operator|)
condition|?
name|len
else|:
name|CHAR_BUF_SIZE
index|]
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|nextChar
operator|+
name|len
operator|)
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
operator|(
name|nextChar
operator|+
name|len
operator|)
condition|)
block|{
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
block|}
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alphaLen
index|[
name|nodeNum
index|]
operator|=
name|alphaLen
index|[
name|nodeNum
index|]
operator|+
name|len
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|characters
index|[
name|nextChar
operator|++
index|]
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addReferenceNode
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|references
operator|==
literal|null
operator|)
operator|||
operator|(
name|nextRef
operator|==
name|references
operator|.
name|length
operator|)
condition|)
block|{
name|growReferences
argument_list|()
expr_stmt|;
block|}
name|references
index|[
name|nextRef
index|]
operator|=
name|proxy
expr_stmt|;
name|alpha
index|[
name|nodeNum
index|]
operator|=
name|nextRef
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|replaceReferenceNode
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|CharSequence
name|ch
parameter_list|)
block|{
name|nodeKind
index|[
name|nodeNum
index|]
operator|=
name|Node
operator|.
name|TEXT_NODE
expr_stmt|;
name|references
index|[
name|alpha
index|[
name|nodeNum
index|]
index|]
operator|=
literal|null
expr_stmt|;
name|addChars
argument_list|(
name|nodeNum
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasReferenceNodes
parameter_list|()
block|{
return|return
operator|(
name|references
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|references
index|[
literal|0
index|]
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|int
name|addAttribute
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|QName
name|qname
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|nodeNum
operator|>
literal|0
operator|)
operator|&&
operator|!
operator|(
name|nodeKind
index|[
name|nodeNum
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|||
name|nodeKind
index|[
name|nodeNum
index|]
operator|==
name|NodeImpl
operator|.
name|NAMESPACE_NODE
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INUSE_ATTRIBUTE_ERR
argument_list|,
literal|"err:XQTY0024: An attribute node cannot follow a node that is not an attribute node."
argument_list|)
operator|)
throw|;
block|}
name|int
name|prevAttr
init|=
name|nextAttr
operator|-
literal|1
decl_stmt|;
name|int
name|attrN
decl_stmt|;
comment|//Check if an attribute with the same qname exists in the parent element
while|while
condition|(
operator|(
name|nodeNum
operator|>
literal|0
operator|)
operator|&&
operator|(
name|prevAttr
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
name|attrParent
index|[
name|prevAttr
index|]
operator|==
name|nodeNum
operator|)
condition|)
block|{
name|attrN
operator|=
name|prevAttr
operator|--
expr_stmt|;
specifier|final
name|QName
name|prevQn
init|=
name|attrName
index|[
name|attrN
index|]
decl_stmt|;
if|if
condition|(
name|prevQn
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
if|if
condition|(
name|replaceAttribute
condition|)
block|{
name|attrValue
index|[
name|attrN
index|]
operator|=
name|value
expr_stmt|;
name|attrType
index|[
name|attrN
index|]
operator|=
name|type
expr_stmt|;
return|return
name|attrN
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INUSE_ATTRIBUTE_ERR
argument_list|,
literal|"err:XQDY0025: element has more than one attribute '"
operator|+
name|qname
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|nextAttr
operator|==
name|attrName
operator|.
name|length
condition|)
block|{
name|growAttributes
argument_list|()
expr_stmt|;
block|}
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|attrParent
index|[
name|nextAttr
index|]
operator|=
name|nodeNum
expr_stmt|;
name|attrName
index|[
name|nextAttr
index|]
operator|=
name|namePool
operator|.
name|getSharedName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|attrValue
index|[
name|nextAttr
index|]
operator|=
name|value
expr_stmt|;
name|attrType
index|[
name|nextAttr
index|]
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|alpha
index|[
name|nodeNum
index|]
operator|<
literal|0
condition|)
block|{
name|alpha
index|[
name|nodeNum
index|]
operator|=
name|nextAttr
expr_stmt|;
block|}
return|return
operator|(
name|nextAttr
operator|++
operator|)
return|;
block|}
specifier|public
name|int
name|addNamespace
parameter_list|(
name|int
name|nodeNum
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|namespaceCode
operator|==
literal|null
operator|)
operator|||
operator|(
name|nextNamespace
operator|==
name|namespaceCode
operator|.
name|length
operator|)
condition|)
block|{
name|growNamespaces
argument_list|()
expr_stmt|;
block|}
name|namespaceCode
index|[
name|nextNamespace
index|]
operator|=
name|namePool
operator|.
name|getSharedName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|namespaceParent
index|[
name|nextNamespace
index|]
operator|=
name|nodeNum
expr_stmt|;
if|if
condition|(
name|alphaLen
index|[
name|nodeNum
index|]
operator|<
literal|0
condition|)
block|{
name|alphaLen
index|[
name|nodeNum
index|]
operator|=
name|nextNamespace
expr_stmt|;
block|}
return|return
name|nextNamespace
operator|++
return|;
block|}
specifier|public
name|short
name|getTreeLevel
parameter_list|(
name|int
name|nodeNum
parameter_list|)
block|{
return|return
name|treeLevel
index|[
name|nodeNum
index|]
return|;
block|}
specifier|public
name|int
name|getLastNode
parameter_list|()
block|{
return|return
name|size
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|short
name|getNodeType
parameter_list|(
name|int
name|nodeNum
parameter_list|)
block|{
if|if
condition|(
operator|(
name|nodeKind
operator|==
literal|null
operator|)
operator|||
operator|(
name|nodeNum
operator|<
literal|0
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|nodeKind
index|[
name|nodeNum
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|super
operator|.
name|getStringValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|grow
parameter_list|()
block|{
specifier|final
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|short
index|[]
name|newNodeKind
init|=
operator|new
name|short
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodeKind
argument_list|,
literal|0
argument_list|,
name|newNodeKind
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodeKind
operator|=
name|newNodeKind
expr_stmt|;
name|short
index|[]
name|newTreeLevel
init|=
operator|new
name|short
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|treeLevel
argument_list|,
literal|0
argument_list|,
name|newTreeLevel
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|treeLevel
operator|=
name|newTreeLevel
expr_stmt|;
name|int
index|[]
name|newNext
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newNext
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|next
argument_list|,
literal|0
argument_list|,
name|newNext
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|next
operator|=
name|newNext
expr_stmt|;
name|QName
index|[]
name|newNodeName
init|=
operator|new
name|QName
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodeName
argument_list|,
literal|0
argument_list|,
name|newNodeName
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodeName
operator|=
name|newNodeName
expr_stmt|;
name|NodeId
index|[]
name|newNodeId
init|=
operator|new
name|NodeId
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodeId
argument_list|,
literal|0
argument_list|,
name|newNodeId
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodeId
operator|=
name|newNodeId
expr_stmt|;
name|int
index|[]
name|newAlpha
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|alpha
argument_list|,
literal|0
argument_list|,
name|newAlpha
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|alpha
operator|=
name|newAlpha
expr_stmt|;
name|int
index|[]
name|newAlphaLen
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newAlphaLen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|alphaLen
argument_list|,
literal|0
argument_list|,
name|newAlphaLen
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|alphaLen
operator|=
name|newAlphaLen
expr_stmt|;
block|}
specifier|private
name|void
name|growAttributes
parameter_list|()
block|{
specifier|final
name|int
name|size
init|=
name|attrName
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|QName
index|[]
name|newAttrName
init|=
operator|new
name|QName
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrName
argument_list|,
literal|0
argument_list|,
name|newAttrName
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrName
operator|=
name|newAttrName
expr_stmt|;
name|int
index|[]
name|newAttrParent
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrParent
argument_list|,
literal|0
argument_list|,
name|newAttrParent
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrParent
operator|=
name|newAttrParent
expr_stmt|;
name|String
index|[]
name|newAttrValue
init|=
operator|new
name|String
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrValue
argument_list|,
literal|0
argument_list|,
name|newAttrValue
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrValue
operator|=
name|newAttrValue
expr_stmt|;
name|int
index|[]
name|newAttrType
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrType
argument_list|,
literal|0
argument_list|,
name|newAttrType
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrType
operator|=
name|newAttrType
expr_stmt|;
name|NodeId
index|[]
name|newNodeId
init|=
operator|new
name|NodeId
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrNodeId
argument_list|,
literal|0
argument_list|,
name|newNodeId
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrNodeId
operator|=
name|newNodeId
expr_stmt|;
block|}
specifier|private
name|void
name|growReferences
parameter_list|()
block|{
if|if
condition|(
name|references
operator|==
literal|null
condition|)
block|{
name|references
operator|=
operator|new
name|NodeProxy
index|[
name|REF_SIZE
index|]
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|size
init|=
name|references
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|NodeProxy
index|[]
name|newReferences
init|=
operator|new
name|NodeProxy
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|references
argument_list|,
literal|0
argument_list|,
name|newReferences
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|references
operator|=
name|newReferences
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|growNamespaces
parameter_list|()
block|{
if|if
condition|(
name|namespaceCode
operator|==
literal|null
condition|)
block|{
name|namespaceCode
operator|=
operator|new
name|QName
index|[
literal|5
index|]
expr_stmt|;
name|namespaceParent
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|size
init|=
name|namespaceCode
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|QName
index|[]
name|newCodes
init|=
operator|new
name|QName
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespaceCode
argument_list|,
literal|0
argument_list|,
name|newCodes
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|namespaceCode
operator|=
name|newCodes
expr_stmt|;
name|int
index|[]
name|newParents
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespaceParent
argument_list|,
literal|0
argument_list|,
name|newParents
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|namespaceParent
operator|=
name|newParents
expr_stmt|;
block|}
block|}
specifier|public
name|NodeImpl
name|getAttribute
parameter_list|(
name|int
name|nodeNum
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
operator|new
name|AttributeImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|getNamespaceNode
parameter_list|(
name|int
name|nodeNum
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
operator|new
name|NamespaceNode
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|int
name|nodeNum
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|nodeNum
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|nodeNum
operator|>=
name|size
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"node not found"
argument_list|)
throw|;
block|}
name|NodeImpl
name|node
decl_stmt|;
switch|switch
condition|(
name|nodeKind
index|[
name|nodeNum
index|]
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|node
operator|=
operator|new
name|TextImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|node
operator|=
operator|new
name|CommentImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|node
operator|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|node
operator|=
operator|new
name|CDATASectionImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
name|node
operator|=
operator|new
name|ReferenceNode
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node not found"
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|NodeImpl
name|getLastAttr
parameter_list|()
block|{
if|if
condition|(
name|nextAttr
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|AttributeImpl
argument_list|(
name|this
argument_list|,
name|nextAttr
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Node#getParentNode()      */
annotation|@
name|Override
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getDoctype()      */
annotation|@
name|Override
specifier|public
name|DocumentType
name|getDoctype
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getImplementation()      */
annotation|@
name|Override
specifier|public
name|DOMImplementation
name|getImplementation
parameter_list|()
block|{
return|return
operator|(
operator|new
name|DOMImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Document
name|createDocument
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|,
name|DocumentType
name|doctype
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentType
name|createDocumentType
parameter_list|(
name|String
name|qualifiedName
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
operator|(
literal|"XML"
operator|.
name|equals
argument_list|(
name|feature
argument_list|)
operator|&&
operator|(
literal|"1.0"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|||
literal|"2.0"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
operator|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getDocumentElement()      */
annotation|@
name|Override
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|nodeKind
index|[
name|nodeNum
index|]
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|next
index|[
name|nodeNum
index|]
operator|<
name|nodeNum
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nodeNum
operator|=
name|next
index|[
name|nodeNum
index|]
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|getNode
argument_list|(
name|nodeNum
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Node#getFirstChild()      */
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
return|return
name|getNode
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
return|return
name|getFirstChild
argument_list|()
return|;
block|}
specifier|public
name|int
name|getAttributesCountFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|attr
init|=
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|nextAttr
operator|)
operator|&&
operator|(
name|attrParent
index|[
name|attr
operator|++
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getNamespacesCountFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|ns
init|=
name|alphaLen
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
operator|(
name|ns
operator|<
name|nextNamespace
operator|)
operator|&&
operator|(
name|namespaceParent
index|[
name|ns
operator|++
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getChildCountFor
parameter_list|(
name|int
name|nr
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|nextNode
init|=
name|getFirstChildFor
argument_list|(
name|nr
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nr
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|nextNode
operator|=
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFirstChildFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
specifier|final
name|short
name|level
init|=
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
specifier|final
name|int
name|nextNode
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|nextNode
operator|<
name|size
operator|)
operator|&&
operator|(
name|treeLevel
index|[
name|nextNode
index|]
operator|>
name|level
operator|)
condition|)
block|{
return|return
name|nextNode
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getNextSiblingFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
specifier|final
name|int
name|nextNr
init|=
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
return|return
operator|(
name|nextNr
operator|<
name|nodeNumber
operator|)
condition|?
operator|-
literal|1
else|:
name|nextNr
return|;
block|}
comment|/**      * The method<code>getParentNodeFor.</code>      *      * @param   nodeNumber  an<code>int</code> value      *      * @return  an<code>int</code> value      */
specifier|public
name|int
name|getParentNodeFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|nextNode
init|=
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nodeNumber
condition|)
block|{
name|nextNode
operator|=
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
return|return
name|nextNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectChildren
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendants
parameter_list|(
name|boolean
name|includeSelf
parameter_list|,
name|NodeTest
name|test
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|includeSelf
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|next
operator|.
name|selectDescendants
argument_list|(
name|includeSelf
argument_list|,
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendantAttributes
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|next
operator|.
name|selectDescendantAttributes
argument_list|(
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|NodeImpl
name|selectById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ElementImpl
name|root
init|=
operator|(
name|ElementImpl
operator|)
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIdAttribute
argument_list|(
name|root
operator|.
name|getNodeNumber
argument_list|()
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return
name|root
return|;
block|}
specifier|final
name|int
name|treeLevel
init|=
name|this
operator|.
name|treeLevel
index|[
name|root
operator|.
name|getNodeNumber
argument_list|()
index|]
decl_stmt|;
name|int
name|nextNode
init|=
name|root
operator|.
name|getNodeNumber
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
operator|++
name|nextNode
operator|<
name|document
operator|.
name|size
operator|)
operator|&&
operator|(
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
operator|>
name|treeLevel
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|document
operator|.
name|nodeKind
index|[
name|nextNode
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|)
operator|&&
name|hasIdAttribute
argument_list|(
name|nextNode
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return
name|getNode
argument_list|(
name|nextNode
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|NodeImpl
name|selectByIdref
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ElementImpl
name|root
init|=
operator|(
name|ElementImpl
operator|)
name|getDocumentElement
argument_list|()
decl_stmt|;
name|AttributeImpl
name|attr
init|=
name|getIdrefAttribute
argument_list|(
name|root
operator|.
name|getNodeNumber
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
return|return
name|attr
return|;
block|}
specifier|final
name|int
name|treeLevel
init|=
name|this
operator|.
name|treeLevel
index|[
name|root
operator|.
name|getNodeNumber
argument_list|()
index|]
decl_stmt|;
name|int
name|nextNode
init|=
name|root
operator|.
name|getNodeNumber
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
operator|++
name|nextNode
operator|<
name|document
operator|.
name|size
operator|)
operator|&&
operator|(
name|document
operator|.
name|treeLevel
index|[
name|nextNode
index|]
operator|>
name|treeLevel
operator|)
condition|)
block|{
if|if
condition|(
name|document
operator|.
name|nodeKind
index|[
name|nextNode
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|attr
operator|=
name|getIdrefAttribute
argument_list|(
name|nextNode
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
return|return
name|attr
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|hasIdAttribute
parameter_list|(
name|int
name|nodeNumber
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|document
operator|.
name|attrType
index|[
name|attr
index|]
operator|==
name|AttributeImpl
operator|.
name|ATTR_ID_TYPE
operator|)
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|document
operator|.
name|attrValue
index|[
name|attr
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|AttributeImpl
name|getIdrefAttribute
parameter_list|(
name|int
name|nodeNumber
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNumber
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|document
operator|.
name|attrType
index|[
name|attr
index|]
operator|==
name|AttributeImpl
operator|.
name|ATTR_IDREF_TYPE
operator|)
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|document
operator|.
name|attrValue
index|[
name|attr
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|AttributeImpl
argument_list|(
name|this
argument_list|,
name|attr
argument_list|)
return|;
block|}
operator|++
name|attr
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchChildren
parameter_list|(
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchDescendants
parameter_list|(
name|boolean
name|includeSelf
parameter_list|,
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|includeSelf
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|next
operator|.
name|matchDescendants
argument_list|(
name|includeSelf
argument_list|,
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchDescendantAttributes
parameter_list|(
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|next
operator|.
name|matchDescendantAttributes
argument_list|(
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/*     * (non-Javadoc)     *     * @see org.w3c.dom.Document#createElement(java.lang.String)     */
annotation|@
name|Override
specifier|public
name|Element
name|createElement
parameter_list|(
name|String
name|tagName
parameter_list|)
throws|throws
name|DOMException
block|{
name|QName
name|qn
decl_stmt|;
try|try
block|{
name|qn
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|tagName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|nodeNum
init|=
name|addNode
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|qn
argument_list|)
decl_stmt|;
return|return
operator|new
name|ElementImpl
argument_list|(
name|this
argument_list|,
name|nodeNum
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createDocumentFragment()      */
annotation|@
name|Override
specifier|public
name|DocumentFragment
name|createDocumentFragment
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createTextNode(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Text
name|createTextNode
parameter_list|(
name|String
name|data
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createComment(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Comment
name|createComment
parameter_list|(
name|String
name|data
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createCDATASection(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|CDATASection
name|createCDATASection
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createProcessingInstruction(java.lang.String,      *           java.lang.String)      */
annotation|@
name|Override
specifier|public
name|ProcessingInstruction
name|createProcessingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createAttribute(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createEntityReference(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|EntityReference
name|createEntityReference
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getElementsByTagName(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|tagname
parameter_list|)
block|{
specifier|final
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodeKind
index|[
name|i
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
specifier|final
name|QName
name|qn
init|=
name|nodeName
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|getStringValue
argument_list|()
operator|.
name|equals
argument_list|(
name|tagname
argument_list|)
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
name|getNode
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nl
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#importNode(org.w3c.dom.Node, boolean)      */
annotation|@
name|Override
specifier|public
name|Node
name|importNode
parameter_list|(
name|Node
name|importedNode
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createElementNS(java.lang.String,      *           java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Element
name|createElementNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#createAttributeNS(java.lang.String,      *           java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getElementsByTagNameNS(java.lang.String,      *           java.lang.String)      */
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
specifier|final
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodeKind
index|[
name|i
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
specifier|final
name|QName
name|qn
init|=
name|nodeName
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
name|qn
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
name|getNode
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nl
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Document#getElementById(java.lang.String)      */
annotation|@
name|Override
specifier|public
name|Element
name|getElementById
parameter_list|(
name|String
name|elementId
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.w3c.dom.Node#getOwnerDocument()      */
annotation|@
name|Override
specifier|public
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * Copy the document fragment starting at the specified node to the given document builder.      *      * @param   node      * @param   receiver      *      * @throws  SAXException  DOCUMENT ME!      */
specifier|public
name|void
name|copyTo
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|copyTo
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|copyTo
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|,
name|boolean
name|expandRefs
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|NodeImpl
name|top
init|=
name|node
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|copyStartNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
name|expandRefs
argument_list|)
expr_stmt|;
name|NodeImpl
name|nextNode
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|ReferenceNode
condition|)
block|{
comment|//Nothing more to stream ?
name|nextNode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|copyEndNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|top
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
condition|)
block|{
break|break;
block|}
comment|//No nextNode if the top node is a Document node
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|node
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|top
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
operator|)
condition|)
block|{
name|copyEndNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|node
operator|=
name|nextNode
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyStartNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|,
name|boolean
name|expandRefs
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
specifier|final
name|QName
name|nodeName
init|=
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
decl_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|nodeName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nr
operator|)
condition|)
block|{
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|attr
index|]
argument_list|)
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
operator|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|)
operator|&&
operator|(
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
operator|)
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
name|receiver
operator|.
name|addNamespaceNode
argument_list|(
name|nsQName
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|receiver
operator|.
name|characters
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|receiver
operator|.
name|cdataSection
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|nr
index|]
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|receiver
operator|.
name|comment
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
specifier|final
name|QName
name|qn
init|=
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
decl_stmt|;
specifier|final
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|NAMESPACE_NODE
case|:
name|receiver
operator|.
name|addNamespaceNode
argument_list|(
name|document
operator|.
name|namespaceCode
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
if|if
condition|(
name|expandRefs
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setReceiver
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toReceiver
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|getDatabase
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|receiver
operator|.
name|addReferenceNode
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|private
name|void
name|copyEndNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Expand all reference nodes in the current document, i.e. replace them by real nodes. Reference nodes are just pointers to nodes from other      * documents stored in the database. The XQuery engine uses reference nodes to speed up the creation of temporary doc fragments.      *      *<p>This method creates a new copy of the document contents and expands all reference nodes.</p>      *      * @throws  DOMException  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|void
name|expand
parameter_list|()
throws|throws
name|DOMException
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|DocumentImpl
name|newDoc
init|=
name|expandRefs
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|copyDocContents
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|expandRefs
parameter_list|(
name|NodeImpl
name|rootNode
parameter_list|)
throws|throws
name|DOMException
block|{
try|try
block|{
if|if
condition|(
name|nextRef
operator|==
literal|0
condition|)
block|{
name|computeNodeIds
argument_list|()
expr_stmt|;
return|return
operator|(
name|this
operator|)
return|;
block|}
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|NodeImpl
name|node
init|=
operator|(
name|rootNode
operator|==
literal|null
operator|)
condition|?
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
else|:
name|rootNode
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|copyTo
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_STATE_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|DocumentImpl
name|newDoc
init|=
name|builder
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|newDoc
operator|.
name|computeNodeIds
argument_list|()
expr_stmt|;
return|return
name|newDoc
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_STATE_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|NodeImpl
name|getNodeById
parameter_list|(
name|NodeId
name|id
parameter_list|)
block|{
name|expand
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|nodeId
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
name|getNode
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|computeNodeIds
parameter_list|()
throws|throws
name|EXistException
block|{
if|if
condition|(
name|nodeId
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|NodeIdFactory
name|nodeFactory
init|=
name|getDatabase
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
decl_stmt|;
name|nodeId
index|[
literal|0
index|]
operator|=
name|nodeFactory
operator|.
name|documentNodeId
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|NodeId
name|nextId
init|=
name|nodeFactory
operator|.
name|createInstance
argument_list|()
decl_stmt|;
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|computeNodeIds
argument_list|(
name|nextId
argument_list|,
name|next
operator|.
name|nodeNumber
argument_list|)
expr_stmt|;
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|nextId
operator|=
name|nextId
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|computeNodeIds
parameter_list|(
name|NodeId
name|id
parameter_list|,
name|int
name|nodeNum
parameter_list|)
block|{
name|nodeId
index|[
name|nodeNum
index|]
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|nodeKind
index|[
name|nodeNum
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|NodeId
name|nextId
init|=
name|id
operator|.
name|newChild
argument_list|()
decl_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nodeNum
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nodeNum
operator|)
condition|)
block|{
name|attrNodeId
index|[
name|attr
index|]
operator|=
name|nextId
expr_stmt|;
name|nextId
operator|=
name|nextId
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
name|int
name|nextNode
init|=
name|getFirstChildFor
argument_list|(
name|nodeNum
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nodeNum
condition|)
block|{
name|computeNodeIds
argument_list|(
name|nextId
argument_list|,
name|nextNode
argument_list|)
expr_stmt|;
name|nextNode
operator|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
expr_stmt|;
if|if
condition|(
name|nextNode
operator|>
name|nodeNum
condition|)
block|{
name|nextId
operator|=
name|nextId
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * DOCUMENT ME!      *      * @param  newDoc      */
specifier|private
name|void
name|copyDocContents
parameter_list|(
name|DocumentImpl
name|newDoc
parameter_list|)
block|{
name|namePool
operator|=
name|newDoc
operator|.
name|namePool
expr_stmt|;
name|nodeKind
operator|=
name|newDoc
operator|.
name|nodeKind
expr_stmt|;
name|treeLevel
operator|=
name|newDoc
operator|.
name|treeLevel
expr_stmt|;
name|next
operator|=
name|newDoc
operator|.
name|next
expr_stmt|;
name|nodeName
operator|=
name|newDoc
operator|.
name|nodeName
expr_stmt|;
name|nodeId
operator|=
name|newDoc
operator|.
name|nodeId
expr_stmt|;
name|alpha
operator|=
name|newDoc
operator|.
name|alpha
expr_stmt|;
name|alphaLen
operator|=
name|newDoc
operator|.
name|alphaLen
expr_stmt|;
name|characters
operator|=
name|newDoc
operator|.
name|characters
expr_stmt|;
name|nextChar
operator|=
name|newDoc
operator|.
name|nextChar
expr_stmt|;
name|attrName
operator|=
name|newDoc
operator|.
name|attrName
expr_stmt|;
name|attrNodeId
operator|=
name|newDoc
operator|.
name|attrNodeId
expr_stmt|;
name|attrParent
operator|=
name|newDoc
operator|.
name|attrParent
expr_stmt|;
name|attrValue
operator|=
name|newDoc
operator|.
name|attrValue
expr_stmt|;
name|nextAttr
operator|=
name|newDoc
operator|.
name|nextAttr
expr_stmt|;
name|namespaceParent
operator|=
name|newDoc
operator|.
name|namespaceParent
expr_stmt|;
name|namespaceCode
operator|=
name|newDoc
operator|.
name|namespaceCode
expr_stmt|;
name|nextNamespace
operator|=
name|newDoc
operator|.
name|nextNamespace
expr_stmt|;
name|size
operator|=
name|newDoc
operator|.
name|size
expr_stmt|;
name|documentRootNode
operator|=
name|newDoc
operator|.
name|documentRootNode
expr_stmt|;
name|references
operator|=
name|newDoc
operator|.
name|references
expr_stmt|;
name|nextRef
operator|=
name|newDoc
operator|.
name|nextRef
expr_stmt|;
block|}
comment|/**      * Stream the specified document fragment to a receiver. This method      * is called by the serializer to output in-memory nodes.      *      * @param   serializer      * @param   node      * @param   receiver      *      * @throws  SAXException      */
specifier|public
name|void
name|streamTo
parameter_list|(
name|Serializer
name|serializer
parameter_list|,
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|NodeImpl
name|top
init|=
name|node
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|startNode
argument_list|(
name|serializer
argument_list|,
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|NodeImpl
name|nextNode
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|ReferenceNode
condition|)
block|{
comment|//Nothing more to stream ?
name|nextNode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|endNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|top
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
condition|)
block|{
break|break;
block|}
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|node
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|top
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
operator|)
condition|)
block|{
name|endNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|node
operator|=
name|nextNode
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startNode
parameter_list|(
name|Serializer
name|serializer
parameter_list|,
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
specifier|final
name|QName
name|nodeName
init|=
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
decl_stmt|;
comment|//Output required namespace declarations
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
operator|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|)
operator|&&
operator|(
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
operator|)
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
comment|//Create the attribute list
name|AttrList
name|attribs
init|=
literal|null
decl_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
name|attribs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|)
operator|&&
operator|(
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nr
operator|)
condition|)
block|{
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|attr
index|]
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|attr
index|]
argument_list|)
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
name|receiver
operator|.
name|startElement
argument_list|(
name|nodeName
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|receiver
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
specifier|final
name|QName
name|attrQName
init|=
name|document
operator|.
name|attrName
index|[
name|nr
index|]
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|receiver
operator|.
name|comment
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
specifier|final
name|QName
name|qn
init|=
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
decl_stmt|;
specifier|final
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|receiver
operator|.
name|cdataSection
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
name|serializer
operator|.
name|toReceiver
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|endNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|//End all prefix mappings used for the element
specifier|final
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
operator|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|)
operator|&&
operator|(
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
operator|)
condition|)
block|{
specifier|final
name|QName
name|nsQName
init|=
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
decl_stmt|;
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
name|nsQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
name|makePersistent
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|storeTemporaryDoc
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|top
init|=
operator|(
name|size
operator|>
literal|1
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|top
operator|>
literal|0
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|top
operator|=
name|getNextSiblingFor
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
operator|(
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
specifier|final
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|el
init|=
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#getInputEncoding()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|String
name|getInputEncoding
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#getXmlEncoding()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|String
name|getXmlEncoding
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#getXmlStandalone()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|boolean
name|getXmlStandalone
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|false
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#setXmlStandalone(boolean)      *      * @param   xmlStandalone  DOCUMENT ME!      *      * @throws  DOMException  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|void
name|setXmlStandalone
parameter_list|(
name|boolean
name|xmlStandalone
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
block|}
comment|/**      * ? @see org.w3c.dom.Document#getXmlVersion()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|String
name|getXmlVersion
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#setXmlVersion(java.lang.String)      *      * @param   xmlVersion  DOCUMENT ME!      *      * @throws  DOMException  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|void
name|setXmlVersion
parameter_list|(
name|String
name|xmlVersion
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
block|}
comment|/**      * ? @see org.w3c.dom.Document#getStrictErrorChecking()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|boolean
name|getStrictErrorChecking
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|false
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#setStrictErrorChecking(boolean)      *      * @param  strictErrorChecking  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|void
name|setStrictErrorChecking
parameter_list|(
name|boolean
name|strictErrorChecking
parameter_list|)
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
block|}
comment|/**      * ? @see org.w3c.dom.Document#getDocumentURI()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|String
name|getDocumentURI
parameter_list|()
block|{
return|return
name|documentURI
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#setDocumentURI(java.lang.String)      *      * @param  documentURI  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|void
name|setDocumentURI
parameter_list|(
name|String
name|documentURI
parameter_list|)
block|{
name|this
operator|.
name|documentURI
operator|=
name|documentURI
expr_stmt|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#adoptNode(org.w3c.dom.Node)      *      * @param   source  DOCUMENT ME!      *      * @return  DOCUMENT ME!      *      * @throws  DOMException  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|Node
name|adoptNode
parameter_list|(
name|Node
name|source
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#getDomConfig()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|DOMConfiguration
name|getDomConfig
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Document#normalizeDocument()      */
annotation|@
name|Override
specifier|public
name|void
name|normalizeDocument
parameter_list|()
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
block|}
comment|/**      * ? @see org.w3c.dom.Document#renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String)      *      * @param   n              DOCUMENT ME!      * @param   namespaceURI   DOCUMENT ME!      * @param   qualifiedName  DOCUMENT ME!      *      * @return  DOCUMENT ME!      *      * @throws  DOMException  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|Node
name|renameNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe _TODO_ - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|XQueryContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * ? @see org.w3c.dom.Node#getBaseURI()      *      * @return  DOCUMENT ME!      */
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
specifier|final
name|Element
name|el
init|=
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|baseURI
init|=
name|getDocumentElement
argument_list|()
operator|.
name|getAttributeNS
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseURI
operator|!=
literal|null
condition|)
block|{
return|return
name|baseURI
return|;
block|}
block|}
specifier|final
name|String
name|docURI
init|=
name|getDocumentURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|docURI
operator|!=
literal|null
condition|)
block|{
return|return
name|docURI
return|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|isBaseURIDeclared
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|context
operator|.
name|getBaseURI
argument_list|()
operator|.
name|getStringValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|//TODO : make something !
block|}
block|}
return|return
name|XmldbURI
operator|.
name|EMPTY_URI
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DOCUMENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"in-memory#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"document {"
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|1
condition|)
block|{
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|getNode
argument_list|(
name|nodeNum
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
index|[
name|nodeNum
index|]
operator|<
name|nodeNum
condition|)
block|{
break|break;
block|}
name|nodeNum
operator|=
name|next
index|[
name|nodeNum
index|]
expr_stmt|;
block|}
block|}
name|result
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
return|return
operator|(
name|result
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNextNodeNumber
parameter_list|(
name|int
name|nextNode
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|document
operator|.
name|next
index|[
name|nextNode
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getURI
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectAttributes
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getUUID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

