begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|utils
operator|.
name|XMLChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|utils
operator|.
name|XML11Char
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|EmptyNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|MemoryNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|UntypedAtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|NodeImpl
parameter_list|<
name|T
extends|extends
name|NodeImpl
parameter_list|>
implements|implements
name|INode
argument_list|<
name|DocumentImpl
argument_list|,
name|T
argument_list|>
implements|,
name|NodeValue
block|{
specifier|public
specifier|static
specifier|final
name|short
name|REFERENCE_NODE
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|NAMESPACE_NODE
init|=
literal|101
decl_stmt|;
specifier|protected
name|int
name|nodeNumber
decl_stmt|;
specifier|protected
name|DocumentImpl
name|document
decl_stmt|;
specifier|public
name|NodeImpl
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|int
name|nodeNumber
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|nodeNumber
operator|=
name|nodeNumber
expr_stmt|;
block|}
specifier|public
name|int
name|getNodeNumber
parameter_list|()
block|{
return|return
name|nodeNumber
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getImplementationType
parameter_list|()
block|{
return|return
name|NodeValue
operator|.
name|IN_MEMORY_NODE
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
return|return
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
name|EmptyNodeSet
operator|.
name|EMPTY_COLLECTION_ITERATOR
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|QName
name|getQName
parameter_list|()
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|document
operator|.
name|attrName
index|[
name|nodeNumber
index|]
return|;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
return|return
name|document
operator|.
name|nodeName
index|[
name|nodeNumber
index|]
return|;
case|case
name|NodeImpl
operator|.
name|NAMESPACE_NODE
case|:
return|return
name|document
operator|.
name|namespaceCode
index|[
name|nodeNumber
index|]
return|;
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
return|return
name|QName
operator|.
name|EMPTY_QNAME
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
return|return
name|QName
operator|.
name|EMPTY_QNAME
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
name|QName
operator|.
name|EMPTY_QNAME
return|;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
return|return
name|QName
operator|.
name|EMPTY_QNAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setQName
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|document
operator|.
name|attrName
index|[
name|nodeNumber
index|]
operator|=
name|qname
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|document
operator|.
name|nodeName
index|[
name|nodeNumber
index|]
operator|=
name|qname
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|NAMESPACE_NODE
case|:
name|document
operator|.
name|namespaceCode
index|[
name|nodeNumber
index|]
operator|=
name|qname
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getNodeName
parameter_list|()
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
return|return
literal|"#document"
return|;
case|case
name|Node
operator|.
name|DOCUMENT_FRAGMENT_NODE
case|:
return|return
literal|"#document-fragment"
return|;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
return|;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
return|return
operator|(
operator|(
name|ProcessingInstructionImpl
operator|)
name|this
operator|)
operator|.
name|getTarget
argument_list|()
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
literal|"#text"
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
return|return
literal|"#comment"
return|;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
return|return
literal|"#cdata-section"
return|;
default|default:
return|return
literal|"#unknown"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
return|;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
specifier|final
name|QName
name|qname
init|=
name|getQName
argument_list|()
decl_stmt|;
return|return
name|qname
operator|!=
literal|null
condition|?
name|qname
operator|.
name|getLocalPart
argument_list|()
else|:
literal|null
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
specifier|final
name|String
name|nsUri
init|=
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsUri
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|nsUri
return|;
block|}
case|case
name|NodeImpl
operator|.
name|NAMESPACE_NODE
case|:
return|return
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getPrefix
parameter_list|()
block|{
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
case|case
name|NodeImpl
operator|.
name|NAMESPACE_NODE
case|:
specifier|final
name|String
name|prefix
init|=
name|getQName
argument_list|()
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
return|return
name|prefix
operator|==
literal|null
condition|?
literal|null
else|:
name|prefix
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrefix
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|else if
condition|(
name|getOwnerDocument
argument_list|()
operator|.
name|getXmlVersion
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1.0"
argument_list|)
operator|&&
operator|!
name|XMLChar
operator|.
name|isValidNCName
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"Prefix '"
operator|+
name|prefix
operator|+
literal|"' in XML 1.0 contains invalid characters"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|getOwnerDocument
argument_list|()
operator|.
name|getXmlVersion
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1.1"
argument_list|)
operator|&&
operator|!
name|XML11Char
operator|.
name|isXML11ValidNCName
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"Prefix '"
operator|+
name|prefix
operator|+
literal|"' in XML 1.1 contains invalid characters"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
literal|"Cannot set prefix when namespace is null"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_PREFIX
argument_list|)
operator|&&
operator|!
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_URI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
literal|"Prefix '"
operator|+
name|XMLConstants
operator|.
name|XML_NS_PREFIX
operator|+
literal|"' is invalid for namespace '"
operator|+
name|getNamespaceURI
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|&&
name|prefix
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|)
operator|&&
operator|!
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
literal|"Prefix '"
operator|+
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|"' is invalid for namespace '"
operator|+
name|getNamespaceURI
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|||
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
specifier|final
name|QName
name|qname
init|=
name|getQName
argument_list|()
decl_stmt|;
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|prefix
argument_list|,
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
name|expand
argument_list|()
expr_stmt|;
return|return
name|document
operator|.
name|nodeId
index|[
name|nodeNumber
index|]
return|;
block|}
specifier|public
name|void
name|expand
parameter_list|()
throws|throws
name|DOMException
block|{
name|document
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deepCopy
parameter_list|()
throws|throws
name|DOMException
block|{
specifier|final
name|DocumentImpl
name|newDoc
init|=
name|document
operator|.
name|expandRefs
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDoc
operator|!=
name|document
condition|)
block|{
comment|// we received a new document
name|this
operator|.
name|nodeNumber
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|newDoc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeValue
parameter_list|(
specifier|final
name|String
name|nodeValue
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
comment|//Workaround for fn:string-length(fn:node-name(document {""}))
if|if
condition|(
name|this
operator|.
name|document
operator|==
literal|null
condition|)
block|{
return|return
name|Node
operator|.
name|DOCUMENT_NODE
return|;
block|}
return|return
name|document
operator|.
name|nodeKind
index|[
name|nodeNumber
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
name|int
name|next
init|=
name|document
operator|.
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
while|while
condition|(
name|next
operator|>
name|nodeNumber
condition|)
block|{
name|next
operator|=
name|document
operator|.
name|next
index|[
name|next
index|]
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|document
operator|.
name|getNode
argument_list|(
name|next
argument_list|)
return|;
block|}
specifier|public
name|Node
name|selectParentNode
parameter_list|()
block|{
comment|// as getParentNode() but doesn't return the document itself
if|if
condition|(
name|nodeNumber
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|next
init|=
name|document
operator|.
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
while|while
condition|(
name|next
operator|>
name|nodeNumber
condition|)
block|{
name|next
operator|=
name|document
operator|.
name|next
index|[
name|next
index|]
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
comment|//Is this even possible ?
return|return
literal|null
return|;
block|}
if|if
condition|(
name|next
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|document
operator|.
name|explicitlyCreated
condition|?
name|this
operator|.
name|document
else|:
literal|null
return|;
block|}
return|return
name|document
operator|.
name|getNode
argument_list|(
name|next
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addContextNode
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|NodeValue
name|node
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|NodeImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeImpl
name|o
init|=
operator|(
name|NodeImpl
operator|)
name|other
decl_stmt|;
return|return
name|document
operator|==
name|o
operator|.
name|document
operator|&&
name|nodeNumber
operator|==
name|o
operator|.
name|nodeNumber
operator|&&
name|getNodeType
argument_list|()
operator|==
name|o
operator|.
name|getNodeType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeImpl
name|o
init|=
operator|(
name|NodeImpl
operator|)
name|other
decl_stmt|;
return|return
name|document
operator|==
name|o
operator|.
name|document
operator|&&
name|nodeNumber
operator|==
name|o
operator|.
name|nodeNumber
operator|&&
name|getNodeType
argument_list|()
operator|==
name|o
operator|.
name|getNodeType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|after
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|,
specifier|final
name|boolean
name|isFollowing
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot compare persistent node with in-memory node"
argument_list|)
throw|;
block|}
return|return
name|nodeNumber
operator|>
operator|(
operator|(
name|NodeImpl
operator|)
name|other
operator|)
operator|.
name|nodeNumber
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|before
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|,
specifier|final
name|boolean
name|isPreceding
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot compare persistent node with in-memory node"
argument_list|)
throw|;
block|}
return|return
name|nodeNumber
operator|<
operator|(
operator|(
name|NodeImpl
operator|)
name|other
operator|)
operator|.
name|nodeNumber
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|NodeImpl
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|document
operator|==
name|document
condition|)
block|{
if|if
condition|(
name|nodeNumber
operator|==
name|other
operator|.
name|nodeNumber
operator|&&
name|getNodeType
argument_list|()
operator|==
name|other
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
return|return
name|Constants
operator|.
name|EQUAL
return|;
block|}
if|else if
condition|(
name|nodeNumber
operator|<
name|other
operator|.
name|nodeNumber
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
if|else if
condition|(
name|document
operator|.
name|docId
operator|<
name|other
operator|.
name|document
operator|.
name|docId
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|tail
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
if|if
condition|(
name|nodeNumber
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|parent
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|nextNode
operator|>=
name|parent
operator|)
operator|&&
operator|(
name|nextNode
operator|<
name|nodeNumber
operator|)
condition|)
block|{
specifier|final
name|int
name|following
init|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
decl_stmt|;
if|if
condition|(
name|following
operator|==
name|nodeNumber
condition|)
block|{
return|return
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
return|;
block|}
name|nextNode
operator|=
name|following
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
specifier|final
name|int
name|nextNr
init|=
name|document
operator|.
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
return|return
name|nextNr
operator|<
name|nodeNumber
condition|?
literal|null
else|:
name|document
operator|.
name|getNode
argument_list|(
name|nextNr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|insertBefore
parameter_list|(
specifier|final
name|Node
name|newChild
parameter_list|,
specifier|final
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|replaceChild
parameter_list|(
specifier|final
name|Node
name|newChild
parameter_list|,
specifier|final
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|removeChild
parameter_list|(
specifier|final
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|appendChild
parameter_list|(
specifier|final
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
operator|&&
name|newChild
operator|!=
name|document
operator|)
operator|||
name|newChild
operator|.
name|getOwnerDocument
argument_list|()
operator|!=
name|document
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Owning document IDs do not match"
argument_list|)
throw|;
block|}
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|cloneNode
parameter_list|(
specifier|final
name|boolean
name|deep
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|()
block|{
comment|// TODO(AR) do we need to implement something here? or is the tree already normalized?
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|(
specifier|final
name|String
name|feature
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
comment|//Workaround for fn:string-length(fn:node-name(document {""}))
if|if
condition|(
name|this
operator|.
name|document
operator|==
literal|null
condition|)
block|{
return|return
name|Type
operator|.
name|DOCUMENT
return|;
block|}
switch|switch
condition|(
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
return|return
name|Type
operator|.
name|DOCUMENT
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
return|return
name|Type
operator|.
name|COMMENT
return|;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
return|return
name|Type
operator|.
name|PROCESSING_INSTRUCTION
return|;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
return|return
name|Type
operator|.
name|ELEMENT
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|Type
operator|.
name|ATTRIBUTE
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
name|Type
operator|.
name|TEXT
return|;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
return|return
name|Type
operator|.
name|CDATA_SECTION
return|;
default|default:
return|return
name|Type
operator|.
name|NODE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
specifier|final
name|int
name|level
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
name|int
name|next
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
name|int
name|startOffset
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|next
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|next
index|]
argument_list|>
name|level
condition|)
block|{
if|if
condition|(
operator|(
name|document
operator|.
name|nodeKind
index|[
name|next
index|]
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|)
operator|||
operator|(
name|document
operator|.
name|nodeKind
index|[
name|next
index|]
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
operator|)
operator|||
operator|(
name|document
operator|.
name|nodeKind
index|[
name|next
index|]
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|)
condition|)
block|{
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
name|startOffset
operator|=
name|document
operator|.
name|alpha
index|[
name|next
index|]
expr_stmt|;
name|len
operator|=
name|document
operator|.
name|alphaLen
index|[
name|next
index|]
expr_stmt|;
block|}
else|else
block|{
name|len
operator|+=
name|document
operator|.
name|alphaLen
index|[
name|next
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|getStringValueSlow
argument_list|()
return|;
block|}
operator|++
name|next
expr_stmt|;
block|}
return|return
name|len
operator|<
literal|0
condition|?
literal|""
else|:
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|startOffset
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|private
name|String
name|getStringValueSlow
parameter_list|()
block|{
specifier|final
name|int
name|level
init|=
name|document
operator|.
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
name|StringBuilder
name|buf
init|=
literal|null
decl_stmt|;
name|int
name|next
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|next
argument_list|<
name|document
operator|.
name|size
operator|&&
name|document
operator|.
name|treeLevel
index|[
name|next
index|]
argument_list|>
name|level
condition|)
block|{
switch|switch
condition|(
name|document
operator|.
name|nodeKind
index|[
name|next
index|]
condition|)
block|{
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
name|buf
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|next
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|next
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REFERENCE_NODE
case|:
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
name|buf
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|next
index|]
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
operator|++
name|next
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|buf
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|buf
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|toSequence
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|convertTo
parameter_list|(
specifier|final
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|UntypedAtomicValue
operator|.
name|convertTo
argument_list|(
literal|null
argument_list|,
name|getStringValue
argument_list|()
argument_list|,
name|requiredType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|atomize
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|UntypedAtomicValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMany
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Item
name|item
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|Sequence
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|NODE
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|SingleNodeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|EXACTLY_ONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|==
literal|0
condition|?
name|this
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
comment|//A node evaluates to true()
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|toNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|ValueSequence
name|seq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|seq
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|seq
operator|.
name|toNodeSet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryNodeSet
name|toMemNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|ValueSequence
argument_list|(
name|this
argument_list|)
operator|.
name|toMemNodeSet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toSAX
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
specifier|final
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|LexicalHandler
condition|)
block|{
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
operator|(
name|LexicalHandler
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|toSAX
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyTo
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//Null test for document nodes
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|copyTo
argument_list|(
name|this
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|streamTo
parameter_list|(
specifier|final
name|Serializer
name|serializer
parameter_list|,
specifier|final
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//Null test for document nodes
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|streamTo
argument_list|(
name|serializer
argument_list|,
name|this
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|conversionPreference
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
specifier|final
name|int
name|preference
decl_stmt|;
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|NodeImpl
operator|.
name|class
argument_list|)
condition|)
block|{
name|preference
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|Node
operator|.
name|class
argument_list|)
condition|)
block|{
name|preference
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|String
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|CharSequence
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|2
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Character
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|char
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|2
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Double
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|double
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|10
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Float
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|float
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|11
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Long
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|long
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|12
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Integer
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|int
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|13
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Short
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|short
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|14
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Byte
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|byte
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|15
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|javaClass
operator|==
name|Boolean
operator|.
name|class
operator|)
operator|||
operator|(
name|javaClass
operator|==
name|boolean
operator|.
name|class
operator|)
condition|)
block|{
name|preference
operator|=
literal|16
expr_stmt|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Object
operator|.
name|class
condition|)
block|{
name|preference
operator|=
literal|20
expr_stmt|;
block|}
else|else
block|{
name|preference
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
name|preference
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|toJavaObject
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|NodeImpl
operator|.
name|class
argument_list|)
operator|||
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|Node
operator|.
name|class
argument_list|)
operator|||
name|target
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
else|else
block|{
specifier|final
name|StringValue
name|v
init|=
operator|new
name|StringValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|toJavaObject
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCached
parameter_list|()
block|{
comment|// always return false
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIsCached
parameter_list|(
specifier|final
name|boolean
name|cached
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDuplicates
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
block|{
block|}
specifier|public
specifier|abstract
name|void
name|selectAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|void
name|selectDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|void
name|selectChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|void
name|selectDescendants
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|includeSelf
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|selectAncestors
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|nodeNumber
operator|<
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|includeSelf
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nextNode
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
literal|0
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|nextNode
operator|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nextNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|selectPrecedingSiblings
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|parent
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|nextNode
operator|>=
name|parent
operator|)
operator|&&
operator|(
name|nextNode
operator|<
name|nodeNumber
operator|)
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|nextNode
operator|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|selectPreceding
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|NodeId
name|myNodeId
init|=
name|getNodeId
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nodeNumber
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myNodeId
operator|.
name|isDescendantOf
argument_list|(
name|n
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|position
operator|<
literal|0
operator|)
operator|||
operator|(
operator|++
name|count
operator|==
name|position
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
name|position
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|selectFollowingSiblings
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|parent
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|0
condition|)
block|{
comment|// parent is the document node
if|if
condition|(
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
break|break;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|parent
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nextNode
operator|>
name|nodeNumber
operator|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|nextNode
operator|=
name|document
operator|.
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|selectFollowing
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|parent
init|=
name|document
operator|.
name|getParentNodeFor
argument_list|(
name|nodeNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|0
condition|)
block|{
comment|// parent is the document node
if|if
condition|(
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return;
block|}
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|next
operator|.
name|selectDescendants
argument_list|(
literal|true
argument_list|,
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
break|break;
block|}
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|NodeId
name|myNodeId
init|=
name|getNodeId
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|nextNode
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|nextNode
operator|<
name|document
operator|.
name|size
condition|)
block|{
specifier|final
name|NodeImpl
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|myNodeId
argument_list|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|n
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|position
operator|<
literal|0
operator|)
operator|||
operator|(
operator|++
name|count
operator|==
name|position
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
name|position
condition|)
block|{
break|break;
block|}
block|}
name|nextNode
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|matchAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
block|{
comment|// do nothing
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matchDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// do nothing
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matchChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matchDescendants
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|includeSelf
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
specifier|final
name|Node
name|other
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTextContent
parameter_list|(
specifier|final
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSameNode
parameter_list|(
specifier|final
name|Node
name|other
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|lookupPrefix
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
specifier|final
name|Node
name|arg
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFeature
parameter_list|(
specifier|final
name|String
name|feature
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setUserData
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Object
name|data
parameter_list|,
specifier|final
name|UserDataHandler
name|handler
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getUserData
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistentSet
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
specifier|final
name|NodeId
name|oldNodeId
parameter_list|,
specifier|final
name|NodeHandle
name|newNode
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChanged
parameter_list|(
specifier|final
name|int
name|previousState
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|DOMException
name|unsupported
parameter_list|()
block|{
return|return
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_SUPPORTED_ERR
argument_list|,
literal|"not implemented on class: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|SingleNodeIterator
implements|implements
name|SequenceIterator
block|{
name|NodeImpl
name|node
decl_stmt|;
specifier|public
name|SingleNodeIterator
parameter_list|(
specifier|final
name|NodeImpl
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|node
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
specifier|final
name|NodeImpl
name|next
init|=
name|node
decl_stmt|;
name|node
operator|=
literal|null
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
block|}
end_class

end_unit

