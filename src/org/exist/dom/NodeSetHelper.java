begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Collection of static methods operating on node sets.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|NodeSetHelper
block|{
comment|/**      * For two given sets of potential parent and child nodes, find those nodes      * from the child set that actually have parents in the parent set, i.e. the      * parent-child relationship is true.      *       * The method returns either the matching descendant or ancestor nodes,      * depending on the mode constant.      *       * If mode is {@link NodeSet#DESCENDANT}, the returned node set will contain all      * child nodes found in this node set for each parent node. If mode is      * {@link NodeSet#ANCESTOR}, the returned set will contain those parent nodes, for      * which children have been found.      *       * @param dl      *            a node set containing potential child nodes      * @param al      *            a node set containing potential parent nodes      * @param mode      *            selection mode      * @param contextId      *            used to track context nodes when evaluating predicate      *            expressions. If contextId != {@link Expression#NO_CONTEXT_ID},      *            the current context will be added to each result of the      *            selection.      */
specifier|public
specifier|static
name|NodeSet
name|selectParentChild
parameter_list|(
name|NodeSet
name|dl
parameter_list|,
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|DocumentImpl
name|lastDoc
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|dl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|sizeHint
init|=
name|Constants
operator|.
name|NO_SIZE_HINT
decl_stmt|;
name|NodeProxy
name|child
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastDoc
operator|==
literal|null
operator|||
name|child
operator|.
name|getDocument
argument_list|()
operator|!=
name|lastDoc
condition|)
block|{
name|lastDoc
operator|=
name|child
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|sizeHint
operator|=
name|dl
operator|.
name|getSizeHint
argument_list|(
name|lastDoc
argument_list|)
expr_stmt|;
block|}
name|NodeProxy
name|parent
init|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|child
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|child
operator|.
name|deepCopyContext
argument_list|(
name|parent
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|child
operator|.
name|copyContext
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|child
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|dl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|sizeHint
init|=
name|Constants
operator|.
name|NO_SIZE_HINT
decl_stmt|;
name|NodeProxy
name|child
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastDoc
operator|==
literal|null
operator|||
name|child
operator|.
name|getDocument
argument_list|()
operator|!=
name|lastDoc
condition|)
block|{
name|lastDoc
operator|=
name|child
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|sizeHint
operator|=
name|al
operator|.
name|getSizeHint
argument_list|(
name|lastDoc
argument_list|)
expr_stmt|;
block|}
name|NodeProxy
name|parent
init|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|child
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|parent
operator|.
name|deepCopyContext
argument_list|(
name|child
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
else|else
name|parent
operator|.
name|copyContext
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addMatches
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad 'mode' argument"
argument_list|)
throw|;
block|}
name|result
operator|.
name|sort
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * For two given sets of potential ancestor and descendant nodes, find those      * nodes from the descendant set that actually have ancestors in the      * ancestor set, i.e. the ancestor-descendant relationship is true.      *       * The method returns either the matching descendant or ancestor nodes,      * depending on the mode constant.      *       * If mode is {@link NodeSet#DESCENDANT}, the returned node set will contain all      * descendant nodes found in this node set for each ancestor. If mode is      * {@link NodeSet#ANCESTOR}, the returned set will contain those ancestor nodes,      * for which descendants have been found.      *       * @param dl      *            a node set containing potential descendant nodes      * @param al      *            a node set containing potential ancestor nodes      * @param mode      *            selection mode      * @param includeSelf      *            if true, check if the ancestor node itself is contained in the      *            set of descendant nodes (descendant-or-self axis)      * @param contextId      *            used to track context nodes when evaluating predicate      *            expressions. If contextId != {@link Expression#NO_CONTEXT_ID},      *            the current context will be added to each result of the      *            selection.      *       */
specifier|public
specifier|static
name|NodeSet
name|selectAncestorDescendant
parameter_list|(
name|NodeSet
name|dl
parameter_list|,
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|DocumentImpl
name|lastDoc
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|NodeSet
operator|.
name|DESCENDANT
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|dl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|sizeHint
init|=
name|Constants
operator|.
name|NO_SIZE_HINT
decl_stmt|;
name|NodeProxy
name|descendant
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// get a size hint for every new document encountered
if|if
condition|(
name|lastDoc
operator|==
literal|null
operator|||
name|descendant
operator|.
name|getDocument
argument_list|()
operator|!=
name|lastDoc
condition|)
block|{
name|lastDoc
operator|=
name|descendant
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|sizeHint
operator|=
name|dl
operator|.
name|getSizeHint
argument_list|(
name|lastDoc
argument_list|)
expr_stmt|;
block|}
name|NodeProxy
name|ancestor
init|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|descendant
operator|.
name|getDocument
argument_list|()
argument_list|,
name|descendant
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|includeSelf
argument_list|)
decl_stmt|;
if|if
condition|(
name|ancestor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|descendant
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|ancestor
argument_list|)
expr_stmt|;
else|else
name|descendant
operator|.
name|copyContext
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|descendant
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|NodeSet
operator|.
name|ANCESTOR
case|:
for|for
control|(
name|Iterator
name|i
init|=
name|dl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|sizeHint
init|=
name|Constants
operator|.
name|NO_SIZE_HINT
decl_stmt|;
name|NodeProxy
name|descendant
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// get a size hint for every new document encountered
if|if
condition|(
name|lastDoc
operator|==
literal|null
operator|||
name|descendant
operator|.
name|getDocument
argument_list|()
operator|!=
name|lastDoc
condition|)
block|{
name|lastDoc
operator|=
name|descendant
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|sizeHint
operator|=
name|al
operator|.
name|getSizeHint
argument_list|(
name|lastDoc
argument_list|)
expr_stmt|;
block|}
name|NodeProxy
name|ancestor
init|=
name|al
operator|.
name|parentWithChild
argument_list|(
name|descendant
operator|.
name|getDocument
argument_list|()
argument_list|,
name|descendant
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|includeSelf
argument_list|)
decl_stmt|;
if|if
condition|(
name|ancestor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|descendant
argument_list|)
expr_stmt|;
else|else
name|ancestor
operator|.
name|copyContext
argument_list|(
name|descendant
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad 'mode' argument"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * For two sets of potential ancestor and descendant nodes, return all the      * real ancestors having a descendant in the descendant set.      *       * @param al      *            node set containing potential ancestors      * @param dl      *            node set containing potential descendants      * @param includeSelf      *            if true, check if the ancestor node itself is contained in      *            this node set (ancestor-or-self axis)      * @param contextId      *            used to track context nodes when evaluating predicate      *            expressions. If contextId != {@link Expression#NO_CONTEXT_ID},      *            the current context will be added to each result of the of the      *            selection.      */
specifier|public
specifier|static
name|NodeSet
name|selectAncestors
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|NodeSet
name|dl
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|descendant
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeSet
name|ancestors
init|=
name|ancestorsForChild
argument_list|(
name|al
argument_list|,
name|descendant
argument_list|,
literal|false
argument_list|,
name|includeSelf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|ancestors
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|ancestor
init|=
operator|(
name|NodeProxy
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ancestor
operator|!=
literal|null
condition|)
block|{
name|NodeProxy
name|temp
init|=
name|result
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|descendant
argument_list|)
expr_stmt|;
else|else
name|ancestor
operator|.
name|copyContext
argument_list|(
name|descendant
argument_list|)
expr_stmt|;
block|}
name|ancestor
operator|.
name|addMatches
argument_list|(
name|descendant
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|temp
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|descendant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return all nodes contained in the node set that are ancestors of the node      * p.      */
specifier|private
specifier|static
name|NodeSet
name|ancestorsForChild
parameter_list|(
name|NodeSet
name|ancestors
parameter_list|,
name|NodeProxy
name|child
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|child
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|NodeProxy
name|temp
init|=
name|ancestors
operator|.
name|get
argument_list|(
name|child
operator|.
name|getDocument
argument_list|()
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeSelf
operator|&&
name|temp
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
while|while
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|nodeId
operator|=
name|nodeId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
name|temp
operator|=
name|ancestors
operator|.
name|get
argument_list|(
name|child
operator|.
name|getDocument
argument_list|()
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
if|else if
condition|(
name|directParent
condition|)
return|return
name|result
return|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Select all nodes from the passed set of potential siblings, which are      * preceding siblings of the nodes in the other set.      *       * @param candidates      *            the node set to check      * @param references      *            a node set containing potential siblings      * @param contextId      *            used to track context nodes when evaluating predicate      *            expressions. If contextId != {@link Expression#NO_CONTEXT_ID},      *            the current context will be added to each result of the of the      *            selection.      */
specifier|public
specifier|static
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
name|NodeSet
name|candidates
parameter_list|,
name|NodeSet
name|references
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|references
operator|.
name|isEmpty
argument_list|()
operator|||
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeSetIterator
name|iReferences
init|=
name|references
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|NodeSetIterator
name|iCandidates
init|=
name|candidates
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|NodeProxy
name|reference
init|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeProxy
name|candidate
init|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeProxy
name|firstCandidate
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// first, try to find nodes belonging to the same doc
if|if
condition|(
name|reference
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|<
name|candidate
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|reference
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|>
name|candidate
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
else|else
block|{
comment|// same document: check if the nodes have the same parent
name|int
name|cmp
init|=
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
operator|&&
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|<=
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
condition|)
block|{
comment|// wrong parent: proceed
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
operator|||
operator|(
name|cmp
operator|>
literal|0
operator|&&
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|>=
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|)
condition|)
block|{
comment|//Why did I have to invert the test ? ----------------------------^^^^^
comment|// wrong parent: proceed
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
else|else
block|{
if|if
condition|(
name|firstCandidate
operator|==
literal|null
condition|)
name|firstCandidate
operator|=
name|candidate
expr_stmt|;
comment|// found two nodes with the same parent
comment|// now, compare the ids: a node is a following sibling
comment|// if its id is greater than the id of the other node
name|cmp
operator|=
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|reference
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// found a preceding sibling
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|candidate
operator|.
name|copyContext
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|candidate
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|contextId
operator|>
name|Expression
operator|.
name|NO_CONTEXT_ID
condition|)
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
comment|// found a following sibling
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
comment|// TODO : break ?
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
comment|// equal nodes: proceed with next node
block|}
else|else
block|{
if|if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
name|iCandidates
operator|.
name|setPosition
argument_list|(
name|firstCandidate
argument_list|)
expr_stmt|;
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
break|break;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Select all nodes from the passed set of potential siblings, which are      * following siblings of the nodes in the other set.      *       * @param candidates      *            the node set to check      * @param references      *            a node set containing potential siblings      * @param contextId      *            used to track context nodes when evaluating predicate      *            expressions. If contextId != {@link Expression#NO_CONTEXT_ID},      *            the current context will be added to each result of the of the      *            selection.      */
specifier|public
specifier|static
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
name|NodeSet
name|candidates
parameter_list|,
name|NodeSet
name|references
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|references
operator|.
name|isEmpty
argument_list|()
operator|||
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeSetIterator
name|iReferences
init|=
name|references
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|NodeSetIterator
name|iCandidates
init|=
name|candidates
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|NodeProxy
name|reference
init|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeProxy
name|candidate
init|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeProxy
name|firstCandidate
init|=
literal|null
decl_stmt|;
comment|// TODO : review : don't care about preceding siblings
while|while
condition|(
literal|true
condition|)
block|{
comment|// first, try to find nodes belonging to the same doc
if|if
condition|(
name|reference
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|<
name|candidate
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|reference
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
operator|>
name|candidate
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
condition|)
block|{
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
else|else
block|{
comment|// same document: check if the nodes have the same parent
name|int
name|cmp
init|=
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
operator|&&
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|<=
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
condition|)
block|{
comment|//Do not proceed to the next "parent" if the candidate is a descendant
comment|// wrong parent: proceed
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|<
literal|0
operator|||
operator|(
name|cmp
operator|>
literal|0
operator|&&
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|>=
name|reference
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|)
condition|)
block|{
comment|//Why did I have to invert the test ? ----------------------------^^^^^
comment|// wrong parent: proceed
name|firstCandidate
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
else|else
block|{
if|if
condition|(
name|firstCandidate
operator|==
literal|null
condition|)
name|firstCandidate
operator|=
name|candidate
expr_stmt|;
name|cmp
operator|=
name|candidate
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|reference
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// found two nodes with the same parent
comment|// now, compare the ids: a node is a following sibling
comment|// if its id is greater than the id of the other node
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// found a preceding sibling
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
if|else if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
comment|// found a following sibling
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|candidate
operator|.
name|copyContext
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|candidate
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
if|else if
condition|(
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|reference
operator|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
expr_stmt|;
name|iCandidates
operator|.
name|setPosition
argument_list|(
name|firstCandidate
argument_list|)
expr_stmt|;
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
break|break;
comment|// equal nodes: proceed with next node
block|}
else|else
block|{
if|if
condition|(
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|)
name|candidate
operator|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * TODO: doesn't work!!!      */
specifier|public
specifier|static
name|NodeSet
name|selectPreceding
parameter_list|(
name|NodeSet
name|references
parameter_list|,
name|NodeSet
name|candidates
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
operator|||
name|references
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iReferences
init|=
name|references
operator|.
name|iterator
argument_list|()
init|;
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|reference
init|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iCandidates
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|candidate
init|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidate
operator|.
name|before
argument_list|(
name|reference
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// TODO : add transverse context
name|candidate
operator|.
name|addContextNode
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * TODO: doesn't work!!!      */
specifier|public
specifier|static
name|NodeSet
name|selectFollowing
parameter_list|(
name|NodeSet
name|references
parameter_list|,
name|NodeSet
name|candidates
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
operator|||
name|references
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iReferences
init|=
name|references
operator|.
name|iterator
argument_list|()
init|;
name|iReferences
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|reference
init|=
operator|(
name|NodeProxy
operator|)
name|iReferences
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iCandidates
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|candidate
init|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidate
operator|.
name|after
argument_list|(
name|reference
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// TODO : add transverse context
name|candidate
operator|.
name|addContextNode
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|NodeSet
name|directSelectAttributes
parameter_list|(
name|NodeSet
name|candidates
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iCandidates
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|iCandidates
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|candidate
init|=
operator|(
name|NodeProxy
operator|)
name|iCandidates
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|candidate
operator|.
name|directSelectAttribute
argument_list|(
name|qname
argument_list|,
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|copyChildren
parameter_list|(
name|Document
name|new_doc
parameter_list|,
name|Node
name|node
parameter_list|,
name|Node
name|new_node
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|new_child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
continue|continue;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|new_node
operator|.
name|appendChild
argument_list|(
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Element
operator|)
name|new_node
operator|)
operator|.
name|setAttributeNode
argument_list|(
operator|(
name|Attr
operator|)
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|new_node
operator|.
name|appendChild
argument_list|(
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// TODO : error for any other one -pb
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|Node
name|copyNode
parameter_list|(
name|Document
name|new_doc
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|Node
name|new_node
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createElementNS
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|copyChildren
argument_list|(
name|new_doc
argument_list|,
name|node
argument_list|,
name|new_node
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createAttributeNS
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Attr
operator|)
name|new_node
operator|)
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
default|default:
comment|// TODO : error ? -pb
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

