begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_class
specifier|public
class|class
name|ContextItem
block|{
name|boolean
name|isTransverseAxis
init|=
literal|false
decl_stmt|;
specifier|private
name|NodeProxy
name|node
decl_stmt|;
comment|//"direct" axis are ancestor, parent, self, child, descendant and...
comment|//attribute.
comment|//The later, although conceptually transverse is considered as direct,
comment|//thanks to its dpth of 1
specifier|private
name|ContextItem
name|nextDirect
decl_stmt|;
comment|//"transverse" axis are preceding, preceding-sibling, following-sibling, following
specifier|private
name|ContextItem
name|nextTransverse
decl_stmt|;
specifier|public
name|ContextItem
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|NodeProxy
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
specifier|public
name|boolean
name|hasNextDirect
parameter_list|()
block|{
return|return
operator|(
name|nextDirect
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasNextTransverse
parameter_list|()
block|{
return|return
operator|(
name|nextTransverse
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|ContextItem
name|getNextDirect
parameter_list|()
block|{
return|return
name|nextDirect
return|;
block|}
specifier|public
name|ContextItem
name|getNextTransverse
parameter_list|()
block|{
return|return
name|nextTransverse
return|;
block|}
specifier|public
name|void
name|setTransverseAxis
parameter_list|()
block|{
name|isTransverseAxis
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setNextContextItem
parameter_list|(
name|ContextItem
name|next
parameter_list|)
block|{
if|if
condition|(
name|isTransverseAxis
condition|)
name|nextTransverse
operator|=
name|next
expr_stmt|;
else|else
name|nextDirect
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextTransverse
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ContextItem
name|temp
init|=
name|nextTransverse
decl_stmt|;
while|while
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
operator|+
name|temp
argument_list|)
expr_stmt|;
name|temp
operator|=
name|temp
operator|.
name|nextTransverse
expr_stmt|;
block|}
if|if
condition|(
name|nextTransverse
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextDirect
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|"/"
operator|+
name|nextDirect
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

