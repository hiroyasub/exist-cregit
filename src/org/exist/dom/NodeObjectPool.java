begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|StackKeyedObjectPool
import|;
end_import

begin_comment
comment|/**  * An object pool for reusable node objects. Usually, node objects  * are only held in memory for a short time. By reusing these objects,   * we can save many object creations.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|NodeObjectPool
extends|extends
name|StackKeyedObjectPool
block|{
specifier|private
specifier|static
name|NodeObjectPool
name|instance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|NodeObjectPool
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
name|instance
operator|=
operator|new
name|NodeObjectPool
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|public
name|NodeObjectPool
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|PoolableNodeObjectFactory
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeImpl
name|borrowNode
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
try|try
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|borrowObject
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
comment|//			System.out.println(clazz.getName() + ": " + getNumActive(clazz) + " / " + getNumIdle(clazz));
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not create node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|returnNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|)
block|{
try|try
block|{
name|returnObject
argument_list|(
name|node
operator|.
name|getClass
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|//			System.out.println("Returning object " + node.getClass().getName() + ": " + getNumIdle(node.getClass()));
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error while returning node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

