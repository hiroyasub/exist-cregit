begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Parser.java - eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  meier@ifs.tu-darmstadt.de  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id:  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_comment
comment|//import com.sun.resolver.tools.CatalogResolver;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|tools
operator|.
name|CatalogResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    20. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|Parser
extends|extends
name|Observable
implements|implements
name|ContentHandler
implements|,
name|LexicalHandler
implements|,
name|ErrorHandler
block|{
specifier|private
specifier|final
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|Parser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MAX_STR_LEN
init|=
literal|225
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|SPARSE_IDENTIFIERS
init|=
literal|100
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
name|FastStringBuffer
name|charBuf
init|=
operator|new
name|FastStringBuffer
argument_list|(
literal|6
argument_list|,
literal|15
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|protected
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|validate
decl_stmt|;
specifier|protected
name|int
name|currentLine
init|=
literal|0
decl_stmt|,
name|maxLine
decl_stmt|;
specifier|protected
name|String
name|currentPath
decl_stmt|;
specifier|protected
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|fileName
decl_stmt|;
specifier|protected
name|boolean
name|insideDTD
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|level
init|=
literal|0
decl_stmt|;
specifier|protected
name|Locator
name|locator
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|maxLevel
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|normalize
init|=
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
decl_stmt|;
specifier|protected
name|XMLReader
name|parser
decl_stmt|;
specifier|protected
name|Stack
name|prefixes
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|ProgressIndicator
name|progress
decl_stmt|;
specifier|protected
name|boolean
name|replace
init|=
literal|false
decl_stmt|;
specifier|protected
name|CatalogResolver
name|resolver
decl_stmt|;
specifier|protected
name|Element
name|rootNode
decl_stmt|;
specifier|protected
name|InputSource
name|src
decl_stmt|;
specifier|protected
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|private
name|String
name|previousPath
init|=
literal|null
decl_stmt|;
specifier|private
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|usedElements
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|/**      *  Constructor for the Parser object      *      *@param  broker              Description of the Parameter      *@param  user                Description of the Parameter      *@param  replace             Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|Parser
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|resolver
operator|=
operator|(
name|CatalogResolver
operator|)
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"resolver"
argument_list|)
expr_stmt|;
name|String
name|suppressWS
init|=
operator|(
name|String
operator|)
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"indexer.suppress-whitespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWS
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|suppressWS
operator|.
name|equals
argument_list|(
literal|"leading"
argument_list|)
condition|)
name|normalize
operator|=
name|FastStringBuffer
operator|.
name|SUPPRESS_LEADING_WS
expr_stmt|;
if|else if
condition|(
name|suppressWS
operator|.
name|equals
argument_list|(
literal|"trailing"
argument_list|)
condition|)
name|normalize
operator|=
name|FastStringBuffer
operator|.
name|SUPPRESS_TRAILING_WS
expr_stmt|;
if|else if
condition|(
name|suppressWS
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
name|normalize
operator|=
literal|0
expr_stmt|;
block|}
name|SAXParserFactory
name|saxFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|//saxFactory.setValidating(false);
name|saxFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|setFeature
argument_list|(
name|saxFactory
argument_list|,
literal|"http://xml.org/sax/features/namespace-prefixes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|saxFactory
argument_list|,
literal|"http://apache.org/xml/features/validation/dynamic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|saxFactory
argument_list|,
literal|"http://apache.org/xml/features/validation/schema"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SAXParser
name|sax
init|=
name|saxFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|=
name|sax
operator|.
name|getXMLReader
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setEntityResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|saxe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|void
name|setOverwrite
parameter_list|(
name|boolean
name|overwrite
parameter_list|)
block|{
name|this
operator|.
name|replace
operator|=
name|overwrite
expr_stmt|;
block|}
specifier|public
name|void
name|setUser
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  ch      Description of the Parameter      *@param  start   Description of the Parameter      *@param  length  Description of the Parameter      */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|+
name|length
operator|<
name|MAX_STR_LEN
condition|)
block|{
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ElementImpl
name|last
init|=
operator|(
name|ElementImpl
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|normalize
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TextImpl text =
comment|//    new TextImpl( normalized );
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//charBuf = new FastStringBuffer( 6, 6, 3 );
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if length> MAX_STR_LEN split the string into
comment|// smaller parts:
if|if
condition|(
name|length
operator|>
name|MAX_STR_LEN
condition|)
block|{
name|int
name|len
init|=
name|MAX_STR_LEN
decl_stmt|;
comment|//TextImpl text;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
comment|//text = new TextImpl( ch, start, len );
name|text
operator|.
name|setData
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|start
operator|=
name|start
operator|+
name|len
expr_stmt|;
name|length
operator|=
name|length
operator|-
name|len
expr_stmt|;
if|if
condition|(
name|length
operator|<
name|MAX_STR_LEN
condition|)
name|len
operator|=
name|length
expr_stmt|;
block|}
block|}
else|else
block|{
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//charBuf = new FastStringBuffer( 6, 6, 3 );
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  ch      Description of the Parameter      *@param  start   Description of the Parameter      *@param  length  Description of the Parameter      */
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|insideDTD
condition|)
return|return;
name|CommentImpl
name|comment
init|=
operator|new
name|CommentImpl
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|empty
argument_list|()
condition|)
name|document
operator|.
name|appendChild
argument_list|(
name|comment
argument_list|)
expr_stmt|;
else|else
block|{
name|ElementImpl
name|last
init|=
operator|(
name|ElementImpl
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|normalize
argument_list|)
decl_stmt|;
comment|//String normalized = charBuf.getString().toString();
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TextImpl text =
comment|//    new TextImpl( normalized );
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//charBuf = new FastStringBuffer();
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
name|last
operator|.
name|appendChildInternal
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|comment
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|endCDATA
parameter_list|()
block|{
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|endDTD
parameter_list|()
block|{
name|insideDTD
operator|=
literal|false
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  namespace  Description of the Parameter      *@param  name       Description of the Parameter      *@param  qname      Description of the Parameter      */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|qname
parameter_list|)
block|{
comment|//		if(namespace != null&& namespace.length()> 0&&
comment|//			qname.indexOf(':')< 0)
comment|//			qname = '#' + namespace + ':' + qname;
specifier|final
name|ElementImpl
name|last
init|=
operator|(
name|ElementImpl
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|normalize
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TextImpl text =
comment|//    new TextImpl( normalized );
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//charBuf = new FastStringBuffer( 6, 6, 3 );
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|currentPath
operator|=
name|getCurrentPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|validate
condition|)
block|{
if|if
condition|(
name|document
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|<
name|last
operator|.
name|getChildCount
argument_list|()
condition|)
name|document
operator|.
name|setTreeLevelOrder
argument_list|(
name|level
argument_list|,
name|last
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|DBM
operator|||
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|NATIVE
condition|)
block|{
if|if
condition|(
name|last
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
name|broker
operator|.
name|update
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
else|else
name|broker
operator|.
name|store
argument_list|(
name|last
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
name|level
operator|--
expr_stmt|;
if|if
condition|(
name|last
operator|!=
name|rootNode
condition|)
block|{
name|last
operator|.
name|clear
argument_list|()
expr_stmt|;
name|usedElements
operator|.
name|push
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
block|}
name|previousPath
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  name  Description of the Parameter      */
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  prefix  Description of the Parameter      */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|prefix
operator|=
operator|(
name|String
operator|)
name|prefixes
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  e                 Description of the Parameter      *@exception  SAXException  Description of the Exception      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"parse error at line "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  e                 Description of the Parameter      *@exception  SAXException  Description of the Exception      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"fatal error at line "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|/**      *  Gets the currentPath attribute of the Parser object      *      *@return    The currentPath value      */
specifier|private
specifier|final
name|String
name|getCurrentPath
parameter_list|()
block|{
if|if
condition|(
name|previousPath
operator|!=
literal|null
condition|)
return|return
name|previousPath
return|;
specifier|final
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ElementImpl
name|current
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|stack
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|current
operator|=
operator|(
name|ElementImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|current
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|previousPath
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|previousPath
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  ch      Description of the Parameter      *@param  start   Description of the Parameter      *@param  length  Description of the Parameter      */
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  src                            Description of the Parameter      *@return                                Description of the Return Value      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|InputSource
name|src
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
literal|null
argument_list|,
name|src
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|Collection
name|coll
parameter_list|,
name|InputSource
name|is
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|this
operator|.
name|collection
operator|=
name|coll
expr_stmt|;
specifier|final
name|Object
name|lock
init|=
name|broker
operator|.
name|acquireWriteLock
argument_list|()
decl_stmt|;
try|try
block|{
name|scan
argument_list|(
name|is
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|store
argument_list|()
return|;
block|}
finally|finally
block|{
name|broker
operator|.
name|releaseWriteLock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
literal|null
argument_list|,
name|file
argument_list|,
name|xmlFileName
argument_list|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  file                           Description of the Parameter      *@param  xmlFileName                    Description of the Parameter      *@return                                Description of the Return Value      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
specifier|final
name|Object
name|lock
init|=
name|broker
operator|.
name|acquireWriteLock
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|InputSource
name|in
init|=
operator|new
name|InputSource
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|scan
argument_list|(
name|in
argument_list|,
name|xmlFileName
argument_list|)
expr_stmt|;
return|return
name|store
argument_list|()
return|;
block|}
finally|finally
block|{
name|broker
operator|.
name|releaseWriteLock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
name|collection
argument_list|,
name|str
argument_list|,
name|xmlFileName
argument_list|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  str                            Description of the Parameter      *@param  xmlFileName                    Description of the Parameter      *@return                                Description of the Return Value      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|DocumentImpl
name|parse
parameter_list|(
name|Collection
name|coll
parameter_list|,
name|String
name|str
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|collection
operator|=
name|coll
expr_stmt|;
specifier|final
name|Object
name|lock
init|=
name|broker
operator|.
name|acquireWriteLock
argument_list|()
decl_stmt|;
try|try
block|{
name|scan
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|,
name|xmlFileName
argument_list|)
expr_stmt|;
name|this
operator|.
name|src
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|store
argument_list|()
return|;
block|}
finally|finally
block|{
name|broker
operator|.
name|releaseWriteLock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  target  Description of the Parameter      *@param  data    Description of the Parameter      */
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|ProcessingInstructionImpl
name|pi
init|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
literal|0
argument_list|,
name|target
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|document
operator|.
name|appendChild
argument_list|(
name|pi
argument_list|)
expr_stmt|;
else|else
block|{
name|ElementImpl
name|last
init|=
operator|(
name|ElementImpl
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|normalize
argument_list|)
decl_stmt|;
comment|//String normalized = charBuf.getString().toString();
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TextImpl text =
comment|//    new TextImpl( normalized );
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|charBuf
operator|=
operator|new
name|FastStringBuffer
argument_list|()
expr_stmt|;
comment|//charBuf.setLength( 0 );
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|last
operator|.
name|appendChildInternal
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|pi
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  inStream                       Description of the Parameter      *@param  xmlFileName                    Description of the Parameter      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|void
name|scan
parameter_list|(
name|InputStream
name|inStream
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|scan
argument_list|(
operator|new
name|InputSource
argument_list|(
name|inStream
argument_list|)
argument_list|,
name|xmlFileName
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  src                            Description of the Parameter      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|void
name|scan
parameter_list|(
name|InputSource
name|src
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|scan
argument_list|(
name|src
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  src                            Description of the Parameter      *@param  xmlFileName                    Description of the Parameter      *@exception  SAXException               Description of the Exception      *@exception  IOException                Description of the Exception      *@exception  PermissionDeniedException  Description of the Exception      */
specifier|public
name|void
name|scan
parameter_list|(
name|InputSource
name|src
parameter_list|,
name|String
name|xmlFileName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"no input source"
argument_list|)
throw|;
if|if
condition|(
name|broker
operator|.
name|isReadOnly
argument_list|()
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"database is read-only"
argument_list|)
throw|;
specifier|final
name|String
name|pathSep
init|=
name|File
operator|.
name|pathSeparator
decl_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|xmlFileName
expr_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|validate
operator|=
literal|true
expr_stmt|;
name|int
name|p
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
name|fileName
operator|=
name|src
operator|.
name|getSystemId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
name|pathSep
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
name|fileName
operator|=
literal|'/'
operator|+
name|fileName
expr_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|fileName
operator|=
literal|"/db"
operator|+
name|fileName
expr_stmt|;
specifier|final
name|int
name|pos
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
specifier|final
name|String
name|collName
init|=
operator|(
name|pos
operator|>
literal|0
operator|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
else|:
literal|"/db"
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
operator|||
operator|(
operator|!
name|collection
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|collName
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"loading collection "
operator|+
name|collName
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|user
argument_list|,
name|collName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|DocumentImpl
name|oldDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|oldDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|collName
operator|+
literal|'/'
operator|+
name|fileName
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|oldDoc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|UPDATE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"document exists and update "
operator|+
literal|"is not allowed"
argument_list|)
throw|;
name|broker
operator|.
name|removeDocument
argument_list|(
name|collName
operator|+
literal|'/'
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|collection
operator|.
name|removeDocument
argument_list|(
name|collName
operator|+
literal|'/'
operator|+
name|fileName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to write to collection "
operator|+
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|DBM
operator|||
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|NATIVE
condition|)
block|{
comment|// use temporary file name for native broker
comment|// and rename later to avoid database corruption
name|document
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|broker
argument_list|,
name|collName
operator|+
literal|"/__"
operator|+
name|fileName
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|broker
argument_list|,
name|collName
operator|+
literal|'/'
operator|+
name|fileName
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldDoc
operator|==
literal|null
condition|)
block|{
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|user
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|document
operator|.
name|setPermissions
argument_list|(
name|oldDoc
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset internal variables
name|maxLevel
operator|=
literal|0
expr_stmt|;
name|level
operator|=
literal|0
expr_stmt|;
name|currentPath
operator|=
literal|null
expr_stmt|;
name|stack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|prefixes
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|previousPath
operator|=
literal|null
expr_stmt|;
name|rootNode
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"validating document "
operator|+
name|fileName
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|removeDocument
argument_list|(
name|document
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      *  Sets the documentLocator attribute of the Parser object      *      *@param  locator  The new documentLocator value      */
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
name|this
operator|.
name|locator
operator|=
name|locator
expr_stmt|;
block|}
comment|/**      *  set SAX parser feature. This method will catch (and ignore) exceptions      *  if the used parser does not support a feature.      *      *@param  factory  The new feature value      *@param  feature  The new feature value      *@param  value    The new feature value      */
specifier|private
name|void
name|setFeature
parameter_list|(
name|SAXParserFactory
name|factory
parameter_list|,
name|String
name|feature
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|feature
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXNotSupportedException
name|snse
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|snse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|pce
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|pce
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  name  Description of the Parameter      */
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|startCDATA
parameter_list|()
block|{
block|}
comment|// Methods of interface LexicalHandler
comment|// used to determine Doctype
comment|/**      *  Description of the Method      *      *@param  name      Description of the Parameter      *@param  publicId  Description of the Parameter      *@param  systemId  Description of the Parameter      */
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
name|DocumentTypeImpl
name|docType
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|name
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
name|document
operator|.
name|setDocumentType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
name|insideDTD
operator|=
literal|true
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  namespace   Description of the Parameter      *@param  name        Description of the Parameter      *@param  qname       Description of the Parameter      *@param  attributes  Description of the Parameter      */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
name|ElementImpl
name|last
init|=
literal|null
decl_stmt|;
name|ElementImpl
name|node
init|=
literal|null
decl_stmt|;
comment|// check for default namespaces
comment|//		if(namespace != null&& namespace.length()> 0&&
comment|//			qname.indexOf(':')< 0)
comment|//			qname = '#' + namespace + ':' + qname;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|last
operator|=
operator|(
name|ElementImpl
operator|)
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|normalize
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|usedElements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|node
operator|=
operator|(
name|ElementImpl
operator|)
name|usedElements
operator|.
name|pop
argument_list|()
expr_stmt|;
name|node
operator|.
name|setNodeName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
else|else
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|validate
condition|)
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
literal|1
argument_list|,
name|qname
argument_list|)
expr_stmt|;
else|else
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
literal|0
argument_list|,
name|qname
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|node
expr_stmt|;
name|document
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|document
operator|.
name|setDocumentElement
argument_list|(
name|node
operator|.
name|getGID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|node
operator|.
name|setPrefixes
argument_list|(
name|prefixes
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentPath
operator|=
name|previousPath
operator|+
literal|'/'
operator|+
name|qname
expr_stmt|;
if|if
condition|(
operator|!
name|validate
operator|&&
operator|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|DBM
operator|||
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|NATIVE
operator|)
condition|)
name|broker
operator|.
name|store
argument_list|(
name|node
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getMaxDepth
argument_list|()
operator|<
name|level
condition|)
name|document
operator|.
name|setMaxDepth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|int
name|attrLength
init|=
name|attributes
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrLength
operator|>
literal|0
operator|&&
name|document
operator|.
name|getMaxDepth
argument_list|()
operator|<
name|level
operator|+
literal|1
condition|)
block|{
name|document
operator|.
name|setMaxDepth
argument_list|(
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|validate
operator|&&
name|document
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
operator|<
name|attrLength
condition|)
name|document
operator|.
name|setTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|,
name|attrLength
argument_list|)
expr_stmt|;
block|}
name|String
name|attrQName
decl_stmt|;
name|String
name|attrPrefix
decl_stmt|;
name|String
name|attrNS
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrLength
condition|;
name|i
operator|++
control|)
block|{
name|attrNS
operator|=
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|attrQName
operator|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// skip xmlns-attributes
if|if
condition|(
name|attrQName
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
operator|--
name|attrLength
expr_stmt|;
else|else
block|{
specifier|final
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
name|attrQName
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ID"
argument_list|)
condition|)
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|ID
argument_list|)
expr_stmt|;
name|node
operator|.
name|appendChildInternal
argument_list|(
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|store
argument_list|(
name|attr
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attrLength
operator|>
literal|0
condition|)
name|node
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
name|attrLength
argument_list|)
expr_stmt|;
name|currentLine
operator|=
name|locator
operator|.
name|getLineNumber
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|progress
operator|.
name|setValue
argument_list|(
name|currentLine
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
name|previousPath
operator|=
name|currentPath
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  name  Description of the Parameter      */
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  prefix  Description of the Parameter      *@param  uri     Description of the Parameter      */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
comment|// get the prefix for this namespace if one has been stored
comment|// before
name|String
name|oldPrefix
init|=
name|broker
operator|.
name|getNamespacePrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPrefix
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
comment|// xmlns="namespace"
name|prefix
operator|=
literal|"#"
operator|+
name|uri
expr_stmt|;
name|broker
operator|.
name|registerNamespace
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
name|prefix
operator|=
name|oldPrefix
expr_stmt|;
name|prefixes
operator|.
name|push
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@return                   Description of the Return Value      *@exception  SAXException  Description of the Exception      *@exception  IOException   Description of the Exception      */
specifier|public
name|DocumentImpl
name|store
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storing document ..."
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|is
init|=
name|src
operator|.
name|getByteStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
else|else
block|{
specifier|final
name|Reader
name|cs
init|=
name|src
operator|.
name|getCharacterStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
name|cs
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"could not reset input source"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|progress
operator|=
operator|new
name|ProgressIndicator
argument_list|(
name|currentLine
argument_list|)
expr_stmt|;
name|document
operator|.
name|setMaxDepth
argument_list|(
name|document
operator|.
name|getMaxDepth
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|document
operator|.
name|calculateTreeLevelStartPoints
argument_list|()
expr_stmt|;
name|validate
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// we don't know the doctype
comment|// set it to the root node's tag name
specifier|final
name|DocumentTypeImpl
name|dt
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|rootNode
operator|.
name|getTagName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|document
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|document
operator|.
name|setDocumentType
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|!=
name|DBBroker
operator|.
name|NATIVE
condition|)
block|{
name|broker
operator|.
name|storeDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|setChildCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|DBM
operator|||
name|broker
operator|.
name|getDatabaseType
argument_list|()
operator|==
name|DBBroker
operator|.
name|NATIVE
condition|)
block|{
name|collection
operator|.
name|renameDocument
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|+
literal|"/__"
operator|+
name|fileName
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addDocument
argument_list|(
name|collection
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
return|return
name|document
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"null pointer"
argument_list|,
name|npe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|npe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"permission denied"
argument_list|)
throw|;
block|}
block|}
comment|// Methods of interface ErrorHandler
comment|/**      *  Description of the Method      *      *@param  e                 Description of the Parameter      *@exception  SAXException  Description of the Exception      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"parser warning at line "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

