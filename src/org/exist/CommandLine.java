begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|getopt
operator|.
name|Getopt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|secure
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  *  This is a simple command line interface to exist. It can be used to parse a  *  file or all files in a directory and to query a local or remote database.  *  Call it with -h to get a list of options.  *  *@author     wolf  *@created    28. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|CommandLine
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|BENCH
init|=
literal|4
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|GET
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|PARSE
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|QUERY
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|REMOVE
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|REMOVE_COLLECTION
init|=
literal|5
decl_stmt|;
name|DBBroker
name|broker
decl_stmt|;
name|XmlRpcClient
name|client
decl_stmt|;
name|String
name|collection
init|=
literal|null
decl_stmt|;
name|String
name|dataDir
init|=
literal|null
decl_stmt|;
name|String
name|database
init|=
literal|"http://localhost:8081"
decl_stmt|;
name|String
name|delCollection
init|=
literal|null
decl_stmt|;
name|String
name|delDocument
init|=
literal|null
decl_stmt|;
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
name|User
name|admin
init|=
operator|new
name|User
argument_list|(
literal|"admin"
argument_list|,
literal|""
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|int
name|howmany
init|=
literal|15
decl_stmt|;
name|boolean
name|indent
init|=
literal|false
decl_stmt|;
name|String
name|listCollection
init|=
literal|null
decl_stmt|;
name|String
name|parseFile
init|=
literal|null
decl_stmt|;
name|String
name|pathSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|ProgressBar
name|progress
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|String
name|queryFile
init|=
literal|null
decl_stmt|;
name|boolean
name|quiet
init|=
literal|false
decl_stmt|;
name|boolean
name|secure
init|=
literal|false
decl_stmt|;
name|String
name|sortExpr
init|=
literal|null
decl_stmt|;
name|boolean
name|sync
init|=
literal|false
decl_stmt|;
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|String
name|viewDocument
init|=
literal|null
decl_stmt|;
name|String
name|xslStyle
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
comment|/**      *  Constructor for the CommandLine object      *      *@param  args  Description of the Parameter      */
specifier|public
name|CommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Getopt
name|opt
init|=
operator|new
name|Getopt
argument_list|(
literal|"exist.CommandLine"
argument_list|,
name|args
argument_list|,
literal|"hFx:qs:lpb:e:n:f:d:r:g:c:iR:"
argument_list|)
decl_stmt|;
name|int
name|c
decl_stmt|;
name|String
name|arg
decl_stmt|;
name|File
name|f
decl_stmt|;
name|int
name|command
init|=
name|QUERY
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|opt
operator|.
name|getopt
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'q'
case|:
name|quiet
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
name|printNotice
argument_list|()
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return;
case|case
literal|'r'
case|:
comment|// remove document
name|delDocument
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
name|command
operator|=
name|REMOVE
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
comment|// remove collection
name|delCollection
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
name|command
operator|=
name|REMOVE_COLLECTION
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|arg
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"option -n requires int parameter"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
literal|'s'
case|:
name|sortExpr
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'x'
case|:
name|xslStyle
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
comment|// pretty print results:
name|indent
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
comment|// set encoding:
name|encoding
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
comment|// set data directory
name|dataDir
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|command
operator|=
name|BENCH
expr_stmt|;
name|parseFile
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|command
operator|=
name|GET
expr_stmt|;
name|viewDocument
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
comment|// database uri specified
name|database
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
comment|// use local instance of eXist broker:
name|database
operator|=
literal|null
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
name|command
operator|=
name|PARSE
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
comment|// collection specified
name|collection
operator|=
name|opt
operator|.
name|getOptarg
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|sync
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|quiet
condition|)
name|printNotice
argument_list|()
expr_stmt|;
try|try
block|{
name|XmlRpc
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"loading configuration from "
operator|+
name|home
operator|+
name|pathSep
operator|+
literal|"conf.xml"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|home
operator|+
name|pathSep
operator|+
literal|"conf.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
comment|// rewrite data directory
name|config
operator|.
name|setProperty
argument_list|(
literal|"db-connection.data-dir"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
comment|// if no database-url is given, create a local broker instance
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"starting local instance of broker ..."
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|indent
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n> pretty printing is turned off when using local broker!<\n"
argument_list|)
expr_stmt|;
block|}
else|else
name|client
operator|=
operator|new
name|XmlRpcClient
argument_list|(
name|database
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|command
condition|)
block|{
case|case
name|REMOVE
case|:
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"removing document "
operator|+
name|delDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|delDocument
operator|=
name|collection
operator|+
literal|"/"
operator|+
name|delDocument
expr_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
name|broker
operator|.
name|removeDocument
argument_list|(
name|admin
argument_list|,
name|delDocument
argument_list|)
expr_stmt|;
else|else
block|{
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|delDocument
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|execute
argument_list|(
literal|"remove"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"could not remove document!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|REMOVE_COLLECTION
case|:
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"removing collection "
operator|+
name|delCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
name|broker
operator|.
name|removeCollection
argument_list|(
name|admin
argument_list|,
name|delCollection
argument_list|)
expr_stmt|;
else|else
block|{
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|delCollection
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|execute
argument_list|(
literal|"removeCollection"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"could not remove document!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|PARSE
case|:
if|if
condition|(
name|opt
operator|.
name|getOptind
argument_list|()
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|parseFile
operator|=
name|args
index|[
name|opt
operator|.
name|getOptind
argument_list|()
index|]
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|parseFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"cannot read xml file or directory: "
operator|+
name|parseFile
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return;
block|}
name|parse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"please specify a file or directory to parse"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GET
case|:
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|viewDocument
operator|=
name|collection
operator|+
literal|"/"
operator|+
name|viewDocument
expr_stmt|;
name|getDocument
argument_list|(
name|viewDocument
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY
case|:
if|if
condition|(
name|opt
operator|.
name|getOptind
argument_list|()
operator|<
name|args
operator|.
name|length
condition|)
name|query
operator|=
name|args
index|[
name|opt
operator|.
name|getOptind
argument_list|()
index|]
expr_stmt|;
else|else
block|{
name|BufferedReader
name|stdin
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|=
name|stdin
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
break|break;
case|case
name|BENCH
case|:
name|benchmark
argument_list|(
name|parseFile
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|database
operator|==
literal|null
condition|)
name|broker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|protected
specifier|static
name|Document
name|createNewDocument
parameter_list|()
block|{
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Document
name|dest
init|=
name|docBuilder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
return|return
name|dest
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  args  Description of the Parameter      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|CommandLine
name|c
init|=
operator|new
name|CommandLine
argument_list|(
name|args
argument_list|)
decl_stmt|;
block|}
comment|/**  Description of the Method */
specifier|protected
specifier|static
name|void
name|printNotice
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist version 0.8.1, Copyright (C) 2002 Wolfgang M. Meier"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist comes with ABSOLUTELY NO WARRANTY."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"This is free software, and you are welcome to "
operator|+
literal|"redistribute it\nunder certain conditions; "
operator|+
literal|"for details read the license file.\n"
argument_list|)
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|protected
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"exist.CommandLine [-h] [-q] [-i] [-l] [-d databaseURL] [-p xmlFile]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                  [-c collection] [-g doc] [-r doc] [-R collection]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                  [-n numberOfResults] query\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parameters:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -d remoteUrl\taddress of XML-RPC server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -l use a local instance of eXist broker"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -c collection\tuse collection"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -g doc\tretrieve document identified by it's name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -h\t\tprints this help text"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -i\t\tindent query results"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -n number\tnumber of results to display"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -p xmlFile\tparse xml file or directory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -q\t\tbe quiet - do not print any messages"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -r doc\tremove document identified by it's name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -R collection\tremove collection"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nIf no query is presented on the command line, the query is read "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"from standard-input."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"By default queries are send to the XMLRPC server. The program "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"assumes http://localhost:8081 as address of the server, if no "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"other uri is specified with option -d. If -l is specified, a "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"local instance of the eXist broker is started (may result in "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"corrupted data if a server is doing inserts at the same time)."
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  benchFile      Description of the Parameter      *@exception  Exception  Description of the Exception      */
specifier|protected
name|void
name|benchmark
parameter_list|(
name|String
name|benchFile
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|benchFile
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
name|queries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|HashMap
name|results
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
name|query
decl_stmt|;
while|while
condition|(
operator|(
name|query
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|queries
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|diff
decl_stmt|;
name|byte
index|[]
name|raw
decl_stmt|;
name|String
name|xml
decl_stmt|;
name|Vector
name|params
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\npass: "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|queries
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|query
operator|=
operator|(
name|String
operator|)
name|queries
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|params
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|howmany
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|indent
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|xml
operator|=
operator|(
name|String
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"query"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|diff
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|diff
argument_list|)
expr_stmt|;
name|Long
name|old
init|=
operator|(
name|Long
operator|)
name|results
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
name|results
operator|.
name|put
argument_list|(
name|query
argument_list|,
operator|new
name|Long
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|results
operator|.
name|put
argument_list|(
name|query
argument_list|,
operator|new
name|Long
argument_list|(
name|old
operator|.
name|longValue
argument_list|()
operator|+
name|diff
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|=
operator|(
name|String
operator|)
name|queries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|t
init|=
operator|(
operator|(
name|Long
operator|)
name|results
operator|.
name|get
argument_list|(
name|query
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
name|t
operator|/
literal|10
operator|)
operator|+
literal|" : "
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getDocument
parameter_list|(
name|String
name|docName
parameter_list|)
block|{
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|indent
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|xslStyle
operator|!=
literal|null
condition|)
name|params
operator|.
name|addElement
argument_list|(
name|xslStyle
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"getDocument"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|xre
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"error occured in XMLRPC call"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|xre
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|admin
argument_list|,
name|docName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"document "
operator|+
name|docName
operator|+
literal|" not found in the repository."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"permission denied: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**  Description of the Method */
specifier|protected
name|void
name|parse
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|parseFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
comment|// parse using local broker
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
operator|new
name|Parser
argument_list|(
name|broker
argument_list|,
name|admin
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ee
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"could not create eXist parser:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ee
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
name|parser
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"reading xml files from directory "
operator|+
name|parseFile
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|files
index|[]
init|=
name|file
operator|.
name|listFiles
argument_list|(
operator|new
name|XMLFilenameFilter
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|docName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing file "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|files
operator|.
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
name|src
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|docName
operator|=
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|docName
operator|=
operator|(
name|collection
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|docName
else|:
name|collection
operator|+
literal|"/"
operator|+
name|docName
operator|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first pass: scanning document to determine tree structure ..."
argument_list|)
expr_stmt|;
name|parser
operator|.
name|scan
argument_list|(
name|src
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second pass: storing nodes ..."
argument_list|)
expr_stmt|;
name|DocumentImpl
name|doc
init|=
name|parser
operator|.
name|store
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|sync
condition|)
name|broker
operator|.
name|sync
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing "
operator|+
name|files
operator|.
name|length
operator|+
literal|" files took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsing exception at line "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" column "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
name|o
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|parseFile
argument_list|)
decl_stmt|;
name|String
name|docName
init|=
operator|new
name|File
argument_list|(
name|parseFile
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
name|src
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|docName
operator|=
operator|(
name|collection
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|docName
else|:
name|collection
operator|+
literal|"/"
operator|+
name|docName
operator|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first pass: scanning document to determine tree structure ..."
argument_list|)
expr_stmt|;
name|parser
operator|.
name|scan
argument_list|(
name|src
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second pass: storing nodes ..."
argument_list|)
expr_stmt|;
name|DocumentImpl
name|doc
init|=
name|parser
operator|.
name|store
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsing exception at line "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" column "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
name|o
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
comment|// parse using XMLRPC
try|try
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// parse files in directory
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"reading xml files from directory "
operator|+
name|parseFile
argument_list|)
expr_stmt|;
name|File
name|files
index|[]
init|=
name|file
operator|.
name|listFiles
argument_list|(
operator|new
name|XMLFilenameFilter
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|docName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nloading file "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|docName
operator|=
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|docName
operator|=
operator|(
name|collection
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|docName
else|:
name|collection
operator|+
literal|"/"
operator|+
name|docName
operator|)
expr_stmt|;
name|String
name|xml
init|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
operator|new
name|File
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|data
operator|=
name|xml
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|addElement
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"sending data to server ..."
argument_list|)
expr_stmt|;
name|Boolean
name|result
init|=
operator|(
name|Boolean
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"parse"
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|booleanValue
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to parse "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// parse single XML file
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|docName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|docName
operator|=
operator|(
name|collection
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|docName
else|:
name|collection
operator|+
literal|"/"
operator|+
name|docName
operator|)
expr_stmt|;
name|String
name|xml
init|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
operator|new
name|File
argument_list|(
name|parseFile
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|data
operator|=
name|xml
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|addElement
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"sending data to server ..."
argument_list|)
expr_stmt|;
name|Boolean
name|result
init|=
operator|(
name|Boolean
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"parse"
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|booleanValue
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to parse "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ok."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nparsing took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printResults
parameter_list|(
name|NodeList
name|resultSet
parameter_list|)
block|{
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeSet
operator|)
name|resultSet
argument_list|,
literal|1
argument_list|,
name|howmany
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  request  Description of the Parameter      *@return          Description of the Return Value      */
specifier|protected
name|String
name|processRequest
parameter_list|(
name|String
name|request
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|database
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|con
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|con
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|()
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  query          Description of the Parameter      *@exception  Exception  Description of the Exception      */
specifier|protected
name|void
name|query
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query: "
operator|+
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|howmany
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|indent
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortExpr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sorting results by: "
operator|+
name|sortExpr
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|sortExpr
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|raw
init|=
operator|(
name|byte
index|[]
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"query"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
operator|new
name|String
argument_list|(
name|raw
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XPathLexer
name|lexer
init|=
operator|new
name|XPathLexer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|XPathParser
name|parser
init|=
operator|new
name|XPathParser
argument_list|(
name|pool
argument_list|,
name|admin
argument_list|,
name|lexer
argument_list|)
decl_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|parser
operator|.
name|expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query: "
operator|+
name|expr
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DocumentSet
name|ndocs
init|=
name|expr
operator|.
name|preselect
argument_list|()
decl_stmt|;
name|NodeList
name|resultSet
init|=
name|expr
operator|.
name|eval
argument_list|(
name|ndocs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query took: "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms.\n"
argument_list|)
expr_stmt|;
name|printResults
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Class      *      *@author     wolf      *@created    28. Mai 2002      */
specifier|public
specifier|static
class|class
name|ProgressObserver
implements|implements
name|Observer
block|{
name|ProgressBar
name|elementsProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing elements"
argument_list|)
decl_stmt|;
name|Observable
name|lastObservable
init|=
literal|null
decl_stmt|;
name|ProgressBar
name|parseProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"parsing         "
argument_list|)
decl_stmt|;
name|ProgressBar
name|wordsProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing words   "
argument_list|)
decl_stmt|;
comment|/**          *  Description of the Method          *          *@param  o    Description of the Parameter          *@param  obj  Description of the Parameter          */
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|ProgressIndicator
name|ind
init|=
operator|(
name|ProgressIndicator
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|lastObservable
operator|==
literal|null
operator|||
name|o
operator|!=
name|lastObservable
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|ElementIndex
condition|)
name|elementsProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|o
operator|instanceof
name|TextSearchEngine
condition|)
name|wordsProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|parseProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|lastObservable
operator|=
name|o
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

