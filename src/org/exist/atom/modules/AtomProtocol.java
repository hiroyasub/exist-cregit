begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * AtomProtocol.java  *  * Created on June 16, 2006, 11:39 AM  *  * (C) R. Alexander Milowski alex@milowski.com  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|modules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|Atom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|IncomingMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|OutgoingMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|util
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|util
operator|.
name|DOMDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|util
operator|.
name|NodeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  *  * @author R. Alexander Milowski  */
end_comment

begin_class
specifier|public
class|class
name|AtomProtocol
extends|extends
name|AtomFeeds
implements|implements
name|Atom
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AtomProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|FEED_DOCUMENT_NAME
init|=
literal|".feed.atom"
decl_stmt|;
specifier|static
specifier|final
name|XmldbURI
name|FEED_DOCUMENT_URI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|FEED_DOCUMENT_NAME
argument_list|)
decl_stmt|;
class|class
name|FindEntry
implements|implements
name|NodeHandler
block|{
name|String
name|id
decl_stmt|;
name|Element
name|matching
decl_stmt|;
name|FindEntry
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|Node
name|parent
parameter_list|,
name|Node
name|child
parameter_list|)
block|{
name|Element
name|entry
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|NodeList
name|nl
init|=
name|entry
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|value
init|=
name|DOM
operator|.
name|textContent
argument_list|(
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|matching
operator|=
name|entry
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Element
name|getEntry
parameter_list|()
block|{
return|return
name|matching
return|;
block|}
block|}
comment|/** Creates a new instance of AtomProtocol */
specifier|public
name|AtomProtocol
parameter_list|()
block|{
block|}
specifier|public
name|void
name|doPost
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|getContext
argument_list|()
operator|.
name|getDefaultCharset
argument_list|()
decl_stmt|;
name|MimeType
name|mime
init|=
name|MimeType
operator|.
name|BINARY_TYPE
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|int
name|equals
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|semicolon
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
operator|>
literal|0
condition|)
block|{
name|String
name|param
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|semicolon
operator|+
literal|1
argument_list|,
name|equals
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"charset="
argument_list|)
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|param
operator|.
name|substring
argument_list|(
name|equals
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|MIME_TYPE
argument_list|)
condition|)
block|{
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Any content posted with the Atom mime type must be in the Atom namespace."
argument_list|)
throw|;
block|}
if|if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"entry"
argument_list|)
condition|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding entry to "
operator|+
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentImpl
name|feedDoc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"urn:uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|currentDateTime
init|=
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|publishedE
init|=
name|DOM
operator|.
name|replaceTextElement
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"published"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|replaceTextElement
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|replaceTextElement
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Element
name|editLink
init|=
name|findLink
argument_list|(
name|root
argument_list|,
literal|"edit"
argument_list|)
decl_stmt|;
name|Element
name|editLinkSrc
init|=
name|findLink
argument_list|(
name|root
argument_list|,
literal|"edit-media"
argument_list|)
decl_stmt|;
if|if
condition|(
name|editLink
operator|!=
literal|null
operator|||
name|editLinkSrc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"An edit link relation cannot be specified in the entry."
argument_list|)
throw|;
block|}
name|editLink
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"link"
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"rel"
argument_list|,
literal|"edit"
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|Atom
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
literal|"?id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|Node
name|next
init|=
name|publishedE
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|root
operator|.
name|appendChild
argument_list|(
name|editLink
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|.
name|insertBefore
argument_list|(
name|editLink
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// get the feed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acquiring lock on feed document..."
argument_list|)
expr_stmt|;
name|feedDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
expr_stmt|;
name|ElementImpl
name|feedRoot
init|=
operator|(
name|ElementImpl
operator|)
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
comment|// Lock the feed
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|// Append the entry
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|feedRoot
operator|.
name|appendChildren
argument_list|(
name|transaction
argument_list|,
name|nl
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Update the updated element
name|DOMDB
operator|.
name|replaceTextElement
argument_list|(
name|transaction
argument_list|,
name|feedRoot
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Store the changes
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing change..."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|feedDoc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done!"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
literal|201
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Location"
argument_list|,
name|request
operator|.
name|getModuleBase
argument_list|()
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|"?id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|Atom
operator|.
name|MIME_TYPE
operator|+
literal|"; charset="
operator|+
name|charset
argument_list|)
expr_stmt|;
name|OutputStreamWriter
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|Transformer
name|identity
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|identity
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Internal error while serializing result."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Serialization error."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"feed"
argument_list|)
condition|)
block|{
name|DocumentImpl
name|feedDoc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Collection at "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|pathUri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
name|UUID
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|currentDateTime
init|=
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|replaceTextElement
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|replaceTextElement
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"id"
argument_list|,
literal|"urn:uuid:"
operator|+
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Element
name|editLink
init|=
name|findLink
argument_list|(
name|root
argument_list|,
literal|"edit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|editLink
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"An edit link relation cannot be specified in the entry."
argument_list|)
throw|;
block|}
name|editLink
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"link"
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"rel"
argument_list|,
literal|"edit"
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|Atom
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
name|editLink
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"SAX error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Trigger failed: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unexpected element: {http://www.w3.org/2005/Atom}"
operator|+
name|root
operator|.
name|getLocalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|filename
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Slug"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|String
name|ext
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferredExtension
argument_list|(
name|mime
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
literal|"resource"
operator|+
name|count
operator|+
name|ext
expr_stmt|;
if|if
condition|(
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
literal|null
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|XmldbURI
name|docUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Resource "
operator|+
name|docUri
operator|+
literal|" already exists in collection "
operator|+
name|pathUri
argument_list|)
throw|;
block|}
name|File
name|tempFile
init|=
name|storeInTemporaryFile
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|request
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|is
argument_list|,
name|contentType
argument_list|,
operator|(
name|int
operator|)
name|tempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|DocumentImpl
name|feedDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acquiring lock on feed document..."
argument_list|)
expr_stmt|;
name|feedDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
expr_stmt|;
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|String
name|title
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Title"
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|==
literal|null
condition|)
block|{
name|title
operator|=
name|filename
expr_stmt|;
block|}
name|String
name|created
init|=
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|ElementImpl
name|feedRoot
init|=
operator|(
name|ElementImpl
operator|)
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|DOMDB
operator|.
name|replaceTextElement
argument_list|(
name|transaction
argument_list|,
name|feedRoot
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|created
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DOMDB
operator|.
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|feedRoot
argument_list|,
name|generateMediaEntry
argument_list|(
name|created
argument_list|,
name|title
argument_list|,
name|filename
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing change..."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|feedDoc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done!"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
literal|201
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"DOM implementation is misconfigured."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"I/O error while handling temporary files."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"/"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception: "
operator|+
name|o
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|doPut
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|getContext
argument_list|()
operator|.
name|getDefaultCharset
argument_list|()
decl_stmt|;
name|MimeType
name|mime
init|=
name|MimeType
operator|.
name|BINARY_TYPE
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|int
name|equals
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|semicolon
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
operator|>
literal|0
condition|)
block|{
name|String
name|param
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|semicolon
operator|+
literal|1
argument_list|,
name|equals
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"charset="
argument_list|)
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|param
operator|.
name|substring
argument_list|(
name|equals
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mime
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|MIME_TYPE
argument_list|)
condition|)
block|{
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|doc
operator|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Any content posted with the Atom mime type must be in the Atom namespace."
argument_list|)
throw|;
block|}
if|if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"feed"
argument_list|)
condition|)
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
name|DocumentImpl
name|feedDoc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|feedDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Collection at "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|DOM
operator|.
name|findChild
argument_list|(
name|root
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"title"
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The feed metadata sent does not contain a title."
argument_list|)
throw|;
block|}
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|ElementImpl
name|feedRoot
init|=
operator|(
name|ElementImpl
operator|)
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
comment|// Modify the feed by merging the new feed-level elements
name|mergeFeed
argument_list|(
name|transaction
argument_list|,
name|feedRoot
argument_list|,
name|root
argument_list|,
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store the feed
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|feedDoc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"entry"
argument_list|)
condition|)
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The 'id' parameter for the entry is missing."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating entry "
operator|+
name|id
operator|+
literal|" in collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentImpl
name|feedDoc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|String
name|currentDateTime
init|=
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get the feed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acquiring lock on feed document..."
argument_list|)
expr_stmt|;
name|feedDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
expr_stmt|;
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|// Find the entry
name|FindEntry
name|finder
init|=
operator|new
name|FindEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|findChildren
argument_list|(
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"entry"
argument_list|,
name|finder
argument_list|)
expr_stmt|;
name|Element
name|entry
init|=
name|finder
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|mergeEntry
argument_list|(
name|transaction
argument_list|,
operator|(
name|ElementImpl
operator|)
name|entry
argument_list|,
name|root
argument_list|,
name|currentDateTime
argument_list|)
expr_stmt|;
comment|// Update the feed time
name|DOMDB
operator|.
name|replaceTextElement
argument_list|(
name|transaction
argument_list|,
operator|(
name|ElementImpl
operator|)
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Store the feed
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|feedDoc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|// Send back the changed entry
name|response
operator|.
name|setStatusCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|Atom
operator|.
name|MIME_TYPE
operator|+
literal|"; charset="
operator|+
name|charset
argument_list|)
expr_stmt|;
name|OutputStreamWriter
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|Transformer
name|identity
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|identity
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"I/O exception during serialization of entry response."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Serialization error."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unexpected element: {http://www.w3.org/2005/Atom}"
operator|+
name|root
operator|.
name|getLocalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|XmldbURI
name|docUri
init|=
name|pathUri
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|collUri
init|=
name|pathUri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docUri
operator|==
literal|null
operator|||
name|collUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The path is not valid: "
operator|+
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"The collection does not exist: "
operator|+
name|collUri
argument_list|)
throw|;
block|}
if|if
condition|(
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|)
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Resource "
operator|+
name|docUri
operator|+
literal|" does not exist in collection "
operator|+
name|collUri
argument_list|)
throw|;
block|}
name|File
name|tempFile
init|=
name|storeInTemporaryFile
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|request
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|is
argument_list|,
name|contentType
argument_list|,
operator|(
name|int
operator|)
name|tempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setStatusCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"I/O error while handling temporary files."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"/"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception: "
operator|+
name|o
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|srcUri
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
comment|// delete collection
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting entry "
operator|+
name|id
operator|+
literal|" in collection "
operator|+
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentImpl
name|feedDoc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|String
name|currentDateTime
init|=
name|toXSDDateTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get the feed
comment|//LOG.info("Acquiring lock on feed document...");
name|feedDoc
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|FEED_DOCUMENT_URI
argument_list|)
expr_stmt|;
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|// Find the entry
name|FindEntry
name|finder
init|=
operator|new
name|FindEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|findChildren
argument_list|(
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"entry"
argument_list|,
name|finder
argument_list|)
expr_stmt|;
name|Element
name|entry
init|=
name|finder
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Entry with id "
operator|+
name|id
operator|+
literal|" cannot be found."
argument_list|)
throw|;
block|}
comment|// Remove the media resource if there is one
name|Element
name|content
init|=
name|DOM
operator|.
name|findChild
argument_list|(
name|entry
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|String
name|src
init|=
name|content
operator|.
name|getAttribute
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found content element, checking for resource "
operator|+
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
operator|&&
name|src
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|srcUri
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|DocumentImpl
name|resource
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|srcUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting resource "
operator|+
name|src
operator|+
literal|" from "
operator|+
name|request
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|srcUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|srcUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Remove the entry
name|ElementImpl
name|feedRoot
init|=
operator|(
name|ElementImpl
operator|)
name|feedDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|feedRoot
operator|.
name|removeChild
argument_list|(
name|transaction
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// Update the feed time
name|DOMDB
operator|.
name|replaceTextElement
argument_list|(
name|transaction
argument_list|,
name|feedRoot
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|,
name|currentDateTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Store the change on the feed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing change..."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|feedDoc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done!"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot delete media resource "
operator|+
name|srcUri
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Cannot acquire write lock."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|feedDoc
operator|!=
literal|null
condition|)
block|{
name|feedDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|mergeEntry
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|ElementImpl
name|target
parameter_list|,
name|Element
name|source
parameter_list|,
specifier|final
name|String
name|updated
parameter_list|)
block|{
specifier|final
name|List
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|DOM
operator|.
name|forEachChild
argument_list|(
name|target
argument_list|,
operator|new
name|NodeHandler
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Node
name|parent
parameter_list|,
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|String
name|ns
init|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
name|String
name|lname
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"updated"
argument_list|)
condition|)
block|{
comment|// Changed updated
name|DOMDB
operator|.
name|replaceText
argument_list|(
name|transaction
argument_list|,
operator|(
name|ElementImpl
operator|)
name|child
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|String
name|rel
init|=
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"rel"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
operator|&&
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit-media"
argument_list|)
condition|)
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|lname
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|&&
operator|!
name|lname
operator|.
name|equals
argument_list|(
literal|"published"
argument_list|)
condition|)
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|childrenToRemove
init|=
name|toRemove
operator|.
name|iterator
argument_list|()
init|;
name|childrenToRemove
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
operator|(
name|Node
operator|)
name|childrenToRemove
operator|.
name|next
argument_list|()
decl_stmt|;
name|target
operator|.
name|removeChild
argument_list|(
name|transaction
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Document
name|ownerDocument
init|=
name|target
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|DOM
operator|.
name|forEachChild
argument_list|(
name|source
argument_list|,
operator|new
name|NodeHandler
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Node
name|parent
parameter_list|,
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|String
name|ns
init|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
name|String
name|lname
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
comment|// Skip server controls updated, published, and id elements
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"updated"
argument_list|)
operator|||
name|lname
operator|.
name|equals
argument_list|(
literal|"published"
argument_list|)
operator|||
name|lname
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Skip the edit link relations
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|String
name|rel
init|=
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"rel"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
operator|&&
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit-media"
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
name|DOMDB
operator|.
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|DOMDB
operator|.
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|ownerDocument
operator|.
name|createTextNode
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mergeFeed
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|ElementImpl
name|target
parameter_list|,
name|Element
name|source
parameter_list|,
specifier|final
name|String
name|updated
parameter_list|)
block|{
specifier|final
name|List
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|DOM
operator|.
name|forEachChild
argument_list|(
name|target
argument_list|,
operator|new
name|NodeHandler
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Node
name|parent
parameter_list|,
name|Node
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|String
name|ns
init|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
name|String
name|lname
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"updated"
argument_list|)
condition|)
block|{
comment|// Changed updated
name|DOMDB
operator|.
name|replaceText
argument_list|(
name|transaction
argument_list|,
operator|(
name|ElementImpl
operator|)
name|child
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|Element
name|echild
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|String
name|rel
init|=
name|echild
operator|.
name|getAttribute
argument_list|(
literal|"rel"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|lname
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|&&
operator|!
name|lname
operator|.
name|equals
argument_list|(
literal|"published"
argument_list|)
operator|&&
operator|!
name|lname
operator|.
name|equals
argument_list|(
literal|"entry"
argument_list|)
condition|)
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove it
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|childrenToRemove
init|=
name|toRemove
operator|.
name|iterator
argument_list|()
init|;
name|childrenToRemove
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
operator|(
name|Node
operator|)
name|childrenToRemove
operator|.
name|next
argument_list|()
decl_stmt|;
name|target
operator|.
name|removeChild
argument_list|(
name|transaction
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Document
name|ownerDocument
init|=
name|target
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|NodeList
name|nl
init|=
name|source
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Element
name|firstEntry
init|=
name|DOM
operator|.
name|findChild
argument_list|(
name|target
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"entry"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|String
name|ns
init|=
name|child
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
name|ns
operator|.
name|equals
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|)
condition|)
block|{
name|String
name|lname
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
comment|// Skip server controls updated, published, and id elements
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"updated"
argument_list|)
operator|||
name|lname
operator|.
name|equals
argument_list|(
literal|"published"
argument_list|)
operator|||
name|lname
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Skip the edit link relations
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|String
name|rel
init|=
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"rel"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rel
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
name|DOMDB
operator|.
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|DOMDB
operator|.
name|appendChild
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|ownerDocument
operator|.
name|createTextNode
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DOMDB
operator|.
name|insertBefore
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|child
argument_list|,
name|firstEntry
argument_list|)
expr_stmt|;
name|DOMDB
operator|.
name|insertBefore
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|,
name|ownerDocument
operator|.
name|createTextNode
argument_list|(
literal|"\n"
argument_list|)
argument_list|,
name|firstEntry
argument_list|)
expr_stmt|;
comment|// TODO: this is a total hack.  Somehow, the insertion order is wrong due to firstEntry changing position
name|firstEntry
operator|=
name|DOM
operator|.
name|findChild
argument_list|(
name|target
argument_list|,
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"entry"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Element
name|findLink
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|rel
parameter_list|)
block|{
name|NodeList
name|nl
init|=
name|parent
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|link
init|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|.
name|getAttribute
argument_list|(
literal|"rel"
argument_list|)
operator|.
name|equals
argument_list|(
name|rel
argument_list|)
condition|)
block|{
return|return
name|link
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Element
name|generateMediaEntry
parameter_list|(
name|String
name|created
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
name|String
name|id
init|=
literal|"urn:uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Document
name|owner
init|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|getDOMImplementation
argument_list|()
operator|.
name|createDocument
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"entry"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Element
name|entry
init|=
name|owner
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Element
name|idE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|idE
operator|.
name|appendChild
argument_list|(
name|owner
operator|.
name|createTextNode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|idE
argument_list|)
expr_stmt|;
name|Element
name|publishedE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"published"
argument_list|)
decl_stmt|;
name|publishedE
operator|.
name|appendChild
argument_list|(
name|owner
operator|.
name|createTextNode
argument_list|(
name|created
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|publishedE
argument_list|)
expr_stmt|;
name|Element
name|updatedE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"updated"
argument_list|)
decl_stmt|;
name|updatedE
operator|.
name|appendChild
argument_list|(
name|owner
operator|.
name|createTextNode
argument_list|(
name|created
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|updatedE
argument_list|)
expr_stmt|;
name|Element
name|titleE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|titleE
operator|.
name|appendChild
argument_list|(
name|owner
operator|.
name|createTextNode
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|titleE
argument_list|)
expr_stmt|;
name|Element
name|linkE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"rel"
argument_list|,
literal|"edit"
argument_list|)
expr_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|Atom
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
literal|"?id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|linkE
argument_list|)
expr_stmt|;
name|linkE
operator|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"link"
argument_list|)
expr_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"rel"
argument_list|,
literal|"edit-media"
argument_list|)
expr_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
name|linkE
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|linkE
argument_list|)
expr_stmt|;
name|Element
name|contentE
init|=
name|owner
operator|.
name|createElementNS
argument_list|(
name|Atom
operator|.
name|NAMESPACE_STRING
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|entry
operator|.
name|appendChild
argument_list|(
name|contentE
argument_list|)
expr_stmt|;
name|contentE
operator|.
name|setAttribute
argument_list|(
literal|"src"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|contentE
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

