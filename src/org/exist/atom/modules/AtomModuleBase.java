begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * AtomModuleBase.java  *  * Created on June 16, 2006, 12:46 PM  *  * (C) R. Alexander Milowski alex@milowski.com  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|modules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|AtomModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|IncomingMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|atom
operator|.
name|OutgoingMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  *  * @author R. Alexander Milowski  */
end_comment

begin_class
specifier|public
class|class
name|AtomModuleBase
implements|implements
name|AtomModule
block|{
specifier|protected
name|Context
name|context
decl_stmt|;
comment|/** Creates a new instance of AtomModuleBase */
specifier|public
name|AtomModuleBase
parameter_list|()
block|{
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|protected
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
name|String
name|method
init|=
name|request
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
name|doGet
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
name|doPost
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
condition|)
block|{
name|doPut
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|doHead
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"DELETE"
argument_list|)
condition|)
block|{
name|doDelete
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|doGet
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|doHead
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|doPost
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|doPut
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|IncomingMessage
name|request
parameter_list|,
name|OutgoingMessage
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Method "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" is not supported by this module."
argument_list|)
throw|;
block|}
specifier|protected
name|File
name|storeInTemporaryFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"atom"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|l
init|=
literal|0
decl_stmt|;
do|do
block|{
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|l
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|len
operator|<
literal|0
operator|&&
name|count
operator|>=
literal|0
operator|)
operator|||
name|l
operator|<
name|len
condition|)
do|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tempFile
return|;
block|}
block|}
end_class

end_unit

