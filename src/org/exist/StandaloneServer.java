begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLArgsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOptionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ShutdownListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|SocketListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|handler
operator|.
name|ForwardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|handler
operator|.
name|NotFoundHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_comment
comment|/**  * Starts eXist in standalone server mode. In this mode, only the XMLRPC, REST and WebDAV  * interfaces are provided. By default, the XMLRPC interface runs on port 8081. A minimal Jetty  * webserver configuration is used for the REST and WebDAV interfaces. The REST interface  * is accessible on<a href="http://localhost:8088">http://localhost:8088</a> by default. The  * WebDAV server uses the URL<a href="http://localhost:8088/webdav/db">  * http://localhost:8088/webdav/db</a> for the database root collection.   *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|StandaloneServer
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|StandaloneServer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//  command-line options
specifier|private
specifier|final
specifier|static
name|int
name|HELP_OPT
init|=
literal|'h'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DEBUG_OPT
init|=
literal|'d'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|HTTP_PORT_OPT
init|=
literal|'p'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|THREADS_OPT
init|=
literal|'t'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|CLOptionDescriptor
name|OPTIONS
index|[]
init|=
operator|new
name|CLOptionDescriptor
index|[]
block|{
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"help"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_DISALLOWED
argument_list|,
name|HELP_OPT
argument_list|,
literal|"print help on command line options and exit."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"debug"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_DISALLOWED
argument_list|,
name|DEBUG_OPT
argument_list|,
literal|"debug XMLRPC calls."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"http-port"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_REQUIRED
argument_list|,
name|HTTP_PORT_OPT
argument_list|,
literal|"set HTTP port."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"threads"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_REQUIRED
argument_list|,
name|THREADS_OPT
argument_list|,
literal|"set max. number of parallel threads allowed by the db."
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|DEFAULT_PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"port"
argument_list|,
literal|"8088"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"webdav.enabled"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"rest.enabled"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"xmlrpc.enabled"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"webdav.authentication"
argument_list|,
literal|"basic"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"rest.form.encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|DEFAULT_PROPERTIES
operator|.
name|setProperty
argument_list|(
literal|"rest.container.encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HttpServer
name|httpServer
decl_stmt|;
specifier|private
name|Map
name|forwarding
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|StandaloneServer
parameter_list|()
block|{
block|}
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|printNotice
argument_list|()
expr_stmt|;
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|(
name|DEFAULT_PROPERTIES
argument_list|)
decl_stmt|;
name|CLArgsParser
name|optParser
init|=
operator|new
name|CLArgsParser
argument_list|(
name|args
argument_list|,
name|OPTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|optParser
operator|.
name|getErrorString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|optParser
operator|.
name|getErrorString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
name|opt
init|=
name|optParser
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|opt
operator|.
name|size
argument_list|()
decl_stmt|;
name|CLOption
name|option
decl_stmt|;
name|int
name|threads
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|option
operator|=
operator|(
name|CLOption
operator|)
name|opt
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|option
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|HELP_OPT
case|:
name|printHelp
argument_list|()
expr_stmt|;
return|return;
case|case
name|DEBUG_OPT
case|:
name|XmlRpc
operator|.
name|setDebug
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|HTTP_PORT_OPT
case|:
name|props
operator|.
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|THREADS_OPT
case|:
try|try
block|{
name|threads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"option -t requires a numeric argument"
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
block|}
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|int
name|httpPort
init|=
literal|8088
decl_stmt|;
try|try
block|{
name|httpPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"port needs to be number"
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Loading configuration from "
operator|+
name|home
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"conf.xml"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|"conf.xml"
argument_list|,
name|home
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
name|threads
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|registerShutdownListener
argument_list|(
operator|new
name|ShutdownListenerImpl
argument_list|()
argument_list|)
expr_stmt|;
name|initXMLDB
argument_list|()
expr_stmt|;
name|startHTTPServer
argument_list|(
name|httpPort
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nServer launched ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Installed services:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-----------------------------------------------"
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"rest.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REST servlet:\tlocalhost:"
operator|+
name|httpPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"webdav.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WebDAV:\t\tlocalhost:"
operator|+
name|httpPort
operator|+
literal|"/webdav"
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"xmlrpc.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XMLRPC:\t\tlocalhost:"
operator|+
name|httpPort
operator|+
literal|"/xmlrpc"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
if|if
condition|(
name|httpServer
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|httpServer
operator|.
name|isStarted
argument_list|()
return|;
block|}
comment|/**      *       */
specifier|private
name|void
name|initXMLDB
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures a minimal Jetty webserver (no webapplication support,      * no file system access) and registers the WebDAV and REST servlets.      *       * @param httpPort      * @throws UnknownHostException      * @throws IllegalArgumentException      * @throws MultiException      */
specifier|private
name|void
name|startHTTPServer
parameter_list|(
name|int
name|httpPort
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IllegalArgumentException
throws|,
name|MultiException
block|{
name|httpServer
operator|=
operator|new
name|HttpServer
argument_list|()
expr_stmt|;
name|SocketListener
name|listener
init|=
operator|new
name|SocketListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|setHost
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setPort
argument_list|(
name|httpPort
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setMinThreads
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setMaxThreads
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|HttpContext
name|context
init|=
operator|new
name|HttpContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|ServletHandler
name|servletHandler
init|=
operator|new
name|ServletHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"rest.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"rest.context"
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
name|ServletHolder
name|restServlet
init|=
name|servletHandler
operator|.
name|addServlet
argument_list|(
literal|"EXistServlet"
argument_list|,
name|path
argument_list|,
literal|"org.exist.http.servlets.EXistServlet"
argument_list|)
decl_stmt|;
name|restServlet
operator|.
name|setInitParameter
argument_list|(
literal|"form-encoding"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"rest.form-encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|restServlet
operator|.
name|setInitParameter
argument_list|(
literal|"container-encoding"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"rest.container-encoding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"webdav.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"webdav.context"
argument_list|,
literal|"/webdav/*"
argument_list|)
decl_stmt|;
name|ServletHolder
name|davServlet
init|=
name|servletHandler
operator|.
name|addServlet
argument_list|(
literal|"WebDAV"
argument_list|,
name|path
argument_list|,
literal|"org.exist.http.servlets.WebDAVServlet"
argument_list|)
decl_stmt|;
name|davServlet
operator|.
name|setInitParameter
argument_list|(
literal|"authentication"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"webdav.authentication"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"xmlrpc.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"xmlrpc.context"
argument_list|,
literal|"/xmlrpc/*"
argument_list|)
decl_stmt|;
name|servletHandler
operator|.
name|addServlet
argument_list|(
literal|"RpcServlet"
argument_list|,
name|path
argument_list|,
literal|"org.exist.xmlrpc.RpcServlet"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forwarding
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ForwardHandler
name|forward
init|=
operator|new
name|ForwardHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|forwarding
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|destination
init|=
operator|(
name|String
operator|)
name|forwarding
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|forward
operator|.
name|setRootForward
argument_list|(
name|destination
argument_list|)
expr_stmt|;
else|else
name|forward
operator|.
name|addForward
argument_list|(
name|path
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addHandler
argument_list|(
name|forward
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addHandler
argument_list|(
name|servletHandler
argument_list|)
expr_stmt|;
name|context
operator|.
name|addHandler
argument_list|(
operator|new
name|NotFoundHandler
argument_list|()
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|StandaloneServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLUtil
operator|.
name|describeOptions
argument_list|(
name|OPTIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printNotice
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist version 1.0, Copyright (C) 2005 The eXist Project"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist comes with ABSOLUTELY NO WARRANTY."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"This is free software, and you are welcome to "
operator|+
literal|"redistribute it\nunder certain conditions; "
operator|+
literal|"for details read the license file.\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configure
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
comment|// try to read configuration from file. Guess the location if
comment|// necessary
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|String
name|file
init|=
literal|"server.xml"
decl_stmt|;
name|String
name|dbHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|f
operator|.
name|isAbsolute
argument_list|()
operator|)
operator|&&
name|dbHome
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|dbHome
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|file
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|is
operator|=
name|StandaloneServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/exist/server.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server configuration not found!"
argument_list|)
throw|;
block|}
else|else
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|// initialize xml parser
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"server"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration should have a root element<server>"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|port
init|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
operator|&&
name|port
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|NodeList
name|cl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|name
init|=
name|elem
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"rest"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|parseDefaultAttrs
argument_list|(
name|properties
argument_list|,
name|elem
argument_list|,
literal|"rest"
argument_list|)
expr_stmt|;
name|parseParams
argument_list|(
name|properties
argument_list|,
name|elem
argument_list|,
literal|"rest"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"webdav"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|parseDefaultAttrs
argument_list|(
name|properties
argument_list|,
name|elem
argument_list|,
literal|"webdav"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"xmlrpc"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|parseDefaultAttrs
argument_list|(
name|properties
argument_list|,
name|elem
argument_list|,
literal|"xmlrpc"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"forwarding"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|configureForwards
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseParams
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|Element
name|root
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|NodeList
name|cl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"param"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|name
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
name|prefix
operator|+
literal|'.'
operator|+
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|configureForwards
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|NodeList
name|cl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|name
init|=
name|elem
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"root"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|dest
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"destination"
argument_list|)
decl_stmt|;
name|forwarding
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"forward"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
name|String
name|dest
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"destination"
argument_list|)
decl_stmt|;
name|forwarding
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @param properties      * @param elem      */
specifier|private
name|void
name|parseDefaultAttrs
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|Element
name|elem
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|attr
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"enabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
name|prefix
operator|+
literal|".enabled"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|attr
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
name|prefix
operator|+
literal|".context"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
class|class
name|ShutdownListenerImpl
implements|implements
name|ShutdownListener
block|{
specifier|public
name|void
name|shutdown
parameter_list|(
name|String
name|dbname
parameter_list|,
name|int
name|remainingInstances
parameter_list|)
block|{
if|if
condition|(
name|remainingInstances
operator|==
literal|0
condition|)
block|{
comment|// give the server a 1s chance to complete pending requests
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"killing threads ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|StandaloneServer
name|server
init|=
operator|new
name|StandaloneServer
argument_list|()
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"An exception occurred while launching the server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

