begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|CollectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|response
operator|.
name|ResponseModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpSessionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A filter to redirect HTTP requests. Similar to the popular UrlRewriteFilter, but  * based on XQuery.  *  * The request is passed to an XQuery whose return value determines where the request will be  * redirected to. An empty return value means the request will be passed through the filter  * untouched. Otherwise, the query should return a single XML element, either  *&lt;exist:dispatch&gt; or&lt;exist:ignore&gt;:  *  *<pre>  *&lt;exist:dispatch xmlns:exist="http://exist.sourceforge.net/NS/exist">  *&lt;!-- use exist:forward to forward the request to a different url -->  *&lt;exist:forward url="..."/>  *&lt;!-- or servlet: -->  *&lt;exist:forward servlet="..."/>  *&lt;!-- use exist:redirect to trigger a client redirect -->  *&lt;exist:redirect url="..."/>  *&lt;!-- pass additional parameters -->  *&lt;exist:add-parameter name="new-param" value="new-param-value"/>  *&lt;exist:cache-control cache="yes|no"/>  *&lt;/exist:dispatch>  *  *&lt;exist:ignore xmlns:exist="http://exist.sourceforge.net/NS/exist"/&gt;  *</pre>  *  *&lt;exist:ignore&gt; has the same effect as returning the empty sequence from the query: the request  * will not be touched and is passed on to the next filter or servlet.  *  *&lt;exist:dispatch&gt; should have one of three attributes:<em>path</em>,<em>servlet-name</em> or  *<em>redirect</em>.  *  * If the<em>servlet-name</em> attribute is present, the request will be forwarded to the named servlet  * (name as specified in web.xml). Alternatively,<em>path</em> can point to an arbitrary resource. It can be either absolute or relative.  * Relative paths are resolved relative to the original request.  *  * The request is forwarded via {@link javax.servlet.RequestDispatcher#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)}.  * Contrary to HTTP forwarding, there is no additional roundtrip to the client. It all happens on  * the server. The client will not notice the redirect.  *  * When forwarding to other servlets, the fields in {@link javax.servlet.http.HttpServletRequest} will be  * updated to point to the new, redirected URI. However, the original request URI is stored in the  * request attribute org.exist.forward.request-uri.  *  * As an alternative to the server-side forward, the<em>redirect</em> attribute causes the server to send a redirect request to the client, which will usually respond  * with a new request to the redirected location. Note that this is quite different from a forwarding via RequestDispatcher,  * which is completely transparent to the client.  *  * One or more&lt;exist:add-parameter&gt; can be used to pass additional query parameters in the URL. The parameters will  * be added to the already existing parameters of the original request.  *  * The&lt;cache-control&lt; element controls if the rewritten URL will be cached or not. For a cached URL, the XQuery will not  * be executed again. Instead, the forward or redirect is executed directly. By default caching is disabled. Please note that  * request parameters are not taken into account when caching the URL.   *  * RedirectorServlet takes a single parameter in web.xml: "xquery". This parameter should point to an  * XQuery script. It should be relative to the current web context.  *  *<pre>  *&lt;servlet>  *&lt;servlet-name>RedirectorServlet</servlet-name>  *&lt;servlet-class>org.exist.http.servlets.RedirectorServlet</servlet-class>  *  *&lt;init-param>  *&lt;param-name>xquery</param-name>  *&lt;param-value>dispatcher.xql</param-value>  *&lt;/init-param>  *&lt;/servlet>  *  *&lt;servlet-mapping>  *&lt;servlet-name>RedirectorServlet</servlet-name>  *&lt;url-pattern>/wiki/*</url-pattern>  *&lt;/servlet-mapping>  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|XQueryURLRewrite
implements|implements
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XQueryURLRewrite
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_USER
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_PASS
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RQ_ATTR_REQUEST_URI
init|=
literal|"org.exist.forward.request-uri"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RQ_ATTR_SERVLET_PATH
init|=
literal|"org.exist.forward.servlet-path"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RQ_ATTR_RESULT
init|=
literal|"org.exist.forward.result"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
name|FilterConfig
name|config
decl_stmt|;
specifier|private
name|Map
name|urlCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|XQueryContext
name|queryContext
decl_stmt|;
comment|// path to the query
specifier|private
name|String
name|query
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// save FilterConfig for later use
name|this
operator|.
name|config
operator|=
name|filterConfig
expr_stmt|;
name|query
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"xquery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" requires a parameter 'xquery'."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|servletRequest
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|servletResponse
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configure
argument_list|()
expr_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|URLRewrite
name|rewrite
init|=
operator|(
name|URLRewrite
operator|)
name|urlCache
operator|.
name|get
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewrite
operator|==
literal|null
condition|)
block|{
comment|// Execute the query
name|Sequence
name|result
init|=
name|runQuery
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|RequestWrapper
name|modifiedRequest
init|=
literal|null
decl_stmt|;
name|boolean
name|useCache
init|=
literal|false
decl_stmt|;
comment|// process the query result
if|if
condition|(
name|result
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Item
name|resource
init|=
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|resource
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"XQueryURLRewrite: urlrewrite query should return an element!"
argument_list|)
throw|;
name|Node
name|node
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|resource
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
name|node
operator|=
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Redirect XQuery should return an XML element!"
argument_list|)
throw|;
block|}
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Redirect XQuery should return an element in namespace "
operator|+
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"dispatch"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|=
name|elem
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|action
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
literal|"forward"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|PathForward
argument_list|(
name|config
argument_list|,
name|action
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"redirect"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|Redirect
argument_list|(
name|action
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"call"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|ModuleCall
argument_list|(
name|action
argument_list|,
name|queryContext
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"ignore"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|PassThrough
argument_list|(
name|elem
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check for add-parameter elements etc.
if|if
condition|(
name|elem
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|node
operator|=
name|elem
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
if|if
condition|(
literal|"add-parameter"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|modifiedRequest
operator|==
literal|null
condition|)
name|modifiedRequest
operator|=
operator|new
name|RequestWrapper
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|modifiedRequest
operator|.
name|addParameter
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"cache-control"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|option
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
name|useCache
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modifiedRequest
operator|!=
literal|null
condition|)
name|request
operator|=
name|modifiedRequest
expr_stmt|;
block|}
else|else
block|{
comment|// empty result: pass through the filter chain
name|rewrite
operator|=
operator|new
name|PassThrough
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// store the original request URI to org.exist.forward.request-uri
name|request
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_SERVLET_PATH
argument_list|,
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCache
condition|)
block|{
name|urlCache
operator|.
name|put
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|rewrite
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rewrite
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No URL rewrite rule found! Giving up."
argument_list|)
throw|;
name|rewrite
operator|.
name|doRewrite
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|filterChain
argument_list|)
expr_stmt|;
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
operator|(
name|Sequence
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|RQ_ATTR_RESULT
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|writeResults
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"An error occurred while retrieving query results: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"An error occurred while executing the urlrewrite query: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error while serializing results: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configure
parameter_list|()
throws|throws
name|EXistException
throws|,
name|ServletException
block|{
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|String
name|username
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
name|username
operator|=
name|DEFAULT_USER
expr_stmt|;
name|String
name|password
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
name|password
operator|=
name|DEFAULT_PASS
expr_stmt|;
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|secman
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|user
operator|=
name|secman
operator|.
name|getUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|validate
argument_list|(
name|password
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Invalid password specified for XQueryURLRewrite user"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|writeResults
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|result
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SAXSerializer
name|sax
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|config
operator|=
literal|null
expr_stmt|;
name|queryContext
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Sequence
name|runQuery
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|XPathException
block|{
comment|// Try to find the XQuery
name|String
name|qpath
init|=
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|qpath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|f
operator|.
name|canRead
argument_list|()
operator|&&
name|f
operator|.
name|isFile
argument_list|()
operator|)
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Cannot read XQuery source from "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
name|FileSource
name|source
init|=
operator|new
name|FileSource
argument_list|(
name|f
argument_list|,
literal|"UTF-8"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|queryContext
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryContext
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|// Find correct module load path
name|queryContext
operator|.
name|setModuleLoadPath
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|declareVariables
argument_list|(
name|queryContext
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|queryContext
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Failed to read query from "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
return|return
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|declareVariables
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
name|HttpRequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
literal|"UTF-8"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|HttpResponseWrapper
name|respw
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|response
argument_list|)
decl_stmt|;
comment|// context.declareNamespace(RequestModule.PREFIX,
comment|// RequestModule.NAMESPACE_URI);
name|context
operator|.
name|declareVariable
argument_list|(
name|RequestModule
operator|.
name|PREFIX
operator|+
literal|":request"
argument_list|,
name|reqw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|ResponseModule
operator|.
name|PREFIX
operator|+
literal|":response"
argument_list|,
name|respw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|,
name|reqw
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|RequestWrapper
extends|extends
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
block|{
name|Map
name|addedParams
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|RequestWrapper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// copy parameters
for|for
control|(
name|Enumeration
name|e
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
index|[]
name|value
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|==
literal|1
condition|)
name|addedParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|addedParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|addedParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|addedParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Map
name|getParameterMap
parameter_list|()
block|{
return|return
name|addedParams
return|;
block|}
specifier|public
name|Enumeration
name|getParameterNames
parameter_list|()
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|addedParams
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|v
operator|.
name|addElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|v
operator|.
name|elements
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Object
name|value
init|=
name|addedParams
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
return|return
operator|(
name|String
index|[]
operator|)
name|value
return|;
else|else
return|return
operator|new
name|String
index|[]
block|{
name|value
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

