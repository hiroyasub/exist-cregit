begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|BasicAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|web
operator|.
name|HttpAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|XQuerySerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|response
operator|.
name|ResponseModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponseWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * A servlet to redirect HTTP requests. Similar to the popular UrlRewriteFilter, but  * based on XQuery.  *<p>  * The request is passed to an XQuery whose return value determines where the request will be  * redirected to. An empty return value means the request will be passed through the filter  * untouched. Otherwise, the query should return a single XML element, which will instruct the filter  * how to further process the request. Details about the format can be found in the main documentation.  *<p>  * The request is forwarded via {@link javax.servlet.RequestDispatcher#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)}.  * Contrary to HTTP forwarding, there is no additional roundtrip to the client. It all happens on  * the server. The client will not notice the redirect.  *<p>  * Please read the<a href="http://exist-db.org/urlrewrite.html">documentation</a> for further information.  */
end_comment

begin_class
specifier|public
class|class
name|XQueryURLRewrite
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XQueryURLRewrite
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|NAME_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*/([^/]+)$"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_CONTROLLER_FILENAME
init|=
literal|"controller.xql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|XmldbURI
name|XQUERY_CONTROLLER_URI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|XQUERY_CONTROLLER_FILENAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RQ_ATTR
init|=
literal|"org.exist.forward"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RQ_ATTR_REQUEST_URI
init|=
literal|"org.exist.forward.request-uri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RQ_ATTR_SERVLET_PATH
init|=
literal|"org.exist.forward.servlet-path"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RQ_ATTR_RESULT
init|=
literal|"org.exist.forward.result"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RQ_ATTR_ERROR
init|=
literal|"org.exist.forward.error"
decl_stmt|;
specifier|private
name|ServletConfig
name|config
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ModelAndView
argument_list|>
name|urlCache
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Subject
name|defaultUser
init|=
literal|null
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
comment|// path to the query
specifier|private
name|String
name|query
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|compiledCache
init|=
literal|true
decl_stmt|;
specifier|private
name|RewriteConfig
name|rewriteConfig
decl_stmt|;
specifier|private
name|Authenticator
name|authenticator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|ServletConfig
name|filterConfig
parameter_list|)
block|{
comment|// save FilterConfig for later use
name|this
operator|.
name|config
operator|=
name|filterConfig
expr_stmt|;
name|query
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"xquery"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|opt
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"compiled-cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|compiledCache
operator|=
name|opt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|rewriteConfig
operator|==
literal|null
condition|)
block|{
name|configure
argument_list|()
expr_stmt|;
name|rewriteConfig
operator|=
operator|new
name|RewriteConfig
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Descriptor
name|descriptor
init|=
name|Descriptor
operator|.
name|getDescriptorSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptor
operator|!=
literal|null
operator|&&
name|descriptor
operator|.
name|requestsFiltered
argument_list|()
condition|)
block|{
specifier|final
name|String
name|attr
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"XQueryURLRewrite.forwarded"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
comment|//logs the request if specified in the descriptor
name|descriptor
operator|.
name|doLogRequestInReplayLog
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"XQueryURLRewrite.forwarded"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
name|Subject
name|user
init|=
name|defaultUser
decl_stmt|;
name|Subject
name|requestUser
init|=
name|HttpAccount
operator|.
name|getUserFromServletRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestUser
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|requestUser
expr_stmt|;
block|}
else|else
block|{
comment|// Secondly try basic authentication
specifier|final
name|String
name|auth
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
condition|)
block|{
name|requestUser
operator|=
name|authenticator
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestUser
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|requestUser
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|configure
argument_list|()
expr_stmt|;
comment|//checkCache(user);
specifier|final
name|RequestWrapper
name|modifiedRequest
init|=
operator|new
name|RequestWrapper
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|URLRewrite
name|staticRewrite
init|=
name|rewriteConfig
operator|.
name|lookup
argument_list|(
name|modifiedRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticRewrite
operator|!=
literal|null
operator|&&
operator|!
name|staticRewrite
operator|.
name|isControllerForward
argument_list|()
condition|)
block|{
name|modifiedRequest
operator|.
name|setPaths
argument_list|(
name|staticRewrite
operator|.
name|resolve
argument_list|(
name|modifiedRequest
argument_list|)
argument_list|,
name|staticRewrite
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Forwarding to target: "
operator|+
name|staticRewrite
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|staticRewrite
operator|.
name|doRewrite
argument_list|(
name|modifiedRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing request URI: "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticRewrite
operator|!=
literal|null
condition|)
block|{
comment|// fix the request URI
name|staticRewrite
operator|.
name|updateRequest
argument_list|(
name|modifiedRequest
argument_list|)
expr_stmt|;
block|}
comment|// check if the request URI is already in the url cache
name|ModelAndView
name|modelView
init|=
name|getFromCache
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Host"
argument_list|)
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checked cache for URI: "
operator|+
name|modifiedRequest
operator|.
name|getRequestURI
argument_list|()
operator|+
literal|" original: "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// no: create a new model and view configuration
if|if
condition|(
name|modelView
operator|==
literal|null
condition|)
block|{
name|modelView
operator|=
operator|new
name|ModelAndView
argument_list|()
expr_stmt|;
comment|// Execute the query
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|user
argument_list|)
argument_list|)
init|)
block|{
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|runQuery
argument_list|(
name|broker
argument_list|,
name|modifiedRequest
argument_list|,
name|response
argument_list|,
name|modelView
argument_list|,
name|staticRewrite
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|logResult
argument_list|(
name|broker
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// process the query result
if|if
condition|(
name|result
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Item
name|resource
init|=
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|resource
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"XQueryURLRewrite: urlrewrite query should return an element!"
argument_list|)
throw|;
block|}
name|Node
name|node
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|resource
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|node
operator|=
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
comment|//throw new ServletException("Redirect XQuery should return an XML element!");
name|response
argument_list|(
name|broker
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|ns
init|=
name|elem
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|response
argument_list|(
name|broker
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|nsUri
init|=
name|elem
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|nsUri
argument_list|)
operator|&&
literal|"dispatch"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|=
name|elem
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|nodeNs
init|=
name|node
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|nodeNs
argument_list|)
condition|)
block|{
specifier|final
name|Element
name|action
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
literal|"view"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|parseViews
argument_list|(
name|modifiedRequest
argument_list|,
name|action
argument_list|,
name|modelView
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"error-handler"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|parseErrorHandlers
argument_list|(
name|modifiedRequest
argument_list|,
name|action
argument_list|,
name|modelView
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"cache-control"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|option
init|=
name|action
operator|.
name|getAttribute
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
name|modelView
operator|.
name|setUseCache
argument_list|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|URLRewrite
name|urw
init|=
name|parseAction
argument_list|(
name|modifiedRequest
argument_list|,
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|urw
operator|!=
literal|null
condition|)
block|{
name|modelView
operator|.
name|setModel
argument_list|(
name|urw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|modelView
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|modelView
operator|.
name|setModel
argument_list|(
operator|new
name|PassThrough
argument_list|(
name|config
argument_list|,
name|elem
argument_list|,
name|modifiedRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|nsUri
operator|!=
literal|null
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
literal|"ignore"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|modelView
operator|.
name|setModel
argument_list|(
operator|new
name|PassThrough
argument_list|(
name|config
argument_list|,
name|elem
argument_list|,
name|modifiedRequest
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|nl
init|=
name|elem
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"cache-control"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|option
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
name|modelView
operator|.
name|setUseCache
argument_list|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|response
argument_list|(
name|broker
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|else if
condition|(
name|result
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|response
argument_list|(
name|broker
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|modelView
operator|.
name|useCache
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caching request to "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|urlCache
operator|.
name|put
argument_list|(
name|modifiedRequest
operator|.
name|getHeader
argument_list|(
literal|"Host"
argument_list|)
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|modelView
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store the original request URI to org.exist.forward.request-uri
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_SERVLET_PATH
argument_list|,
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"URLRewrite took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HttpServletResponse
name|wrappedResponse
init|=
operator|new
name|CachingResponseWrapper
argument_list|(
name|response
argument_list|,
name|modelView
operator|.
name|hasViews
argument_list|()
operator|||
name|modelView
operator|.
name|hasErrorHandlers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelView
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|modelView
operator|.
name|setModel
argument_list|(
operator|new
name|PassThrough
argument_list|(
name|config
argument_list|,
name|modifiedRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staticRewrite
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|modelView
operator|.
name|getModel
argument_list|()
operator|.
name|doResolve
argument_list|()
condition|)
block|{
name|staticRewrite
operator|.
name|rewriteRequest
argument_list|(
name|modifiedRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modelView
operator|.
name|getModel
argument_list|()
operator|.
name|setAbsolutePath
argument_list|(
name|modifiedRequest
argument_list|)
expr_stmt|;
block|}
block|}
name|modifiedRequest
operator|.
name|allowCaching
argument_list|(
operator|!
name|modelView
operator|.
name|hasViews
argument_list|()
argument_list|)
expr_stmt|;
name|doRewrite
argument_list|(
name|modelView
operator|.
name|getModel
argument_list|()
argument_list|,
name|modifiedRequest
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
specifier|final
name|int
name|status
init|=
name|wrappedResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
condition|)
block|{
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|status
operator|<
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
condition|)
block|{
if|if
condition|(
name|modelView
operator|.
name|hasViews
argument_list|()
condition|)
block|{
name|applyViews
argument_list|(
name|modelView
argument_list|,
name|modelView
operator|.
name|views
argument_list|,
name|response
argument_list|,
name|modifiedRequest
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// HTTP response code indicates an error
if|if
condition|(
name|modelView
operator|.
name|hasErrorHandlers
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_ERROR
argument_list|,
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|applyViews
argument_list|(
name|modelView
argument_list|,
name|modelView
operator|.
name|errorHandlers
argument_list|,
name|response
argument_list|,
name|modifiedRequest
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flushError
argument_list|(
name|response
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"An error occurred while processing request to "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|BrokerPool
name|getBrokerPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
name|Subject
name|getDefaultUser
parameter_list|()
block|{
return|return
name|defaultUser
return|;
block|}
specifier|private
name|void
name|applyViews
parameter_list|(
specifier|final
name|ModelAndView
name|modelView
parameter_list|,
specifier|final
name|List
argument_list|<
name|URLRewrite
argument_list|>
name|views
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|RequestWrapper
name|modifiedRequest
parameter_list|,
specifier|final
name|HttpServletResponse
name|currentResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|//int status;
name|HttpServletResponse
name|wrappedResponse
init|=
name|currentResponse
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|views
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|URLRewrite
name|view
init|=
name|views
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// get data returned from last action
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// determine request method to use for calling view
name|String
name|method
init|=
name|view
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|method
operator|=
literal|"POST"
expr_stmt|;
comment|// default is POST
block|}
specifier|final
name|RequestWrapper
name|wrappedReq
init|=
operator|new
name|RequestWrapper
argument_list|(
name|modifiedRequest
argument_list|)
decl_stmt|;
name|wrappedReq
operator|.
name|allowCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|wrappedReq
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|wrappedReq
operator|.
name|setBasePath
argument_list|(
name|modifiedRequest
operator|.
name|getBasePath
argument_list|()
argument_list|)
expr_stmt|;
name|wrappedReq
operator|.
name|setCharacterEncoding
argument_list|(
name|wrappedResponse
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|wrappedReq
operator|.
name|setContentType
argument_list|(
name|wrappedResponse
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|wrappedReq
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|wrappedResponse
operator|=
operator|new
name|CachingResponseWrapper
argument_list|(
name|response
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doRewrite
argument_list|(
name|view
argument_list|,
name|wrappedReq
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
comment|// catch errors in the view
specifier|final
name|int
name|status
init|=
name|wrappedResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|>=
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
condition|)
block|{
if|if
condition|(
name|modelView
operator|!=
literal|null
operator|&&
name|modelView
operator|.
name|hasErrorHandlers
argument_list|()
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|getData
argument_list|()
expr_stmt|;
specifier|final
name|String
name|msg
init|=
name|data
operator|==
literal|null
condition|?
literal|""
else|:
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
name|RQ_ATTR_ERROR
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|applyViews
argument_list|(
literal|null
argument_list|,
name|modelView
operator|.
name|errorHandlers
argument_list|,
name|response
argument_list|,
name|modifiedRequest
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|flushError
argument_list|(
name|response
argument_list|,
name|wrappedResponse
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|else if
condition|(
name|i
operator|==
name|views
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|response
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|Sequence
name|resultSequence
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|encoding
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|OutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
init|;
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|encoding
argument_list|)
init|;
specifier|final
name|PrintWriter
name|printWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|containsHeader
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|semicolon
init|=
name|mimeType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|mimeType
operator|=
name|mimeType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|mimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
specifier|final
name|XQuerySerializer
name|serializer
init|=
operator|new
name|XQuerySerializer
argument_list|(
name|broker
argument_list|,
name|outputProperties
argument_list|,
name|printWriter
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|resultSequence
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushError
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|HttpServletResponse
name|wrappedResponse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|CachingResponseWrapper
operator|)
name|wrappedResponse
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|wrappedResponse
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
name|wrappedResponse
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ModelAndView
name|getFromCache
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|Subject
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
comment|/* Make sure we have a broker *before* we synchronize on urlCache or we may run          * into a deadlock situation (with method checkCache)          */
specifier|final
name|ModelAndView
name|model
init|=
name|urlCache
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|user
argument_list|)
argument_list|)
init|)
block|{
name|model
operator|.
name|getSourceInfo
argument_list|()
operator|.
name|source
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getSourceInfo
argument_list|()
operator|.
name|source
operator|.
name|isValid
argument_list|(
name|broker
argument_list|)
operator|!=
name|Source
operator|.
name|Validity
operator|.
name|VALID
condition|)
block|{
name|urlCache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using cached entry for "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
block|}
name|void
name|clearCaches
parameter_list|()
block|{
name|urlCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Process a rewrite action. Method checks if the target path is mapped      * to another action in controller-config.xml. If yes, replaces the current action      * with the new action.      *      * @param action the URLRewrite action      * @param request the http request      * @param response the http response      */
specifier|private
name|void
name|doRewrite
parameter_list|(
name|URLRewrite
name|action
parameter_list|,
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|action
operator|.
name|getTarget
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|action
operator|instanceof
name|Redirect
operator|)
condition|)
block|{
specifier|final
name|String
name|uri
init|=
name|action
operator|.
name|resolve
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|URLRewrite
name|staticRewrite
init|=
name|rewriteConfig
operator|.
name|lookup
argument_list|(
name|uri
argument_list|,
name|request
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticRewrite
operator|!=
literal|null
condition|)
block|{
name|staticRewrite
operator|.
name|copyFrom
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|action
operator|=
name|staticRewrite
expr_stmt|;
specifier|final
name|RequestWrapper
name|modifiedRequest
init|=
operator|new
name|RequestWrapper
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|modifiedRequest
operator|.
name|setPaths
argument_list|(
name|uri
argument_list|,
name|action
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Forwarding to : "
operator|+
name|action
operator|.
name|toString
argument_list|()
operator|+
literal|" url: "
operator|+
name|action
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
name|modifiedRequest
expr_stmt|;
block|}
block|}
name|action
operator|.
name|prepareRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|action
operator|.
name|doRewrite
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ServletConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|private
name|URLRewrite
name|parseAction
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|Element
name|action
parameter_list|)
throws|throws
name|ServletException
block|{
specifier|final
name|URLRewrite
name|rewrite
decl_stmt|;
if|if
condition|(
literal|"forward"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|PathForward
argument_list|(
name|config
argument_list|,
name|action
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"redirect"
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|rewrite
operator|=
operator|new
name|Redirect
argument_list|(
name|action
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrite
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|rewrite
return|;
block|}
specifier|private
name|void
name|parseViews
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|Element
name|view
parameter_list|,
specifier|final
name|ModelAndView
name|modelView
parameter_list|)
throws|throws
name|ServletException
block|{
name|Node
name|node
init|=
name|view
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|ns
init|=
name|node
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
specifier|final
name|URLRewrite
name|urw
init|=
name|parseAction
argument_list|(
name|request
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|urw
operator|!=
literal|null
condition|)
block|{
name|modelView
operator|.
name|addView
argument_list|(
name|urw
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseErrorHandlers
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|Element
name|view
parameter_list|,
specifier|final
name|ModelAndView
name|modelView
parameter_list|)
throws|throws
name|ServletException
block|{
name|Node
name|node
init|=
name|view
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|ns
init|=
name|node
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
specifier|final
name|URLRewrite
name|urw
init|=
name|parseAction
argument_list|(
name|request
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|urw
operator|!=
literal|null
condition|)
block|{
name|modelView
operator|.
name|addErrorHandler
argument_list|(
name|urw
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configure
parameter_list|()
throws|throws
name|ServletException
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|driver
init|=
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|driver
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initialized database"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|errorMessage
init|=
literal|"Failed to initialize database driver"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|errorMessage
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Could not initialize db: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|defaultUser
operator|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
expr_stmt|;
specifier|final
name|String
name|username
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|password
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Subject
name|user
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|defaultUser
operator|=
name|user
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User can not be authenticated ("
operator|+
name|username
operator|+
literal|"), using default user."
argument_list|)
expr_stmt|;
block|}
block|}
name|authenticator
operator|=
operator|new
name|BasicAuthenticator
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logResult
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|result
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeValue
operator|)
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|config
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|SourceInfo
name|getSourceInfo
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|URLRewrite
name|staticRewrite
parameter_list|)
throws|throws
name|ServletException
block|{
specifier|final
name|String
name|moduleLoadPath
init|=
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|basePath
init|=
name|staticRewrite
operator|==
literal|null
condition|?
literal|"."
else|:
name|staticRewrite
operator|.
name|getTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|basePath
operator|==
literal|null
condition|)
block|{
return|return
name|getSource
argument_list|(
name|broker
argument_list|,
name|moduleLoadPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|findSource
argument_list|(
name|request
argument_list|,
name|broker
argument_list|,
name|basePath
argument_list|)
return|;
block|}
block|}
specifier|private
name|Sequence
name|runQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|ModelAndView
name|model
parameter_list|,
specifier|final
name|URLRewrite
name|staticRewrite
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|)
throws|throws
name|ServletException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
block|{
comment|// Try to find the XQuery
specifier|final
name|SourceInfo
name|sourceInfo
init|=
name|getSourceInfo
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|staticRewrite
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceInfo
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
comment|// no controller found
block|}
specifier|final
name|String
name|basePath
init|=
name|staticRewrite
operator|==
literal|null
condition|?
literal|"."
else|:
name|staticRewrite
operator|.
name|getTarget
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|xqyPool
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|compiledCache
condition|)
block|{
name|compiled
operator|=
name|xqyPool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|sourceInfo
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
specifier|final
name|XQueryContext
name|queryContext
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|queryContext
operator|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryContext
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|// Find correct module load path
name|queryContext
operator|.
name|setModuleLoadPath
argument_list|(
name|sourceInfo
operator|.
name|moduleLoadPath
argument_list|)
expr_stmt|;
name|declareVariables
argument_list|(
name|queryContext
argument_list|,
name|sourceInfo
argument_list|,
name|staticRewrite
argument_list|,
name|basePath
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|queryContext
argument_list|,
name|sourceInfo
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Failed to read query from "
operator|+
name|query
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|model
operator|.
name|setSourceInfo
argument_list|(
name|sourceInfo
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryContext
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|xqyPool
operator|.
name|returnCompiledXQuery
argument_list|(
name|sourceInfo
operator|.
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|adjustPathForSourceLookup
parameter_list|(
specifier|final
name|String
name|basePath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"request path="
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|basePath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|)
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|basePath
operator|.
name|replace
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
name|basePath
operator|.
name|replace
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/db/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"adjusted request path="
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|SourceInfo
name|findSource
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|basePath
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"basePath="
operator|+
name|basePath
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|requestURI
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|requestURI
operator|.
name|substring
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|=
name|adjustPathForSourceLookup
argument_list|(
name|basePath
argument_list|,
name|path
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|components
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking for "
operator|+
name|XQUERY_CONTROLLER_FILENAME
operator|+
literal|" in the database, starting from: "
operator|+
name|basePath
argument_list|)
expr_stmt|;
block|}
return|return
name|findSourceFromDb
argument_list|(
name|broker
argument_list|,
name|basePath
argument_list|,
name|path
argument_list|,
name|components
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking for "
operator|+
name|XQUERY_CONTROLLER_FILENAME
operator|+
literal|" in the filesystem, starting from: "
operator|+
name|basePath
argument_list|)
expr_stmt|;
block|}
return|return
name|findSourceFromFs
argument_list|(
name|basePath
argument_list|,
name|components
argument_list|)
return|;
block|}
block|}
specifier|private
annotation|@
name|Nullable
name|SourceInfo
name|findSourceFromDb
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|basePath
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
index|[]
name|components
parameter_list|)
block|{
name|DocumentImpl
name|controllerDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|XmldbURI
name|locationUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
name|XmldbURI
name|resourceUri
init|=
name|locationUri
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|component
range|:
name|components
control|)
block|{
name|resourceUri
operator|=
name|resourceUri
operator|.
name|append
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|controllerDoc
operator|=
name|findDbControllerXql
argument_list|(
name|broker
argument_list|,
name|locationUri
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|controllerDoc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XQueryURLRewrite controller could not be found for path: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found controller file: "
operator|+
name|controllerDoc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|controllerDoc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|||
operator|!
literal|"application/xquery"
operator|.
name|equals
argument_list|(
name|controllerDoc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XQuery resource: "
operator|+
name|query
operator|+
literal|" is not an XQuery or declares a wrong mime-type"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|controllerPath
init|=
name|controllerDoc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|getRawCollectionPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|SourceInfo
argument_list|(
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|controllerDoc
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"xmldb:exist://"
operator|+
name|controllerPath
argument_list|,
name|controllerPath
operator|.
name|substring
argument_list|(
name|locationUri
operator|.
name|getCollectionPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad URI for base path: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|controllerDoc
operator|!=
literal|null
condition|)
block|{
name|controllerDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Finds a `controller.xql` file within a Collection hierarchy.      * Most specific collections are considered first.      *      * For example, given the collectionUri `/db/apps`      * and the resourceUri /db/apps/myapp/data, the      * order or search will be:      *      * /db/apps/myapp/data/controller.xql      * /db/apps/myapp/controller.xql      * /db/apps/controller.xql      *      * @param broker         The database broker      * @param collectionUri  The root collection URI, below which we should not descend      * @param resourceUri The path to the most specific document or collection for which we should find a controller      * @return The most relevant controller.xql document (with a READ_LOCK), or null if it could not be found.      */
comment|//@tailrec
specifier|private
annotation|@
name|Nullable
name|DocumentImpl
name|findDbControllerXql
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|XmldbURI
name|resourceUri
parameter_list|)
block|{
if|if
condition|(
name|collectionUri
operator|.
name|compareTo
argument_list|(
name|resourceUri
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|resourceUri
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|XQUERY_CONTROLLER_URI
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
return|return
name|doc
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Permission denied while scanning for XQueryURLRewrite controllers: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LockException while scanning for XQueryURLRewrite controllers: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|getLock
argument_list|()
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resourceUri
operator|.
name|numSegments
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|XmldbURI
name|subResourceUri
init|=
name|resourceUri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
return|return
name|findDbControllerXql
argument_list|(
name|broker
argument_list|,
name|collectionUri
argument_list|,
name|subResourceUri
argument_list|)
return|;
block|}
specifier|private
name|SourceInfo
name|findSourceFromFs
parameter_list|(
specifier|final
name|String
name|basePath
parameter_list|,
specifier|final
name|String
index|[]
name|components
parameter_list|)
block|{
specifier|final
name|String
name|realPath
init|=
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|baseDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|realPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Base path for XQueryURLRewrite does not point to a directory"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Path
name|controllerFile
init|=
literal|null
decl_stmt|;
name|Path
name|subDir
init|=
name|baseDir
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|component
range|:
name|components
control|)
block|{
if|if
condition|(
operator|!
name|component
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subDir
operator|=
name|subDir
operator|.
name|resolve
argument_list|(
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|subDir
argument_list|)
condition|)
block|{
specifier|final
name|Path
name|cf
init|=
name|subDir
operator|.
name|resolve
argument_list|(
name|XQUERY_CONTROLLER_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|cf
argument_list|)
condition|)
block|{
name|controllerFile
operator|=
name|cf
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|controllerFile
operator|==
literal|null
condition|)
block|{
specifier|final
name|Path
name|cf
init|=
name|baseDir
operator|.
name|resolve
argument_list|(
name|XQUERY_CONTROLLER_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|cf
argument_list|)
condition|)
block|{
name|controllerFile
operator|=
name|cf
expr_stmt|;
block|}
block|}
if|if
condition|(
name|controllerFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XQueryURLRewrite controller could not be found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found controller file: "
operator|+
name|controllerFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|parentPath
init|=
name|controllerFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|controllerPath
init|=
name|parentPath
operator|.
name|substring
argument_list|(
name|baseDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// replace windows path separators
name|controllerPath
operator|=
name|controllerPath
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
return|return
operator|new
name|SourceInfo
argument_list|(
operator|new
name|FileSource
argument_list|(
name|controllerFile
argument_list|,
literal|true
argument_list|)
argument_list|,
name|parentPath
argument_list|,
name|controllerPath
argument_list|)
return|;
block|}
specifier|private
name|SourceInfo
name|getSource
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|moduleLoadPath
parameter_list|)
throws|throws
name|ServletException
block|{
specifier|final
name|SourceInfo
name|sourceInfo
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
comment|// Is the module source stored in the database?
try|try
block|{
specifier|final
name|XmldbURI
name|locationUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|DocumentImpl
name|sourceDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sourceDoc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|locationUri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"XQuery resource: "
operator|+
name|query
operator|+
literal|" not found in database"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sourceDoc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|||
operator|!
literal|"application/xquery"
operator|.
name|equals
argument_list|(
name|sourceDoc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"XQuery resource: "
operator|+
name|query
operator|+
literal|" is not an XQuery or "
operator|+
literal|"declares a wrong mime-type"
argument_list|)
throw|;
block|}
name|sourceInfo
operator|=
operator|new
name|SourceInfo
argument_list|(
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|sourceDoc
argument_list|,
literal|true
argument_list|)
argument_list|,
name|locationUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"permission denied to read module source from "
operator|+
name|query
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sourceDoc
operator|!=
literal|null
condition|)
block|{
name|sourceDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|sourceInfo
operator|=
operator|new
name|SourceInfo
argument_list|(
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|broker
argument_list|,
name|moduleLoadPath
argument_list|,
name|query
argument_list|,
literal|true
argument_list|)
argument_list|,
name|moduleLoadPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"IO error while reading XQuery source: "
operator|+
name|query
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Permission denied while reading XQuery source: "
operator|+
name|query
argument_list|)
throw|;
block|}
block|}
return|return
name|sourceInfo
return|;
block|}
specifier|private
name|void
name|declareVariables
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|SourceInfo
name|sourceInfo
parameter_list|,
specifier|final
name|URLRewrite
name|staticRewrite
parameter_list|,
specifier|final
name|String
name|basePath
parameter_list|,
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|HttpRequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
literal|"UTF-8"
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|HttpResponseWrapper
name|respw
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|response
argument_list|)
decl_stmt|;
comment|// context.declareNamespace(RequestModule.PREFIX,
comment|// RequestModule.NAMESPACE_URI);
name|context
operator|.
name|declareVariable
argument_list|(
name|RequestModule
operator|.
name|PREFIX
operator|+
literal|":request"
argument_list|,
name|reqw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|ResponseModule
operator|.
name|PREFIX
operator|+
literal|":response"
argument_list|,
name|respw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|,
name|reqw
operator|.
name|getSession
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:controller"
argument_list|,
name|sourceInfo
operator|.
name|controllerPath
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:controller"
argument_list|,
name|sourceInfo
operator|.
name|controllerPath
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:root"
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:root"
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:context"
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:context"
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|prefix
init|=
name|staticRewrite
operator|==
literal|null
condition|?
literal|null
else|:
name|staticRewrite
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:prefix"
argument_list|,
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:prefix"
argument_list|,
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
argument_list|)
expr_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|sourceInfo
operator|.
name|controllerPath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|sourceInfo
operator|.
name|controllerPath
argument_list|)
condition|)
block|{
name|path
operator|=
name|request
operator|.
name|getInContextPath
argument_list|()
operator|.
name|substring
argument_list|(
name|sourceInfo
operator|.
name|controllerPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|request
operator|.
name|getInContextPath
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|p
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|resource
init|=
literal|""
decl_stmt|;
specifier|final
name|Matcher
name|nameMatcher
init|=
name|NAME_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|resource
operator|=
name|nameMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|declareVariable
argument_list|(
literal|"exist:resource"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"$exist:resource"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\nexist:path = "
operator|+
name|path
operator|+
literal|"\nexist:resource = "
operator|+
name|resource
operator|+
literal|"\nexist:controller = "
operator|+
name|sourceInfo
operator|.
name|controllerPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ModelAndView
block|{
specifier|private
name|URLRewrite
name|rewrite
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|URLRewrite
argument_list|>
name|views
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|URLRewrite
argument_list|>
name|errorHandlers
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|useCache
init|=
literal|false
decl_stmt|;
specifier|private
name|SourceInfo
name|sourceInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|ModelAndView
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setSourceInfo
parameter_list|(
specifier|final
name|SourceInfo
name|sourceInfo
parameter_list|)
block|{
name|this
operator|.
name|sourceInfo
operator|=
name|sourceInfo
expr_stmt|;
block|}
specifier|public
name|SourceInfo
name|getSourceInfo
parameter_list|()
block|{
return|return
name|sourceInfo
return|;
block|}
specifier|public
name|void
name|setModel
parameter_list|(
specifier|final
name|URLRewrite
name|model
parameter_list|)
block|{
name|this
operator|.
name|rewrite
operator|=
name|model
expr_stmt|;
block|}
specifier|public
name|URLRewrite
name|getModel
parameter_list|()
block|{
return|return
name|rewrite
return|;
block|}
specifier|public
name|void
name|addErrorHandler
parameter_list|(
specifier|final
name|URLRewrite
name|handler
parameter_list|)
block|{
if|if
condition|(
name|errorHandlers
operator|==
literal|null
condition|)
block|{
name|errorHandlers
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|errorHandlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addView
parameter_list|(
name|URLRewrite
name|view
parameter_list|)
block|{
name|views
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasViews
parameter_list|()
block|{
return|return
name|views
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|boolean
name|hasErrorHandlers
parameter_list|()
block|{
return|return
name|errorHandlers
operator|!=
literal|null
operator|&&
name|errorHandlers
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|boolean
name|useCache
parameter_list|()
block|{
return|return
name|useCache
return|;
block|}
specifier|public
name|void
name|setUseCache
parameter_list|(
specifier|final
name|boolean
name|useCache
parameter_list|)
block|{
name|this
operator|.
name|useCache
operator|=
name|useCache
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SourceInfo
block|{
specifier|final
name|Source
name|source
decl_stmt|;
specifier|final
name|String
name|moduleLoadPath
decl_stmt|;
specifier|final
name|String
name|controllerPath
decl_stmt|;
specifier|private
name|SourceInfo
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|String
name|moduleLoadPath
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|moduleLoadPath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SourceInfo
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|String
name|moduleLoadPath
parameter_list|,
specifier|final
name|String
name|controllerPath
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|moduleLoadPath
operator|=
name|moduleLoadPath
expr_stmt|;
name|this
operator|.
name|controllerPath
operator|=
name|controllerPath
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RequestWrapper
extends|extends
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|addedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ServletInputStream
name|sis
init|=
literal|null
decl_stmt|;
specifier|private
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|int
name|contentLength
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|characterEncoding
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|method
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|inContextPath
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|servletPath
decl_stmt|;
specifier|private
name|String
name|basePath
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|allowCaching
init|=
literal|true
decl_stmt|;
specifier|private
name|void
name|addNameValue
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RequestWrapper
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// copy parameters
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|param
range|:
name|request
operator|.
name|getParameterMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|String
name|paramValue
range|:
name|param
operator|.
name|getValue
argument_list|()
control|)
block|{
name|addNameValue
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|paramValue
argument_list|,
name|addedParams
argument_list|)
expr_stmt|;
block|}
block|}
name|contentType
operator|=
name|request
operator|.
name|getContentType
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|allowCaching
parameter_list|(
specifier|final
name|boolean
name|cache
parameter_list|)
block|{
name|this
operator|.
name|allowCaching
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
name|String
name|uri
init|=
name|inContextPath
operator|==
literal|null
condition|?
name|super
operator|.
name|getRequestURI
argument_list|()
else|:
name|getContextPath
argument_list|()
operator|+
name|inContextPath
decl_stmt|;
comment|// Strip jsessionid from uris. New behavior of jetty
comment|// see jira.codehaus.org/browse/JETTY-1146
specifier|final
name|int
name|pos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|";jsessionid="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|public
name|String
name|getInContextPath
parameter_list|()
block|{
if|if
condition|(
name|inContextPath
operator|==
literal|null
condition|)
block|{
return|return
name|getRequestURI
argument_list|()
operator|.
name|substring
argument_list|(
name|getContextPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|inContextPath
return|;
block|}
specifier|public
name|void
name|setInContextPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|inContextPath
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getMethod
argument_list|()
return|;
block|}
return|return
name|method
return|;
block|}
specifier|public
name|void
name|setMethod
parameter_list|(
specifier|final
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
comment|/**          * Change the requestURI and the servletPath          *          * @param requestURI  the URI of the request without the context path          * @param servletPath the servlet path          */
specifier|public
name|void
name|setPaths
parameter_list|(
specifier|final
name|String
name|requestURI
parameter_list|,
specifier|final
name|String
name|servletPath
parameter_list|)
block|{
name|this
operator|.
name|inContextPath
operator|=
name|requestURI
expr_stmt|;
if|if
condition|(
name|servletPath
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|servletPath
operator|=
name|requestURI
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|servletPath
operator|=
name|servletPath
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setBasePath
parameter_list|(
specifier|final
name|String
name|base
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|base
expr_stmt|;
block|}
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
comment|/**          * Change the base path of the request, e.g. if the original request pointed          * to /fs/foo/baz, but the request should be forwarded to /foo/baz.          *          * @param base the base path to remove          */
specifier|public
name|void
name|removePathPrefix
parameter_list|(
specifier|final
name|String
name|base
parameter_list|)
block|{
name|setPaths
argument_list|(
name|getInContextPath
argument_list|()
operator|.
name|substring
argument_list|(
name|base
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|servletPath
operator|!=
literal|null
condition|?
name|servletPath
operator|.
name|substring
argument_list|(
name|base
operator|.
name|length
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
name|servletPath
operator|==
literal|null
condition|?
name|super
operator|.
name|getServletPath
argument_list|()
else|:
name|servletPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
specifier|final
name|String
name|path
init|=
name|getInContextPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sp
init|=
name|getServletPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|<
name|sp
operator|.
name|length
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Internal error: servletPath = "
operator|+
name|sp
operator|+
literal|" is longer than path = "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|path
operator|.
name|length
argument_list|()
operator|==
name|sp
operator|.
name|length
argument_list|()
condition|?
literal|null
else|:
name|path
operator|.
name|substring
argument_list|(
name|sp
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathTranslated
parameter_list|()
block|{
specifier|final
name|String
name|pathInfo
init|=
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathInfo
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|getPathTranslated
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pathInfo
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
name|super
operator|.
name|getSession
argument_list|()
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|pathInfo
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setData
parameter_list|(
annotation|@
name|Nullable
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|contentLength
operator|=
name|data
operator|.
name|length
expr_stmt|;
name|sis
operator|=
operator|new
name|CachingServletInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|addNameValue
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|addedParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
init|=
name|addedParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|!=
literal|null
operator|&&
name|paramValues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|paramValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getParameterMap
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|parameterMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|param
range|:
name|addedParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|param
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|parameterMap
operator|.
name|put
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameterMap
operator|.
name|put
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parameterMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|addedParams
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|addedParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ServletInputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sis
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getInputStream
argument_list|()
return|;
block|}
return|return
name|sis
return|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedReader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sis
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getReader
argument_list|()
return|;
block|}
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|sis
argument_list|,
name|getCharacterEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getContentType
argument_list|()
return|;
block|}
return|return
name|contentType
return|;
block|}
specifier|protected
name|void
name|setContentType
parameter_list|(
specifier|final
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getContentLength
parameter_list|()
block|{
if|if
condition|(
name|sis
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getContentLength
argument_list|()
return|;
block|}
return|return
name|contentLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCharacterEncoding
parameter_list|(
specifier|final
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|characterEncoding
operator|=
name|encoding
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
if|if
condition|(
name|characterEncoding
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getCharacterEncoding
argument_list|()
return|;
block|}
return|return
name|characterEncoding
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeader
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
literal|"If-Modified-Since"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
name|allowCaching
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|getHeader
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDateHeader
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
literal|"If-Modified-Since"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
name|allowCaching
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|super
operator|.
name|getDateHeader
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CachingResponseWrapper
extends|extends
name|HttpServletResponseWrapper
block|{
specifier|private
name|CachingServletOutputStream
name|sos
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|status
init|=
name|HttpServletResponse
operator|.
name|SC_OK
decl_stmt|;
specifier|private
name|String
name|contentType
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cache
decl_stmt|;
specifier|public
name|CachingResponseWrapper
parameter_list|(
specifier|final
name|HttpServletResponse
name|servletResponse
parameter_list|,
specifier|final
name|boolean
name|cache
parameter_list|)
block|{
name|super
argument_list|(
name|servletResponse
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrintWriter
name|getWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cache
condition|)
block|{
return|return
name|super
operator|.
name|getWriter
argument_list|()
return|;
block|}
if|if
condition|(
name|sos
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"getWriter cannnot be called after getOutputStream"
argument_list|)
throw|;
block|}
name|sos
operator|=
operator|new
name|CachingServletOutputStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|sos
argument_list|,
name|getCharacterEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServletOutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cache
condition|)
block|{
return|return
name|super
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"getOutputStream cannnot be called after getWriter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sos
operator|==
literal|null
condition|)
block|{
name|sos
operator|=
operator|new
name|CachingServletOutputStream
argument_list|()
expr_stmt|;
block|}
return|return
name|sos
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|sos
operator|!=
literal|null
condition|?
name|sos
operator|.
name|getData
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContentType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|contentType
operator|=
name|type
expr_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|super
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
operator|!=
literal|null
condition|?
name|contentType
else|:
name|super
operator|.
name|getContentType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
literal|"Content-Type"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|setContentType
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStatus
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|i
expr_stmt|;
name|super
operator|.
name|setStatus
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStatus
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|i
expr_stmt|;
name|super
operator|.
name|setStatus
argument_list|(
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|status
operator|=
name|i
expr_stmt|;
name|super
operator|.
name|sendError
argument_list|(
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|status
operator|=
name|i
expr_stmt|;
name|super
operator|.
name|sendError
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContentLength
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|super
operator|.
name|setContentLength
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|super
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
condition|)
block|{
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sos
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ServletOutputStream
name|out
init|=
name|super
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sos
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|CachingServletOutputStream
extends|extends
name|ServletOutputStream
block|{
specifier|private
name|FastByteArrayOutputStream
name|ostream
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|(
literal|512
argument_list|)
decl_stmt|;
specifier|protected
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|ostream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|ostream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|ostream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ostream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteListener
parameter_list|(
specifier|final
name|WriteListener
name|writeListener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CachingServletInputStream
extends|extends
name|ServletInputStream
block|{
specifier|private
specifier|final
name|FastByteArrayInputStream
name|istream
decl_stmt|;
specifier|public
name|CachingServletInputStream
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|istream
operator|=
operator|new
name|FastByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|istream
operator|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|istream
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|istream
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|istream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|istream
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|istream
operator|.
name|available
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadListener
parameter_list|(
specifier|final
name|ReadListener
name|readListener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

