begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id: ControllerForward.java 13439 2010-12-22 17:12:51Z wolfgang_m $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|ControllerForward
extends|extends
name|URLRewrite
block|{
comment|/**      * Adding server-name="www.example.com" to a root tag in the controller-config.xml file.<br/>      *<br/>      *  i.e.<br/>       *<br/>      *&lt;root server-name="example1.com" pattern="/*" path="xmldb:exist:///db/org/example1/"/&gt;<br/>      *&lt;root server-name="example2.com" pattern="/*" path="xmldb:exist:///db/org/example2/"/&gt;<br/>      *<br/>      *  Will redirect http://example1.com to /db/org/example1/<br/>      *  and http://example2.com to /db/org/example2/<br/>      *<br/>      *  If there is no server-name attribute on the root tag, then the server name is ignored while performing the URL rewriting.      *        */
specifier|private
name|String
name|serverName
init|=
literal|null
decl_stmt|;
specifier|public
name|ControllerForward
parameter_list|(
name|Element
name|config
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doRewrite
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isControllerForward
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateRequest
parameter_list|(
name|XQueryURLRewrite
operator|.
name|RequestWrapper
name|request
parameter_list|)
block|{
name|super
operator|.
name|updateRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|target
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|target
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|||
name|target
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
operator|)
condition|)
block|{
name|String
name|oldURI
init|=
name|request
operator|.
name|getInContextPath
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|target
operator|+
name|oldURI
decl_stmt|;
name|request
operator|.
name|setInContextPath
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rewriteRequest
parameter_list|(
name|XQueryURLRewrite
operator|.
name|RequestWrapper
name|request
parameter_list|)
block|{
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|target
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
name|XmldbURI
name|dbURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|this
operator|.
name|uri
operator|=
literal|"/rest"
expr_stmt|;
name|String
name|colPath
init|=
name|dbURI
operator|.
name|getCollectionPath
argument_list|()
decl_stmt|;
name|String
name|contextPath
init|=
name|request
operator|.
name|getInContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextPath
operator|.
name|startsWith
argument_list|(
name|colPath
argument_list|)
condition|)
name|colPath
operator|=
literal|""
expr_stmt|;
name|request
operator|.
name|setPaths
argument_list|(
literal|"/rest"
operator|+
name|colPath
operator|+
name|contextPath
argument_list|,
literal|"/rest"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBasePath
argument_list|(
literal|"/rest"
operator|+
name|colPath
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|XQueryURLRewrite
operator|.
name|RQ_ATTR
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setServerName
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
block|}
end_class

end_unit

