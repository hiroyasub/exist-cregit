begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|realm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|LifecycleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|realm
operator|.
name|GenericPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|XmldbPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_class
specifier|public
class|class
name|XmldbRealm
extends|extends
name|org
operator|.
name|apache
operator|.
name|catalina
operator|.
name|realm
operator|.
name|RealmBase
block|{
specifier|private
name|String
name|basedir
init|=
literal|"."
decl_stmt|;
specifier|private
name|String
name|configuration
init|=
literal|"conf.xml"
decl_stmt|;
specifier|private
name|String
name|uri
init|=
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
decl_stmt|;
specifier|private
name|String
name|driver
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
name|UserManagementService
name|service
init|=
literal|null
decl_stmt|;
specifier|private
name|Account
name|defaultUser
init|=
literal|null
decl_stmt|;
comment|/** 	 * Descriptive information about this Realm implementation. 	 */
specifier|protected
specifier|final
name|String
name|info
init|=
literal|"XMLDBRealm/1.0"
decl_stmt|;
comment|/** 	 * Descriptive information about this Realm implementation. 	 */
specifier|protected
specifier|static
specifier|final
name|String
name|name
init|=
literal|"XMLDBRealm"
decl_stmt|;
comment|/** 	 * Return descriptive information about this Realm implementation and the 	 * corresponding version number, in the format<code>&lt;description&gt;/&lt;version&gt;</code>. 	 */
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
comment|/** 	 * Return the Principal associated with the specified username and 	 * credentials, if there is one; otherwise return<code>null</code>. 	 *  	 * @param username 	 *            Username of the Principal to look up 	 * @param credentials 	 *            Password or other credentials to use in authenticating this 	 *            username 	 */
specifier|public
name|Principal
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|credentials
parameter_list|)
block|{
name|GenericPrincipal
name|principal
init|=
operator|(
name|GenericPrincipal
operator|)
name|getPrincipal
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|boolean
name|validated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasMessageDigest
argument_list|()
condition|)
block|{
comment|// Hex hashes should be compared case-insensitive
name|validated
operator|=
operator|(
name|digest
argument_list|(
name|credentials
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|principal
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|validated
operator|=
operator|(
name|digest
argument_list|(
name|credentials
argument_list|)
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|validated
condition|)
block|{
if|if
condition|(
name|debug
operator|>=
literal|2
condition|)
name|log
argument_list|(
name|sm
operator|.
name|getString
argument_list|(
literal|"userDatabaseRealm.authenticateSuccess"
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|principal
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|debug
operator|>=
literal|2
condition|)
name|log
argument_list|(
name|sm
operator|.
name|getString
argument_list|(
literal|"userDatabaseRealm.authenticateFailure"
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
comment|/** 	 * Return a short name for this Realm implementation. 	 */
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** 	 * Return the password associated with the given principal's user name. 	 */
specifier|protected
name|String
name|getPassword
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|GenericPrincipal
name|principal
init|=
operator|(
name|GenericPrincipal
operator|)
name|getPrincipal
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|principal
operator|.
name|getPassword
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
comment|/** 	 * Return the Principal associated with the given user name. 	 */
specifier|protected
name|Principal
name|getPrincipal
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|Account
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|service
operator|.
name|getUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|defaultUser
expr_stmt|;
block|}
comment|// Accumulate the list of roles for this user
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|groups
init|=
name|user
operator|.
name|getGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|groups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Principal
operator|)
operator|new
name|DefaultXmldbPrinciple
argument_list|(
name|this
argument_list|,
name|username
argument_list|,
name|user
operator|.
name|getPassword
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|protected
class|class
name|DefaultXmldbPrinciple
extends|extends
name|GenericPrincipal
implements|implements
name|XmldbPrincipal
block|{
specifier|public
name|DefaultXmldbPrinciple
parameter_list|(
name|Realm
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|,
name|List
name|arg3
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Prepare for active use of the public methods of this Component. 	 *  	 * @exception LifecycleException 	 *                if this component detects a fatal error that prevents it 	 *                from being started 	 */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|LifecycleException
block|{
try|try
block|{
name|URI
name|existURI
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|existURI
operator|.
name|getHost
argument_list|()
argument_list|)
operator|||
name|existURI
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|startExistDb
argument_list|()
expr_stmt|;
block|}
name|String
name|driver
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
decl_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to get collection
name|Collection
name|collection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
literal|"unable to resolve"
argument_list|)
throw|;
block|}
name|service
operator|=
operator|(
name|UserManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|defaultUser
operator|=
name|service
operator|.
name|getUser
argument_list|(
name|SecurityManager
operator|.
name|GUEST_USER
argument_list|)
expr_stmt|;
comment|/* initialize security */
name|boolean
name|admin
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|admin
condition|)
block|{
name|Account
name|adminUser
init|=
name|service
operator|.
name|getUser
argument_list|(
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|adminUser
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
name|adminUser
operator|.
name|setPassword
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Update Admin User on inital start"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// Perform normal superclass initialization
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.catalina.Lifecycle#stop() 	 */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|LifecycleException
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|startExistDb
parameter_list|()
throws|throws
name|LifecycleException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|BrokerPool
operator|.
name|isConfigured
argument_list|()
condition|)
block|{
name|this
operator|.
name|log
argument_list|(
literal|"Starting Database"
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
argument_list|(
literal|"exist.home="
operator|+
name|basedir
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
name|File
operator|.
name|separator
operator|+
name|configuration
argument_list|)
decl_stmt|;
name|this
operator|.
name|log
argument_list|(
literal|"reading configuration from "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|LifecycleException
argument_list|(
literal|"configuration file "
operator|+
name|configuration
operator|+
literal|" not found or not readable"
argument_list|)
throw|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|,
name|basedir
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LifecycleException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @return Returns the basedir. 	 */
specifier|public
name|String
name|getBasedir
parameter_list|()
block|{
return|return
name|basedir
return|;
block|}
comment|/** 	 * @param basedir The basedir to set. 	 */
specifier|public
name|void
name|setBasedir
parameter_list|(
name|String
name|basedir
parameter_list|)
block|{
name|this
operator|.
name|basedir
operator|=
name|basedir
expr_stmt|;
block|}
comment|/** 	 * @return Returns the configuration. 	 */
specifier|public
name|String
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/** 	 * @param configuration The configuration to set. 	 */
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/** 	 * @return Returns the driver. 	 */
specifier|public
name|String
name|getDriver
parameter_list|()
block|{
return|return
name|driver
return|;
block|}
comment|/** 	 * @param driver The driver to set. 	 */
specifier|public
name|void
name|setDriver
parameter_list|(
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
comment|/** 	 * @return Returns the uri. 	 */
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/** 	 * @param uri The uri to set. 	 */
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
block|}
end_class

end_unit

