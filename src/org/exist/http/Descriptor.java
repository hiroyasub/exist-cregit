begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-06 Wolfgang M.  * Meier meier@ifs.tu-darmstadt.de http://exist.sourceforge.net  *  * This program is free software; you can redistribute it and/or modify it  * under the terms of the GNU Lesser General Public License as published by the  * Free Software Foundation; either version 2 of the License, or (at your  * option) any later version.  *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation,  * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam.retter@devon.gov.uk>  *  * Class representation of an XQuery Web Application Descriptor file  *   */
end_comment

begin_class
specifier|public
class|class
name|Descriptor
implements|implements
name|ErrorHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Descriptor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Logger
specifier|private
name|String
name|file
init|=
literal|null
decl_stmt|;
comment|//descriptor file (descriptor.xml)
comment|//Data
specifier|private
name|String
name|allowSourceXQueryList
index|[]
init|=
literal|null
decl_stmt|;
comment|//Array of xql files to allow source to be viewed
specifier|private
name|String
name|mapList
index|[]
index|[]
init|=
literal|null
decl_stmt|;
comment|//Array of Mappings
comment|//Constructor (wrapper)
specifier|public
name|Descriptor
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|this
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//Constructor
specifier|public
name|Descriptor
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|dbHome
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|//firstly, try to read the Descriptor from a file within the classpath
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
name|Descriptor
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading descriptor from classloader"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Default file name
name|file
operator|=
literal|"descriptor.xml"
expr_stmt|;
block|}
comment|//otherise, secondly try to read Descriptor from file. Guess the location if necessary
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
comment|//try and read the Descriptor file from the specified home folder
name|File
name|f
init|=
name|Configuration
operator|.
name|lookup
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"giving up unable to read descriptor file"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|// initialize xml parser
comment|// we use eXist's in-memory DOM implementation to work
comment|// around a bug in Xerces
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
empty_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|//load<allow-source> settings
name|NodeList
name|allowsourcexqueries
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"allow-source"
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowsourcexqueries
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureAllowSourceXQuery
argument_list|(
operator|(
name|Element
operator|)
name|allowsourcexqueries
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//load<maps> settings
name|NodeList
name|maps
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"maps"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configureMaps
argument_list|(
operator|(
name|Element
operator|)
name|maps
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading descriptor file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|cfg
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading descriptor file: "
operator|+
name|file
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while reading descriptor file: "
operator|+
name|file
argument_list|,
name|io
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|//loads<allow-source> settings from the descriptor.xml file
specifier|private
name|void
name|configureAllowSourceXQuery
parameter_list|(
name|Element
name|allowsourcexqueries
parameter_list|)
block|{
comment|//Get the xquery element(s)
name|NodeList
name|nlXQuery
init|=
name|allowsourcexqueries
operator|.
name|getElementsByTagName
argument_list|(
literal|"xquery"
argument_list|)
decl_stmt|;
comment|//Setup the hashmap to hold the xquery elements
name|allowSourceXQueryList
operator|=
operator|new
name|String
index|[
name|nlXQuery
operator|.
name|getLength
argument_list|()
index|]
expr_stmt|;
name|Element
name|elem
init|=
literal|null
decl_stmt|;
comment|//temporary holds xquery elements
comment|//Iterate through the xquery elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlXQuery
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|nlXQuery
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|//<xquery>
name|String
name|path
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
comment|//@path
comment|//must be a path to allow source for
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error element 'xquery' requires an attribute 'path'"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//store the path
name|allowSourceXQueryList
index|[
name|i
index|]
operator|=
name|path
expr_stmt|;
block|}
block|}
comment|//loads<maps> settings from the descriptor.xml file
specifier|private
name|void
name|configureMaps
parameter_list|(
name|Element
name|maps
parameter_list|)
block|{
comment|//TODO: add pattern support for mappings, as an alternative to path - deliriumsky
comment|//Get the map element(s)
name|NodeList
name|nlMap
init|=
name|maps
operator|.
name|getElementsByTagName
argument_list|(
literal|"map"
argument_list|)
decl_stmt|;
comment|//Setup the hashmap to hold the map elements
name|mapList
operator|=
operator|new
name|String
index|[
name|nlMap
operator|.
name|getLength
argument_list|()
index|]
index|[
literal|2
index|]
expr_stmt|;
name|Element
name|elem
init|=
literal|null
decl_stmt|;
comment|//temporary holds map elements
comment|//Iterate through the map elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlMap
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|nlMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|//<map>
name|String
name|path
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
comment|//@path
comment|//String pattern = elem.getAttribute("pattern");//@pattern
name|String
name|view
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"view"
argument_list|)
decl_stmt|;
comment|//@view
comment|//must be a path or a pattern to map from
if|if
condition|(
name|path
operator|==
literal|null
comment|/*&& pattern == null*/
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error element 'map' requires an attribute 'path' or an attribute 'pattern'"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//must be a view to map to
if|if
condition|(
name|view
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error element 'map' requires an attribute 'view'"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//store what to map from
comment|/* if(path != null)             {*/
comment|//store the path
name|mapList
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|path
expr_stmt|;
comment|/*}             else             {             	//store the pattern             	mapList[i][0] = pattern;             }*/
comment|//store what to map to
name|mapList
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
name|view
expr_stmt|;
block|}
block|}
comment|//takes a path such as that from RESTServer.doGet()
comment|//if it finds a matching allowsourcexquery path then it returns true
comment|//else it returns false
specifier|public
name|boolean
name|allowSourceXQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|allowSourceXQueryList
operator|!=
literal|null
condition|)
block|{
comment|//Iterate through the xqueries that source viewing is allowed for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowSourceXQueryList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//does the path match the<allow-source><xquery path=""/></allow-source> path
if|if
condition|(
operator|(
name|allowSourceXQueryList
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
operator|||
operator|(
name|path
operator|.
name|indexOf
argument_list|(
name|allowSourceXQueryList
index|[
name|i
index|]
argument_list|)
operator|>
operator|-
literal|1
operator|)
condition|)
block|{
comment|//yes, return true
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//takes a path such as that from RESTServer.doGet()
comment|//if it finds a matching map path then it returns the map view
comment|//else it returns the passed in path
specifier|public
name|String
name|mapPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|mapList
operator|==
literal|null
condition|)
comment|//has a list of mappings been specified?
return|return
operator|(
name|path
operator|)
return|;
comment|//Iterate through the mappings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//does the path or the path/ match the map path
if|if
condition|(
name|mapList
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
operator|new
name|String
argument_list|(
name|mapList
index|[
name|i
index|]
index|[
literal|0
index|]
operator|+
literal|"/"
argument_list|)
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|//return the view
return|return
operator|(
name|mapList
index|[
name|i
index|]
index|[
literal|1
index|]
operator|)
return|;
block|}
block|}
comment|//no match return the original path
return|return
operator|(
name|path
operator|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading descriptor file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading descriptor file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error occured while reading descriptor file "
operator|+
literal|"[line: "
operator|+
name|exception
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]:"
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

