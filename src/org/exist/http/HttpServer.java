begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    22 May 2002  */
end_comment

begin_class
specifier|public
class|class
name|HttpServer
extends|extends
name|Thread
block|{
specifier|protected
specifier|static
name|int
name|port
init|=
literal|8080
decl_stmt|;
specifier|protected
specifier|static
name|String
name|basedir
init|=
literal|null
decl_stmt|;
specifier|protected
name|Configuration
name|config
init|=
literal|null
decl_stmt|;
specifier|protected
name|ConnectionPool
name|pool
decl_stmt|;
comment|//protected static StyleSheetCache styles = new HttpServer.StyleSheetCache();
specifier|protected
specifier|static
name|Category
name|LOG
init|=
name|Category
operator|.
name|getInstance
argument_list|(
literal|"exist.http"
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
comment|/**      *  Constructor for the HttpServer object      *      *@param  conf                Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|HttpServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|8088
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor for the HttpServer object      *      *@param  confFile                            Description of the Parameter      *@exception  EXistException                  Description of the Exception      *@exception  DatabaseConfigurationException  Description of the Exception      */
specifier|public
name|HttpServer
parameter_list|(
name|String
name|confFile
parameter_list|)
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|(
name|confFile
argument_list|)
argument_list|,
literal|8088
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor for the HttpServer object      *      *@param  conf                Description of the Parameter      *@param  port                Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|HttpServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|port
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor for the HttpServer object      *      *@param  conf                Description of the Parameter      *@param  port                Description of the Parameter      *@param  min                 Description of the Parameter      *@param  max                 Description of the Parameter      *@exception  EXistException  Description of the Exception      */
specifier|public
name|HttpServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|HttpServer
operator|.
name|port
operator|=
name|port
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getProperty
argument_list|(
literal|"port"
argument_list|)
operator|!=
literal|null
condition|)
name|port
operator|=
operator|(
operator|(
name|Integer
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"port"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|basedir
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|basedir
operator|=
literal|"."
expr_stmt|;
name|pool
operator|=
operator|new
name|ConnectionPool
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**  Main processing method for the HttpServer object */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServerSocket
name|sock
decl_stmt|;
try|try
block|{
name|sock
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setSoTimeout
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"listening at port "
operator|+
name|port
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stop
condition|)
try|try
block|{
name|Socket
name|s
init|=
name|sock
operator|.
name|accept
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"connection from "
operator|+
name|s
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|HttpServerConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|con
operator|.
name|process
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ie
parameter_list|)
block|{
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|sec
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|sec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
class|class
name|ConnectionPool
block|{
specifier|protected
name|Stack
name|pool
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|ArrayList
name|threads
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|min
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|max
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|connections
init|=
literal|0
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
comment|/**          *  Constructor for the ConnectionPool object          *          *@param  min   Description of the Parameter          *@param  max   Description of the Parameter          *@param  conf  Description of the Parameter          */
specifier|public
name|ConnectionPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
name|HttpServerConnection
name|con
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          *  Description of the Method          *          *@return    Description of the Return Value          */
specifier|protected
name|HttpServerConnection
name|createConnection
parameter_list|()
block|{
comment|//DBBroker broker = BrokerFactory.getInstance(conf);
name|HttpServerConnection
name|con
init|=
operator|new
name|HttpServerConnection
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|connections
operator|++
expr_stmt|;
return|return
name|con
return|;
block|}
comment|/**          *  Description of the Method          *          *@return    Description of the Return Value          */
specifier|public
specifier|synchronized
name|HttpServerConnection
name|get
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|connections
operator|<
name|max
condition|)
return|return
name|createConnection
argument_list|()
return|;
else|else
while|while
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for connection to become available"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|HttpServerConnection
name|con
init|=
operator|(
name|HttpServerConnection
operator|)
name|pool
operator|.
name|pop
argument_list|()
decl_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
name|con
return|;
block|}
comment|/**          *  Description of the Method          *          *@param  con  Description of the Parameter          */
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|HttpServerConnection
name|con
parameter_list|)
block|{
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**  Description of the Method */
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|threads
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|HttpServerConnection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|terminate
argument_list|()
expr_stmt|;
while|while
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|<
name|connections
condition|)
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printNotice
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist version 0.9.2, Copyright (C) 2001 Wolfgang M. Meier"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"eXist comes with ABSOLUTELY NO WARRANTY."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"This is free software, and you are welcome to "
operator|+
literal|"redistribute it\nunder certain conditions; "
operator|+
literal|"for details read the license file.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nType 'q[return]' to shutdown the server. Otherwise data may be lost.\n\n"
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  args  Description of the Parameter      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|printNotice
argument_list|()
expr_stmt|;
try|try
block|{
name|HttpServer
name|http
init|=
operator|new
name|HttpServer
argument_list|(
literal|"conf.xml"
argument_list|)
decl_stmt|;
name|http
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

