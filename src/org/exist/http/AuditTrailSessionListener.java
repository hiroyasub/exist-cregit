begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Executes an XQuery script whose filename is retrieved from the  * java option 'org.exist.http.session_create_listener' when an  * HTTP session is created and 'org.exist.http.session_destroy_listener'  * when an HTTP session is destroyed.  *  * If the java option is not set, then do nothing.  *  * If the java option is set, then retrieve the script from the file  * or resource designated by the value of the property.  Execute the  * XQuery script to record the creation or destruction of a HTTP session.  */
end_comment

begin_class
specifier|public
class|class
name|AuditTrailSessionListener
implements|implements
name|HttpSessionListener
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AuditTrailSessionListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGISTER_CREATE_XQUERY_SCRIPT_PROPERTY
init|=
literal|"org.exist.http.session_create_listener"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGISTER_DESTROY_XQUERY_SCRIPT_PROPERTY
init|=
literal|"org.exist.http.session_destroy_listener"
decl_stmt|;
comment|/**      *      * @param sessionEvent      */
specifier|public
name|void
name|sessionCreated
parameter_list|(
name|HttpSessionEvent
name|sessionEvent
parameter_list|)
block|{
specifier|final
name|HttpSession
name|session
init|=
name|sessionEvent
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"session created "
operator|+
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xqueryResourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|REGISTER_CREATE_XQUERY_SCRIPT_PROPERTY
argument_list|)
decl_stmt|;
name|executeXQuery
argument_list|(
name|xqueryResourcePath
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param sessionEvent      */
specifier|public
name|void
name|sessionDestroyed
parameter_list|(
name|HttpSessionEvent
name|sessionEvent
parameter_list|)
block|{
specifier|final
name|HttpSession
name|session
init|=
operator|(
name|sessionEvent
operator|!=
literal|null
operator|)
condition|?
name|sessionEvent
operator|.
name|getSession
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"destroy session "
operator|+
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"destroy session"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|xqueryResourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|REGISTER_DESTROY_XQUERY_SCRIPT_PROPERTY
argument_list|)
decl_stmt|;
name|executeXQuery
argument_list|(
name|xqueryResourcePath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeXQuery
parameter_list|(
name|String
name|xqueryResourcePath
parameter_list|)
block|{
if|if
condition|(
name|xqueryResourcePath
operator|!=
literal|null
operator|&&
name|xqueryResourcePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xqueryResourcePath
operator|=
name|xqueryResourcePath
operator|.
name|trim
argument_list|()
expr_stmt|;
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Subject
name|subject
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|Source
name|source
init|=
literal|null
decl_stmt|;
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|subject
operator|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
expr_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to retrieve DBBroker for "
operator|+
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|xqueryResourcePath
argument_list|)
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource ["
operator|+
name|xqueryResourcePath
operator|+
literal|"] exists."
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Resource ["
operator|+
name|xqueryResourcePath
operator|+
literal|"] does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
if|if
condition|(
name|xquery
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"broker unable to retrieve XQueryService"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|XQueryPool
name|xqpool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|xqpool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|pathUri
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
name|pathUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|updateContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|getWatchDog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
specifier|final
name|long
name|queryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XQuery execution results: "
operator|+
name|result
operator|.
name|toString
argument_list|()
operator|+
literal|" in "
operator|+
name|queryTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|xqpool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while executing ["
operator|+
name|xqueryResourcePath
operator|+
literal|"] script for "
operator|+
name|subject
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

