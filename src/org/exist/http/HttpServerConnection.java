begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database   * Copyright (C) 2001, Wolfgang M. Meier (wolfgang@exist-db.org)  *   * This library is free software; you can redistribute it and/or modify it  * under the terms of the GNU Library General Public License as published by  * the Free Software Foundation; either version 2 of the License, or (at your  * option) any later version.  *   * This library is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License  * for more details.  *   * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software Foundation,  * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
specifier|public
class|class
name|HttpServerConnection
extends|extends
name|RESTServer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
specifier|static
name|int
name|GET
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|HEAD
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|POST
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PUT
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DELETE
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|OK
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|WRONG_REQUEST
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PARSE_ERROR
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DOCUMENT_NOT_FOUND
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SYNTAX_ERROR
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|OUTPUT_ERROR
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|UNKNOWN_ERROR
init|=
literal|6
decl_stmt|;
comment|// HTTP response codes
specifier|public
specifier|final
specifier|static
name|int
name|HTTP_OK
init|=
literal|200
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HTTP_BAD_REQUEST
init|=
literal|400
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HTTP_FORBIDDEN
init|=
literal|403
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HTTP_NOT_FOUND
init|=
literal|404
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HTTP_INTERNAL_ERROR
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|stdHeaders
init|=
literal|"Allow: POST GET PUT DELETE\n"
operator|+
literal|"Server: eXist\n"
operator|+
literal|"Cache-control: no-cache\n"
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|protected
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
specifier|protected
name|HttpServer
operator|.
name|ConnectionPool
name|pool
decl_stmt|;
specifier|protected
name|Socket
name|sock
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|terminate
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|tmpDir
init|=
literal|null
decl_stmt|;
specifier|protected
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|xslStyle
init|=
literal|null
decl_stmt|;
specifier|public
name|HttpServerConnection
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|HttpServer
operator|.
name|ConnectionPool
name|pool
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
if|if
condition|(
operator|(
name|tmpDir
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"tmpDir"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|tmpDir
operator|=
literal|"/tmp"
expr_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|User
name|checkUser
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
comment|// check user
name|user
operator|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|user
operator|.
name|validate
argument_list|(
name|password
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|user
return|;
block|}
specifier|protected
name|void
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|errorReply
argument_list|(
name|HTTP_FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
name|HashMap
name|parameters
decl_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|parameters
operator|=
name|processParameters
argument_list|(
name|name
operator|.
name|substring
argument_list|(
operator|++
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|parameters
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|doGet
argument_list|(
name|broker
argument_list|,
name|parameters
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|put
parameter_list|(
name|File
name|tempFile
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|docPath
parameter_list|)
block|{
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|doPut
argument_list|(
name|broker
argument_list|,
name|tempFile
argument_list|,
name|contentType
argument_list|,
name|docPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|doDelete
argument_list|(
name|broker
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"permission denied to remove "
operator|+
name|path
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|post
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|len
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|doPost
argument_list|(
name|broker
argument_list|,
name|content
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeResponse
parameter_list|(
name|Response
name|resp
parameter_list|)
block|{
try|try
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resp
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO exception while writing response output"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|errorReply
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|errorReply
argument_list|(
name|code
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|errorReply
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|StringBuffer
name|content
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|content
operator|.
name|append
argument_list|(
literal|"<h1>HTTP/1.0 400 Bad Request</h1>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|content
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"HTTP/1.0 400 "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|stdHeaders
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Content-Type: text/html\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Content-Length: "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BAD_REQUEST"
argument_list|)
expr_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Response
name|statusReport
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|HTTP_OK
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|NS
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:message>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:message>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:result>"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContent
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|protected
name|String
name|printSummary
parameter_list|(
name|NodeList
name|resultSet
parameter_list|,
name|long
name|queryTime
parameter_list|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"nothing found"
return|;
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|doctypes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|doc
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|doc
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
operator|(
name|DoctypeCount
operator|)
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeSet
name|temp
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\""
operator|+
name|NS
operator|+
literal|"\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" queryTime=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|queryTime
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:document name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" id=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|count
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|DoctypeCount
name|docTemp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|doctypes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|docTemp
operator|=
operator|(
name|DoctypeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:doctype name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|Socket
name|sock
parameter_list|)
block|{
name|this
operator|.
name|sock
operator|=
name|sock
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|HashMap
name|processParameters
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|HashMap
name|parameters
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
name|param
decl_stmt|;
name|String
name|value
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|0
decl_stmt|;
name|int
name|l
init|=
name|args
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|start
operator|<
name|l
operator|)
operator|&&
operator|(
name|end
operator|<
name|l
operator|)
condition|)
block|{
while|while
condition|(
operator|(
name|end
operator|<
name|l
operator|)
operator|&&
operator|(
name|args
operator|.
name|charAt
argument_list|(
name|end
operator|++
argument_list|)
operator|!=
literal|'='
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|end
operator|==
name|l
condition|)
break|break;
name|param
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
while|while
condition|(
operator|(
name|end
operator|<
name|l
operator|)
operator|&&
operator|(
name|args
operator|.
name|charAt
argument_list|(
name|end
operator|++
argument_list|)
operator|!=
literal|'&'
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|end
operator|==
name|l
condition|)
name|value
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|)
expr_stmt|;
else|else
name|value
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|param
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|value
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"parameter: "
operator|+
name|param
operator|+
literal|" = "
operator|+
name|value
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
comment|/** 	 * Main processing method for the HttpServerConnection object 	 *  	 * @throws RuntimeException 	 *                    DOCUMENT ME! 	 */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|req
decl_stmt|;
name|String
name|first
decl_stmt|;
name|String
name|line
decl_stmt|;
name|String
name|contentType
init|=
literal|"text/xml"
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
name|int
name|method
init|=
name|HTTP_BAD_REQUEST
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|input
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|brokerPool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// the main loop of this thread
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
operator|(
name|sock
operator|==
literal|null
operator|)
operator|&&
operator|!
name|terminate
condition|)
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|terminate
condition|)
break|break;
try|try
block|{
name|DataInputStream
name|is
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|len
operator|=
operator|-
literal|1
expr_stmt|;
name|contentType
operator|=
literal|"text/xml"
expr_stmt|;
comment|// parse http-header
while|while
condition|(
literal|true
condition|)
block|{
name|req
operator|=
name|is
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
break|break;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|req
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
break|break;
name|first
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
name|method
operator|=
name|GET
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
name|method
operator|=
name|POST
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|method
operator|=
name|HEAD
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
condition|)
block|{
name|method
operator|=
name|PUT
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"DELETE"
argument_list|)
condition|)
block|{
name|method
operator|=
name|DELETE
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CONTENT-LENGTH:"
argument_list|)
condition|)
block|{
try|try
block|{
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nf
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|nf
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CONTENT-TYPE:"
argument_list|)
condition|)
name|contentType
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"AUTHORIZATION:"
argument_list|)
condition|)
block|{
name|String
name|auth
init|=
name|req
operator|.
name|substring
argument_list|(
literal|"AUTHORIZATION:"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|byte
index|[]
name|c
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|auth
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|int
name|p
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|username
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|password
operator|=
name|s
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|user
operator|=
name|checkUser
argument_list|(
name|brokerPool
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
name|method
operator|=
name|HTTP_FORBIDDEN
expr_stmt|;
block|}
block|}
comment|// get request body
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|count
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|method
operator|==
name|PUT
condition|)
block|{
comment|// put may send a lot of data, so save it
comment|// to a temporary file first.
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"exist"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
do|do
block|{
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|l
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|<
name|len
condition|)
do|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
do|do
block|{
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|input
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|<
name|len
condition|)
do|;
block|}
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
comment|// no user specified: assume guest identity
name|user
operator|=
operator|new
name|User
argument_list|(
literal|"guest"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// select method
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|HTTP_FORBIDDEN
case|:
name|errorReply
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
literal|"Permission denied."
argument_list|)
expr_stmt|;
break|break;
case|case
name|HTTP_BAD_REQUEST
case|:
name|errorReply
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET
case|:
name|get
argument_list|(
name|name
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST
case|:
name|post
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|,
name|len
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|put
argument_list|(
name|tempFile
argument_list|,
name|contentType
argument_list|,
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|delete
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
default|default :
name|errorReply
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
name|user
operator|=
literal|null
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|input
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|sock
operator|=
literal|null
expr_stmt|;
name|xslStyle
operator|=
literal|null
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|terminate
parameter_list|()
block|{
name|terminate
operator|=
literal|true
expr_stmt|;
block|}
class|class
name|DoctypeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
comment|/** 		 * Constructor for the DoctypeCount object 		 *  		 * @param doctype 		 *                   Description of the Parameter 		 */
specifier|public
name|DoctypeCount
parameter_list|(
name|DocumentType
name|doctype
parameter_list|)
block|{
name|this
operator|.
name|doctype
operator|=
name|doctype
expr_stmt|;
block|}
comment|/** 		 * Description of the Method 		 */
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
class|class
name|NodeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
comment|/** 		 * Constructor for the NodeCount object 		 *  		 * @param doc 		 *                   Description of the Parameter 		 */
specifier|public
name|NodeCount
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
comment|/** 		 * Description of the Method 		 */
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

