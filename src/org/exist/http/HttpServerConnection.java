begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RelationalBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|ValueSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  * Description of the Class  *  * @author Wolfgang Meier  *  */
end_comment

begin_class
specifier|public
class|class
name|HttpServerConnection
extends|extends
name|Thread
block|{
specifier|private
specifier|final
specifier|static
name|String
name|NS
init|=
literal|"http://exist.sourceforge.net/NS/exist"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|GET
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|HEAD
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|POST
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PUT
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|BAD_REQUEST
init|=
literal|400
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|FORBIDDEN
init|=
literal|403
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NOT_FOUND
init|=
literal|404
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|OK
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|WRONG_REQUEST
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PARSE_ERROR
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DOCUMENT_NOT_FOUND
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SYNTAX_ERROR
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|OUTPUT_ERROR
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|UNKNOWN_ERROR
init|=
literal|6
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|stdHeaders
init|=
literal|"Allow: POST GET PUT\n"
operator|+
literal|"Server: eXist 0.6\n"
operator|+
literal|"Cache-control: no-cache\n"
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|protected
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
specifier|protected
name|XPathParser
name|parser
decl_stmt|;
specifier|protected
name|HttpServer
operator|.
name|ConnectionPool
name|pool
decl_stmt|;
specifier|protected
name|SAXParser
name|sax
init|=
literal|null
decl_stmt|;
specifier|protected
name|Socket
name|sock
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|terminate
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|tmpDir
init|=
literal|null
decl_stmt|;
specifier|protected
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|xslStyle
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor for the HttpServerConnection object      *      * @param config Description of the Parameter      * @param pool Description of the Parameter      */
specifier|public
name|HttpServerConnection
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|HttpServer
operator|.
name|ConnectionPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
comment|//this.broker = broker;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
if|if
condition|(
operator|(
name|tmpDir
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"tmpDir"
argument_list|)
operator|)
operator|==
literal|null
condition|)
name|tmpDir
operator|=
literal|"/tmp"
expr_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|(  )
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SAXParserFactory
name|saxFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|(  )
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|(  )
expr_stmt|;
name|sax
operator|=
name|saxFactory
operator|.
name|newSAXParser
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|User
name|checkUser
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
comment|// check user
name|user
operator|=
name|pool
operator|.
name|getSecurityManager
argument_list|(  )
operator|.
name|getUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|user
operator|.
name|validate
argument_list|(
name|password
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|user
return|;
block|}
comment|/**      * Description of the Method      *      * @param parameters Description of the Parameter      * @param name Description of the Parameter      * @param len Description of the Parameter      */
specifier|protected
name|void
name|doGet
parameter_list|(
name|HashMap
name|parameters
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|summary
init|=
literal|false
decl_stmt|;
name|boolean
name|indent
init|=
literal|false
decl_stmt|;
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_encoding"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_xpath"
argument_list|)
decl_stmt|;
name|String
name|stylesheet
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_xsl"
argument_list|)
decl_stmt|;
name|String
name|p_howmany
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_howmany"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
if|if
condition|(
name|p_howmany
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_howmany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
block|}
name|String
name|p_start
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_start
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
block|}
name|String
name|p_summary
decl_stmt|;
name|String
name|p_indent
decl_stmt|;
if|if
condition|(
operator|(
name|p_summary
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_summarize"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|summary
operator|=
name|p_summary
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p_indent
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_indent"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|indent
operator|=
name|p_indent
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|data
decl_stmt|;
try|try
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"document("
argument_list|)
operator|||
name|query
operator|.
name|startsWith
argument_list|(
literal|"collection"
argument_list|)
operator|||
name|query
operator|.
name|startsWith
argument_list|(
literal|"doctype("
argument_list|)
operator|)
condition|)
block|{
name|Collection
name|parent
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
name|query
operator|=
literal|"document('"
operator|+
name|name
operator|+
literal|"')"
operator|+
name|query
expr_stmt|;
else|else
name|query
operator|=
literal|"collection('"
operator|+
name|parent
operator|.
name|getName
argument_list|(  )
operator|+
literal|"')"
operator|+
name|query
expr_stmt|;
block|}
name|data
operator|=
name|search
argument_list|(
name|query
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|summary
argument_list|,
name|indent
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// print collection contents
name|DocumentSet
name|docs
init|=
name|broker
operator|.
name|getDocumentsByCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|docs
operator|.
name|getNames
argument_list|(  )
decl_stmt|;
name|data
operator|=
name|printCollection
argument_list|(
name|name
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
name|data
operator|=
name|formatErrorMsg
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|,
name|DOCUMENT_NOT_FOUND
argument_list|)
expr_stmt|;
else|else
block|{
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|(  )
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|(  )
expr_stmt|;
name|serializer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setIndent
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|d
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|data
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
name|data
operator|=
name|formatErrorMsg
argument_list|(
literal|"error while serializing xml: "
operator|+
name|saxe
operator|.
name|toString
argument_list|(  )
argument_list|,
name|OUTPUT_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|data
operator|=
name|formatErrorMsg
argument_list|(
literal|"permission denied: "
operator|+
name|e
operator|.
name|getMessage
argument_list|(  )
argument_list|,
name|OUTPUT_ERROR
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|byte
index|[]
name|resultData
init|=
name|data
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|(  )
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"HTTP/1.0 200 OK\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|==
literal|null
condition|)
name|out
operator|.
name|writeBytes
argument_list|(
literal|"Content-Type: text/xml\n"
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeBytes
argument_list|(
literal|"Content-Type: text/html\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|stdHeaders
operator|+
literal|"Content-Length: "
operator|+
name|resultData
operator|.
name|length
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|resultData
argument_list|,
literal|0
argument_list|,
name|resultData
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(  )
expr_stmt|;
name|out
operator|.
name|close
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of the Method      *      * @param request Description of the Parameter      * @param name Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|doPost
parameter_list|(
name|String
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
operator|(
name|name
operator|.
name|length
argument_list|(  )
operator|-
literal|1
operator|)
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|name
operator|=
literal|null
expr_stmt|;
name|boolean
name|indent
init|=
literal|true
decl_stmt|;
name|boolean
name|summary
init|=
literal|false
decl_stmt|;
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
name|NodeList
name|tmpList
decl_stmt|;
name|Element
name|temp
decl_stmt|;
try|try
block|{
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|(  )
decl_stmt|;
comment|// process<exist:request>
if|if
condition|(
name|root
operator|.
name|getTagName
argument_list|(  )
operator|.
name|equals
argument_list|(
literal|"exist:request"
argument_list|)
condition|)
block|{
comment|// process<display indent="true|false" start="start" howmany="howmany">
name|tmpList
operator|=
name|root
operator|.
name|getElementsByTagNameNS
argument_list|(
name|NS
argument_list|,
literal|"display"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|==
literal|0
condition|)
block|{
name|tmpList
operator|=
name|root
operator|.
name|getElementsByTagNameNS
argument_list|(
name|NS
argument_list|,
literal|"summarize"
argument_list|)
expr_stmt|;
name|summary
operator|=
operator|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|>
literal|0
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|>
literal|0
condition|)
block|{
name|temp
operator|=
operator|(
name|Element
operator|)
name|tmpList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|p_indent
init|=
name|temp
operator|.
name|getAttribute
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
name|indent
operator|=
name|p_indent
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|p_howmany
init|=
name|temp
operator|.
name|getAttribute
argument_list|(
literal|"howmany"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_howmany
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_howmany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|howmany
operator|=
literal|15
expr_stmt|;
block|}
block|}
name|String
name|p_start
init|=
name|temp
operator|.
name|getAttribute
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_start
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|start
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
comment|// process<get document="docName" indent="true|false"/>
name|tmpList
operator|=
name|root
operator|.
name|getElementsByTagNameNS
argument_list|(
name|NS
argument_list|,
literal|"get"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|>
literal|0
condition|)
block|{
name|temp
operator|=
operator|(
name|Element
operator|)
name|tmpList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|docName
init|=
name|temp
operator|.
name|getAttribute
argument_list|(
literal|"document"
argument_list|)
decl_stmt|;
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"document "
operator|+
name|docName
operator|+
literal|" not found!"
argument_list|,
name|DOCUMENT_NOT_FOUND
argument_list|)
return|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|(  )
decl_stmt|;
if|if
condition|(
name|indent
condition|)
block|{
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|(  )
decl_stmt|;
name|OutputFormat
name|format
init|=
operator|new
name|OutputFormat
argument_list|(
literal|"xml"
argument_list|,
literal|"UTF-8"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|format
operator|.
name|setOmitXMLDeclaration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setOmitComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|.
name|setLineWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|XMLSerializer
name|xmlout
init|=
operator|new
name|XMLSerializer
argument_list|(
name|sout
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setContentHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setLexicalHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|toSAX
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
return|return
name|formatErrorMsg
argument_list|(
literal|"error while pretty printing xml: "
operator|+
name|saxe
operator|.
name|toString
argument_list|(  )
argument_list|,
name|OUTPUT_ERROR
argument_list|)
return|;
block|}
return|return
name|sout
operator|.
name|toString
argument_list|(  )
return|;
block|}
else|else
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|// process<query>xpathQuery</query>
name|tmpList
operator|=
name|root
operator|.
name|getElementsByTagNameNS
argument_list|(
name|NS
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"found: query"
argument_list|)
expr_stmt|;
name|temp
operator|=
operator|(
name|Element
operator|)
name|tmpList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|temp
operator|.
name|getFirstChild
argument_list|(  )
decl_stmt|;
name|query
operator|=
name|text
operator|.
name|getData
argument_list|(  )
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|query
operator|.
name|startsWith
argument_list|(
literal|"document("
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|query
operator|.
name|startsWith
argument_list|(
literal|"doctype("
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|name
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|name
operator|.
name|length
argument_list|(  )
operator|>
literal|0
operator|)
condition|)
name|query
operator|=
literal|"document(\""
operator|+
name|name
operator|+
literal|"\")"
operator|+
name|query
expr_stmt|;
else|else
name|query
operator|=
literal|"document(*)"
operator|+
name|query
expr_stmt|;
block|}
block|}
comment|// process<remove document="docName"/>
name|tmpList
operator|=
name|root
operator|.
name|getElementsByTagNameNS
argument_list|(
name|NS
argument_list|,
literal|"remove"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpList
operator|.
name|getLength
argument_list|(  )
operator|>
literal|0
condition|)
block|{
name|temp
operator|=
operator|(
name|Element
operator|)
name|tmpList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|docName
init|=
name|temp
operator|.
name|getAttribute
argument_list|(
literal|"document"
argument_list|)
decl_stmt|;
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"document "
operator|+
name|docName
operator|+
literal|" not found!"
argument_list|,
name|DOCUMENT_NOT_FOUND
argument_list|)
return|;
name|broker
operator|.
name|removeDocument
argument_list|(
name|docName
argument_list|)
expr_stmt|;
return|return
name|formatErrorMsg
argument_list|(
literal|"removed document "
operator|+
name|docName
argument_list|,
name|OK
argument_list|)
return|;
block|}
comment|// execute query
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|result
operator|=
name|search
argument_list|(
name|query
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|summary
argument_list|,
name|indent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
name|result
operator|=
name|formatErrorMsg
argument_list|(
literal|"not a valid request"
argument_list|,
name|WRONG_REQUEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
name|e
operator|.
name|getException
argument_list|(  )
operator|.
name|toString
argument_list|(  )
argument_list|,
name|WRONG_REQUEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(  )
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
name|e
operator|.
name|toString
argument_list|(  )
argument_list|,
name|WRONG_REQUEST
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Description of the Method      *      * @param code Description of the Parameter      */
specifier|protected
name|void
name|errorReply
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|errorReply
argument_list|(
name|code
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param code Description of the Parameter      * @param message Description of the Parameter      */
specifier|protected
name|void
name|errorReply
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|StringBuffer
name|content
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|content
operator|.
name|append
argument_list|(
literal|"<h1>HTTP/1.0 400 Bad Request</h1>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|content
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"HTTP/1.0 400 Bad Request\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|stdHeaders
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Content-Type: text/html\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Content-Length: "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|content
operator|.
name|length
argument_list|(  )
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"BAD_REQUEST"
argument_list|)
expr_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|(  )
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|msg
operator|.
name|toString
argument_list|(  )
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(  )
expr_stmt|;
name|out
operator|.
name|close
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of the Method      *      * @param message Description of the Parameter      * @param status Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|formatErrorMsg
parameter_list|(
name|String
name|message
parameter_list|,
name|int
name|status
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\"0\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"errcode=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:message>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:message>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:result>"
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|(  )
return|;
block|}
comment|/**      * Description of the Method      *      * @param name Description of the Parameter      * @param len Description of the Parameter      */
specifier|protected
name|void
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|errorReply
argument_list|(
name|FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
name|HashMap
name|parameters
decl_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|parameters
operator|=
name|processParameters
argument_list|(
name|name
operator|.
name|substring
argument_list|(
operator|++
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|parameters
operator|=
operator|new
name|HashMap
argument_list|(  )
expr_stmt|;
name|doGet
argument_list|(
name|parameters
argument_list|,
name|name
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param input Description of the Parameter      * @param name Description of the Parameter      * @param len Description of the Parameter      * @param contentType Description of the Parameter      */
specifier|protected
name|void
name|post
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|String
name|result
init|=
name|doPost
argument_list|(
name|input
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|(  )
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"HTTP/1.0 200 OK\n"
operator|+
name|stdHeaders
operator|+
literal|"Content-Type: text/xml\n"
operator|+
literal|"Content-Length: "
operator|+
name|result
operator|.
name|length
argument_list|(  )
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|resultData
init|=
name|result
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|resultData
argument_list|,
literal|0
argument_list|,
name|resultData
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(  )
expr_stmt|;
name|out
operator|.
name|close
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of the Method      *      * @param resultSet Description of the Parameter      * @param howmany Description of the Parameter      * @param start Description of the Parameter      * @param queryTime Description of the Parameter      * @param indent Description of the Parameter      * @param stylesheet Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|printAll
parameter_list|(
name|NodeList
name|resultSet
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|long
name|queryTime
parameter_list|,
name|boolean
name|indent
parameter_list|,
name|String
name|stylesheet
parameter_list|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|==
literal|0
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"nothing found!"
argument_list|,
name|OK
argument_list|)
return|;
name|Node
name|n
decl_stmt|;
name|Node
name|nn
decl_stmt|;
name|Element
name|temp
decl_stmt|;
name|DocumentImpl
name|owner
decl_stmt|;
if|if
condition|(
operator|(
name|howmany
operator|>
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|)
operator|||
operator|(
name|howmany
operator|==
literal|0
operator|)
condition|)
name|howmany
operator|=
name|resultSet
operator|.
name|getLength
argument_list|(  )
expr_stmt|;
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|)
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"start parameter out of range"
argument_list|,
name|WRONG_REQUEST
argument_list|)
return|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|(  )
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|(  )
expr_stmt|;
name|serializer
operator|.
name|setIndent
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeSet
operator|)
name|resultSet
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|queryTime
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
return|return
name|formatErrorMsg
argument_list|(
literal|"error while serializing xml: "
operator|+
name|saxe
operator|.
name|toString
argument_list|(  )
argument_list|,
name|OUTPUT_ERROR
argument_list|)
return|;
block|}
block|}
comment|/**      * Description of the Method      *      * @param collection Description of the Parameter      * @param names Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|printCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
index|[]
name|names
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"xmlns:exist=\"http://exist.sourceforge.net/NS/exist\">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:collection name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:document name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:collection></exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|(  )
return|;
block|}
comment|/**      * Description of the Method      *      * @param resultSet Description of the Parameter      * @param queryTime Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|printSummary
parameter_list|(
name|NodeList
name|resultSet
parameter_list|,
name|long
name|queryTime
parameter_list|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|==
literal|0
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"nothing found"
argument_list|,
name|OK
argument_list|)
return|;
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|(  )
decl_stmt|;
name|HashMap
name|doctypes
init|=
operator|new
name|HashMap
argument_list|(  )
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|(  )
init|;
name|i
operator|.
name|hasNext
argument_list|(  )
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|(  )
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|(  )
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|doc
operator|.
name|getDoctype
argument_list|(  )
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|(  )
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|doc
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|(  )
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
operator|(
name|DoctypeCount
operator|)
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|(  )
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|(  )
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|(  )
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeSet
name|temp
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" queryTime=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|queryTime
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|(  )
operator|.
name|iterator
argument_list|(  )
init|;
name|i
operator|.
name|hasNext
argument_list|(  )
condition|;
control|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|i
operator|.
name|next
argument_list|(  )
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:document name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getFileName
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" id=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getDocId
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|counter
operator|.
name|count
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|DoctypeCount
name|docTemp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|doctypes
operator|.
name|values
argument_list|(  )
operator|.
name|iterator
argument_list|(  )
init|;
name|i
operator|.
name|hasNext
argument_list|(  )
condition|;
control|)
block|{
name|docTemp
operator|=
operator|(
name|DoctypeCount
operator|)
name|i
operator|.
name|next
argument_list|(  )
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:doctype name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|(  )
return|;
block|}
comment|/**      * Description of the Method      *      * @param resultSet Description of the Parameter      * @param howmany Description of the Parameter      * @param start Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|printValues
parameter_list|(
name|ValueSet
name|resultSet
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|==
literal|0
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"nothing found"
argument_list|,
name|OK
argument_list|)
return|;
if|if
condition|(
operator|(
name|howmany
operator|>
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|)
operator|||
operator|(
name|howmany
operator|==
literal|0
operator|)
condition|)
name|howmany
operator|=
name|resultSet
operator|.
name|getLength
argument_list|(  )
expr_stmt|;
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|resultSet
operator|.
name|getLength
argument_list|(  )
operator|)
condition|)
return|return
name|formatErrorMsg
argument_list|(
literal|"start parameter out of range"
argument_list|,
name|WRONG_REQUEST
argument_list|)
return|;
name|Value
name|value
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|String
name|elem
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|-
literal|1
init|;
name|i
operator|<
operator|(
operator|(
name|start
operator|+
name|howmany
operator|)
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|=
name|resultSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|value
operator|.
name|getType
argument_list|(  )
condition|)
block|{
case|case
name|Value
operator|.
name|isNumber
case|:
name|elem
operator|=
literal|"exist:number"
expr_stmt|;
break|break;
case|case
name|Value
operator|.
name|isString
case|:
name|elem
operator|=
literal|"exist:string"
expr_stmt|;
break|break;
case|case
name|Value
operator|.
name|isBoolean
case|:
name|elem
operator|=
literal|"exist:boolean"
expr_stmt|;
break|break;
default|default:
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"unknown type: "
operator|+
name|value
operator|.
name|getType
argument_list|(  )
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" value=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|(  )
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|(  )
return|;
block|}
comment|/**      * Description of the Method      *      * @param sock Description of the Parameter      */
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|Socket
name|sock
parameter_list|)
block|{
name|this
operator|.
name|sock
operator|=
name|sock
expr_stmt|;
name|notifyAll
argument_list|(  )
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param args Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|HashMap
name|processParameters
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|HashMap
name|parameters
init|=
operator|new
name|HashMap
argument_list|(  )
decl_stmt|;
name|String
name|param
decl_stmt|;
name|String
name|value
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|0
decl_stmt|;
name|int
name|l
init|=
name|args
operator|.
name|length
argument_list|(  )
decl_stmt|;
while|while
condition|(
operator|(
name|start
operator|<
name|l
operator|)
operator|&&
operator|(
name|end
operator|<
name|l
operator|)
condition|)
block|{
while|while
condition|(
operator|(
name|end
operator|<
name|l
operator|)
operator|&&
operator|(
name|args
operator|.
name|charAt
argument_list|(
name|end
operator|++
argument_list|)
operator|!=
literal|'='
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|end
operator|==
name|l
condition|)
break|break;
name|param
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
while|while
condition|(
operator|(
name|end
operator|<
name|l
operator|)
operator|&&
operator|(
name|args
operator|.
name|charAt
argument_list|(
name|end
operator|++
argument_list|)
operator|!=
literal|'&'
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|end
operator|==
name|l
condition|)
name|value
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|)
expr_stmt|;
else|else
name|value
operator|=
name|args
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|-
literal|1
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|param
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|value
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"parameter: "
operator|+
name|param
operator|+
literal|" = "
operator|+
name|value
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
comment|/**      * Description of the Method      *      * @param tempFile Description of the Parameter      * @param name Description of the Parameter      * @param len Description of the Parameter      */
specifier|protected
name|void
name|put
parameter_list|(
name|File
name|tempFile
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
try|try
block|{
if|if
condition|(
name|broker
operator|.
name|getDocument
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing old document "
operator|+
name|name
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeDocument
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|broker
argument_list|,
name|user
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"parsing document ..."
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|tempFile
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|(  )
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" stored."
argument_list|,
name|OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|result
operator|=
name|formatErrorMsg
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|(  )
operator|+
literal|":"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|(  )
operator|+
literal|"\n"
operator|+
name|e
operator|.
name|toString
argument_list|(  )
argument_list|,
name|PARSE_ERROR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|(  )
decl_stmt|;
name|o
operator|.
name|printStackTrace
argument_list|(  )
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
name|o
operator|.
name|toString
argument_list|(  )
argument_list|,
name|PARSE_ERROR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(  )
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
name|e
operator|.
name|toString
argument_list|(  )
argument_list|,
name|PARSE_ERROR
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|(  )
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"HTTP/1.0 200 OK\n"
operator|+
name|stdHeaders
operator|+
literal|"Content-Type: text/xml\n"
operator|+
literal|"Content-Length: "
operator|+
name|result
operator|.
name|length
argument_list|(  )
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|resultData
init|=
name|result
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|resultData
argument_list|,
literal|0
argument_list|,
name|resultData
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(  )
expr_stmt|;
name|out
operator|.
name|close
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Main processing method for the HttpServerConnection object      *      * @throws RuntimeException DOCUMENT ME!      */
specifier|public
name|void
name|run
parameter_list|(  )
block|{
name|String
name|req
decl_stmt|;
name|String
name|first
decl_stmt|;
name|String
name|line
decl_stmt|;
name|String
name|contentType
init|=
literal|"text/xml"
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
name|int
name|method
init|=
name|BAD_REQUEST
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|input
init|=
operator|new
name|StringBuffer
argument_list|(  )
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|brokerPool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|(  )
argument_list|)
throw|;
block|}
comment|// the main loop of this thread
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
operator|(
name|sock
operator|==
literal|null
operator|)
operator|&&
operator|!
name|terminate
condition|)
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|terminate
condition|)
break|break;
try|try
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|(  )
argument_list|)
argument_list|)
decl_stmt|;
name|len
operator|=
operator|-
literal|1
expr_stmt|;
name|contentType
operator|=
literal|"text/xml"
expr_stmt|;
comment|// parse http-header
while|while
condition|(
literal|true
condition|)
block|{
name|req
operator|=
name|in
operator|.
name|readLine
argument_list|(  )
expr_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
break|break;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|req
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tok
operator|.
name|hasMoreTokens
argument_list|(  )
condition|)
break|break;
name|first
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
name|method
operator|=
name|GET
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
name|method
operator|=
name|POST
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|method
operator|=
name|HEAD
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
block|}
if|else if
condition|(
name|first
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
condition|)
block|{
name|method
operator|=
name|PUT
expr_stmt|;
name|name
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
block|}
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|(  )
operator|.
name|startsWith
argument_list|(
literal|"CONTENT-LENGTH:"
argument_list|)
condition|)
block|{
try|try
block|{
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|(  )
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nf
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|nf
argument_list|)
expr_stmt|;
name|method
operator|=
name|BAD_REQUEST
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|(  )
operator|.
name|startsWith
argument_list|(
literal|"CONTENT-TYPE:"
argument_list|)
condition|)
name|contentType
operator|=
name|tok
operator|.
name|nextToken
argument_list|(  )
expr_stmt|;
if|else if
condition|(
name|req
operator|.
name|toUpperCase
argument_list|(  )
operator|.
name|startsWith
argument_list|(
literal|"AUTHORIZATION:"
argument_list|)
condition|)
block|{
name|String
name|auth
init|=
name|req
operator|.
name|substring
argument_list|(
literal|"AUTHORIZATION:"
operator|.
name|length
argument_list|(  )
argument_list|)
operator|.
name|trim
argument_list|(  )
decl_stmt|;
name|byte
index|[]
name|c
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|auth
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
operator|.
name|getBytes
argument_list|(  )
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|int
name|p
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|username
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|password
operator|=
name|s
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|user
operator|=
name|checkUser
argument_list|(
name|brokerPool
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
name|method
operator|=
name|FORBIDDEN
expr_stmt|;
block|}
block|}
comment|// get request body
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|count
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|method
operator|==
name|PUT
condition|)
block|{
comment|// put may send a lot of data, so save it
comment|// to a temporary file first.
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"exist"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|BufferedWriter
name|fout
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tempFile
argument_list|)
argument_list|)
decl_stmt|;
do|do
block|{
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|fout
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|l
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|<
name|len
condition|)
do|;
name|fout
operator|.
name|close
argument_list|(  )
expr_stmt|;
block|}
else|else
block|{
do|do
block|{
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|input
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|l
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|<
name|len
condition|)
do|;
block|}
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
comment|// no user specified: assume guest identity
name|user
operator|=
operator|new
name|User
argument_list|(
literal|"guest"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|(  )
argument_list|)
throw|;
block|}
try|try
block|{
comment|// select method
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|FORBIDDEN
case|:
name|errorReply
argument_list|(
name|FORBIDDEN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BAD_REQUEST
case|:
name|errorReply
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET
case|:
name|get
argument_list|(
name|name
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST
case|:
name|post
argument_list|(
name|input
operator|.
name|toString
argument_list|(  )
argument_list|,
name|name
argument_list|,
name|len
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|put
argument_list|(
name|tempFile
argument_list|,
name|name
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
default|default:
name|errorReply
argument_list|(
name|BAD_REQUEST
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
name|user
operator|=
literal|null
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|(  )
expr_stmt|;
name|input
operator|=
operator|new
name|StringBuffer
argument_list|(  )
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|sock
operator|=
literal|null
expr_stmt|;
name|xslStyle
operator|=
literal|null
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|shutdown
argument_list|(  )
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of the Method      *      * @param query Description of the Parameter      * @param howmany Description of the Parameter      * @param start Description of the Parameter      * @param printSummary Description of the Parameter      * @param indent Description of the Parameter      * @param stylesheet Description of the Parameter      *      * @return Description of the Return Value      */
specifier|protected
name|String
name|search
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|boolean
name|printSummary
parameter_list|,
name|boolean
name|indent
parameter_list|,
name|String
name|stylesheet
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XPathLexer
name|lexer
init|=
operator|new
name|XPathLexer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|(  )
decl_stmt|;
name|parser
operator|=
operator|new
name|XPathParser
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|user
argument_list|,
name|lexer
argument_list|)
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|HttpServer
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"query: "
operator|+
name|expr
operator|.
name|pprint
argument_list|(  )
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|(  )
condition|)
return|return
name|formatErrorMsg
argument_list|(
name|parser
operator|.
name|getErrorMsg
argument_list|(  )
argument_list|,
name|SYNTAX_ERROR
argument_list|)
return|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|(  )
decl_stmt|;
name|DocumentSet
name|ndocs
init|=
name|expr
operator|.
name|preselect
argument_list|(  )
decl_stmt|;
if|if
condition|(
name|ndocs
operator|.
name|getLength
argument_list|(  )
operator|==
literal|0
condition|)
name|result
operator|=
name|formatErrorMsg
argument_list|(
literal|"nothing found"
argument_list|,
name|OK
argument_list|)
expr_stmt|;
else|else
block|{
name|Value
name|resultValue
init|=
name|expr
operator|.
name|eval
argument_list|(
name|ndocs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|queryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|(  )
operator|-
name|startTime
decl_stmt|;
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"evaluation took "
operator|+
name|queryTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|(  )
expr_stmt|;
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|PRELOAD
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|resultValue
operator|.
name|getType
argument_list|(  )
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
name|NodeList
name|resultSet
init|=
name|resultValue
operator|.
name|getNodeList
argument_list|(  )
decl_stmt|;
if|if
condition|(
name|printSummary
condition|)
name|result
operator|=
name|printSummary
argument_list|(
name|resultSet
argument_list|,
name|queryTime
argument_list|)
expr_stmt|;
else|else
name|result
operator|=
name|printAll
argument_list|(
name|resultSet
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|queryTime
argument_list|,
name|indent
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ValueSet
name|valueSet
init|=
name|resultValue
operator|.
name|getValueSet
argument_list|(  )
decl_stmt|;
name|result
operator|=
name|printValues
argument_list|(
name|valueSet
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|)
expr_stmt|;
break|break;
block|}
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|SINGLE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|HttpServer
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|(  )
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|formatErrorMsg
argument_list|(
name|e
operator|.
name|toString
argument_list|(  )
argument_list|,
name|UNKNOWN_ERROR
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Description of the Method      */
specifier|public
name|void
name|terminate
parameter_list|(  )
block|{
name|terminate
operator|=
literal|true
expr_stmt|;
block|}
class|class
name|DoctypeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
comment|/**          * Constructor for the DoctypeCount object          *          * @param doctype Description of the Parameter          */
specifier|public
name|DoctypeCount
parameter_list|(
name|DocumentType
name|doctype
parameter_list|)
block|{
name|this
operator|.
name|doctype
operator|=
name|doctype
expr_stmt|;
block|}
comment|/**          * Description of the Method          */
specifier|public
name|void
name|inc
parameter_list|(  )
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
class|class
name|NodeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
comment|/**          * Constructor for the NodeCount object          *          * @param doc Description of the Parameter          */
specifier|public
name|NodeCount
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
comment|/**          * Description of the Method          */
specifier|public
name|void
name|inc
parameter_list|(  )
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

