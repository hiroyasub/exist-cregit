begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2013 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|DebuggeeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DefaultDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|MutableDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|RESTServerParameter
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
operator|.
name|XQueryURLRewrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|URLSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FilterInputStreamCacheFactory
operator|.
name|FilterInputStreamCacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|json
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xqj
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NameTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|response
operator|.
name|ResponseModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_comment
comment|/**  *  * @author wolf  * @author ljo  * @author adam  * @author gev  *  */
end_comment

begin_class
specifier|public
class|class
name|RESTServer
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RESTServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SERIALIZATION_METHOD_PROPERTY
init|=
literal|"output-as"
decl_stmt|;
comment|// Should we not obey the instance's defaults? /ljo
specifier|protected
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|Properties
name|defaultOutputKeysProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultOutputKeysProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultOutputKeysProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultOutputKeysProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_ERROR_HEAD
init|=
literal|"<html>"
operator|+
literal|"<head>"
operator|+
literal|"<title>Query Error</title>"
operator|+
literal|"<style type=\"text/css\">"
operator|+
literal|".errmsg {"
operator|+
literal|"  border: 1px solid black;"
operator|+
literal|"  padding: 15px;"
operator|+
literal|"  margin-left: 20px;"
operator|+
literal|"  margin-right: 20px;"
operator|+
literal|"}"
operator|+
literal|"h1 { color: #C0C0C0; }"
operator|+
literal|".path {"
operator|+
literal|"  padding-bottom: 10px;"
operator|+
literal|"}"
operator|+
literal|".high { "
operator|+
literal|"  color: #666699; "
operator|+
literal|"  font-weight: bold;"
operator|+
literal|"}"
operator|+
literal|"</style>"
operator|+
literal|"</head>"
operator|+
literal|"<body>"
operator|+
literal|"<h1>XQuery Error</h1>"
decl_stmt|;
specifier|private
name|String
name|formEncoding
decl_stmt|;
comment|// TODO: we may be able to remove this
comment|// eventually, in favour of
comment|// HttpServletRequestWrapper being setup in
comment|// EXistServlet, currently used for doPost()
comment|// but perhaps could be used for other
comment|// Request Methods? - deliriumsky
specifier|private
name|String
name|containerEncoding
decl_stmt|;
specifier|private
name|boolean
name|useDynamicContentType
decl_stmt|;
specifier|private
name|boolean
name|safeMode
init|=
literal|false
decl_stmt|;
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
comment|//EXQuery Request Module details
specifier|private
name|String
name|xqueryContextExqueryRequestAttribute
init|=
literal|null
decl_stmt|;
specifier|private
name|Constructor
name|cstrHttpServletRequestAdapter
init|=
literal|null
decl_stmt|;
comment|// Constructor
specifier|public
name|RESTServer
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|String
name|formEncoding
parameter_list|,
specifier|final
name|String
name|containerEncoding
parameter_list|,
specifier|final
name|boolean
name|useDynamicContentType
parameter_list|,
specifier|final
name|boolean
name|safeMode
parameter_list|)
block|{
name|this
operator|.
name|formEncoding
operator|=
name|formEncoding
expr_stmt|;
name|this
operator|.
name|containerEncoding
operator|=
name|containerEncoding
expr_stmt|;
name|this
operator|.
name|useDynamicContentType
operator|=
name|useDynamicContentType
expr_stmt|;
name|this
operator|.
name|safeMode
operator|=
name|safeMode
expr_stmt|;
name|this
operator|.
name|sessionManager
operator|=
operator|new
name|SessionManager
argument_list|(
name|pool
argument_list|)
expr_stmt|;
comment|//get (optiona) EXQuery Request Module details
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.extensions.exquery.modules.request.RequestModule"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Field
name|fldExqRequestAttr
init|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
literal|"EXQ_REQUEST_ATTR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fldExqRequestAttr
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|xqueryContextExqueryRequestAttribute
operator|=
operator|(
name|String
operator|)
name|fldExqRequestAttr
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|xqueryContextExqueryRequestAttribute
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.extensions.exquery.restxq.impl.adapters.HttpServletRequestAdapter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cstrHttpServletRequestAdapter
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|,
name|FilterInputStreamCacheConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EXQuery Request Module is not present: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieves a parameter from the Query String of the request      */
specifier|private
name|String
name|getParameter
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|RESTServerParameter
name|parameter
parameter_list|)
block|{
return|return
name|request
operator|.
name|getParameter
argument_list|(
name|parameter
operator|.
name|queryStringKey
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Handle GET request. In the simplest case just returns the document or      * binary resource specified in the path. If the path leads to a collection,      * a listing of the collection contents is returned. If it resolves to a      * binary resource with mime-type "application/xquery", this resource will      * be loaded and executed by the XQuery engine.      *      * The method also recognizes a number of predefined parameters:      *      *<ul><li>_xpath or _query: if specified, the given query is executed on      * the current resource or collection.</li>      *      *<li>_howmany: defines how many items from the query result will be      * returned.</li>      *      *<li>_start: a start offset into the result set.</li>      *      *<li>_wrap: if set to "yes", the query results will be wrapped into a      * exist:result element.</li>      *      *<li>_indent: if set to "yes", the returned XML will be pretty-printed.      *</li>      *      *<li>_source: if set to "yes" and a resource with mime-type      * "application/xquery" is requested then the xquery will not be executed,      * instead the source of the document will be returned. Must be enabled in      * descriptor.xml with the following syntax      *<xquery-app><allow-source><xquery      * path="/db/mycollection/myquery.xql"/></allow-source></xquery-app></li>      *      *<li>_xsl: an URI pointing to an XSL stylesheet that will be applied to      * the returned XML.</li>      *      * @param broker      * @param request      * @param response      * @param path      * @throws BadRequestException      * @throws PermissionDeniedException      * @throws NotFoundException      */
specifier|public
name|void
name|doGet
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
comment|// if required, set character encoding
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
block|}
name|String
name|option
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Release
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|sessionId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|sessionManager
operator|.
name|release
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Released session "
operator|+
name|sessionId
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Process special parameters
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|typed
init|=
literal|false
decl_stmt|;
name|boolean
name|wrap
init|=
literal|true
decl_stmt|;
name|boolean
name|source
init|=
literal|false
decl_stmt|;
name|boolean
name|cache
init|=
literal|false
decl_stmt|;
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultOutputKeysProperties
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|safeMode
condition|)
block|{
name|query
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|XPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|_var
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Variables
argument_list|)
decl_stmt|;
name|List
comment|/*<Namespace>*/
name|namespaces
init|=
literal|null
decl_stmt|;
name|ElementImpl
name|variables
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|_var
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NamespaceExtractor
name|nsExtractor
init|=
operator|new
name|NamespaceExtractor
argument_list|()
decl_stmt|;
name|variables
operator|=
name|parseXML
argument_list|(
name|_var
argument_list|,
name|nsExtractor
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|nsExtractor
operator|.
name|getNamespaces
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
specifier|final
name|XPathException
name|x
init|=
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"UTF-8"
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParserConfigurationException
name|e
parameter_list|)
block|{
specifier|final
name|XPathException
name|x
init|=
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"UTF-8"
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|HowMany
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _howmany should be an int"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Start
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _start should be an int"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Typed
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|typed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Wrap
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|wrap
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"_wrap"
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Cache
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|cache
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Indent
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Source
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
operator|!
name|safeMode
condition|)
block|{
name|source
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Session
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|String
name|stylesheet
decl_stmt|;
if|if
condition|(
operator|(
name|stylesheet
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|XSL
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|stylesheet
argument_list|)
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|remove
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|)
expr_stmt|;
name|stylesheet
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"stylesheet = "
operator|+
name|stylesheet
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query = "
operator|+
name|query
argument_list|)
expr_stmt|;
name|String
name|encoding
decl_stmt|;
if|if
condition|(
operator|(
name|encoding
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Encoding
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
specifier|final
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// query parameter specified, search method does all the rest of the work
try|try
block|{
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|typed
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|,
name|cache
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
comment|// Process the request
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// check if path leads to an XQuery resource
specifier|final
name|String
name|xquery_mime_type
init|=
name|MimeType
operator|.
name|XQUERY_TYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xproc_mime_type
init|=
name|MimeType
operator|.
name|XPROC_TYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resource
operator|&&
operator|!
name|isExecutableType
argument_list|(
name|resource
argument_list|)
condition|)
block|{
comment|// return regular resource that is not an xquery and not is xproc
name|writeResourceAs
argument_list|(
name|resource
argument_list|,
name|broker
argument_list|,
name|stylesheet
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|// could be request for a Collection
comment|// no document: check if path points to a collection
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|safeMode
operator|||
operator|!
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read collection"
argument_list|)
throw|;
block|}
comment|// return a listing of the collection contents
try|try
block|{
name|writeCollection
argument_list|(
name|response
argument_list|,
name|encoding
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|le
parameter_list|)
block|{
if|if
condition|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|,
name|le
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|,
name|le
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|source
condition|)
block|{
comment|// didn't find regular resource, or user wants source
comment|// on a possible xquery resource that was not found
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
name|XmldbURI
name|servletPath
init|=
name|pathUri
decl_stmt|;
comment|// if resource is still null, work up the url path to find an
comment|// xquery or xproc resource
while|while
condition|(
literal|null
operator|==
name|resource
condition|)
block|{
comment|// traverse up the path looking for xquery objects
name|servletPath
operator|=
name|servletPath
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
if|if
condition|(
name|servletPath
operator|==
name|XmldbURI
operator|.
name|EMPTY_URI
condition|)
block|{
break|break;
block|}
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|servletPath
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resource
operator|&&
name|isExecutableType
argument_list|(
name|resource
argument_list|)
condition|)
block|{
break|break;
block|}
if|else if
condition|(
literal|null
operator|!=
name|resource
condition|)
block|{
comment|//unlocked at finally block
comment|// not an xquery resource. This means we have a path
comment|// that cannot contain an xquery object even if we keep
comment|// moving up the path, so bail out now
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|resource
condition|)
block|{
comment|// path search failed
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// found an XQuery or XProc resource, fixup request values
specifier|final
name|String
name|pathInfo
init|=
name|pathUri
operator|.
name|trimFromBeginning
argument_list|(
name|servletPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Should we display the source of the XQuery or XProc or execute it
specifier|final
name|Descriptor
name|descriptor
init|=
name|Descriptor
operator|.
name|getDescriptorSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
condition|)
block|{
comment|// show the source
comment|// check are we allowed to show the xquery source -
comment|// descriptor.xml
if|if
condition|(
operator|(
literal|null
operator|!=
name|descriptor
operator|)
operator|&&
name|descriptor
operator|.
name|allowSource
argument_list|(
name|path
argument_list|)
operator|&&
name|resource
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
comment|// TODO: change writeResourceAs to use a serializer
comment|// that will serialize xquery to syntax coloured
comment|// xhtml, replace the asMimeType parameter with a
comment|// method for specifying the serializer, or split
comment|// the code into two methods. - deliriumsky
if|if
condition|(
name|xquery_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Show the source of the XQuery
name|writeResourceAs
argument_list|(
name|resource
argument_list|,
name|broker
argument_list|,
name|stylesheet
argument_list|,
name|encoding
argument_list|,
name|MimeType
operator|.
name|TEXT_TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|outputProperties
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|xproc_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Show the source of the XProc
name|writeResourceAs
argument_list|(
name|resource
argument_list|,
name|broker
argument_list|,
name|stylesheet
argument_list|,
name|encoding
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|outputProperties
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we are not allowed to show the source - query not
comment|// allowed in descriptor.xml
comment|// or descriptor not found, so assume source view not
comment|// allowed
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Permission to view XQuery source for: "
operator|+
name|path
operator|+
literal|" denied. Must be explicitly defined in descriptor.xml"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|xquery_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Execute the XQuery
name|executeXQuery
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|servletPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|xproc_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Execute the XProc
name|executeXProc
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|servletPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doHead
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkForXQueryTarget
argument_list|(
name|broker
argument_list|,
name|pathUri
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultOutputKeysProperties
argument_list|)
decl_stmt|;
name|String
name|encoding
decl_stmt|;
if|if
condition|(
operator|(
name|encoding
operator|=
name|getParameter
argument_list|(
name|request
argument_list|,
name|Encoding
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Permission to read resource "
operator|+
name|path
operator|+
literal|" denied"
argument_list|)
throw|;
block|}
specifier|final
name|DocumentMetadata
name|metadata
init|=
name|resource
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|metadata
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
comment|// As HttpServletResponse.setContentLength is limited to integers,
comment|// (see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4187336)
comment|// next sentence:
comment|//	response.setContentLength(resource.getContentLength());
comment|// must be set so
name|response
operator|.
name|addHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|resource
operator|.
name|getContentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setCreatedAndLastModifiedHeaders
argument_list|(
name|response
argument_list|,
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|,
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Collection
name|col
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
comment|//no resource or collection
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"No resource at location: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|col
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Permission to read resource "
operator|+
name|path
operator|+
literal|" denied"
argument_list|)
throw|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
name|setCreatedAndLastModifiedHeaders
argument_list|(
name|response
argument_list|,
name|col
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|col
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Handles POST requests. If the path leads to a binary resource with      * mime-type "application/xquery", that resource will be read and executed      * by the XQuery engine. Otherwise, the request content is loaded and parsed      * as XML. It may either contain an XUpdate or a query request.      *      * @param broker      * @param request      * @param response      * @param path      * @throws BadRequestException      * @throws PermissionDeniedException      * @throws NotFoundException      */
specifier|public
name|void
name|doPost
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|NotFoundException
block|{
comment|// if required, set character encoding
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultOutputKeysProperties
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|encoding
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
comment|// check if path leads to an XQuery resource.
comment|// if yes, the resource is loaded and the XQuery executed.
specifier|final
name|String
name|xquery_mime_type
init|=
name|MimeType
operator|.
name|XQUERY_TYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xproc_mime_type
init|=
name|MimeType
operator|.
name|XPROC_TYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|XmldbURI
name|servletPath
init|=
name|pathUri
decl_stmt|;
comment|// if resource is still null, work up the url path to find an
comment|// xquery resource
while|while
condition|(
literal|null
operator|==
name|resource
condition|)
block|{
comment|// traverse up the path looking for xquery objects
name|servletPath
operator|=
name|servletPath
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
if|if
condition|(
name|servletPath
operator|==
name|XmldbURI
operator|.
name|EMPTY_URI
condition|)
block|{
break|break;
block|}
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|servletPath
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resource
operator|&&
operator|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|&&
name|xquery_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
operator|||
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
operator|&&
name|xproc_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break;
comment|// found a binary file with mime-type xquery or XML file with mime-type xproc
block|}
if|else if
condition|(
literal|null
operator|!=
name|resource
condition|)
block|{
comment|// not an xquery or xproc resource. This means we have a path
comment|// that cannot contain an xquery or xproc object even if we keep
comment|// moving up the path, so bail out now
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
comment|// either xquery binary file or xproc xml file
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|&&
name|xquery_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
operator|||
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
operator|&&
name|xproc_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// found an XQuery resource, fixup request values
specifier|final
name|String
name|pathInfo
init|=
name|pathUri
operator|.
name|trimFromBeginning
argument_list|(
name|servletPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|xquery_mime_type
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Execute the XQuery
name|executeXQuery
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|servletPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Execute the XProc
name|executeXProc
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|servletPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check the content type to see if its XML or a parameter string
name|String
name|requestType
init|=
name|request
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|semicolon
init|=
name|requestType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|requestType
operator|=
name|requestType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
comment|// content type != application/x-www-form-urlencoded
if|if
condition|(
name|requestType
operator|==
literal|null
operator|||
operator|!
name|requestType
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|URL_ENCODED_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// third, normal POST: read the request content and check if
comment|// it is an XUpdate or a query request.
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|typed
init|=
literal|false
decl_stmt|;
name|ElementImpl
name|variables
init|=
literal|null
decl_stmt|;
name|boolean
name|enclose
init|=
literal|true
decl_stmt|;
name|boolean
name|cache
init|=
literal|false
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|content
init|=
name|getRequestContent
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|NamespaceExtractor
name|nsExtractor
init|=
operator|new
name|NamespaceExtractor
argument_list|()
decl_stmt|;
specifier|final
name|ElementImpl
name|root
init|=
name|parseXML
argument_list|(
name|content
argument_list|,
name|nsExtractor
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rootNS
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|Query
operator|.
name|xmlKey
argument_list|()
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
comment|// process<query>xpathQuery</query>
name|String
name|option
init|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Start
operator|.
name|xmlKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Max
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Enclose
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|enclose
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Wrap
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|enclose
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Method
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|option
argument_list|)
operator|)
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|SERIALIZATION_METHOD_PROPERTY
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Typed
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|typed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Mime
operator|.
name|xmlKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|option
argument_list|)
operator|)
condition|)
block|{
name|mimeType
operator|=
name|option
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Cache
operator|.
name|xmlKey
argument_list|()
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|cache
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
name|Session
operator|.
name|xmlKey
argument_list|()
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|option
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeList
name|children
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|Text
operator|.
name|xmlKey
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Node
name|next
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|query
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Variables
operator|.
name|xmlKey
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|variables
operator|=
operator|(
name|ElementImpl
operator|)
name|child
expr_stmt|;
block|}
if|else if
condition|(
name|Properties
operator|.
name|xmlKey
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
operator|&&
name|Property
operator|.
name|xmlKey
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Element
name|property
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// execute query
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|nsExtractor
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|variables
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|typed
argument_list|,
name|outputProperties
argument_list|,
name|enclose
argument_list|,
name|cache
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|writeXPathException
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"No query specified"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|XUpdateProcessor
operator|.
name|XUPDATE_NS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got xupdate request: "
operator|+
name|content
argument_list|)
expr_stmt|;
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|DocumentImpl
name|xupdateDoc
init|=
name|broker
operator|.
name|getResource
argument_list|(
name|pathUri
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdateDoc
operator|!=
literal|null
condition|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|xupdateDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|getAllXMLResources
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|REST
argument_list|)
decl_stmt|;
specifier|final
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|// FD : Returns an XML doc
name|writeXUpdateResult
argument_list|(
name|response
argument_list|,
name|encoding
argument_list|,
name|mods
argument_list|)
expr_stmt|;
comment|// END FD
block|}
else|else
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unknown XML root element: "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|cause
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cause
operator|=
name|e
operator|.
name|getException
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parser exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Query exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"IO exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transact
operator|.
name|close
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
comment|// content type = application/x-www-form-urlencoded
block|}
else|else
block|{
name|doGet
argument_list|(
name|broker
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ElementImpl
name|parseXML
parameter_list|(
specifier|final
name|String
name|content
parameter_list|,
specifier|final
name|NamespaceExtractor
name|nsExtractor
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
comment|//reader.setContentHandler(adapter);
comment|//reader.parse(src);
name|nsExtractor
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|nsExtractor
operator|.
name|setParent
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|nsExtractor
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
return|return
operator|(
name|ElementImpl
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
specifier|private
class|class
name|NamespaceExtractor
extends|extends
name|XMLFilterImpl
block|{
specifier|final
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
specifier|final
name|Namespace
name|ns
init|=
operator|new
name|Namespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
block|}
specifier|public
class|class
name|Namespace
block|{
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
specifier|public
name|Namespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
block|}
comment|/**      * Handles PUT requests. The request content is stored as a new resource at      * the specified location. If the resource already exists, it is overwritten      * if the user has write permissions.      *      * The resource type depends on the content type specified in the HTTP      * header. The content type will be looked up in the global mime table. If      * the corresponding mime type is not a know XML mime type, the resource      * will be stored as a binary resource.      *      * @param broker      * @param path The path to which the file should be stored      * @param request      * @param response      * @throws BadRequestException      * @throws PermissionDeniedException      */
specifier|public
name|void
name|doPut
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|path
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|NotFoundException
block|{
if|if
condition|(
name|checkForXQueryTarget
argument_list|(
name|broker
argument_list|,
name|path
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
literal|null
decl_stmt|;
name|VirtualTempFile
name|vtempFile
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// fourth, process the request
name|InputStream
name|is
init|=
name|request
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|long
name|len
init|=
name|request
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
specifier|final
name|String
name|lenstr
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lenstr
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|lenstr
argument_list|)
expr_stmt|;
block|}
comment|// put may send a lot of data, so save it
comment|// to a temporary file first.
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|()
expr_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"existSRV"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".tmp"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|is
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|XmldbURI
name|docUri
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
name|collUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docUri
operator|==
literal|null
operator|||
name|collUri
operator|==
literal|null
condition|)
block|{
comment|//transact.abort(transaction);
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Bad path: "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// TODO : use getOrCreateCollection() right now ?
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|collUri
argument_list|)
expr_stmt|;
name|transaction
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collUri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
name|MimeType
name|mime
decl_stmt|;
name|String
name|contentType
init|=
name|request
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
specifier|final
name|int
name|equals
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|semicolon
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|param
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|semicolon
operator|+
literal|1
argument_list|,
name|equals
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"charset="
argument_list|)
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|param
operator|.
name|substring
argument_list|(
name|equals
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|docUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|mime
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
name|contentType
operator|=
name|mime
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|==
literal|null
condition|)
block|{
name|transaction
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
specifier|final
name|InputSource
name|vtfis
init|=
operator|new
name|VirtualTempFileInputSource
argument_list|(
name|vtempFile
argument_list|,
name|charset
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|vtfis
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|vtfis
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CREATED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
name|vtempFile
operator|.
name|getByteStream
argument_list|()
expr_stmt|;
try|try
block|{
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|is
argument_list|,
name|contentType
argument_list|,
name|vtempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CREATED
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXParseException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"/"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|e
expr_stmt|;
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception: "
operator|+
name|o
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Internal error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transact
operator|.
name|close
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
if|if
condition|(
name|vtempFile
operator|!=
literal|null
condition|)
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
throws|,
name|BadRequestException
block|{
specifier|final
name|XmldbURI
name|pathURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkForXQueryTarget
argument_list|(
name|broker
argument_list|,
name|pathURI
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
comment|// remove the collection
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|txn
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getResource
argument_list|(
name|pathURI
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|//transact.abort(txn);
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"No document or collection found for path: "
operator|+
name|path
argument_list|)
throw|;
block|}
else|else
block|{
comment|// remove the document
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing document "
operator|+
name|path
argument_list|)
expr_stmt|;
name|txn
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|pathURI
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|pathURI
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
comment|//should not happen, just in case ...
block|{
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Trigger failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Could not acquire lock: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransactionException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Transaction aborted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|transact
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|checkForXQueryTarget
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|path
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
throws|,
name|BadRequestException
block|{
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
name|XQueryURLRewrite
operator|.
name|RQ_ATTR
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|xqueryType
init|=
name|MimeType
operator|.
name|XQUERY_TYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|XmldbURI
name|servletPath
init|=
name|path
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
comment|// work up the url path to find an
comment|// xquery resource
while|while
condition|(
literal|null
operator|==
name|resource
condition|)
block|{
comment|// traverse up the path looking for xquery objects
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|servletPath
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resource
operator|&&
operator|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|&&
name|xqueryType
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break;
comment|// found a binary file with mime-type xquery or XML file with mime-type xproc
block|}
if|else if
condition|(
literal|null
operator|!=
name|resource
condition|)
block|{
comment|// not an xquery or xproc resource. This means we have a path
comment|// that cannot contain an xquery or xproc object even if we keep
comment|// moving up the path, so bail out now
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
break|break;
block|}
name|servletPath
operator|=
name|servletPath
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
if|if
condition|(
name|servletPath
operator|==
name|XmldbURI
operator|.
name|EMPTY_URI
condition|)
block|{
break|break;
block|}
block|}
comment|// xquery binary file found
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
comment|// found an XQuery resource, fixup request values
specifier|final
name|String
name|pathInfo
init|=
name|path
operator|.
name|trimFromBeginning
argument_list|(
name|servletPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultOutputKeysProperties
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Execute the XQuery
name|executeXQuery
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|,
name|servletPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|writeXPathExceptionHtml
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"UTF-8"
argument_list|,
literal|null
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getRequestContent
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|encoding
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
specifier|final
name|InputStream
name|is
init|=
name|request
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
specifier|final
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|content
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|char
name|ch
index|[]
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|reader
operator|.
name|read
argument_list|(
name|ch
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|content
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|xml
init|=
name|content
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
comment|/**      * TODO: pass request and response objects to XQuery.      *      * @throws XPathException      */
specifier|protected
name|void
name|search
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
parameter_list|,
specifier|final
name|ElementImpl
name|variables
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|boolean
name|typed
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|boolean
name|wrap
parameter_list|,
specifier|final
name|boolean
name|cache
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|String
name|sessionIdParam
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionIdParam
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|int
name|sessionId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sessionIdParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|>
operator|-
literal|1
condition|)
block|{
specifier|final
name|Sequence
name|cached
init|=
name|sessionManager
operator|.
name|get
argument_list|(
name|query
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returning cached query result"
argument_list|)
expr_stmt|;
name|writeResults
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|cached
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|typed
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached query result not found. Probably timed out. Repeating query."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid session id passed in query request: "
operator|+
name|sessionIdParam
argument_list|)
throw|;
block|}
block|}
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|pathUri
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
name|pathUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|declareNamespaces
argument_list|(
name|context
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|declareVariables
argument_list|(
name|context
argument_list|,
name|variables
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|updateContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|getWatchDog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|resultSequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
specifier|final
name|long
name|queryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|resultSequence
operator|.
name|getItemCount
argument_list|()
operator|+
literal|" in "
operator|+
name|queryTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
condition|)
block|{
specifier|final
name|int
name|sessionId
init|=
name|sessionManager
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|resultSequence
argument_list|)
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|response
operator|.
name|setIntHeader
argument_list|(
literal|"X-Session-Id"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
name|writeResults
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|resultSequence
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|typed
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|declareNamespaces
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|namespaces
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Namespace
name|ns
range|:
name|namespaces
control|)
block|{
name|context
operator|.
name|declareNamespace
argument_list|(
name|ns
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|ns
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Pass the request, response and session objects to the XQuery context.      *      * @param context      * @param request      * @param response      * @throws XPathException      */
specifier|private
name|HttpRequestWrapper
name|declareVariables
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|ElementImpl
name|variables
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|HttpRequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
name|formEncoding
argument_list|,
name|containerEncoding
argument_list|)
decl_stmt|;
specifier|final
name|ResponseWrapper
name|respw
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|response
argument_list|)
decl_stmt|;
comment|// context.declareNamespace(RequestModule.PREFIX,
comment|// RequestModule.NAMESPACE_URI);
name|context
operator|.
name|declareVariable
argument_list|(
name|RequestModule
operator|.
name|PREFIX
operator|+
literal|":request"
argument_list|,
name|reqw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|ResponseModule
operator|.
name|PREFIX
operator|+
literal|":response"
argument_list|,
name|respw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|,
name|reqw
operator|.
name|getSession
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//enable EXQuery Request Module (if present)
try|try
block|{
if|if
condition|(
name|xqueryContextExqueryRequestAttribute
operator|!=
literal|null
operator|&&
name|cstrHttpServletRequestAdapter
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|exqueryRequestAdapter
init|=
name|cstrHttpServletRequestAdapter
operator|.
name|newInstance
argument_list|(
name|request
argument_list|,
operator|new
name|FilterInputStreamCacheConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getCacheClass
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|exqueryRequestAdapter
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setAttribute
argument_list|(
name|xqueryContextExqueryRequestAttribute
argument_list|,
name|exqueryRequestAdapter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EXQuery Request Module is not present: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|variables
operator|!=
literal|null
condition|)
block|{
name|declareExternalAndXQJVariables
argument_list|(
name|context
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
return|return
name|reqw
return|;
block|}
specifier|private
name|void
name|declareExternalAndXQJVariables
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|ElementImpl
name|variables
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ValueSequence
name|varSeq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|variables
operator|.
name|selectChildren
argument_list|(
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
name|Variable
operator|.
name|xmlKey
argument_list|()
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
argument_list|)
argument_list|,
name|varSeq
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|varSeq
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|ElementImpl
name|variable
init|=
operator|(
name|ElementImpl
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
comment|// get the QName of the variable
specifier|final
name|ElementImpl
name|qname
init|=
operator|(
name|ElementImpl
operator|)
name|variable
operator|.
name|getFirstChild
argument_list|(
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"qname"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|localname
init|=
literal|null
decl_stmt|,
name|prefix
init|=
literal|null
decl_stmt|,
name|uri
init|=
literal|null
decl_stmt|;
name|NodeImpl
name|child
init|=
operator|(
name|NodeImpl
operator|)
name|qname
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"localname"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|localname
operator|=
name|child
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"namespace"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|uri
operator|=
name|child
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"prefix"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|child
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
name|child
operator|=
operator|(
name|NodeImpl
operator|)
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|prefix
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localname
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|QName
name|q
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|localname
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|QName
argument_list|(
name|localname
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
operator|new
name|QName
argument_list|(
name|localname
argument_list|,
name|uri
argument_list|,
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|)
expr_stmt|;
block|}
comment|// get serialized sequence
specifier|final
name|NodeImpl
name|value
init|=
name|variable
operator|.
name|getFirstChild
argument_list|(
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Marshaller
operator|.
name|ROOT_ELEMENT_QNAME
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|sequence
decl_stmt|;
try|try
block|{
name|sequence
operator|=
name|value
operator|==
literal|null
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|Marshaller
operator|.
name|demarshall
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|xe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|xe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// now declare variable
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|q
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|q
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|q
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Directly execute an XQuery stored as a binary document in the database.      *      * @throws PermissionDeniedException      */
specifier|private
name|void
name|executeXQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|resource
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|String
name|servletPath
parameter_list|,
specifier|final
name|String
name|pathInfo
parameter_list|)
throws|throws
name|XPathException
throws|,
name|BadRequestException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
comment|// special header to indicate that the query is not returned from
comment|// cache
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|// TODO: don't hardcode this?
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
specifier|final
name|HttpRequestWrapper
name|reqw
init|=
name|declareVariables
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|reqw
operator|.
name|setServletPath
argument_list|(
name|servletPath
argument_list|)
expr_stmt|;
name|reqw
operator|.
name|setPathInfo
argument_list|(
name|pathInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Failed to read query from "
operator|+
name|resource
operator|.
name|getURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|DebuggeeFactory
operator|.
name|checkForDebugRequest
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|boolean
name|wrap
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
literal|"_wrap"
argument_list|)
operator|!=
literal|null
operator|&&
literal|"yes"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
literal|"_wrap"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|writeResults
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|result
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Directly execute an XProc stored as a XML document in the database.      *      * @throws PermissionDeniedException      */
specifier|private
name|void
name|executeXProc
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|resource
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|String
name|servletPath
parameter_list|,
specifier|final
name|String
name|pathInfo
parameter_list|)
throws|throws
name|XPathException
throws|,
name|BadRequestException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|URLSource
name|source
init|=
operator|new
name|URLSource
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"run-xproc.xq"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|declareVariable
argument_list|(
literal|"pipeline"
argument_list|,
name|resource
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|stdin
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"stdin"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"stdin"
argument_list|,
name|stdin
operator|==
literal|null
condition|?
literal|""
else|:
name|stdin
argument_list|)
expr_stmt|;
specifier|final
name|String
name|debug
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"debug"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"debug"
argument_list|,
name|debug
operator|==
literal|null
condition|?
literal|"0"
else|:
literal|"1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|bindings
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"bindings"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"bindings"
argument_list|,
name|bindings
operator|==
literal|null
condition|?
literal|"<bindings/>"
else|:
name|bindings
argument_list|)
expr_stmt|;
specifier|final
name|String
name|autobind
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"autobind"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"autobind"
argument_list|,
name|autobind
operator|==
literal|null
condition|?
literal|"0"
else|:
literal|"1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|options
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"options"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"options"
argument_list|,
name|options
operator|==
literal|null
condition|?
literal|"<options/>"
else|:
name|options
argument_list|)
expr_stmt|;
comment|// TODO: don't hardcode this?
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
specifier|final
name|HttpRequestWrapper
name|reqw
init|=
name|declareVariables
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|reqw
operator|.
name|setServletPath
argument_list|(
name|servletPath
argument_list|)
expr_stmt|;
name|reqw
operator|.
name|setPathInfo
argument_list|(
name|pathInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Failed to read query from "
operator|+
name|source
operator|.
name|getURL
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|writeResults
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|result
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|outputProperties
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCreatedAndLastModifiedHeaders
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
name|long
name|created
parameter_list|,
name|long
name|lastModified
parameter_list|)
block|{
comment|/**          * Jetty ignores the milliseconds component -          * https://bugs.eclipse.org/bugs/show_bug.cgi?id=342712 So lets work          * around this by rounding up to the nearest whole second          */
specifier|final
name|long
name|lastModifiedMillisComp
init|=
name|lastModified
operator|%
literal|1000
decl_stmt|;
if|if
condition|(
name|lastModifiedMillisComp
operator|>
literal|0
condition|)
block|{
name|lastModified
operator|+=
literal|1000
operator|-
name|lastModifiedMillisComp
expr_stmt|;
block|}
specifier|final
name|long
name|createdMillisComp
init|=
name|created
operator|%
literal|1000
decl_stmt|;
if|if
condition|(
name|createdMillisComp
operator|>
literal|0
condition|)
block|{
name|created
operator|+=
literal|1000
operator|-
name|createdMillisComp
expr_stmt|;
block|}
name|response
operator|.
name|addDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDateHeader
argument_list|(
literal|"Created"
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
comment|// writes out a resource, uses asMimeType as the specified mime-type or if
comment|// null uses the type of the resource
specifier|private
name|void
name|writeResourceAs
parameter_list|(
specifier|final
name|DocumentImpl
name|resource
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|stylesheet
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
name|String
name|asMimeType
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
comment|// Do we have permission to read the resource
if|if
condition|(
operator|!
name|resource
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read resource"
argument_list|)
throw|;
block|}
comment|//get the document metadata
specifier|final
name|DocumentMetadata
name|metadata
init|=
name|resource
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
specifier|final
name|long
name|lastModified
init|=
name|metadata
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|setCreatedAndLastModifiedHeaders
argument_list|(
name|response
argument_list|,
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
comment|/**          * HTTP 1.1 RFC 2616 Section 14.25 *          */
comment|//handle If-Modified-Since request header
try|try
block|{
specifier|final
name|long
name|ifModifiedSince
init|=
name|request
operator|.
name|getDateHeader
argument_list|(
literal|"If-Modified-Since"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifModifiedSince
operator|>
operator|-
literal|1
condition|)
block|{
comment|/*                  a) A date which is later than the server's                  current time is invalid.                  */
if|if
condition|(
name|ifModifiedSince
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
comment|/*                      b) If the variant has been modified since the If-Modified-Since                      date, the response is exactly the same as for a normal GET.                      */
if|if
condition|(
name|lastModified
operator|<=
name|ifModifiedSince
condition|)
block|{
comment|/*                          c) If the variant has not been modified since a valid If-                          Modified-Since date, the server SHOULD return a 304 (Not                          Modified) response.                          */
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Illegal If-Modified-Since HTTP Header sent on request, ignoring. "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
comment|// binary resource
if|if
condition|(
name|asMimeType
operator|==
literal|null
condition|)
block|{
comment|// wasn't a mime-type specified?
name|asMimeType
operator|=
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|asMimeType
operator|.
name|startsWith
argument_list|(
literal|"text/"
argument_list|)
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
argument_list|)
expr_stmt|;
block|}
comment|// As HttpServletResponse.setContentLength is limited to integers,
comment|// (see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4187336)
comment|// next sentence:
comment|//	response.setContentLength(resource.getContentLength());
comment|// must be set so
name|response
operator|.
name|addHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|resource
operator|.
name|getContentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|OutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// xml resource
name|SAXSerializer
name|sax
init|=
literal|null
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//setup the http context
specifier|final
name|HttpContext
name|httpContext
init|=
name|serializer
operator|.
expr|new
name|HttpContext
argument_list|()
decl_stmt|;
specifier|final
name|HttpRequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
name|formEncoding
argument_list|,
name|containerEncoding
argument_list|)
decl_stmt|;
name|httpContext
operator|.
name|setRequest
argument_list|(
name|reqw
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setSession
argument_list|(
name|reqw
operator|.
name|getSession
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setHttpContext
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
comment|// Serialize the document
try|try
block|{
name|sax
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// use a stylesheet if specified in query parameters
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|resource
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|prepareStylesheets
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|asMimeType
operator|!=
literal|null
condition|)
block|{
comment|// was a mime-type specified?
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|serializer
operator|.
name|isStylesheetApplied
argument_list|()
operator|||
name|serializer
operator|.
name|hasXSLPi
argument_list|(
name|resource
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|asMimeType
operator|=
name|serializer
operator|.
name|getStylesheetProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDynamicContentType
operator|||
name|asMimeType
operator|==
literal|null
condition|)
block|{
name|asMimeType
operator|=
name|MimeType
operator|.
name|HTML_TYPE
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"media-type: "
operator|+
name|asMimeType
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|asMimeType
operator|=
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|asMimeType
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|HTML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"method"
argument_list|,
literal|"xhtml"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"media-type"
argument_list|,
literal|"text/html; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"indent"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"omit-xml-declaration"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|saxe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing XML: "
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessageAndLocation
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sax
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @param response      * @param encoding      * @param query      * @param path      * @param e      *      */
specifier|private
name|void
name|writeXPathExceptionHtml
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|int
name|httpStatusCode
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|XPathException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|response
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|httpStatusCode
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|HTML_TYPE
operator|.
name|getName
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
specifier|final
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|QUERY_ERROR_HEAD
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"path\"><span class=\"high\">Path</span>: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<a href=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</a></p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"errmsg\">"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
name|e
operator|.
name|toString
argument_list|()
else|:
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XMLUtil
operator|.
name|encodeAttrMarkup
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<p><span class=\"high\">Query</span>:</p><pre>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XMLUtil
operator|.
name|encodeAttrMarkup
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param response      * @param encoding      * @param query      * @param path      * @param e      */
specifier|private
name|void
name|writeXPathException
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|int
name|httpStatusCode
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|XPathException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|response
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|httpStatusCode
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
specifier|final
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" ?>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<exception><path>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</path>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<message>"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
name|e
operator|.
name|toString
argument_list|()
else|:
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XMLUtil
operator|.
name|encodeAttrMarkup
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</message>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<query>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XMLUtil
operator|.
name|encodeAttrMarkup
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</query>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</exception>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param response      * @param encoding      * @param updateCount      */
specifier|private
name|void
name|writeXUpdateResult
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|long
name|updateCount
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
specifier|final
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" ?>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<exist:modifications xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\" count=\""
operator|+
name|updateCount
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|updateCount
operator|+
literal|" modifications processed."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</exist:modifications>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param response      * @param encoding      * @param broker      * @param collection      */
specifier|protected
name|void
name|writeCollection
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
name|setCreatedAndLastModifiedHeaders
argument_list|(
name|response
argument_list|,
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|SAXSerializer
name|serializer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serializer
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|defaultProperties
argument_list|)
expr_stmt|;
specifier|final
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add an attribute for the creation date as an xs:dateTime
try|try
block|{
specifier|final
name|DateTimeValue
name|dtCreated
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtCreated
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addPermissionAttributes
argument_list|(
name|attrs
argument_list|,
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|XmldbURI
name|child
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|childCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childCollection
operator|!=
literal|null
operator|&&
name|childCollection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add an attribute for the creation date as an xs:dateTime
try|try
block|{
specifier|final
name|DateTimeValue
name|dtCreated
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|childCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtCreated
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|childCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addPermissionAttributes
argument_list|(
name|attrs
argument_list|,
name|childCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
specifier|final
name|XmldbURI
name|resource
init|=
name|doc
operator|.
name|getFileURI
argument_list|()
decl_stmt|;
specifier|final
name|DocumentMetadata
name|metadata
init|=
name|doc
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add an attribute for the creation date as an xs:dateTime
try|try
block|{
specifier|final
name|DateTimeValue
name|dtCreated
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtCreated
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add an attribute for the last modified date as an
comment|// xs:dateTime
try|try
block|{
specifier|final
name|DateTimeValue
name|dtLastModified
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"last-modified"
argument_list|,
literal|"last-modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtLastModified
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"last-modified"
argument_list|,
literal|"last-modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addPermissionAttributes
argument_list|(
name|attrs
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|)
expr_stmt|;
block|}
block|}
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
comment|// should never happen
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while serializing collection contents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|serializer
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addPermissionAttributes
parameter_list|(
specifier|final
name|AttributesImpl
name|attrs
parameter_list|,
specifier|final
name|Permission
name|perm
parameter_list|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"permissions"
argument_list|,
literal|"permissions"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeResults
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|results
parameter_list|,
name|int
name|howmany
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|boolean
name|typed
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
block|{
comment|// some xquery functions can write directly to the output stream
comment|// (response:stream-binary() etc...)
comment|// so if output is already written then dont overwrite here
if|if
condition|(
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// calculate number of results to return
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|int
name|rlen
init|=
name|results
operator|.
name|getItemCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|rlen
operator|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Start parameter out of range"
argument_list|)
throw|;
block|}
comment|// FD : correct bound evaluation
if|if
condition|(
operator|(
operator|(
name|howmany
operator|+
name|start
operator|)
operator|>
name|rlen
operator|)
operator|||
operator|(
name|howmany
operator|<=
literal|0
operator|)
condition|)
block|{
name|howmany
operator|=
name|rlen
operator|-
name|start
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|howmany
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|String
name|method
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|SERIALIZATION_METHOD_PROPERTY
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|writeResultJSON
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|results
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeResultXML
argument_list|(
name|response
argument_list|,
name|broker
argument_list|,
name|results
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|typed
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeResultXML
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|results
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|boolean
name|typed
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
block|{
comment|// serialize the results to the response output stream
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SAXSerializer
name|sax
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sax
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set output headers
specifier|final
name|String
name|encoding
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|containsHeader
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|semicolon
init|=
name|mimeType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|mimeType
operator|=
name|mimeType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|mimeType
operator|=
literal|"application/xml"
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|mimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
literal|"method"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
comment|//Marshaller.marshall(broker, results, start, howmany, serializer.getContentHandler());
name|serializer
operator|.
name|toSAX
argument_list|(
name|results
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|wrap
argument_list|,
name|typed
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sax
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeResultJSON
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|results
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
specifier|final
name|Properties
name|outputProperties
parameter_list|,
specifier|final
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
block|{
comment|// calculate number of results to return
specifier|final
name|int
name|rlen
init|=
name|results
operator|.
name|getItemCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|rlen
operator|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Start parameter out of range"
argument_list|)
throw|;
block|}
comment|// FD : correct bound evaluation
if|if
condition|(
operator|(
operator|(
name|howmany
operator|+
name|start
operator|)
operator|>
name|rlen
operator|)
operator|||
operator|(
name|howmany
operator|<=
literal|0
operator|)
condition|)
block|{
name|howmany
operator|=
name|rlen
operator|-
name|start
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|howmany
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|root
operator|.
name|addObject
argument_list|(
operator|new
name|JSONSimpleProperty
argument_list|(
literal|"start"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|start
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
operator|new
name|JSONSimpleProperty
argument_list|(
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|howmany
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
operator|new
name|JSONSimpleProperty
argument_list|(
literal|"hits"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|results
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|addObject
argument_list|(
operator|new
name|JSONSimpleProperty
argument_list|(
literal|"session"
argument_list|,
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|Serializer
operator|.
name|PROPERTY_SESSION_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|JSONObject
name|data
init|=
operator|new
name|JSONObject
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Item
name|item
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|--
name|start
init|;
name|i
operator|<
name|start
operator|+
name|howmany
condition|;
name|i
operator|++
control|)
block|{
name|item
operator|=
name|results
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|value
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
name|JSONValue
name|json
decl_stmt|;
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|outputProperties
operator|.
name|getProperty
argument_list|(
literal|"method"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
condition|)
block|{
name|json
operator|=
operator|new
name|JSONValue
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|json
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|=
operator|new
name|JSONValue
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|addObject
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|JSONValue
name|json
init|=
operator|new
name|JSONValue
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
name|json
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
name|data
operator|.
name|addObject
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isExecutableType
parameter_list|(
specifier|final
name|DocumentImpl
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
operator|&&
operator|(
name|MimeType
operator|.
name|XQUERY_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
comment|// a xquery
operator|||
name|MimeType
operator|.
name|XPROC_TYPE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
operator|)
comment|//a xproc
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

