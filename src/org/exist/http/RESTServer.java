begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|response
operator|.
name|ResponseModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  *  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|RESTServer
block|{
specifier|protected
specifier|final
specifier|static
name|String
name|NS
init|=
literal|"http://exist.sourceforge.net/NS/exist"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|XUPDATE_NS
init|=
literal|"http://www.xmldb.org/xupdate"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RESTServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_ERROR_HEAD
init|=
literal|"<html>"
operator|+
literal|"<head>"
operator|+
literal|"<title>Query Error</title>"
operator|+
literal|"<style type=\"text/css\">"
operator|+
literal|".errmsg {"
operator|+
literal|"  border: 1px solid black;"
operator|+
literal|"  padding: 15px;"
operator|+
literal|"  margin-left: 20px;"
operator|+
literal|"  margin-right: 20px;"
operator|+
literal|"}"
operator|+
literal|"h1 { color: #C0C0C0; }"
operator|+
literal|".path {"
operator|+
literal|"  padding-bottom: 10px;"
operator|+
literal|"}"
operator|+
literal|".high { "
operator|+
literal|"  color: #666699; "
operator|+
literal|"  font-weight: bold;"
operator|+
literal|"}"
operator|+
literal|"</style>"
operator|+
literal|"</head>"
operator|+
literal|"<body>"
operator|+
literal|"<h1>XQuery Error</h1>"
decl_stmt|;
specifier|private
name|String
name|formEncoding
decl_stmt|;
comment|//TODO: we may be able to remove this eventually, in favour of HttpServletRequestWrapper being setup in EXistServlet, currently used for doPost() but perhaps could be used for other Request Methods? - deliriumsky
specifier|private
name|String
name|containerEncoding
decl_stmt|;
specifier|private
name|boolean
name|useDynamicContentType
decl_stmt|;
comment|//Constructor
specifier|public
name|RESTServer
parameter_list|(
name|String
name|formEncoding
parameter_list|,
name|String
name|containerEncoding
parameter_list|,
name|boolean
name|useDynamicContentType
parameter_list|)
block|{
name|this
operator|.
name|formEncoding
operator|=
name|formEncoding
expr_stmt|;
name|this
operator|.
name|containerEncoding
operator|=
name|containerEncoding
expr_stmt|;
name|this
operator|.
name|useDynamicContentType
operator|=
name|useDynamicContentType
expr_stmt|;
block|}
comment|/**      * Handle GET request. In the simplest case just returns the document or      * binary resource specified in the path. If the path leads to a collection,      * a listing of the collection contents is returned. If it resolves to a binary      * resource with mime-type "application/xquery", this resource will be      * loaded and executed by the XQuery engine.      *      * The method also recognizes a number of predefined parameters:      *      *<ul>      *<li>_xpath or _query: if specified, the given query is executed on the      * current resource or collection.</li>      *      *<li>_howmany: defines how many items from the query result will be      * returned.</li>      *      *<li>_start: a start offset into the result set.</li>      *      *<li>_wrap: if set to "yes", the query results will be wrapped into a      * exist:result element.</li>      *      *<li>_indent: if set to "yes", the returned XML will be pretty-printed.      *</li>      *      *<li>_source: if set to "yes" and a resource with mime-type "application/xquery" is requested      * then the xquery will not be executed, instead the source of the document will be returned.      * Must be enabled in descriptor.xml with the following syntax       *<xquery-app><allow-source><xquery path="/db/mycollection/myquery.xql"/></allow-source></xquery-app>      *</li>      *       *<li>_xsl: an URI pointing to an XSL stylesheet that will be applied to      * the returned XML.</li>      *      * @param broker      * @param request      * @param response      * @param path      * @throws BadRequestException      * @throws PermissionDeniedException      * @throws NotFoundException      */
specifier|public
name|void
name|doGet
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
comment|//if required, set character encoding
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
comment|// Process special parameters
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|wrap
init|=
literal|true
decl_stmt|;
name|boolean
name|source
init|=
literal|false
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_xpath"
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_query"
argument_list|)
expr_stmt|;
name|String
name|p_howmany
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_howmany"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_howmany
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_howmany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _howmany should be an int"
argument_list|)
throw|;
block|}
block|}
name|String
name|p_start
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getParameter
argument_list|(
literal|"_start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_start
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _start should be an int"
argument_list|)
throw|;
block|}
block|}
name|String
name|option
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_wrap"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|wrap
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_indent"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_source"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|source
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
name|String
name|stylesheet
decl_stmt|;
if|if
condition|(
operator|(
name|stylesheet
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_xsl"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|stylesheet
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|remove
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|)
expr_stmt|;
name|stylesheet
operator|=
literal|null
expr_stmt|;
block|}
else|else
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
else|else
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"stylesheet = "
operator|+
name|stylesheet
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query = "
operator|+
name|query
argument_list|)
expr_stmt|;
name|String
name|encoding
decl_stmt|;
if|if
condition|(
operator|(
name|encoding
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"_encoding"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
else|else
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
comment|// Process the request
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
comment|// check if path leads to an XQuery resource
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|&&
literal|"application/xquery"
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// found an XQuery resource
comment|//Should we display the source of the XQuery or execute it
name|Descriptor
name|descriptor
init|=
name|Descriptor
operator|.
name|getDescriptorSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|&&
name|descriptor
operator|!=
literal|null
condition|)
block|{
comment|//show the source
comment|//check are we allowed to show the xquery source - descriptor.xml
if|if
condition|(
name|descriptor
operator|.
name|allowSourceXQuery
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|//TODO: change writeResourceAs to use a serializer that will serialize xquery to syntax coloured xhtml, replace the asMimeType parameter with a method for specifying the serializer, or split the code into two methods. - deliriumsky
comment|//Show the source of the XQuery
name|writeResourceAs
argument_list|(
name|resource
argument_list|,
name|broker
argument_list|,
name|stylesheet
argument_list|,
name|encoding
argument_list|,
literal|"text/plain"
argument_list|,
name|outputProperties
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we are not allowed to show the source - query not allowed in descriptor.xml
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Permission to view XQuery source for: "
operator|+
name|path
operator|+
literal|" denied. Must be explicitly defined in descriptor.xml"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|//Execute the XQuery
try|try
block|{
name|String
name|result
init|=
name|executeXQuery
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|encoding
operator|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
comment|//only write the response if it is not already committed,
comment|//some xquery functions can write directly to the response
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
literal|"text/html"
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|result
argument_list|,
name|mimeType
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// query parameter specified
try|try
block|{
name|String
name|result
init|=
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|encoding
operator|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
comment|//only write the response if it is not already committed,
comment|//some xquery functions can write directly to the response
if|if
condition|(
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
literal|"text/html"
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|result
argument_list|,
name|mimeType
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
name|query
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no query parameter: try to load a document from the specified
comment|// path
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|// no document: check if path points to a collection
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read collection"
argument_list|)
throw|;
comment|// return a listing of the collection contents
name|writeResponse
argument_list|(
name|response
argument_list|,
name|printCollection
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|)
argument_list|,
literal|"text/xml"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// document found: serialize it
name|writeResourceAs
argument_list|(
name|resource
argument_list|,
name|broker
argument_list|,
name|stylesheet
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|//writes out a resource, uses asMimeType as the specified mime-type or if null uses the type of the resource
specifier|private
name|void
name|writeResourceAs
parameter_list|(
name|DocumentImpl
name|resource
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|String
name|stylesheet
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|asMimeType
parameter_list|,
name|Properties
name|outputProperties
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
comment|//Do we have permission to read the resource
if|if
condition|(
operator|!
name|resource
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read resource"
argument_list|)
throw|;
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
comment|// binary resource
if|if
condition|(
name|asMimeType
operator|!=
literal|null
condition|)
comment|//was a mime-type specified?
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// xml resource
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//use a stylesheet if specified in query parameters
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|resource
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
comment|//Serialize the document
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|prepareStylesheets
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|asMimeType
operator|!=
literal|null
condition|)
comment|//was a mime-type specified?
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|serializer
operator|.
name|isStylesheetApplied
argument_list|()
operator|||
name|serializer
operator|.
name|hasXSLPi
argument_list|(
name|resource
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|asMimeType
operator|=
name|serializer
operator|.
name|getStylesheetProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDynamicContentType
operator|||
name|asMimeType
operator|==
literal|null
condition|)
name|asMimeType
operator|=
literal|"text/html"
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"media-type: "
operator|+
name|asMimeType
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|asMimeType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
name|OutputStream
name|is
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|resource
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing XML: "
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|doHead
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Resource "
operator|+
name|pathUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|resource
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Permission to read resource "
operator|+
name|path
operator|+
literal|" denied"
argument_list|)
throw|;
block|}
name|DocumentMetadata
name|metadata
init|=
name|resource
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|metadata
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
name|resource
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDateHeader
argument_list|(
literal|"Last-Modified"
argument_list|,
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDateHeader
argument_list|(
literal|"Created"
argument_list|,
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handles POST requests. If the path leads to a binary resource with      * mime-type "application/xquery", that resource will be read and executed      * by the XQuery engine. Otherwise, the request content is loaded and parsed      * as XML. It may either contain an XUpdate or a query request.      *      * @param broker      * @param request      * @param response      * @param path      * @throws BadRequestException      * @throws PermissionDeniedException      */
specifier|public
name|void
name|doPost
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
comment|//if required, set character encoding
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultProperties
argument_list|)
decl_stmt|;
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// check if path leads to an XQuery resource.
comment|// if yes, the resource is loaded and the XQuery executed.
name|resource
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|&&
literal|"application/xquery"
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
comment|// found an XQuery resource
try|try
block|{
name|String
name|result
init|=
name|executeXQuery
argument_list|(
name|broker
argument_list|,
name|resource
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
literal|"text/html"
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|result
argument_list|,
name|mimeType
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
comment|// third, normal POST: read the request content and check if
comment|// it is an XUpdate or a query request.
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|enclose
init|=
literal|true
decl_stmt|;
name|String
name|mime
init|=
literal|"text/xml"
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|getRequestContent
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|rootNS
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"query"
argument_list|)
condition|)
block|{
comment|// process<query>xpathQuery</query>
name|String
name|option
init|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"enclose"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
name|enclose
operator|=
literal|false
expr_stmt|;
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"mime"
argument_list|)
expr_stmt|;
name|mime
operator|=
literal|"text/xml"
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|option
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|mime
operator|=
name|option
expr_stmt|;
block|}
name|NodeList
name|children
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Node
name|next
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|query
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
operator|&&
name|node
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|Element
name|property
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|key
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// execute query
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writeResponse
argument_list|(
name|response
argument_list|,
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|outputProperties
argument_list|,
name|enclose
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|,
name|mime
argument_list|,
name|outputProperties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"No query specified"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|XUPDATE_NS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got xupdate request: "
operator|+
name|content
argument_list|)
expr_stmt|;
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|xupdateDoc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdateDoc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|xupdateDoc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read collection"
argument_list|)
throw|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|xupdateDoc
argument_list|)
expr_stmt|;
block|}
else|else
name|broker
operator|.
name|getAllXMLResources
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|REST
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|// FD : Returns an XML doc
name|writeResponse
argument_list|(
name|response
argument_list|,
literal|"<?xml version='1.0'?>\n"
operator|+
literal|"<exist:modifications xmlns:exist='"
operator|+
name|NS
operator|+
literal|"' count='"
operator|+
name|mods
operator|+
literal|"'>"
operator|+
name|mods
operator|+
literal|"modifications processed.</exist:modifications>"
argument_list|,
literal|"text/xml"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// END FD
block|}
else|else
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unknown XML root element: "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|cause
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
name|cause
operator|=
name|e
operator|.
name|getException
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parser exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Query exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"IO exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates an input source from a URL location with an optional      * known charset.      */
specifier|private
name|InputSource
name|createInputSource
parameter_list|(
name|String
name|charset
parameter_list|,
name|URI
name|location
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|location
operator|.
name|toASCIIString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|location
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|.
name|setSystemId
argument_list|(
name|location
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
block|}
comment|/**      * Handles PUT requests. The request content is stored as a new resource at      * the specified location. If the resource already exists, it is overwritten if the      * user has write permissions.      *      * The resource type depends on the content type specified in the HTTP header.      * The content type will be looked up in the global mime table. If the corresponding      * mime type is not a know XML mime type, the resource will be stored as a binary      * resource.      *      * @param broker      * @param tempFile The temp file from which the PUT will get its content      * @param path The path to which the file should be stored      * @param request      * @param response      * @throws BadRequestException      * @throws PermissionDeniedException      */
specifier|public
name|void
name|doPut
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|File
name|tempFile
parameter_list|,
name|XmldbURI
name|path
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
if|if
condition|(
name|tempFile
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"No request content found for PUT"
argument_list|)
throw|;
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|XmldbURI
name|docUri
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|collUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docUri
operator|==
literal|null
operator|||
name|collUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Bad path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|collUri
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collUri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
name|MimeType
name|mime
decl_stmt|;
name|String
name|contentType
init|=
name|request
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|equals
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|semicolon
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
operator|>
literal|0
condition|)
block|{
name|String
name|param
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|semicolon
operator|+
literal|1
argument_list|,
name|equals
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"charset="
argument_list|)
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|param
operator|.
name|substring
argument_list|(
name|equals
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|docUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
name|contentType
operator|=
name|mime
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|URI
name|url
init|=
name|tempFile
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|createInputSource
argument_list|(
name|charset
argument_list|,
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|createInputSource
argument_list|(
name|charset
argument_list|,
name|url
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|"Document "
operator|+
name|docUri
operator|+
literal|" stored."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|is
argument_list|,
name|contentType
argument_list|,
operator|(
name|int
operator|)
name|tempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|"Document "
operator|+
name|docUri
operator|+
literal|" stored as binary resource."
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"/"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception: "
operator|+
name|o
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Internal error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|path
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
comment|// remove the collection
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|"Collection "
operator|+
name|path
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"No document or collection found "
operator|+
literal|"for path: "
operator|+
name|path
argument_list|)
throw|;
block|}
else|else
block|{
comment|// remove the document
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing document "
operator|+
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|path
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|path
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|"Document "
operator|+
name|path
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
block|}
block|}
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Trigger failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Could not acquire lock: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Transaction aborted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRequestContent
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
name|String
name|encoding
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
name|InputStream
name|is
init|=
name|request
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|StringWriter
name|content
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|char
name|ch
index|[]
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|reader
operator|.
name|read
argument_list|(
name|ch
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
name|content
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|content
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
comment|/**      * TODO: pass request and response objects to XQuery.      *      * @throws XPathException      */
specifier|protected
name|String
name|search
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|Properties
name|outputProperties
parameter_list|,
name|boolean
name|wrap
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
else|else
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|pathUri
block|}
argument_list|)
expr_stmt|;
name|declareVariables
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|checkPragmas
argument_list|(
name|context
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Sequence
name|resultSequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|queryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|resultSequence
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
name|queryTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|printResults
argument_list|(
name|broker
argument_list|,
name|resultSequence
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|queryTime
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Pass the request, response and session objects to the XQuery      * context.      *      * @param context      * @param request      * @param response      * @throws XPathException      */
specifier|private
name|void
name|declareVariables
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
name|RequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
name|formEncoding
argument_list|,
name|containerEncoding
argument_list|)
decl_stmt|;
name|ResponseWrapper
name|respw
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|response
argument_list|)
decl_stmt|;
comment|//context.declareNamespace(RequestModule.PREFIX, RequestModule.NAMESPACE_URI);
name|context
operator|.
name|declareVariable
argument_list|(
name|RequestModule
operator|.
name|PREFIX
operator|+
literal|":request"
argument_list|,
name|reqw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|ResponseModule
operator|.
name|PREFIX
operator|+
literal|":response"
argument_list|,
name|respw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|,
name|reqw
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Directly execute an XQuery stored as a      * binary document in the database.      */
specifier|private
name|String
name|executeXQuery
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|resource
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Properties
name|outputProperties
parameter_list|)
throws|throws
name|XPathException
throws|,
name|BadRequestException
block|{
name|Source
name|source
init|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
comment|// special header to indicate that the query is not returned from cache
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|//TODO: don't hardcode this?
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|declareVariables
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Failed to read query from "
operator|+
name|resource
operator|.
name|getURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|checkPragmas
argument_list|(
name|context
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|printResults
argument_list|(
name|broker
argument_list|,
name|result
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outputProperties
argument_list|,
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param query      * @param e      */
specifier|private
name|String
name|formatXPathException
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|path
parameter_list|,
name|XPathException
name|e
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|QUERY_ERROR_HEAD
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"path\"><span class=\"high\">Path</span>: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<a href=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</a></p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"errmsg\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<p><span class=\"high\">Query</span>:</p><pre>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Check if the XQuery contains pragmas that define serialization settings.      * If yes, copy the corresponding settings to the current set of output      * properties.      *      * @param context      */
specifier|protected
name|void
name|checkPragmas
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
block|{
name|Option
name|pragma
init|=
name|context
operator|.
name|getOption
argument_list|(
name|Option
operator|.
name|SERIALIZE_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pragma
operator|==
literal|null
condition|)
return|return;
name|String
index|[]
name|contents
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|pair
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown parameter found in "
operator|+
name|pragma
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": '"
operator|+
name|contents
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting serialization property from pragma: "
operator|+
name|pair
index|[
literal|0
index|]
operator|+
literal|" = "
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|printCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|)
block|{
name|SAXSerializer
name|serializer
init|=
literal|null
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|serializer
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|defaultProperties
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|NS
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmldbURI
name|child
init|=
operator|(
name|XmldbURI
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|childCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childCollection
operator|!=
literal|null
operator|&&
name|childCollection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//add an attribute for the creation date as an xs:dateTime
try|try
block|{
name|DateTimeValue
name|dtCreated
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|childCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtCreated
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|childCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|childCollection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|XmldbURI
name|resource
init|=
name|doc
operator|.
name|getFileURI
argument_list|()
decl_stmt|;
name|DocumentMetadata
name|metadata
init|=
name|doc
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//add an attribute for the creation date as an xs:dateTime
try|try
block|{
name|DateTimeValue
name|dtCreated
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtCreated
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add an attribute for the last modified date as an xs:dateTime
try|try
block|{
name|DateTimeValue
name|dtLastModified
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"last-mofified"
argument_list|,
literal|"last-modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|dtLastModified
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//fallback to long value
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"last-modified"
argument_list|,
literal|"last-modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|)
expr_stmt|;
block|}
block|}
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// should never happen
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while serializing collection contents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|printPermissions
parameter_list|(
name|AttributesImpl
name|attrs
parameter_list|,
name|Permission
name|perm
parameter_list|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"permissions"
argument_list|,
literal|"permissions"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|printResults
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Sequence
name|results
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|long
name|queryTime
parameter_list|,
name|Properties
name|outputProperties
parameter_list|,
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|rlen
init|=
name|results
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|rlen
operator|)
condition|)
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Start parameter out of range"
argument_list|)
throw|;
comment|// FD : correct bound evaluation
if|if
condition|(
operator|(
operator|(
name|howmany
operator|+
name|start
operator|)
operator|>
name|rlen
operator|)
operator|||
operator|(
name|howmany
operator|<=
literal|0
operator|)
condition|)
name|howmany
operator|=
name|rlen
operator|-
name|start
operator|+
literal|1
expr_stmt|;
block|}
else|else
name|howmany
operator|=
literal|0
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SAXSerializer
name|sax
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sax
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|results
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|sax
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|data
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|//response.setCharacterEncoding(encoding);
comment|// possible format contentType: text/xml; charset=UTF-8
if|if
condition|(
name|contentType
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|is
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|is
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

