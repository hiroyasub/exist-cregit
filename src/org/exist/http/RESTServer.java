begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Pragma
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|RESTServer
block|{
specifier|protected
specifier|final
specifier|static
name|String
name|NS
init|=
literal|"http://exist.sourceforge.net/NS/exist"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|XUPDATE_NS
init|=
literal|"http://www.xmldb.org/xupdate"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RESTServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM d, yyyy hh:mm:ss"
argument_list|)
decl_stmt|;
specifier|public
name|RESTServer
parameter_list|()
block|{
block|}
specifier|public
name|Response
name|doGet
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Map
name|parameters
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
block|{
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|wrap
init|=
literal|true
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|query
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_xpath"
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_query"
argument_list|)
expr_stmt|;
name|String
name|p_howmany
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_howmany"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_howmany
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_howmany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _howmany should be an int"
argument_list|)
throw|;
block|}
block|}
name|String
name|p_start
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p_start
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p_start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parameter _start should be an int"
argument_list|)
throw|;
block|}
block|}
name|String
name|option
decl_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_wrap"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|wrap
operator|=
name|option
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_indent"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|String
name|stylesheet
decl_stmt|;
if|if
condition|(
operator|(
name|stylesheet
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_xsl"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|stylesheet
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
else|else
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
else|else
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"stylesheet = "
operator|+
name|stylesheet
argument_list|)
expr_stmt|;
name|String
name|encoding
decl_stmt|;
if|if
condition|(
operator|(
name|encoding
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"_encoding"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
else|else
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContent
argument_list|(
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|d
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read collection"
argument_list|)
throw|;
name|response
operator|=
operator|new
name|Response
argument_list|(
name|printCollection
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read resource"
argument_list|)
throw|;
if|if
condition|(
name|d
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|response
operator|.
name|setContent
argument_list|(
name|broker
operator|.
name|getBinaryResourceData
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|d
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|serializer
operator|.
name|isStylesheetApplied
argument_list|()
condition|)
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|saxe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing XML: "
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|response
return|;
block|}
specifier|public
name|Response
name|doPost
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
block|{
name|boolean
name|indent
init|=
literal|true
decl_stmt|;
name|boolean
name|summary
init|=
literal|false
decl_stmt|;
name|int
name|howmany
init|=
literal|10
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|boolean
name|enclose
init|=
literal|true
decl_stmt|;
name|String
name|mime
init|=
literal|"text/xml"
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultProperties
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|Response
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|rootNS
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"query"
argument_list|)
condition|)
block|{
comment|// process<query>xpathQuery</query>
name|String
name|option
init|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
try|try
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
try|try
block|{
name|howmany
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"enclose"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
name|enclose
operator|=
literal|false
expr_stmt|;
block|}
name|option
operator|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"mime"
argument_list|)
expr_stmt|;
name|mime
operator|=
literal|"text/xml"
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|option
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|mime
operator|=
name|option
expr_stmt|;
block|}
name|NodeList
name|children
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Node
name|next
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|query
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS
argument_list|)
operator|&&
name|node
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
name|Element
name|property
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|key
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// execute query
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|mime
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|search
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
name|path
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|outputProperties
argument_list|,
name|enclose
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"No query specified"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|rootNS
operator|!=
literal|null
operator|&&
name|rootNS
operator|.
name|equals
argument_list|(
name|XUPDATE_NS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got xupdate request: "
operator|+
name|content
argument_list|)
expr_stmt|;
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|xupdateDoc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|xupdateDoc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|xupdateDoc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to read collection"
argument_list|)
throw|;
name|docs
operator|.
name|add
argument_list|(
name|xupdateDoc
argument_list|)
expr_stmt|;
block|}
else|else
name|broker
operator|.
name|getAllDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|()
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|//	FD : Returns an XML doc
name|response
operator|=
operator|new
name|Response
argument_list|(
literal|"<?xml version='1.0'?>\n"
operator|+
literal|"<exist:modifications mlns:exist='"
operator|+
name|NS
operator|+
literal|"' count='"
operator|+
name|mods
operator|+
literal|"'>"
operator|+
name|mods
operator|+
literal|"modifications processed.</exist:modifications>"
argument_list|)
expr_stmt|;
comment|// END FD
block|}
else|else
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Unknown XML root element: "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|cause
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
name|cause
operator|=
name|e
operator|.
name|getException
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"SAX exception while parsing request: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parser exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Query exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"IO exception while parsing request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|Response
name|doPut
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|File
name|tempFile
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|docPath
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|tempFile
operator|==
literal|null
condition|)
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"No request content found for PUT"
argument_list|)
throw|;
name|Response
name|response
decl_stmt|;
try|try
block|{
name|int
name|p
init|=
name|docPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
operator|||
name|p
operator|==
name|docPath
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Bad path: "
operator|+
name|docPath
argument_list|)
throw|;
else|else
block|{
name|String
name|collectionName
init|=
name|docPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|docPath
operator|=
name|docPath
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
name|String
name|url
init|=
name|tempFile
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
operator|||
name|contentType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"text/xml"
argument_list|)
condition|)
block|{
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|addDocument
argument_list|(
name|broker
argument_list|,
name|docPath
argument_list|,
operator|new
name|InputSource
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
name|response
operator|.
name|setDescription
argument_list|(
literal|"Document "
operator|+
name|docPath
operator|+
literal|" stored."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|chunk
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|int
name|l
decl_stmt|;
while|while
condition|(
operator|(
name|l
operator|=
name|is
operator|.
name|read
argument_list|(
name|chunk
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|broker
argument_list|,
name|docPath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
name|response
operator|.
name|setDescription
argument_list|(
literal|"Document "
operator|+
name|docPath
operator|+
literal|" stored as binary resource."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception at "
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"/"
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|Exception
name|o
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|o
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Parsing exception: "
operator|+
name|o
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Internal error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Internal error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|Response
name|doDelete
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|NotFoundException
block|{
name|Response
name|response
decl_stmt|;
try|try
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
comment|// remove the collection
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
name|response
operator|.
name|setDescription
argument_list|(
literal|"Collection "
operator|+
name|path
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"No document or collection found "
operator|+
literal|"for path: "
operator|+
name|path
argument_list|)
throw|;
else|else
block|{
comment|// remove the document
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing document "
operator|+
name|path
argument_list|)
expr_stmt|;
name|int
name|p
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|docName
init|=
name|p
operator|<
literal|0
operator|||
name|p
operator|==
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|?
name|path
else|:
name|path
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeBinaryResource
argument_list|(
name|broker
argument_list|,
name|docName
argument_list|)
expr_stmt|;
else|else
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|removeDocument
argument_list|(
name|broker
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
name|response
operator|.
name|setDescription
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Trigger failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Could not acquire lock: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/** 	 * TODO: pass request and response objects to XQuery. 	 */
specifier|protected
name|String
name|search
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|Properties
name|outputProperties
parameter_list|,
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|()
expr_stmt|;
else|else
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|String
index|[]
block|{
name|path
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|checkPragmas
argument_list|(
name|context
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Sequence
name|resultSequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|queryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|resultSequence
operator|.
name|getLength
argument_list|()
operator|+
literal|" in "
operator|+
name|queryTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|printResults
argument_list|(
name|broker
argument_list|,
name|resultSequence
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|queryTime
argument_list|,
name|outputProperties
argument_list|,
name|wrap
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Check if the XQuery contains pragmas that define serialization settings. 	 * If yes, copy the corresponding settings to the current set of output properties. 	 *  	 * @param context 	 */
specifier|protected
name|void
name|checkPragmas
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
block|{
name|Pragma
name|pragma
init|=
name|context
operator|.
name|getPragma
argument_list|(
name|Pragma
operator|.
name|SERIALIZE_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pragma
operator|==
literal|null
condition|)
return|return;
name|String
index|[]
name|contents
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|pair
init|=
name|Pragma
operator|.
name|parseKeyValuePair
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown parameter found in "
operator|+
name|pragma
operator|.
name|getQName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": '"
operator|+
name|contents
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting serialization property from pragma: "
operator|+
name|pair
index|[
literal|0
index|]
operator|+
literal|" = "
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|printCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|)
block|{
name|SAXSerializer
name|serializer
init|=
literal|null
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|serializer
operator|=
name|SAXSerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowSAXSerializer
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setOutputProperties
argument_list|(
name|defaultProperties
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|NS
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|child
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|childCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childCollection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|childCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|childCollection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|String
name|resource
init|=
name|doc
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|resource
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|p
operator|<
literal|0
condition|?
name|resource
else|:
name|resource
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|doc
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"last-modified"
argument_list|,
literal|"last-modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|doc
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|printPermissions
argument_list|(
name|attrs
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"resource"
argument_list|,
literal|"exist:resource"
argument_list|)
expr_stmt|;
block|}
block|}
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"collection"
argument_list|,
literal|"exist:collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// should never happen
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while serializing collection contents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SAXSerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnSAXSerializer
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|printPermissions
parameter_list|(
name|AttributesImpl
name|attrs
parameter_list|,
name|Permission
name|perm
parameter_list|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"permissions"
argument_list|,
literal|"permissions"
argument_list|,
literal|"CDATA"
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|printResults
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Sequence
name|results
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|long
name|queryTime
parameter_list|,
name|Properties
name|outputProperties
parameter_list|,
name|boolean
name|wrap
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|int
name|rlen
init|=
name|results
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|rlen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|start
operator|<
literal|1
operator|)
operator|||
operator|(
name|start
operator|>
name|rlen
operator|)
condition|)
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Start parameter out of range"
argument_list|)
throw|;
comment|// FD : correct bound evaluation
if|if
condition|(
operator|(
operator|(
name|howmany
operator|+
name|start
operator|)
operator|>
name|rlen
operator|)
operator|||
operator|(
name|howmany
operator|<=
literal|0
operator|)
condition|)
name|howmany
operator|=
name|rlen
operator|-
name|start
operator|+
literal|1
expr_stmt|;
block|}
else|else
name|howmany
operator|=
literal|0
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SAXSerializer
name|sax
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sax
operator|=
name|SAXSerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowSAXSerializer
argument_list|()
expr_stmt|;
name|sax
operator|.
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutputProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|results
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
comment|//			AttributesImpl attrs = new AttributesImpl();
comment|//			attrs.addAttribute("", "hits", "hits", "CDATA", Integer.toString(rlen));
comment|//			attrs.addAttribute("", "start", "start", "CDATA", Integer.toString(start));
comment|//			attrs.addAttribute("", "count", "count", "CDATA", Integer.toString(howmany));
comment|//			if (enclose == 1) {
comment|//				sax.startPrefixMapping("exist", NS);
comment|//				sax.startElement(NS, "result", "exist:result", attrs);
comment|//	    	}
comment|//
comment|//			Item item;
comment|//			for (int i = --start; i< start + howmany; i++) {
comment|//				item = results.itemAt(i);
comment|//				if (item == null) {
comment|//					LOG.debug("item " + i + " not found");
comment|//					continue;
comment|//				}
comment|//				if (Type.subTypeOf(item.getType(), Type.NODE)) {
comment|//					NodeValue node = (NodeValue) item;
comment|//					serializer.toSAX(node);
comment|//				} else {
comment|//					attrs.clear();
comment|//					attrs.addAttribute("", "type", "type", "CDATA", Type.getTypeName(item.getType()));
comment|//					sax.startElement(NS, "value", "exist:value", attrs);
comment|//					item.toSAX(broker, sax);
comment|//					sax.endElement(NS, "value", "exist:value");
comment|//				}
comment|//			}
comment|//
comment|//			if (enclose == 1) {
comment|//				sax.endElement(NS, "result", "exist:result");
comment|//				sax.endPrefixMapping("exist");
comment|//            }
comment|//			sax.endDocument();
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Error while serializing xml: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

