begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id: RESTServer.java 3567 2006-05-19 13:37:34 +0000 (Fri, 19 May 2006) wolfgang_m $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TemplatesHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|HttpResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|WSDLFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|response
operator|.
name|ResponseModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter (adam.retter@devon.gov.uk)  */
end_comment

begin_class
specifier|public
class|class
name|SOAPServer
block|{
specifier|private
name|String
name|formEncoding
decl_stmt|;
comment|//TODO: we may be able to remove this eventually, in favour of HttpServletRequestWrapper being setup in EXistServlet, currently used for doPost() but perhaps could be used for other Request Methods? - deliriumsky
specifier|private
name|String
name|containerEncoding
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SEPERATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XSLT_WEBSERVICE_WSDL
init|=
literal|"/db/system/webservice/wsdl.xslt"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XSLT_WEBSERVICE_HUMAN_DESCRIPTION
init|=
literal|"/db/system/webservice/human.description.xslt"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XSLT_WEBSERVICE_FUNCTION_DESCRIPTION
init|=
literal|"/db/system/webservice/function.description.xslt"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|WEBSERVICE_MODULE_EXTENSION
init|=
literal|".xqws"
decl_stmt|;
specifier|private
name|HashMap
name|XQWSDescriptionsCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//TODO: SHARE THIS FUNCTION WITH RESTServer (copied at the moment)
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_ERROR_HEAD
init|=
literal|"<html>"
operator|+
literal|"<head>"
operator|+
literal|"<title>Query Error</title>"
operator|+
literal|"<style type=\"text/css\">"
operator|+
literal|".errmsg {"
operator|+
literal|"  border: 1px solid black;"
operator|+
literal|"  padding: 15px;"
operator|+
literal|"  margin-left: 20px;"
operator|+
literal|"  margin-right: 20px;"
operator|+
literal|"}"
operator|+
literal|"h1 { color: #C0C0C0; }"
operator|+
literal|".path {"
operator|+
literal|"  padding-bottom: 10px;"
operator|+
literal|"}"
operator|+
literal|".high { "
operator|+
literal|"  color: #666699; "
operator|+
literal|"  font-weight: bold;"
operator|+
literal|"}"
operator|+
literal|"</style>"
operator|+
literal|"</head>"
operator|+
literal|"<body>"
operator|+
literal|"<h1>XQuery Error</h1>"
decl_stmt|;
comment|/** 	 * Constructor 	 *  	 * @param formEncoding	The character encoding method to be used for form data 	 * @param containerEncoding	The character encoding method to be used for the container   	 */
specifier|public
name|SOAPServer
parameter_list|(
name|String
name|formEncoding
parameter_list|,
name|String
name|containerEncoding
parameter_list|)
block|{
name|this
operator|.
name|formEncoding
operator|=
name|formEncoding
expr_stmt|;
name|this
operator|.
name|containerEncoding
operator|=
name|containerEncoding
expr_stmt|;
block|}
comment|/**      * Gets XQWS file from the db      *       * @param broker 	The Database Broker to use      * @param path		The Path to the XQWS      *       * @return	The XQWS BinaryDocument      */
specifier|private
name|BinaryDocument
name|getXQWS
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|BinaryDocument
name|docXQWS
init|=
operator|(
name|BinaryDocument
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|//close the XQWS Document and release the read lock
name|docXQWS
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
name|docXQWS
return|;
block|}
comment|/**      * Gets the data from an XQWS Binary Document      *       * @param broker	The Database Broker to use      * @param docXQWS	The XQWS Binary Document      *       * @return	byte array containing the content of the XQWS Binary document      */
specifier|private
name|byte
index|[]
name|getXQWSData
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|BinaryDocument
name|docXQWS
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|broker
operator|.
name|getBinaryResource
argument_list|(
name|docXQWS
argument_list|)
decl_stmt|;
return|return
name|data
return|;
block|}
comment|/**      * Get's the namespace of the XQWS form the content of an XQWS      *      * @param xqwsData	The content of an XQWS file      *       * @return The namespace QName      */
specifier|private
name|QName
name|getXQWSNamespace
parameter_list|(
name|byte
index|[]
name|xqwsData
parameter_list|)
block|{
comment|//move through the xqws char by char checking if a line contains the module namespace declaration
name|StringBuffer
name|sbNamespace
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xqwsData
argument_list|)
decl_stmt|;
while|while
condition|(
name|bis
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|bis
operator|.
name|read
argument_list|()
decl_stmt|;
comment|//TODO: do we need encoding here?
name|sbNamespace
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|SEPERATOR
operator|.
name|charAt
argument_list|(
name|SEPERATOR
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
if|if
condition|(
name|sbNamespace
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"module namespace"
argument_list|)
condition|)
block|{
comment|//break out of the while loop, sbNamespace should now contain our namespace
break|break;
block|}
else|else
block|{
comment|//empty the namespace buffer
name|sbNamespace
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sbNamespace
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//seperate the name and url
name|String
name|namespaceName
init|=
name|sbNamespace
operator|.
name|substring
argument_list|(
literal|"module namespace"
operator|.
name|length
argument_list|()
argument_list|,
name|sbNamespace
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|namespaceURL
init|=
name|sbNamespace
operator|.
name|substring
argument_list|(
name|sbNamespace
operator|.
name|indexOf
argument_list|(
literal|"\""
argument_list|)
operator|+
literal|1
argument_list|,
name|sbNamespace
operator|.
name|lastIndexOf
argument_list|(
literal|"\""
argument_list|)
argument_list|)
decl_stmt|;
comment|//return the XQWS namespace
return|return
operator|new
name|QName
argument_list|(
name|namespaceName
argument_list|,
name|namespaceURL
argument_list|)
return|;
block|}
comment|/**      * Compiles an XQuery or returns a cached version if one exists      *       * @param broker	The Database Broker to use      * @param xqSource	The XQuery source      * @param staticallyKnownDocuments	An array of XmldbURI's for documents that should be considered statically known by the XQuery      * @param xqwsCollectionUri	The XmldbUri of the collection where the XQWS resides      * @param request	The HttpServletRequest for the XQWS      * @param response	The HttpServletResponse for the XQWS      *       * @return The compiled XQuery      */
specifier|private
name|CompiledXQuery
name|compileXQuery
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Source
name|xqSource
parameter_list|,
name|XmldbURI
index|[]
name|staticallyKnownDocuments
parameter_list|,
name|XmldbURI
name|xqwsCollectionUri
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//Get the xquery service
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
comment|//try and get pre-compiled XQuery from the cache
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|xqSource
argument_list|)
decl_stmt|;
comment|//Create the context and set a header to indicate cache status
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
comment|//response.setHeader("X-XQuery-Cached", "false");
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
comment|//response.setHeader("X-XQuery-Cached", "true");
block|}
comment|//Setup the context
name|declareVariables
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|//context.setModuleLoadPath(XmldbURI.EMBEDDED_SERVER_URI.append(docXQWS.getCollection().getURI()).toString());
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|xqwsCollectionUri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//context.setStaticallyKnownDocuments(new XmldbURI[] { docXQWS.getCollection().getURI() });
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|staticallyKnownDocuments
argument_list|)
expr_stmt|;
comment|//no pre-compiled XQuery, so compile, it
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|xqSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Failed to compile query: "
operator|+
name|xqSource
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//store the compiled xqws for use later
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|xqSource
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
return|return
name|compiled
return|;
block|}
comment|/**      * Creates a simple XQuery to include an XQWS      *       * @param broker	The Database Broker to use      * @param xqwsFileUri	The XmldbURI of the XQWS file      * @param xqwsNamespace	The namespace of the xqws      * @param xqwsCollectionUri	The XmldbUri of the collection where the XQWS resides      *       * @return The compiled XQuery      */
specifier|private
name|CompiledXQuery
name|SimpleXQueryIncludeXQWS
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|xqwsFileUri
parameter_list|,
name|QName
name|xqwsNamespace
parameter_list|,
name|XmldbURI
name|xqwsCollectionUri
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//Create a simple XQuery wrapper to access the module
name|String
name|query
init|=
literal|"xquery version \"1.0\";"
operator|+
name|SEPERATOR
decl_stmt|;
name|query
operator|+=
name|SEPERATOR
expr_stmt|;
name|query
operator|+=
literal|"import module namespace "
operator|+
name|xqwsNamespace
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"=\""
operator|+
name|xqwsNamespace
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"\" at \""
operator|+
name|xqwsFileUri
operator|.
name|toString
argument_list|()
operator|+
literal|"\";"
operator|+
name|SEPERATOR
expr_stmt|;
name|query
operator|+=
name|SEPERATOR
expr_stmt|;
name|query
operator|+=
literal|"()"
expr_stmt|;
comment|//compile the query
return|return
name|compileXQuery
argument_list|(
name|broker
argument_list|,
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
argument_list|,
operator|new
name|XmldbURI
index|[]
block|{
name|xqwsCollectionUri
block|}
argument_list|,
name|xqwsCollectionUri
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|CompiledXQuery
name|XQueryExecuteXQWSFunction
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|xqwsFileUri
parameter_list|,
name|QName
name|xqwsNamespace
parameter_list|,
name|XmldbURI
name|xqwsCollectionUri
parameter_list|,
name|Node
name|xqwsSOAPFunction
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|query
init|=
literal|"xquery version \"1.0\";"
operator|+
name|SEPERATOR
decl_stmt|;
name|query
operator|+=
name|SEPERATOR
expr_stmt|;
name|query
operator|+=
literal|"import module namespace "
operator|+
name|xqwsNamespace
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"=\""
operator|+
name|xqwsNamespace
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"\" at \""
operator|+
name|xqwsFileUri
operator|.
name|toString
argument_list|()
operator|+
literal|"\";"
operator|+
name|SEPERATOR
expr_stmt|;
name|query
operator|+=
name|SEPERATOR
expr_stmt|;
comment|//query += "()";
name|String
name|functionName
init|=
name|xqwsSOAPFunction
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|query
operator|+=
name|xqwsNamespace
operator|.
name|getLocalName
argument_list|()
operator|+
literal|":"
operator|+
name|functionName
operator|+
literal|"("
expr_stmt|;
name|NodeList
name|functionArgs
init|=
name|xqwsSOAPFunction
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functionArgs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
block|}
name|query
operator|+=
literal|")"
expr_stmt|;
comment|//compile the query
return|return
name|compileXQuery
argument_list|(
name|broker
argument_list|,
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
argument_list|,
operator|new
name|XmldbURI
index|[]
block|{
name|xqwsCollectionUri
block|}
argument_list|,
name|xqwsCollectionUri
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
return|;
block|}
comment|/**      * Transforms a document with a stylesheet and streams the result to the http response      *       * @param broker	The DBBroker to use      * @param docWebService	An in-memory document describing the webservice      * @param docStyleSheet	A stylesheet document from the db      * @param request	The Http Servlets request for this webservice      * @param response The Http Servlets response to the request for this webservice      * @param path	The request path      */
specifier|private
name|void
name|StreamTransform
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|docWebService
parameter_list|,
name|DocumentImpl
name|docStyleSheet
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Transform docWebservice with the stylesheet
try|try
block|{
comment|/*         	 * TODO: the code in this try statement (apart from the WSDLFilter use) was mostly extracted from         	 * transform:stream-transform(), it would be better to be able to share that code somehow         	 */
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TemplatesHandler
name|templatesHandler
init|=
name|factory
operator|.
name|newTemplatesHandler
argument_list|()
decl_stmt|;
name|templatesHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|WSDLFilter
name|wsdlfilter
init|=
operator|new
name|WSDLFilter
argument_list|(
name|templatesHandler
argument_list|,
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|wsdlfilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|docStyleSheet
argument_list|)
expr_stmt|;
name|templatesHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|(
name|templatesHandler
operator|.
name|getTemplates
argument_list|()
argument_list|)
decl_stmt|;
comment|//START send result of transformation directly to response
name|OutputStream
name|os
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|//END
comment|/**              * TODO: Validation should be done before WSDL is sent to the client. org.exist.validation.Validator              * will need to make use of org.exist.validation.internal.BlockingOutputStream to connect to the Validator.              *               */
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|docWebService
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|tce
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
literal|null
argument_list|,
literal|"SAX exception while transforming node: "
operator|+
name|tce
operator|.
name|getMessage
argument_list|()
argument_list|,
name|tce
argument_list|)
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
literal|null
argument_list|,
literal|"SAX exception while transforming node: "
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//close the Stylesheet Document and release the read lock
name|docStyleSheet
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get's an XQWS Description from the cache.      * If the description in the cache is out of date it will be refreshed.      * If there is no cached description a new one is created and added      * to the cache.      *       * @param broker	The Database Broker to use      * @param path	The path of the http request      * @param request	The HttpServletRequest for the XQWS      *       * @return An object describing the XQWS      */
specifier|private
name|XQWSDescription
name|getXQWSDescription
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|XQWSDescription
name|description
decl_stmt|;
comment|//is there a description for this path
if|if
condition|(
name|XQWSDescriptionsCache
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|//get the description from the cache
name|description
operator|=
operator|(
name|XQWSDescription
operator|)
name|XQWSDescriptionsCache
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//is the description is invalid, refresh it
if|if
condition|(
operator|!
name|description
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|description
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//create a new description
name|description
operator|=
operator|new
name|XQWSDescription
argument_list|(
name|broker
argument_list|,
name|path
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|//store description in the cache
name|XQWSDescriptionsCache
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|description
argument_list|)
expr_stmt|;
comment|//return the description
return|return
name|description
return|;
block|}
comment|/** 	 * HTTP GET 	 * Processes requests for description documents - WSDL, Human Readable and Human Readable for a specific function 	 *  	 * TODO: I think simple webservices can also be called using GET, so we may need to cater for that as well 	 * but first it would be best to write the doPost() method, split the code out into functions and also use it for this. 	 */
specifier|public
name|void
name|doGet
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|NotFoundException
throws|,
name|IOException
block|{
comment|//set the encoding
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
comment|/* Process the request */
try|try
block|{
comment|//Get a Description of the XQWS
name|XQWSDescription
name|description
init|=
name|getXQWSDescription
argument_list|(
name|broker
argument_list|,
name|path
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|//Get the approriate description for the user
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"WSDL"
argument_list|)
operator|!=
literal|null
operator|||
name|request
operator|.
name|getParameter
argument_list|(
literal|"wsdl"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//WSDL
name|result
operator|=
name|description
operator|.
name|getWSDL
argument_list|()
expr_stmt|;
comment|//set output content type for wsdl
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"function"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//Specific Function Description
name|result
operator|=
name|description
operator|.
name|getFunctionDescription
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"function"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Human Readable Description
name|result
operator|=
name|description
operator|.
name|getHumanDescription
argument_list|()
expr_stmt|;
block|}
comment|//send the description to the http servlet response
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|xpe
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
literal|null
argument_list|,
literal|"SAX exception while transforming node: "
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|tce
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
literal|null
argument_list|,
literal|"SAX exception while transforming node: "
operator|+
name|tce
operator|.
name|getMessage
argument_list|()
argument_list|,
name|tce
argument_list|)
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//process incomoing SOAP requests
specifier|public
name|void
name|doPost
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
comment|/* 		 * Example incoming SOAP Request 		 *<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"><SOAP-ENV:Header/><SOAP-ENV:Body><echo xmlns="http://localhost:8080/exist/servlet/db/echo.xqws"><arg1>adam</arg1></echo></SOAP-ENV:Body></SOAP-ENV:Envelope> 		 */
comment|// 1) Read the incoming SOAP request
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
name|is
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|is
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|/*** TEMP ***/
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*** end TEMP ***/
comment|// 2) Create an XML Document from the SOAP Request
name|Document
name|soapRequest
init|=
name|BuildXMLDocument
argument_list|(
name|buf
argument_list|)
decl_stmt|;
comment|// 3) Validate the SOAP Request
comment|//TODO: validate the SOAP Request
comment|// 4) Extract the function call from the SOAP Request
name|NodeList
name|nlBody
init|=
name|soapRequest
operator|.
name|getElementsByTagNameNS
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|,
literal|"Body"
argument_list|)
decl_stmt|;
name|Node
name|nBody
init|=
name|nlBody
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|nFunction
init|=
name|nBody
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
comment|// 5) Check the namespace for the function in the SOAP document is the same as the request path?
name|NamedNodeMap
name|attrs
init|=
name|nFunction
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|funcNamespace
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"xmlns"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|funcNamespace
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|//function in SOAP request has an invalid namespace
comment|//TODO: suitable exception
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"invalid namespace"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/** NOTE to adam: maybe we can cache the xml 		 * that describes the webservice so we dont 		 * have to generate it again **/
comment|/*** start: replace with cache ***/
comment|// 6) Get the XQWS
name|BinaryDocument
name|docXQWS
init|=
name|getXQWS
argument_list|(
name|broker
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|xqwsData
init|=
name|getXQWSData
argument_list|(
name|broker
argument_list|,
name|docXQWS
argument_list|)
decl_stmt|;
comment|// 7) Get the XQWS Namespace
name|QName
name|xqwsNamespace
init|=
name|getXQWSNamespace
argument_list|(
name|xqwsData
argument_list|)
decl_stmt|;
comment|// 8) Compile a Simple XQuery to access the module
name|CompiledXQuery
name|compiled
decl_stmt|;
try|try
block|{
name|compiled
operator|=
name|SimpleXQueryIncludeXQWS
argument_list|(
name|broker
argument_list|,
name|docXQWS
operator|.
name|getFileURI
argument_list|()
argument_list|,
name|xqwsNamespace
argument_list|,
name|docXQWS
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|response
argument_list|,
name|formatXPathException
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
operator|new
name|XPathException
argument_list|(
literal|null
argument_list|,
literal|"XPath exception while compiling xquery: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|,
literal|"text/html"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// 9) Inspect the XQWS and its function signatures and create a small XML document to represent it
name|Module
name|modXQWS
init|=
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|getModule
argument_list|(
name|xqwsNamespace
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|docWebService
init|=
name|describeWebService
argument_list|(
name|modXQWS
argument_list|,
name|docXQWS
operator|.
name|getFileURI
argument_list|()
argument_list|,
name|request
argument_list|,
name|path
argument_list|)
decl_stmt|;
comment|/*** end: replace with cache ***/
comment|// 10) Create an XQuery to call the XQWS function
block|}
comment|/** 	 * Builds an XML Document from a string representation 	 *  	 * @param buf	The XML Document content 	 *  	 * @return	DOM XML Document 	 */
specifier|private
name|Document
name|BuildXMLDocument
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
try|try
block|{
comment|//try and construct xml document from input stream, we use eXist's in-memory DOM implementation
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//TODO : we should be able to cope with context.getBaseURI()
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
comment|//return receiver.getDocument();
return|return
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|//do nothing, we will default to trying to return a string below
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|//do nothing, we will default to trying to return a string below
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//do nothing, we will default to trying to return a string below
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Describes an XQWS by building an XML node representation of the XQWS module 	 *  	 *<webservice> 	 *<name/> 	 *<description/> 	 *<host/> 	 *<path/> 	 *<URL/> 	 *<functions> 	 * 		@see org.exist.http.SOAPServer#describeFunction(org.exist.xquery.FunctionSignature, org.exist.memtree.MemTreeBuilder) 	 *</functions> 	 *</webservice> 	 * 	 * @param modXQWS	The XQWS XQuery module 	 * @param xqwsFileUri	The File URI of the XQWS 	 * @param request	The Http Servlet request for this webservice 	 * @param path	The request path 	 *   	 * @return	An in-memory document describing the webservice 	 */
specifier|private
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|describeWebService
parameter_list|(
name|Module
name|modXQWS
parameter_list|,
name|XmldbURI
name|xqwsFileUri
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|FunctionSignature
index|[]
name|xqwsFunctions
init|=
name|modXQWS
operator|.
name|listFunctions
argument_list|()
decl_stmt|;
name|MemTreeBuilder
name|builderWebserviceDoc
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
name|builderWebserviceDoc
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"webservice"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|characters
argument_list|(
name|xqwsFileUri
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|xqwsFileUri
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|WEBSERVICE_MODULE_EXTENSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|characters
argument_list|(
name|modXQWS
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"host"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|characters
argument_list|(
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|characters
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"URL"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|characters
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"functions"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|xqwsFunctions
operator|.
name|length
condition|;
name|f
operator|++
control|)
block|{
comment|//All Function Descriptions
name|describeFunction
argument_list|(
name|xqwsFunctions
index|[
name|f
index|]
argument_list|,
name|builderWebserviceDoc
argument_list|)
expr_stmt|;
block|}
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderWebserviceDoc
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|builderWebserviceDoc
operator|.
name|getDocument
argument_list|()
return|;
block|}
comment|/** 	 * Describes an XQWS function by building an XML node representation of the function signature 	 *  	 *<function> 	 *<name/> 	 *<description/> 	 *<parameters> 	 *<parameter> 	 *<name/> 	 *<type/> 	 *<cardinality/> 	 *</parameter> 	 *</parameters> 	 *<return> 	 *<type/> 	 *<cardinality/> 	 *</return> 	 *</function> 	 *  	 * @param signature	The function signature to describe 	 * @param builderFunction	The MemTreeBuilder to write the description to 	 */
specifier|private
name|void
name|describeFunction
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|,
name|MemTreeBuilder
name|builderFunction
parameter_list|)
block|{
comment|//Generate an XML snippet for each function
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"function"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|signature
operator|.
name|getName
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|signature
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|signature
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|SequenceType
index|[]
name|xqwsArguments
init|=
name|signature
operator|.
name|getArgumentTypes
argument_list|()
decl_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"parameters"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|xqwsArguments
operator|.
name|length
condition|;
name|a
operator|++
control|)
block|{
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"parameter"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//builderFunction.characters(xqwsArguments[a].getNodeName().getLocalName()); //TODO: how to get parameter name?
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|Type
operator|.
name|getTypeName
argument_list|(
name|xqwsArguments
index|[
name|a
index|]
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"cardinality"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|xqwsArguments
index|[
name|a
index|]
operator|.
name|getCardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"return"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|Type
operator|.
name|getTypeName
argument_list|(
name|signature
operator|.
name|getReturnType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"cardinality"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|signature
operator|.
name|getReturnType
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builderFunction
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|//TODO: SHARE THIS FUNCTION WITH RESTServer (copied at the moment)
comment|/**      * Pass the request, response and session objects to the XQuery      * context.      *      * @param context      * @param request      * @param response      * @throws XPathException      */
specifier|private
name|void
name|declareVariables
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|RequestWrapper
name|reqw
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|request
argument_list|,
name|formEncoding
argument_list|,
name|containerEncoding
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|RequestModule
operator|.
name|PREFIX
operator|+
literal|":request"
argument_list|,
name|reqw
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|,
name|reqw
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|ResponseWrapper
name|respw
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|ResponseModule
operator|.
name|PREFIX
operator|+
literal|":response"
argument_list|,
name|respw
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO: SHARE THIS FUNCTION WITH RESTServer (copied at the moment)
comment|/**      * @param query      * @param e      */
specifier|private
name|String
name|formatXPathException
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|path
parameter_list|,
name|XPathException
name|e
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|QUERY_ERROR_HEAD
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"path\"><span class=\"high\">Path</span>: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<a href=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</a></p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<p class=\"errmsg\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<p><span class=\"high\">Query</span>:</p><pre>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</pre>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//TODO: SHARE THIS FUNCTION WITH RESTServer (copied at the moment)
specifier|private
name|void
name|writeResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|data
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|//        response.setCharacterEncoding(encoding);
comment|// possible format contentType: text/xml; charset=UTF-8
if|if
condition|(
name|contentType
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|is
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|is
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|XQWSDescription
block|{
specifier|private
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|HttpServletRequestURL
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|XQWSPath
init|=
literal|null
decl_stmt|;
comment|//cache for internal Description of an XQWS
specifier|private
name|long
name|lastModifiedXQWS
init|=
literal|0
decl_stmt|;
specifier|private
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|docXQWSDescription
init|=
literal|null
decl_stmt|;
comment|//cache for XQWS WSDL
specifier|private
name|long
name|lastModifiedWSDL
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
index|[]
name|descriptionWSDL
init|=
literal|null
decl_stmt|;
comment|//cache for XQWS Human Readable description
specifier|private
name|long
name|lastModifiedHuman
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
index|[]
name|descriptionHuman
init|=
literal|null
decl_stmt|;
comment|//Cache for XQWS (Human Readable) Function description
specifier|private
name|long
name|lastModifiedFunction
init|=
literal|0
decl_stmt|;
name|HashMap
name|descriptionFunction
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|//key: functionName as String, value: byte[]
specifier|public
name|XQWSDescription
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|XQWSPath
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|HttpServletRequestURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|XQWSPath
operator|=
name|XQWSPath
expr_stmt|;
name|createInternalDescription
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**     	 * Determines if this description of the XQWS is valid     	 *      	 * @return true if the description is valid, false otherwise     	 */
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
name|BinaryDocument
name|docXQWS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|docXQWS
operator|=
name|getXQWS
argument_list|(
name|broker
argument_list|,
name|XQWSPath
argument_list|)
expr_stmt|;
return|return
operator|(
name|docXQWS
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|==
name|lastModifiedXQWS
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
comment|//TODO: log message
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|docXQWS
operator|!=
literal|null
condition|)
block|{
name|docXQWS
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**     	 * Updates an XQWS Description by re-reading the XQWS     	 * Should be called if isValid() returns false and an XQWS description is needed further      	 *      	 * @param request	The HttpServletRequest to update for     	 */
specifier|public
name|void
name|update
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
name|createInternalDescription
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**     	 * Returns the WSDL for the XQWS Description     	 * Caches the result, however the cache is regenerated if     	 * the StyleSheet used for the transformation changes     	 *      	 * @return byte array containing the WSDL     	 */
specifier|public
name|byte
index|[]
name|getWSDL
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
comment|//get the WSDL StyleSheet
name|DocumentImpl
name|docStyleSheet
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|XSLT_WEBSERVICE_WSDL
argument_list|)
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|//has the stylesheet changed, or is this the first call for this version
if|if
condition|(
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|!=
name|lastModifiedWSDL
operator|||
name|descriptionWSDL
operator|==
literal|null
condition|)
block|{
comment|//yes, so re-run the transformation
name|descriptionWSDL
operator|=
name|Transform
argument_list|(
name|docStyleSheet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lastModifiedWSDL
operator|=
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
block|}
comment|//close the Stylesheet Document and release the read lock
name|docStyleSheet
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//return the result of the transformation
return|return
name|descriptionWSDL
return|;
block|}
comment|/**     	 * Returns the Human Readable description for the XQWS Description     	 * Caches the result, however the cache is regenerated if     	 * the StyleSheet used for the transformation changes     	 *      	 * @return byte array containing the WSDL     	 */
specifier|public
name|byte
index|[]
name|getHumanDescription
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
comment|//get the WSDL StyleSheet
name|DocumentImpl
name|docStyleSheet
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|XSLT_WEBSERVICE_HUMAN_DESCRIPTION
argument_list|)
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|//has the stylesheet changed, or is this the first call for this version
if|if
condition|(
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|!=
name|lastModifiedHuman
operator|||
name|descriptionHuman
operator|==
literal|null
condition|)
block|{
comment|//yes, so re-run the transformation
name|descriptionHuman
operator|=
name|Transform
argument_list|(
name|docStyleSheet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lastModifiedHuman
operator|=
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
block|}
comment|//close the Stylesheet Document and release the read lock
name|docStyleSheet
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//return the result of the transformation
return|return
name|descriptionHuman
return|;
block|}
comment|/**     	 * Returns the (Human Readable) description of a Function for the XQWS Description     	 * Caches the result, however the cache is regenerated if     	 * the StyleSheet used for the transformation changes     	 *      	 * @param functionName The name of the function to describe     	 *      	 * @return byte array containing the Function Description     	 */
specifier|public
name|byte
index|[]
name|getFunctionDescription
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
comment|//get the WSDL StyleSheet
name|DocumentImpl
name|docStyleSheet
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|XSLT_WEBSERVICE_FUNCTION_DESCRIPTION
argument_list|)
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|//has the stylesheet changed?
if|if
condition|(
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|!=
name|lastModifiedFunction
condition|)
block|{
comment|//yes, so empty the cache
name|descriptionFunction
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//change the last modified date
name|lastModifiedFunction
operator|=
name|docStyleSheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
block|}
comment|//if there is not a pre-trasformed description in the cache
if|if
condition|(
operator|!
name|descriptionFunction
operator|.
name|containsKey
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
comment|//do the transformation and store in the cache
name|Properties
name|params
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"function"
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
name|descriptionFunction
operator|.
name|put
argument_list|(
name|functionName
argument_list|,
name|Transform
argument_list|(
name|docStyleSheet
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//close the Stylesheet Document and release the read lock
name|docStyleSheet
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//return the result of the transformation from the cache
return|return
operator|(
name|byte
index|[]
operator|)
name|descriptionFunction
operator|.
name|get
argument_list|(
name|functionName
argument_list|)
return|;
block|}
comment|/**     	 * Creates the internal Description of the XQWS     	 *      	 * @param request The HttpServletRequest for which the description should be created     	 */
specifier|private
name|void
name|createInternalDescription
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
comment|// 1) Get the XQWS
name|BinaryDocument
name|docXQWS
init|=
name|getXQWS
argument_list|(
name|broker
argument_list|,
name|XQWSPath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|xqwsData
init|=
name|getXQWSData
argument_list|(
name|broker
argument_list|,
name|docXQWS
argument_list|)
decl_stmt|;
comment|// 2) Store last modified date
name|lastModifiedXQWS
operator|=
name|docXQWS
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
comment|// 3) Get the XQWS Namespace
name|QName
name|xqwsNamespace
init|=
name|getXQWSNamespace
argument_list|(
name|xqwsData
argument_list|)
decl_stmt|;
comment|// 4) Compile a Simple XQuery to access the module
name|CompiledXQuery
name|compiled
init|=
name|SimpleXQueryIncludeXQWS
argument_list|(
name|broker
argument_list|,
name|docXQWS
operator|.
name|getFileURI
argument_list|()
argument_list|,
name|xqwsNamespace
argument_list|,
name|docXQWS
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
comment|// 5) Inspect the XQWS and its function signatures and create a small XML document to represent it
name|Module
name|modXQWS
init|=
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|getModule
argument_list|(
name|xqwsNamespace
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|docXQWSDescription
operator|=
name|describeWebService
argument_list|(
name|modXQWS
argument_list|,
name|docXQWS
operator|.
name|getFileURI
argument_list|()
argument_list|,
name|request
argument_list|,
name|XQWSPath
argument_list|)
expr_stmt|;
block|}
comment|/**          * Transforms a document with a stylesheet          *           * @param docStyleSheet	A stylesheet document from the db          * @param parameters	Any parameters to be passed to the stylesheet          *           * @return byte array containing the result of the transformation          */
specifier|private
name|byte
index|[]
name|Transform
parameter_list|(
name|DocumentImpl
name|docStyleSheet
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
comment|//Transform docXQWSDescription with the stylesheet
comment|/*         	 * TODO: the code in this try statement (apart from the WSDLFilter use) was mostly extracted from         	 * transform:stream-transform(), it would be better to be able to share that code somehow         	 */
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TemplatesHandler
name|templatesHandler
init|=
name|factory
operator|.
name|newTemplatesHandler
argument_list|()
decl_stmt|;
name|templatesHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|WSDLFilter
name|wsdlfilter
init|=
operator|new
name|WSDLFilter
argument_list|(
name|templatesHandler
argument_list|,
name|HttpServletRequestURL
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|wsdlfilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|docStyleSheet
argument_list|)
expr_stmt|;
name|templatesHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|(
name|templatesHandler
operator|.
name|getTemplates
argument_list|()
argument_list|)
decl_stmt|;
comment|//set parameters, if any
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|Transformer
name|transformer
init|=
name|handler
operator|.
name|getTransformer
argument_list|()
decl_stmt|;
name|Enumeration
name|parameterKeys
init|=
name|parameters
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|parameterKeys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|paramName
init|=
operator|(
name|String
operator|)
name|parameterKeys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|paramValue
init|=
name|parameters
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|setParameter
argument_list|(
name|paramName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|//START send result of transformation directly to response
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|//END
comment|/**              * TODO: Validation should be done before WSDL is sent to the client. org.exist.validation.Validator              * will need to make use of org.exist.validation.internal.BlockingOutputStream to connect to the Validator.              *               */
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|docXQWSDescription
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

