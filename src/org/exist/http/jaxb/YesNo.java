begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|//
end_comment

begin_comment
comment|// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
end_comment

begin_comment
comment|// See<a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
end_comment

begin_comment
comment|// Any modifications to this file will be lost upon recompilation of the source schema.
end_comment

begin_comment
comment|// Generated on: 2017.12.01 at 08:56:54 PM GMT
end_comment

begin_comment
comment|//
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlEnum
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlEnumValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_comment
comment|/**  *<p>Java class for yesNo.  *   *<p>The following schema fragment specifies the expected content contained within this class.  *<p>  *<pre>  *&lt;simpleType name="yesNo">  *&lt;restriction base="{http://www.w3.org/2001/XMLSchema}NCName">  *&lt;enumeration value="yes"/>  *&lt;enumeration value="no"/>  *&lt;/restriction>  *&lt;/simpleType>  *</pre>  *   */
end_comment

begin_enum
annotation|@
name|XmlType
argument_list|(
name|name
operator|=
literal|"yesNo"
argument_list|)
annotation|@
name|XmlEnum
specifier|public
enum|enum
name|YesNo
block|{
annotation|@
name|XmlEnumValue
argument_list|(
literal|"yes"
argument_list|)
name|YES
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|,     @
name|XmlEnumValue
argument_list|(
literal|"no"
argument_list|)
name|NO
argument_list|(
literal|"no"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
name|YesNo
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|value
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|YesNo
name|fromValue
parameter_list|(
name|String
name|v
parameter_list|)
block|{
for|for
control|(
name|YesNo
name|c
range|:
name|YesNo
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|value
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|v
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

