begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|public
class|class
name|SessionManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|120_000
decl_stmt|;
comment|// ms (e.g. 2 minutes)
specifier|private
specifier|final
name|AtomicInteger
name|sessionIdCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|QueryResult
argument_list|>
name|cache
decl_stmt|;
specifier|private
specifier|static
class|class
name|QueryResult
block|{
specifier|final
name|String
name|query
decl_stmt|;
specifier|final
name|Sequence
name|sequence
decl_stmt|;
specifier|private
name|QueryResult
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|Sequence
name|sequence
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
block|}
block|}
specifier|public
name|SessionManager
parameter_list|()
block|{
specifier|final
name|Caffeine
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheBuilder
init|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|cacheBuilder
operator|.
name|removalListener
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|,
name|cause
parameter_list|)
lambda|->
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing cached query result for session: "
operator|+
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
name|cacheBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|add
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|Sequence
name|sequence
parameter_list|)
block|{
specifier|final
name|int
name|sessionId
init|=
name|sessionIdCounter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
operator|new
name|QueryResult
argument_list|(
name|query
argument_list|,
name|sequence
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sessionId
return|;
block|}
specifier|public
name|Sequence
name|get
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|<
literal|0
operator|||
name|sessionId
operator|>=
name|sessionIdCounter
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// out of scope
block|}
specifier|final
name|QueryResult
name|cached
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cached
operator|.
name|query
operator|.
name|equals
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
name|cached
operator|.
name|sequence
return|;
block|}
else|else
block|{
comment|// wrong query
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|release
parameter_list|(
specifier|final
name|int
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|<
literal|0
operator|||
name|sessionId
operator|>=
name|sessionIdCounter
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
comment|// out of scope
block|}
name|cache
operator|.
name|invalidate
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

