begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|webdav
operator|.
name|methods
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|webdav
operator|.
name|WebDAV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|webdav
operator|.
name|WebDAVMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|webdav
operator|.
name|WebDAVUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|Lock
implements|implements
name|WebDAVMethod
block|{
specifier|private
specifier|final
specifier|static
name|int
name|SCOPE_EXCLUSIVE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SCOPE_SHARED
init|=
literal|1
decl_stmt|;
specifier|private
name|DocumentBuilderFactory
name|docFactory
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|public
name|Lock
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|docFactory
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.http.webdav.WebDAVMethod#process(org.exist.security.User, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.exist.collections.Collection, org.exist.dom.DocumentImpl)      */
specifier|public
name|void
name|process
parameter_list|(
name|User
name|user
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|DocumentImpl
name|resource
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource or collection found"
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"No resource or collection found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Lock on collections is not supported yet"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|WebDAVUtil
operator|.
name|XML_CONFIGURATION_ERR
argument_list|,
name|e1
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
name|WebDAVUtil
operator|.
name|parseRequestContent
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|docBuilder
argument_list|)
decl_stmt|;
name|Element
name|lockinfo
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|lockinfo
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lockinfo"
argument_list|)
operator|&&
name|lockinfo
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|WebDAV
operator|.
name|DAV_NS
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|WebDAVUtil
operator|.
name|UNEXPECTED_ELEMENT_ERR
operator|+
name|lockinfo
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|WebDAVUtil
operator|.
name|UNEXPECTED_ELEMENT_ERR
operator|+
name|lockinfo
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|scope
init|=
name|SCOPE_EXCLUSIVE
decl_stmt|;
name|String
name|owner
init|=
literal|null
decl_stmt|;
name|Node
name|node
init|=
name|lockinfo
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|WebDAV
operator|.
name|DAV_NS
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"lockscope"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|scopeNode
init|=
name|WebDAVUtil
operator|.
name|firstElementNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"exclusive"
operator|.
name|equals
argument_list|(
name|scopeNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|scope
operator|=
name|SCOPE_EXCLUSIVE
expr_stmt|;
if|else if
condition|(
literal|"shared"
operator|.
name|equals
argument_list|(
name|scopeNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|scope
operator|=
name|SCOPE_SHARED
expr_stmt|;
block|}
if|if
condition|(
literal|"locktype"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|typeNode
init|=
name|WebDAVUtil
operator|.
name|firstElementNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"write"
operator|.
name|equals
argument_list|(
name|typeNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|WebDAVUtil
operator|.
name|UNEXPECTED_ELEMENT_ERR
operator|+
name|typeNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
literal|"owner"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|href
init|=
name|WebDAVUtil
operator|.
name|firstElementNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|owner
operator|=
name|WebDAVUtil
operator|.
name|getElementContent
argument_list|(
name|href
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received lock request ["
operator|+
name|scope
operator|+
literal|"] for owner "
operator|+
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|lockResource
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|resource
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|lockResource
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|DocumentImpl
name|resource
parameter_list|,
name|int
name|scope
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|scope
operator|==
name|SCOPE_SHARED
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_IMPLEMENTED
argument_list|,
literal|"Shared locks are not implemented"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_class

end_unit

