begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-03 Wolfgang M.  * Meier meier@ifs.tu-darmstadt.de http://exist.sourceforge.net  *  * This program is free software; you can redistribute it and/or modify it  * under the terms of the GNU Lesser General Public License as published by the  * Free Software Foundation; either version 2 of the License, or (at your  * option) any later version.  *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation,  * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|webstart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  *  Class for managing webstart jar files.  */
end_comment

begin_class
specifier|public
class|class
name|JnlpFiles
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JnlpFiles
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Holders for jar files
specifier|private
name|File
index|[]
name|_coreJars
decl_stmt|;
specifier|private
name|File
name|_mainJar
decl_stmt|;
comment|// regexp patterns to be more robust for version changes
specifier|private
name|String
name|jars
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"antlr\\.jar"
block|,
literal|"commons-pool-.*\\.jar"
block|,
literal|"excalibur-cli-.*\\.jar"
block|,
literal|"jEdit-syntax\\.jar"
block|,
literal|"libreadline-java\\.jar"
block|,
literal|"log4j-.*\\.jar"
block|,
literal|"xml-commons-resolver-.*\\.jar"
block|,
literal|"xmldb\\.jar"
block|,
literal|"xmlrpc-.*-patched\\.jar"
block|}
decl_stmt|;
comment|// TODO tricky, needs te be reviewed on a regular basis.
specifier|private
name|String
name|existHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
comment|/**      *  Get jar file specified by regular expression.      * @param folder  Directory containing the jars.      * @param regExp  Regexp pattern      * @return        File object to jar file, null if not found.      */
specifier|public
name|File
name|getJar
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|regExp
parameter_list|)
block|{
name|File
name|jarFile
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|File
name|allFiles
index|[]
init|=
name|folder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|allFiles
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"No files found in "
operator|+
name|folder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|allFiles
operator|=
operator|new
name|File
index|[
literal|0
index|]
expr_stmt|;
block|}
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regExp
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|index
operator|<
name|allFiles
operator|.
name|length
condition|)
block|{
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|allFiles
index|[
name|index
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|jarFile
operator|=
name|allFiles
index|[
name|index
index|]
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
return|return
name|jarFile
return|;
block|}
comment|/** Creates a new instance of JnlpFiles */
specifier|public
name|JnlpFiles
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing jar files Webstart"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"eXist home="
operator|+
name|existHome
argument_list|)
expr_stmt|;
name|File
name|coreJarsFolder
init|=
literal|null
decl_stmt|;
name|File
name|existJarFolder
init|=
literal|null
decl_stmt|;
comment|// Setup array CORE jars
name|int
name|nrCoreJars
init|=
name|jars
operator|.
name|length
decl_stmt|;
name|_coreJars
operator|=
operator|new
name|File
index|[
name|nrCoreJars
index|]
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Number of webstart jars="
operator|+
name|nrCoreJars
argument_list|)
expr_stmt|;
comment|// Setup path based on installation (in jetty, container)
if|if
condition|(
name|isInWarFile
argument_list|()
condition|)
block|{
comment|// all files mixed in existHome/lib/
name|logger
operator|.
name|debug
argument_list|(
literal|"eXist is running in container (.war)."
argument_list|)
expr_stmt|;
name|coreJarsFolder
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
literal|"lib/"
argument_list|)
expr_stmt|;
name|existJarFolder
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
literal|"lib/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// all files located in existHome/lib/core/
name|logger
operator|.
name|debug
argument_list|(
literal|"eXist is running private jetty server."
argument_list|)
expr_stmt|;
name|coreJarsFolder
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
literal|"lib/core"
argument_list|)
expr_stmt|;
name|existJarFolder
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"CORE jars location="
operator|+
name|coreJarsFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"EXIST jars location="
operator|+
name|existJarFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup CORE jars
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCoreJars
condition|;
name|i
operator|++
control|)
block|{
name|_coreJars
index|[
name|i
index|]
operator|=
name|getJar
argument_list|(
name|coreJarsFolder
argument_list|,
name|jars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Setup exist.jar
name|_mainJar
operator|=
operator|new
name|File
argument_list|(
name|existJarFolder
argument_list|,
literal|"exist.jar"
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Check wether exist runs in Servlet container (as war file).      * @return TRUE if exist runs in servlet container.      */
specifier|public
name|boolean
name|isInWarFile
parameter_list|()
block|{
name|boolean
name|retVal
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
literal|"lib/core"
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|retVal
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * Get references to all "core" jar files.      * @return Array of Files.      */
specifier|public
name|File
index|[]
name|getCoreJars
parameter_list|()
block|{
return|return
name|_coreJars
return|;
block|}
comment|/**      * Get references to all "exist" jar files.      * @return Reference to exist.jar.      */
specifier|public
name|File
name|getMainJar
parameter_list|()
block|{
return|return
name|_mainJar
return|;
block|}
comment|/**      * Setter for property mainJar.      * @param mainJar New value of property mainJar.      */
specifier|public
name|void
name|setMainJar
parameter_list|(
name|File
name|mainJar
parameter_list|)
block|{
name|_mainJar
operator|=
name|mainJar
expr_stmt|;
block|}
comment|/**      *  Get File reference of associated jar-file.      * @param   Name of file      * @return  File reference to resource.      */
specifier|public
name|File
name|getFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|File
name|retVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"exist.jar"
argument_list|)
condition|)
block|{
name|retVal
operator|=
name|_mainJar
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|index
operator|<
name|_coreJars
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|_coreJars
index|[
name|index
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|retVal
operator|=
name|_coreJars
index|[
name|index
index|]
expr_stmt|;
block|}
else|else
block|{
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

