begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-06 Wolfgang M. Meier  * wolfgang@exist-db.org http://exist.sourceforge.net  *   * This program is free software; you can redistribute it and/or modify it under  * the terms of the GNU Lesser General Public License as published by the Free  * Software Foundation; either version 2 of the License, or (at your option) any  * later version.  *   * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more  * details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation, Inc.,  * 675 Mass Ave, Cambridge, MA 02139, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Int2ObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|NamePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * An in-memory implementation of Document.  *   * This implementation stores all node data in the document object. Nodes from  * another document, i.e. a persistent document in the database, can be stored  * as reference nodes, i.e. the nodes are not copied into this document object.  * Instead a reference is inserted which will only be expanded during  * serialization.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
implements|implements
name|Document
block|{
specifier|protected
name|XQueryContext
name|context
decl_stmt|;
specifier|protected
name|NamePool
name|namePool
init|=
operator|new
name|NamePool
argument_list|()
decl_stmt|;
comment|// holds the node type of a node
specifier|protected
name|short
index|[]
name|nodeKind
init|=
literal|null
decl_stmt|;
comment|// the tree level of a node
specifier|protected
name|short
index|[]
name|treeLevel
decl_stmt|;
comment|// the node number of the next sibling
specifier|protected
name|int
index|[]
name|next
decl_stmt|;
comment|// pointer into the namePool
specifier|protected
name|int
index|[]
name|nodeName
decl_stmt|;
specifier|protected
name|int
index|[]
name|alpha
decl_stmt|;
specifier|protected
name|int
index|[]
name|alphaLen
decl_stmt|;
specifier|protected
name|char
index|[]
name|characters
decl_stmt|;
specifier|protected
name|int
name|nextChar
init|=
literal|0
decl_stmt|;
comment|// attributes
specifier|protected
name|int
index|[]
name|attrName
decl_stmt|;
specifier|protected
name|int
index|[]
name|attrParent
decl_stmt|;
specifier|protected
name|String
index|[]
name|attrValue
decl_stmt|;
specifier|protected
name|int
name|nextAttr
init|=
literal|0
decl_stmt|;
comment|// namespaces
specifier|protected
name|int
index|[]
name|namespaceParent
decl_stmt|;
specifier|protected
name|int
index|[]
name|namespaceCode
decl_stmt|;
specifier|protected
name|int
name|nextNamespace
init|=
literal|0
decl_stmt|;
comment|// the current number of nodes in the doc
specifier|protected
name|int
name|size
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|documentRootNode
init|=
operator|-
literal|1
decl_stmt|;
comment|// reference nodes (link to an external, persistent document fragment)
specifier|protected
name|NodeProxy
name|references
index|[]
decl_stmt|;
specifier|protected
name|int
name|nextRef
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NODE_SIZE
init|=
literal|128
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ATTR_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|CHAR_BUF_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REF_SIZE
init|=
literal|128
decl_stmt|;
specifier|private
name|Int2ObjectHashMap
name|storedNodes
init|=
literal|null
decl_stmt|;
specifier|public
name|DocumentImpl
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|nodeKind
operator|=
operator|new
name|short
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|treeLevel
operator|=
operator|new
name|short
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|next
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|next
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nodeName
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|alpha
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|alphaLen
operator|=
operator|new
name|int
index|[
name|NODE_SIZE
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|alphaLen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|characters
operator|=
operator|new
name|char
index|[
name|CHAR_BUF_SIZE
index|]
expr_stmt|;
name|attrName
operator|=
operator|new
name|int
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrParent
operator|=
operator|new
name|int
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|attrValue
operator|=
operator|new
name|String
index|[
name|ATTR_SIZE
index|]
expr_stmt|;
name|namespaceCode
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
name|namespaceParent
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
name|references
operator|=
operator|new
name|NodeProxy
index|[
name|REF_SIZE
index|]
expr_stmt|;
name|treeLevel
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|nodeKind
index|[
literal|0
index|]
operator|=
name|Node
operator|.
name|DOCUMENT_NODE
expr_stmt|;
name|document
operator|=
name|this
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|nextChar
operator|=
literal|0
expr_stmt|;
name|nextAttr
operator|=
literal|0
expr_stmt|;
name|nextRef
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|int
name|addNode
parameter_list|(
name|short
name|kind
parameter_list|,
name|short
name|level
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|==
name|nodeKind
operator|.
name|length
condition|)
name|grow
argument_list|()
expr_stmt|;
name|nodeKind
index|[
name|size
index|]
operator|=
name|kind
expr_stmt|;
name|treeLevel
index|[
name|size
index|]
operator|=
name|level
expr_stmt|;
name|nodeName
index|[
name|size
index|]
operator|=
operator|(
name|qname
operator|!=
literal|null
condition|?
name|namePool
operator|.
name|add
argument_list|(
name|qname
argument_list|)
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|alpha
index|[
name|size
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// undefined
name|next
index|[
name|size
index|]
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|size
operator|++
return|;
block|}
specifier|public
name|void
name|addChars
parameter_list|(
name|int
name|nodeNr
parameter_list|,
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextChar
operator|+
name|len
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
name|nextChar
operator|+
name|len
condition|)
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alpha
index|[
name|nodeNr
index|]
operator|=
name|nextChar
expr_stmt|;
name|alphaLen
index|[
name|nodeNr
index|]
operator|=
name|len
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|characters
argument_list|,
name|nextChar
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|nextChar
operator|+=
name|len
expr_stmt|;
block|}
specifier|public
name|void
name|addChars
parameter_list|(
name|int
name|nodeNr
parameter_list|,
name|CharSequence
name|s
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextChar
operator|+
name|len
operator|>=
name|characters
operator|.
name|length
condition|)
block|{
name|int
name|newLen
init|=
operator|(
name|characters
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newLen
operator|<
name|nextChar
operator|+
name|len
condition|)
name|newLen
operator|=
name|nextChar
operator|+
name|len
expr_stmt|;
name|char
index|[]
name|nc
init|=
operator|new
name|char
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|characters
argument_list|,
literal|0
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|characters
operator|.
name|length
argument_list|)
expr_stmt|;
name|characters
operator|=
name|nc
expr_stmt|;
block|}
name|alpha
index|[
name|nodeNr
index|]
operator|=
name|nextChar
expr_stmt|;
name|alphaLen
index|[
name|nodeNr
index|]
operator|=
name|len
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|characters
index|[
name|nextChar
operator|++
index|]
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addReferenceNode
parameter_list|(
name|int
name|nodeNr
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextRef
operator|==
name|references
operator|.
name|length
condition|)
name|growReferences
argument_list|()
expr_stmt|;
name|references
index|[
name|nextRef
index|]
operator|=
name|proxy
expr_stmt|;
name|alpha
index|[
name|nodeNr
index|]
operator|=
name|nextRef
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|addAttribute
parameter_list|(
name|int
name|nodeNr
parameter_list|,
name|QName
name|qname
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextAttr
operator|==
name|attrName
operator|.
name|length
condition|)
name|growAttributes
argument_list|()
expr_stmt|;
name|qname
operator|.
name|setNameType
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|attrParent
index|[
name|nextAttr
index|]
operator|=
name|nodeNr
expr_stmt|;
name|attrName
index|[
name|nextAttr
index|]
operator|=
name|namePool
operator|.
name|add
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|attrValue
index|[
name|nextAttr
index|]
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|alpha
index|[
name|nodeNr
index|]
operator|<
literal|0
condition|)
name|alpha
index|[
name|nodeNr
index|]
operator|=
name|nextAttr
expr_stmt|;
return|return
name|nextAttr
operator|++
return|;
block|}
specifier|public
name|int
name|addNamespace
parameter_list|(
name|int
name|nodeNr
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
literal|null
condition|)
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNamespace
operator|==
name|namespaceCode
operator|.
name|length
condition|)
name|growNamespaces
argument_list|()
expr_stmt|;
name|namespaceCode
index|[
name|nextNamespace
index|]
operator|=
name|namePool
operator|.
name|add
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|namespaceParent
index|[
name|nextNamespace
index|]
operator|=
name|nodeNr
expr_stmt|;
if|if
condition|(
name|alphaLen
index|[
name|nodeNr
index|]
operator|<
literal|0
condition|)
block|{
name|alphaLen
index|[
name|nodeNr
index|]
operator|=
name|nextNamespace
expr_stmt|;
block|}
return|return
name|nextNamespace
operator|++
return|;
block|}
specifier|public
name|int
name|getLastNode
parameter_list|()
block|{
return|return
name|size
operator|-
literal|1
return|;
block|}
specifier|private
name|void
name|grow
parameter_list|()
block|{
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|short
index|[]
name|newNodeKind
init|=
operator|new
name|short
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodeKind
argument_list|,
literal|0
argument_list|,
name|newNodeKind
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodeKind
operator|=
name|newNodeKind
expr_stmt|;
name|short
index|[]
name|newTreeLevel
init|=
operator|new
name|short
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|treeLevel
argument_list|,
literal|0
argument_list|,
name|newTreeLevel
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|treeLevel
operator|=
name|newTreeLevel
expr_stmt|;
name|int
index|[]
name|newNext
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newNext
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|next
argument_list|,
literal|0
argument_list|,
name|newNext
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|next
operator|=
name|newNext
expr_stmt|;
name|int
index|[]
name|newNodeName
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodeName
argument_list|,
literal|0
argument_list|,
name|newNodeName
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|nodeName
operator|=
name|newNodeName
expr_stmt|;
name|int
index|[]
name|newAlpha
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|alpha
argument_list|,
literal|0
argument_list|,
name|newAlpha
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|alpha
operator|=
name|newAlpha
expr_stmt|;
name|int
index|[]
name|newAlphaLen
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newAlphaLen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|alphaLen
argument_list|,
literal|0
argument_list|,
name|newAlphaLen
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|alphaLen
operator|=
name|newAlphaLen
expr_stmt|;
block|}
specifier|private
name|void
name|growAttributes
parameter_list|()
block|{
name|int
name|size
init|=
name|attrName
operator|.
name|length
decl_stmt|;
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|int
index|[]
name|newAttrName
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrName
argument_list|,
literal|0
argument_list|,
name|newAttrName
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrName
operator|=
name|newAttrName
expr_stmt|;
name|int
index|[]
name|newAttrParent
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrParent
argument_list|,
literal|0
argument_list|,
name|newAttrParent
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrParent
operator|=
name|newAttrParent
expr_stmt|;
name|String
index|[]
name|newAttrValue
init|=
operator|new
name|String
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrValue
argument_list|,
literal|0
argument_list|,
name|newAttrValue
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|attrValue
operator|=
name|newAttrValue
expr_stmt|;
block|}
specifier|private
name|void
name|growReferences
parameter_list|()
block|{
name|int
name|size
init|=
name|references
operator|.
name|length
decl_stmt|;
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|NodeProxy
name|newReferences
index|[]
init|=
operator|new
name|NodeProxy
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|references
argument_list|,
literal|0
argument_list|,
name|newReferences
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|references
operator|=
name|newReferences
expr_stmt|;
block|}
specifier|private
name|void
name|growNamespaces
parameter_list|()
block|{
name|int
name|size
init|=
name|namespaceCode
operator|.
name|length
decl_stmt|;
name|int
name|newSize
init|=
operator|(
name|size
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|int
index|[]
name|newCodes
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespaceCode
argument_list|,
literal|0
argument_list|,
name|newCodes
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|namespaceCode
operator|=
name|newCodes
expr_stmt|;
name|int
index|[]
name|newParents
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|namespaceParent
argument_list|,
literal|0
argument_list|,
name|newParents
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|namespaceParent
operator|=
name|newParents
expr_stmt|;
block|}
specifier|public
name|NodeImpl
name|getAttribute
parameter_list|(
name|int
name|nodeNr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
operator|new
name|AttributeImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|getNamespaceNode
parameter_list|(
name|int
name|nodeNr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
operator|new
name|NamespaceNode
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|int
name|nodeNr
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|nodeNr
operator|==
literal|0
condition|)
return|return
name|this
return|;
if|if
condition|(
name|nodeNr
operator|>=
name|size
condition|)
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"node not found"
argument_list|)
throw|;
name|NodeImpl
name|node
decl_stmt|;
switch|switch
condition|(
name|nodeKind
index|[
name|nodeNr
index|]
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|node
operator|=
operator|new
name|TextImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|node
operator|=
operator|new
name|CommentImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|node
operator|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|node
operator|=
operator|new
name|CDATASectionImpl
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
name|node
operator|=
operator|new
name|ReferenceNode
argument_list|(
name|this
argument_list|,
name|nodeNr
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"node not found"
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Node#getParentNode()      */
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getDoctype()      */
specifier|public
name|DocumentType
name|getDoctype
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getImplementation()      */
specifier|public
name|DOMImplementation
name|getImplementation
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getDocumentElement()      */
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|1
condition|)
return|return
literal|null
return|;
name|int
name|nodeNr
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|nodeKind
index|[
name|nodeNr
index|]
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|next
index|[
name|nodeNr
index|]
operator|<
name|nodeNr
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
name|nodeNr
operator|=
name|next
index|[
name|nodeNr
index|]
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|getNode
argument_list|(
name|nodeNr
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Node#getFirstChild()      */
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
name|size
operator|>
literal|1
condition|)
return|return
name|getNode
argument_list|(
literal|1
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getAttributesCountFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|attr
init|=
name|alpha
index|[
name|nodeNumber
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|nextAttr
operator|&&
name|attrParent
index|[
name|attr
operator|++
index|]
operator|==
name|nodeNumber
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getChildCountFor
parameter_list|(
name|int
name|nr
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|//short level = (short)(treeLevel[nr] + 1);
name|int
name|nextNode
init|=
name|getFirstChildFor
argument_list|(
name|nr
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nr
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|nextNode
operator|=
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getFirstChildFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|short
name|level
init|=
name|treeLevel
index|[
name|nodeNumber
index|]
decl_stmt|;
name|int
name|nextNode
init|=
name|nodeNumber
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextNode
argument_list|<
name|size
operator|&&
name|treeLevel
index|[
name|nextNode
index|]
argument_list|>
name|level
condition|)
block|{
return|return
name|nextNode
return|;
block|}
else|else
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getNextSiblingFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|nextNr
init|=
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
return|return
name|nextNr
operator|<
name|nodeNumber
condition|?
operator|-
literal|1
else|:
name|nextNr
return|;
block|}
specifier|public
name|int
name|getParentNodeFor
parameter_list|(
name|int
name|nodeNumber
parameter_list|)
block|{
name|int
name|nextNode
init|=
name|next
index|[
name|nodeNumber
index|]
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|nodeNumber
condition|)
block|{
name|nextNode
operator|=
name|next
index|[
name|nextNode
index|]
expr_stmt|;
block|}
return|return
name|nextNode
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createElement(java.lang.String)      */
specifier|public
name|Element
name|createElement
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createDocumentFragment()      */
specifier|public
name|DocumentFragment
name|createDocumentFragment
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createTextNode(java.lang.String)      */
specifier|public
name|Text
name|createTextNode
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createComment(java.lang.String)      */
specifier|public
name|Comment
name|createComment
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createCDATASection(java.lang.String)      */
specifier|public
name|CDATASection
name|createCDATASection
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createProcessingInstruction(java.lang.String,      *           java.lang.String)      */
specifier|public
name|ProcessingInstruction
name|createProcessingInstruction
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createAttribute(java.lang.String)      */
specifier|public
name|Attr
name|createAttribute
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createEntityReference(java.lang.String)      */
specifier|public
name|EntityReference
name|createEntityReference
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getElementsByTagName(java.lang.String)      */
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeListImpl
name|nl
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
comment|//int nodeNr = 1;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodeKind
index|[
name|i
index|]
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|namePool
operator|.
name|get
argument_list|(
name|nodeName
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|nl
operator|.
name|add
argument_list|(
name|getNode
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nl
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#importNode(org.w3c.dom.Node, boolean)      */
specifier|public
name|Node
name|importNode
parameter_list|(
name|Node
name|arg0
parameter_list|,
name|boolean
name|arg1
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createElementNS(java.lang.String,      *           java.lang.String)      */
specifier|public
name|Element
name|createElementNS
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#createAttributeNS(java.lang.String,      *           java.lang.String)      */
specifier|public
name|Attr
name|createAttributeNS
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getElementsByTagNameNS(java.lang.String,      *           java.lang.String)      */
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Document#getElementById(java.lang.String)      */
specifier|public
name|Element
name|getElementById
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.w3c.dom.Node#getOwnerDocument()      */
specifier|public
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * Copy the document fragment starting at the specified node to the given      * document builder.      *       * @param node      * @param receiver      */
specifier|public
name|void
name|copyTo
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|copyTo
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|copyTo
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|,
name|boolean
name|expandRefs
parameter_list|)
throws|throws
name|SAXException
block|{
name|NodeImpl
name|top
init|=
name|node
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|copyStartNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
name|expandRefs
argument_list|)
expr_stmt|;
name|NodeImpl
name|nextNode
init|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|copyEndNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
operator|!=
literal|null
operator|&&
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
condition|)
break|break;
comment|//No nextNode if the top node is a Document node
if|if
condition|(
name|top
operator|!=
literal|null
operator|&&
name|top
operator|.
name|nodeNumber
operator|==
literal|0
condition|)
break|break;
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
operator|||
operator|(
name|top
operator|!=
literal|null
operator|&&
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
condition|)
block|{
name|copyEndNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|nextNode
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
block|}
name|node
operator|=
name|nextNode
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyStartNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|,
name|boolean
name|expandRefs
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|QName
name|nodeName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|nodeName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nr
condition|)
block|{
name|QName
name|attrQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|attrName
index|[
name|attr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|attr
index|]
argument_list|)
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
name|XQueryContext
name|context
init|=
name|receiver
operator|.
name|getContext
argument_list|()
decl_stmt|;
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
condition|)
block|{
name|QName
name|nsQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|addNamespaceNode
argument_list|(
name|nsQName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|context
operator|.
name|declareInScopeNamespace
argument_list|(
literal|""
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|declareInScopeNamespace
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|receiver
operator|.
name|characters
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|QName
name|attrQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|attrName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|receiver
operator|.
name|comment
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|qn
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
if|if
condition|(
name|expandRefs
condition|)
block|{
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setReceiver
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toReceiver
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|addReferenceNode
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|private
name|void
name|copyEndNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|receiver
operator|.
name|endElement
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Expand all reference nodes in the current document, i.e. replace them by      * real nodes. Reference nodes are just pointers to nodes from other documents       * stored in the database. The XQuery engine uses reference nodes to speed       * up the creation of temporary doc fragments.      *       * This method creates a new copy of the document contents and expands all      * reference nodes.      */
specifier|public
name|void
name|expand
parameter_list|()
throws|throws
name|DOMException
block|{
name|DocumentImpl
name|newDoc
init|=
name|expandRefs
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|copyDocContents
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|expandRefs
parameter_list|(
name|NodeImpl
name|rootNode
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|nextRef
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|NodeImpl
name|node
init|=
name|rootNode
operator|==
literal|null
condition|?
operator|(
name|NodeImpl
operator|)
name|getFirstChild
argument_list|()
else|:
name|rootNode
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|copyTo
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|receiver
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_STATE_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|getDocument
argument_list|()
return|;
block|}
comment|/**      * @param newDoc      */
specifier|private
name|void
name|copyDocContents
parameter_list|(
name|DocumentImpl
name|newDoc
parameter_list|)
block|{
name|namePool
operator|=
name|newDoc
operator|.
name|namePool
expr_stmt|;
name|nodeKind
operator|=
name|newDoc
operator|.
name|nodeKind
expr_stmt|;
name|treeLevel
operator|=
name|newDoc
operator|.
name|treeLevel
expr_stmt|;
name|next
operator|=
name|newDoc
operator|.
name|next
expr_stmt|;
name|nodeName
operator|=
name|newDoc
operator|.
name|nodeName
expr_stmt|;
name|alpha
operator|=
name|newDoc
operator|.
name|alpha
expr_stmt|;
name|alphaLen
operator|=
name|newDoc
operator|.
name|alphaLen
expr_stmt|;
name|characters
operator|=
name|newDoc
operator|.
name|characters
expr_stmt|;
name|nextChar
operator|=
name|newDoc
operator|.
name|nextChar
expr_stmt|;
name|attrName
operator|=
name|newDoc
operator|.
name|attrName
expr_stmt|;
name|attrParent
operator|=
name|newDoc
operator|.
name|attrParent
expr_stmt|;
name|attrValue
operator|=
name|newDoc
operator|.
name|attrValue
expr_stmt|;
name|nextAttr
operator|=
name|newDoc
operator|.
name|nextAttr
expr_stmt|;
name|namespaceParent
operator|=
name|newDoc
operator|.
name|namespaceParent
expr_stmt|;
name|namespaceCode
operator|=
name|newDoc
operator|.
name|namespaceCode
expr_stmt|;
name|nextNamespace
operator|=
name|newDoc
operator|.
name|nextNamespace
expr_stmt|;
name|size
operator|=
name|newDoc
operator|.
name|size
expr_stmt|;
name|documentRootNode
operator|=
name|newDoc
operator|.
name|documentRootNode
expr_stmt|;
name|references
operator|=
name|newDoc
operator|.
name|references
expr_stmt|;
name|nextRef
operator|=
name|newDoc
operator|.
name|nextRef
expr_stmt|;
block|}
comment|/**      * Stream the specified document fragment to a receiver. This method      * is called by the serializer to output in-memory nodes.      *       * @param serializer      * @param node      * @param receiver      * @throws SAXException      */
specifier|public
name|void
name|streamTo
parameter_list|(
name|Serializer
name|serializer
parameter_list|,
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|NodeImpl
name|top
init|=
name|node
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|startNode
argument_list|(
name|serializer
argument_list|,
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|NodeImpl
name|nextNode
init|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|endNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
operator|!=
literal|null
operator|&&
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
condition|)
break|break;
name|nextNode
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNode
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
operator|||
operator|(
name|top
operator|!=
literal|null
operator|&&
name|top
operator|.
name|nodeNumber
operator|==
name|node
operator|.
name|nodeNumber
operator|)
condition|)
block|{
name|endNode
argument_list|(
name|node
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|nextNode
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
block|}
name|node
operator|=
name|nextNode
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startNode
parameter_list|(
name|Serializer
name|serializer
parameter_list|,
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|QName
name|nodeName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
comment|// output required namespace declarations
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
condition|)
block|{
name|QName
name|nsQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|nsQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
comment|// create the attribute list
name|AttrList
name|attribs
init|=
literal|null
decl_stmt|;
name|int
name|attr
init|=
name|document
operator|.
name|alpha
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|attr
condition|)
block|{
name|attribs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
while|while
condition|(
name|attr
operator|<
name|document
operator|.
name|nextAttr
operator|&&
name|document
operator|.
name|attrParent
index|[
name|attr
index|]
operator|==
name|nr
condition|)
block|{
name|QName
name|attrQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|attrName
index|[
name|attr
index|]
argument_list|)
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|attr
index|]
argument_list|)
expr_stmt|;
operator|++
name|attr
expr_stmt|;
block|}
block|}
name|receiver
operator|.
name|startElement
argument_list|(
name|nodeName
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|receiver
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|QName
name|attrQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|attrName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|attrValue
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|receiver
operator|.
name|comment
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|nodeName
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|qn
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|receiver
operator|.
name|cdataSection
argument_list|(
name|document
operator|.
name|characters
argument_list|,
name|document
operator|.
name|alpha
index|[
name|nr
index|]
argument_list|,
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NodeImpl
operator|.
name|REFERENCE_NODE
case|:
name|serializer
operator|.
name|toReceiver
argument_list|(
name|document
operator|.
name|references
index|[
name|document
operator|.
name|alpha
index|[
name|nr
index|]
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|endNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|receiver
operator|.
name|endElement
argument_list|(
name|node
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// end all prefix mappings used for the element
name|int
name|nr
init|=
name|node
operator|.
name|nodeNumber
decl_stmt|;
name|int
name|ns
init|=
name|document
operator|.
name|alphaLen
index|[
name|nr
index|]
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|ns
condition|)
block|{
while|while
condition|(
name|ns
operator|<
name|document
operator|.
name|nextNamespace
operator|&&
name|document
operator|.
name|namespaceParent
index|[
name|ns
index|]
operator|==
name|nr
condition|)
block|{
name|QName
name|nsQName
init|=
operator|(
name|QName
operator|)
name|document
operator|.
name|namePool
operator|.
name|get
argument_list|(
name|document
operator|.
name|namespaceCode
index|[
name|ns
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
name|nsQName
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|ns
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Int2ObjectHashMap
name|makePersistent
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
return|return
literal|null
return|;
name|List
name|oldIds
init|=
operator|new
name|ArrayList
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|int
name|top
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|top
operator|>
literal|0
condition|)
block|{
name|oldIds
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
name|top
operator|=
name|getNextSiblingFor
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
name|DocumentImpl
name|expandedDoc
init|=
name|expandRefs
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
name|doc
init|=
name|context
operator|.
name|storeTemporaryDoc
argument_list|(
name|expandedDoc
argument_list|)
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
name|root
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|NodeList
name|cl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|storedNodes
operator|=
operator|new
name|Int2ObjectHashMap
argument_list|()
expr_stmt|;
name|storedNodes
operator|.
name|put
argument_list|(
literal|0
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|root
operator|.
name|getGID
argument_list|()
argument_list|,
name|root
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|top
operator|=
literal|1
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|top
operator|>
literal|0
operator|&&
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|StoredNode
name|node
init|=
operator|(
name|StoredNode
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|node
operator|.
name|getGID
argument_list|()
argument_list|,
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|old
init|=
operator|(
operator|(
name|Integer
operator|)
name|oldIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|storedNodes
operator|.
name|put
argument_list|(
name|old
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|top
operator|=
name|expandedDoc
operator|.
name|getNextSiblingFor
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|storedNodes
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|top
init|=
name|size
operator|>
literal|1
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|top
operator|>
literal|0
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|top
operator|=
name|getNextSiblingFor
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#getInputEncoding() 	 */
specifier|public
name|String
name|getInputEncoding
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlEncoding() 	 */
specifier|public
name|String
name|getXmlEncoding
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlStandalone() 	 */
specifier|public
name|boolean
name|getXmlStandalone
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|false
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlStandalone(boolean) 	 */
specifier|public
name|void
name|setXmlStandalone
parameter_list|(
name|boolean
name|xmlStandalone
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
block|}
comment|/** ? @see org.w3c.dom.Document#getXmlVersion() 	 */
specifier|public
name|String
name|getXmlVersion
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setXmlVersion(java.lang.String) 	 */
specifier|public
name|void
name|setXmlVersion
parameter_list|(
name|String
name|xmlVersion
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
block|}
comment|/** ? @see org.w3c.dom.Document#getStrictErrorChecking() 	 */
specifier|public
name|boolean
name|getStrictErrorChecking
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|false
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setStrictErrorChecking(boolean) 	 */
specifier|public
name|void
name|setStrictErrorChecking
parameter_list|(
name|boolean
name|strictErrorChecking
parameter_list|)
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
block|}
comment|/** ? @see org.w3c.dom.Document#getDocumentURI() 	 */
specifier|public
name|String
name|getDocumentURI
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#setDocumentURI(java.lang.String) 	 */
specifier|public
name|void
name|setDocumentURI
parameter_list|(
name|String
name|documentURI
parameter_list|)
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
block|}
comment|/** ? @see org.w3c.dom.Document#adoptNode(org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|adoptNode
parameter_list|(
name|Node
name|source
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#getDomConfig() 	 */
specifier|public
name|DOMConfiguration
name|getDomConfig
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
comment|/** ? @see org.w3c.dom.Document#normalizeDocument() 	 */
specifier|public
name|void
name|normalizeDocument
parameter_list|()
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
block|}
comment|/** ? @see org.w3c.dom.Document#renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String) 	 */
specifier|public
name|Node
name|renameNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
comment|// maybe TODO - new DOM interfaces - Java 5.0
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"in-memory#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"document {"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getDocumentElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"} "
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

