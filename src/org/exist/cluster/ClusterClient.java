begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|//$Id$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|MessageDispatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_comment
comment|/**  * Created by Francesco Mondora.  *  * @author Francesco Mondora aka Makkina  *         Date: Aug 30, 2004  *         Time: 4:54:51 PM  *         Revision $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ClusterClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ClusterClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Channel
name|channel
decl_stmt|;
name|MessageDispatcher
name|disp
decl_stmt|;
specifier|public
name|ClusterClient
parameter_list|()
throws|throws
name|ClusterException
block|{
name|this
argument_list|(
name|ClusterChannel
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a ClusterClient on a given channel      * @param channel      * @throws ClusterException      */
specifier|public
name|ClusterClient
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|ClusterException
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|disp
operator|=
operator|new
name|MessageDispatcher
argument_list|(
name|channel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"args: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"0: command (save,delete) "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1: filename "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2: xml content "
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"save"
argument_list|)
condition|)
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|StoreClusterEvent
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|,
literal|"/db"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|sendClusterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|RemoveClusterEvent
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|"/db"
argument_list|)
decl_stmt|;
name|sendClusterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Send a generic cluster event to the jgroup.      * @param event      * @throws ClusterException      */
specifier|public
name|void
name|sendClusterEvent
parameter_list|(
name|ClusterEvent
name|event
parameter_list|)
throws|throws
name|ClusterException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ClusterClient: Publishing Event"
argument_list|)
expr_stmt|;
name|int
name|eventCode
init|=
name|event
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ClusterChannel
operator|.
name|hasToBePublished
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|eventCode
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|bos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ClusterChannel
operator|.
name|accountEvent
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|eventCode
argument_list|)
argument_list|)
expr_stmt|;
name|disp
operator|.
name|send
argument_list|(
operator|new
name|Message
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ClusterClient: Event has been submitted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ClusterException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

