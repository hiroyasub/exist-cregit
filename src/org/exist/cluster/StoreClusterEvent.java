begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|//$Id$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_comment
comment|/**  * Created by Francesco Mondora.  *  * @author Francesco Mondora aka Makkina  *         Date: Aug 30, 2004  *         Time: 3:45:03 PM  *         Revision $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|StoreClusterEvent
extends|extends
name|ClusterEvent
block|{
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|StoreClusterEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|public
name|StoreClusterEvent
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|documentName
parameter_list|)
block|{
name|super
argument_list|(
name|documentName
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
comment|/**      * Execute the current command.      */
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|ClusterException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Storing document "
argument_list|)
expr_stmt|;
comment|//if (content!=null) {
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"1 storing document "
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|getCollection
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"2 storing document "
argument_list|)
expr_stmt|;
name|XMLResource
name|document
init|=
operator|(
name|XMLResource
operator|)
name|collection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"3 storing document "
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"4 storing document "
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"5 Storing document "
operator|+
name|document
operator|.
name|getId
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|//todo: send an ACK to the master
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ClusterException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StoreClusterEvent: [content: "
operator|+
name|content
operator|+
literal|"] [collection:"
operator|+
name|collectionName
operator|+
literal|"] [documentname:"
operator|+
name|documentName
operator|+
literal|"]"
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|e
init|=
name|documentName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|e
operator|=
name|e
operator|^
name|content
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|e
operator|=
name|e
operator|^
name|collectionName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|e
operator|=
name|e
operator|^
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
end_class

end_unit

