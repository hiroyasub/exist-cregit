begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|//$Id$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|ClusterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|cluster
operator|.
name|ClusterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Manage the Journal  * Created by Nicola Breda.  *  * @author Nicola Breda aka maiale  * @author David Frontini aka spider  *         Date: 05-aug-2005  *         Time: 18.09.08  *         Revision $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|JournalManager
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_INDEX_FILE
init|=
literal|"jei.jbx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_STORAGE_FILE_EXTENSION
init|=
literal|".jbx"
decl_stmt|;
specifier|public
specifier|static
name|int
name|JOURNAL_STORAGE_FILE_MAX_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|10
decl_stmt|;
comment|//TODO renderlo configurabile
specifier|private
specifier|static
specifier|final
name|int
name|JOURNAL_INDEX_TRUNK_SIZE
init|=
literal|5
operator|*
literal|4
decl_stmt|;
comment|//item[ID,START,END,COUNT]
specifier|private
specifier|static
specifier|final
name|int
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
init|=
literal|4
operator|+
literal|4
operator|+
literal|4
decl_stmt|;
comment|//header size []
specifier|public
specifier|static
name|int
name|REALIGN_MAX_BLOCK_SIZE
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|File
name|dir
decl_stmt|;
specifier|private
name|File
name|indexFile
decl_stmt|;
specifier|private
name|boolean
name|journalDisabled
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isNewJournal
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|lastIdSaved
init|=
name|ClusterEvent
operator|.
name|NO_EVENT
decl_stmt|;
specifier|private
name|int
name|counter
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|maxIdSaved
init|=
name|ClusterEvent
operator|.
name|NO_EVENT
decl_stmt|;
name|TreeSet
name|queue
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|EventComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|JournalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|dirName
init|=
operator|(
name|String
operator|)
name|conf
operator|.
name|getProperty
argument_list|(
literal|"cluster.journalDir"
argument_list|)
decl_stmt|;
comment|//retrieve journal folder
if|if
condition|(
name|dirName
operator|==
literal|null
condition|)
block|{
comment|//disable journal if non folder found
name|journalDisabled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|dir
operator|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//if journal folder doesn't exist --> create it.
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|indexFile
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|JOURNAL_INDEX_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indexFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//if the journal file doesn't exist create it and flag isNewJournal
try|try
block|{
name|indexFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writeInitialHeader
argument_list|()
expr_stmt|;
name|isNewJournal
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error creating index file... disabling jornal"
argument_list|)
expr_stmt|;
name|journalDisabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
index|[]
name|header
init|=
name|getHeaderData
argument_list|()
decl_stmt|;
name|lastIdSaved
operator|=
name|header
index|[
literal|0
index|]
expr_stmt|;
name|maxIdSaved
operator|=
name|header
index|[
literal|1
index|]
expr_stmt|;
name|counter
operator|=
name|header
index|[
literal|2
index|]
expr_stmt|;
name|checkNewJournal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkNewJournal
parameter_list|()
block|{
if|if
condition|(
name|lastIdSaved
operator|==
name|ClusterEvent
operator|.
name|NO_EVENT
condition|)
name|isNewJournal
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|writeInitialHeader
parameter_list|()
block|{
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|lastIdSaved
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|maxIdSaved
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error create initila header"
argument_list|)
throw|;
block|}
block|}
comment|/*        TODO ... gestire la cancellazione di file non piu' referenziati     */
specifier|public
name|int
name|getLastIdSaved
parameter_list|()
block|{
if|if
condition|(
name|lastIdSaved
operator|!=
name|ClusterEvent
operator|.
name|NO_EVENT
condition|)
return|return
name|lastIdSaved
return|;
if|else if
condition|(
name|isNewJournal
operator|||
name|journalDisabled
condition|)
return|return
name|ClusterEvent
operator|.
name|NO_EVENT
return|;
else|else
return|return
name|getHeaderData
argument_list|()
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|int
name|getMaxIdSaved
parameter_list|()
block|{
if|if
condition|(
name|maxIdSaved
operator|!=
name|ClusterEvent
operator|.
name|NO_EVENT
condition|)
return|return
name|maxIdSaved
return|;
if|else if
condition|(
name|isNewJournal
operator|||
name|journalDisabled
condition|)
return|return
name|ClusterEvent
operator|.
name|NO_EVENT
return|;
else|else
return|return
name|getHeaderData
argument_list|()
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
if|if
condition|(
name|counter
operator|!=
name|ClusterEvent
operator|.
name|NO_EVENT
condition|)
return|return
name|counter
return|;
if|else if
condition|(
name|isNewJournal
operator|||
name|journalDisabled
condition|)
return|return
literal|1
return|;
else|else
return|return
name|getHeaderData
argument_list|()
index|[
literal|2
index|]
return|;
block|}
specifier|private
name|int
index|[]
name|getHeaderData
parameter_list|()
block|{
name|int
index|[]
name|header
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|header
index|[
literal|1
index|]
operator|=
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|header
index|[
literal|2
index|]
operator|=
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error during retrieving last id"
argument_list|)
throw|;
block|}
return|return
name|header
return|;
block|}
specifier|public
name|boolean
name|isProcessed
parameter_list|(
name|ClusterEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|journalDisabled
condition|)
return|return
literal|false
return|;
name|int
name|id
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|contains
argument_list|(
name|event
argument_list|)
condition|)
return|return
literal|true
return|;
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|id
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
operator|+
literal|16
argument_list|)
expr_stmt|;
comment|//[ ID(4byte) |  START_DATA_FILE(4byte) | END_DATA_FILE(4 bytes) | FILE_NAME(4 bytes)| CONUTER(4 bytes)]
name|int
name|counter
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|event
operator|.
name|getCounter
argument_list|()
operator|==
name|counter
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|squeueEvent
parameter_list|()
throws|throws
name|ClusterException
block|{
if|if
condition|(
name|journalDisabled
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Error persisting data..... journal disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|ClusterEvent
name|event
init|=
operator|(
name|ClusterEvent
operator|)
name|queue
operator|.
name|first
argument_list|()
decl_stmt|;
name|saveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|done
condition|)
block|{
name|int
index|[]
name|header
init|=
name|getHeaderData
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IN SYNC last = "
operator|+
name|header
index|[
literal|0
index|]
operator|+
literal|" MAX = "
operator|+
name|header
index|[
literal|1
index|]
operator|+
literal|" COUNTER = "
operator|+
name|header
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|enqueEvent
parameter_list|(
name|ClusterEvent
name|event
parameter_list|)
throws|throws
name|ClusterException
block|{
if|if
condition|(
name|journalDisabled
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Error persisting data..... journal disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|id
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|ClusterEvent
operator|.
name|NO_EVENT
condition|)
throw|throw
operator|new
name|ClusterException
argument_list|(
literal|"Error in Journal managment... no id found in event"
argument_list|)
throw|;
name|queue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|saveEvent
parameter_list|(
name|ClusterEvent
name|event
parameter_list|)
block|{
name|int
name|id
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
name|event
operator|.
name|getCounter
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|eventBytes
init|=
name|ClusterEventMarshaller
operator|.
name|marshall
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|eventBytes
operator|.
name|length
decl_stmt|;
name|int
name|file
init|=
literal|0
decl_stmt|;
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNewJournal
condition|)
block|{
comment|//read previous ID
name|int
name|prev
init|=
name|lastIdSaved
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|prev
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
argument_list|)
expr_stmt|;
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|prevEnd
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|prevFile
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|start
operator|=
name|prevEnd
expr_stmt|;
name|end
operator|=
name|prevEnd
operator|+
name|eventBytes
operator|.
name|length
expr_stmt|;
name|file
operator|=
name|prevFile
expr_stmt|;
if|if
condition|(
name|prevEnd
operator|>
name|JOURNAL_STORAGE_FILE_MAX_SIZE
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|eventBytes
operator|.
name|length
expr_stmt|;
name|file
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|isNewJournal
operator|=
literal|false
expr_stmt|;
block|}
name|writeDataFile
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|eventBytes
argument_list|)
expr_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|id
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|counter
argument_list|)
expr_stmt|;
comment|//write last ID
name|lastIdSaved
operator|=
name|id
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>>>>>>>>> ID "
operator|+
name|id
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>>>>>>>>> COUNTER "
operator|+
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|id
operator|>
name|maxIdSaved
operator|)
operator|&&
operator|(
name|this
operator|.
name|counter
operator|==
name|counter
operator|)
operator|)
operator|||
operator|(
name|this
operator|.
name|counter
operator|==
name|counter
operator|-
literal|1
operator|)
condition|)
block|{
name|maxIdSaved
operator|=
name|id
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|counter
operator|==
name|counter
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"********** HEADER ID = "
operator|+
name|lastIdSaved
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"********** HEADER MAXID = "
operator|+
name|maxIdSaved
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"********** HEADER COUNTER = "
operator|+
name|this
operator|.
name|counter
argument_list|)
expr_stmt|;
name|raf
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|lastIdSaved
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|maxIdSaved
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|counter
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Error writing journal file... for ID : "
operator|+
name|id
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error writing journal file for ID : "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeDataFile
parameter_list|(
name|int
name|file
parameter_list|,
name|int
name|start
parameter_list|,
name|byte
index|[]
name|eventBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|storage
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
operator|+
name|JOURNAL_STORAGE_FILE_EXTENSION
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|store
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|storage
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
name|store
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|store
operator|.
name|write
argument_list|(
name|eventBytes
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|ClusterEvent
name|read
parameter_list|(
name|int
name|id
parameter_list|)
block|{
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|id
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
argument_list|)
expr_stmt|;
comment|//[ ID(4byte) |  START_DATA_FILE(4byte) | END_DATA_FILE(4 bytes) | FILE_NAME(4 bytes)| CONUTER(4 bytes)]
name|raf
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|start
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|file
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|readFromStorage
argument_list|(
name|end
argument_list|,
name|start
argument_list|,
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading journal file ... "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error rading journal file "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ClusterEvent
name|readFromStorage
parameter_list|(
name|int
name|end
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|eventBytes
init|=
operator|new
name|byte
index|[
name|end
operator|-
name|start
index|]
decl_stmt|;
name|File
name|storage
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|file
operator|+
name|JOURNAL_STORAGE_FILE_EXTENSION
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|store
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|storage
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|store
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|store
operator|.
name|read
argument_list|(
name|eventBytes
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ClusterEventMarshaller
operator|.
name|unmarshall
argument_list|(
name|eventBytes
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
name|getNextEvents
parameter_list|(
name|int
index|[]
name|header
parameter_list|,
name|int
index|[]
name|myHeader
parameter_list|,
name|Integer
name|start
parameter_list|)
block|{
if|if
condition|(
name|journalDisabled
condition|)
return|return
literal|null
return|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Get next events : lastIdSaved "
operator|+
name|header
index|[
literal|0
index|]
operator|+
literal|" maxId "
operator|+
name|header
index|[
literal|1
index|]
operator|+
literal|" counter:"
operator|+
name|header
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Get next events saved : lastIdSaved "
operator|+
name|myHeader
index|[
literal|0
index|]
operator|+
literal|" maxId "
operator|+
name|myHeader
index|[
literal|1
index|]
operator|+
literal|" counter:"
operator|+
name|myHeader
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
index|[
literal|0
index|]
operator|==
name|myHeader
index|[
literal|0
index|]
operator|&&
name|header
index|[
literal|1
index|]
operator|==
name|myHeader
index|[
literal|1
index|]
operator|&&
name|header
index|[
literal|2
index|]
operator|==
name|myHeader
index|[
literal|2
index|]
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Return empty arraylist"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|()
return|;
comment|//same header
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Start :"
operator|+
name|start
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|.
name|intValue
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|getStart
argument_list|(
name|header
index|[
literal|0
index|]
argument_list|,
name|myHeader
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getEvents
argument_list|(
name|start
operator|.
name|intValue
argument_list|()
argument_list|,
name|myHeader
argument_list|)
return|;
block|}
block|}
specifier|private
name|ArrayList
name|getEvents
parameter_list|(
name|int
name|last
parameter_list|,
name|int
index|[]
name|myHeader
parameter_list|)
block|{
name|ArrayList
name|events
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|last
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"INITIAL POS = "
operator|+
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|==
name|myHeader
index|[
literal|1
index|]
condition|)
return|return
literal|null
return|;
comment|//the max saved id is reached
while|while
condition|(
literal|true
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|pos
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
operator|+
literal|4
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|file
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|pos
operator|<=
name|myHeader
index|[
literal|1
index|]
operator|&&
name|count
operator|==
name|myHeader
index|[
literal|2
index|]
operator|)
operator|||
operator|(
name|pos
operator|>
name|myHeader
index|[
literal|1
index|]
operator|&&
name|count
operator|==
name|myHeader
index|[
literal|2
index|]
operator|-
literal|1
operator|)
condition|)
block|{
name|ClusterEvent
name|event
init|=
name|readFromStorage
argument_list|(
name|end
argument_list|,
name|start
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Add element "
operator|+
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|.
name|size
argument_list|()
operator|>=
name|REALIGN_MAX_BLOCK_SIZE
condition|)
break|break;
if|if
condition|(
name|pos
operator|==
name|myHeader
index|[
literal|1
index|]
condition|)
break|break;
name|pos
operator|+=
literal|1
expr_stmt|;
name|int
name|size
init|=
operator|(
operator|(
operator|(
name|int
operator|)
name|raf
operator|.
name|length
argument_list|()
operator|-
literal|12
operator|)
operator|/
literal|20
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pos
operator|>
name|size
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|events
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|?
name|events
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading journal file ... "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error rading journal file "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|synchronized
name|ArrayList
name|getStart
parameter_list|(
name|int
name|last
parameter_list|,
name|int
index|[]
name|myHeader
parameter_list|)
block|{
name|ArrayList
name|events
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|pos
init|=
name|last
operator|<
literal|0
condition|?
literal|0
else|:
name|last
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|myHeader
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|int
name|m
init|=
name|myHeader
index|[
literal|1
index|]
decl_stmt|;
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|indexFile
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|JOURNAL_INDEX_FIRST_TRUNK_SIZE
operator|+
name|pos
operator|*
name|JOURNAL_INDEX_TRUNK_SIZE
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|file
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|pos
operator|<
name|m
operator|&&
name|count
operator|==
name|c
operator|)
operator|||
operator|(
name|pos
operator|>
name|m
operator|&&
name|count
operator|==
name|c
operator|-
literal|1
operator|)
condition|)
block|{
name|ClusterEvent
name|event
init|=
name|readFromStorage
argument_list|(
name|end
argument_list|,
name|start
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Add element "
operator|+
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|.
name|size
argument_list|()
operator|>=
name|REALIGN_MAX_BLOCK_SIZE
condition|)
break|break;
name|pos
operator|-=
literal|1
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Pos : "
operator|+
name|pos
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COUNER =  "
operator|+
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
operator|&&
name|c
operator|!=
literal|1
condition|)
block|{
name|pos
operator|=
operator|(
operator|(
operator|(
name|int
operator|)
name|raf
operator|.
name|length
argument_list|()
operator|-
literal|12
operator|)
operator|/
literal|20
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|pos
operator|<=
name|m
condition|)
break|break;
block|}
if|else if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|pos
operator|==
name|myHeader
index|[
literal|1
index|]
condition|)
break|break;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXITING"
argument_list|)
expr_stmt|;
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|events
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|?
name|events
else|:
name|getEvents
argument_list|(
name|last
operator|<
literal|0
condition|?
literal|0
else|:
name|last
argument_list|,
name|myHeader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error reading journal file ... "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading journal file "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|EventComparator
implements|implements
name|Comparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o
parameter_list|,
name|Object
name|o1
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ClusterEvent
operator|)
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
if|if
condition|(
operator|!
operator|(
name|o1
operator|instanceof
name|ClusterEvent
operator|)
condition|)
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
name|ClusterEvent
name|ev
init|=
operator|(
name|ClusterEvent
operator|)
name|o
decl_stmt|;
name|ClusterEvent
name|ev1
init|=
operator|(
name|ClusterEvent
operator|)
name|o1
decl_stmt|;
name|int
name|counter
init|=
name|ev
operator|.
name|getCounter
argument_list|()
decl_stmt|;
name|int
name|counter1
init|=
name|ev1
operator|.
name|getCounter
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|ev
operator|.
name|getId
argument_list|()
decl_stmt|;
name|int
name|id1
init|=
name|ev1
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|==
name|counter1
condition|)
return|return
name|id
operator|-
name|id1
return|;
return|return
name|counter
operator|-
name|counter1
return|;
block|}
block|}
block|}
end_class

end_unit

