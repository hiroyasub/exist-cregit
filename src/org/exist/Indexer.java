begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|CDATASectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|CommentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ProcessingInstructionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RangeIndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ProgressIndicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|pool
operator|.
name|NodePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  * Parses a given input document via SAX, stores it to the database and handles  * index-creation.  *   * @author wolf  *   */
end_comment

begin_class
specifier|public
class|class
name|Indexer
extends|extends
name|Observable
implements|implements
name|ContentHandler
implements|,
name|LexicalHandler
implements|,
name|ErrorHandler
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CACHE_CHILD_COUNT_MAX
init|=
literal|0x10000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR_ID_TYPE
init|=
literal|"ID"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR_IDREF_TYPE
init|=
literal|"IDREF"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR_IDREFS_TYPE
init|=
literal|"IDREFS"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Indexer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_ELEMENT_NAME
init|=
literal|"indexer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_INDEX_ELEMENT_NAME
init|=
literal|"index"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPPRESS_WHITESPACE_ATTRIBUTE
init|=
literal|"suppress-whitespace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRESERVE_WS_MIXED_CONTENT_ATTRIBUTE
init|=
literal|"preserve-whitespace-mixed-content"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_INDEXER_CONFIG
init|=
literal|"indexer.config"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROPERTY_SUPPRESS_WHITESPACE
init|=
literal|"indexer.suppress-whitespace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
init|=
literal|"indexer.preserve-whitespace-mixed-content"
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
name|Txn
name|transaction
decl_stmt|;
specifier|protected
name|StreamListener
name|indexListener
decl_stmt|;
specifier|protected
name|XMLString
name|charBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|inCDATASection
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|currentLine
init|=
literal|0
decl_stmt|;
specifier|protected
name|NodePath
name|currentPath
init|=
operator|new
name|NodePath
argument_list|()
decl_stmt|;
specifier|protected
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
specifier|protected
name|IndexSpec
name|indexSpec
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|insideDTD
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|validate
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|level
init|=
literal|0
decl_stmt|;
specifier|protected
name|Locator
name|locator
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|normalize
init|=
name|XMLString
operator|.
name|SUPPRESS_BOTH
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Element
name|rootNode
decl_stmt|;
specifier|protected
name|Stack
argument_list|<
name|ElementImpl
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Stack
argument_list|<
name|XMLString
argument_list|>
name|nodeContentStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|StoredNode
name|prevNode
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|ignorePrefix
init|=
literal|null
decl_stmt|;
specifier|protected
name|ProgressIndicator
name|progress
decl_stmt|;
specifier|protected
name|boolean
name|preserveWSmixed
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|docSize
init|=
literal|0
decl_stmt|;
specifier|private
enum|enum
name|ProcessTextParent
block|{
name|COMMENT
block|,
name|PI
block|,
name|CDATA_START
block|,
name|ELEMENT_START
block|,
name|ELEMENT_END
block|}
empty_stmt|;
comment|/*      * used to record the number of children of an element during validation      * phase. later, when storing the nodes, we already know the child count and      * don't need to update the element a second time.      */
specifier|private
name|int
name|childCnt
index|[]
init|=
operator|new
name|int
index|[
literal|0x1000
index|]
decl_stmt|;
comment|// the current position in childCnt
specifier|private
name|int
name|elementCnt
init|=
literal|0
decl_stmt|;
comment|// the current nodeFactoryInstanceCnt
specifier|private
name|int
name|nodeFactoryInstanceCnt
init|=
literal|0
decl_stmt|;
comment|// reusable fields
specifier|private
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|()
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|ElementImpl
argument_list|>
name|usedElements
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
comment|// when storing the document data, validation will be switched off, so
comment|// entities will not be reported. We thus have to cache all needed entities
comment|// during the validation run.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entityMap
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|currentEntityName
init|=
literal|null
decl_stmt|;
specifier|private
name|XMLString
name|currentEntityValue
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
comment|/**      * Create a new parser using the given database broker and user to store the      * document.      *       *@param broker      *@exception EXistException      */
specifier|public
name|Indexer
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new parser using the given database broker and user to store the      * document.      *       *@param broker      *            The database broker to use.      *@param transaction      *            The transaction to use for indexing      *@param priv      *            used by the security manager to indicate that it needs      *            privileged access to the db.      *@exception EXistException      */
specifier|public
name|Indexer
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|boolean
name|priv
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|transaction
operator|=
name|transaction
expr_stmt|;
comment|// TODO : move the configuration in the constructor or in a dedicated
comment|// method
specifier|final
name|Configuration
name|config
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|suppressWS
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressWS
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"leading"
operator|.
name|equals
argument_list|(
name|suppressWS
argument_list|)
condition|)
block|{
name|normalize
operator|=
name|XMLString
operator|.
name|SUPPRESS_LEADING_WS
expr_stmt|;
block|}
if|else if
condition|(
literal|"trailing"
operator|.
name|equals
argument_list|(
name|suppressWS
argument_list|)
condition|)
block|{
name|normalize
operator|=
name|XMLString
operator|.
name|SUPPRESS_TRAILING_WS
expr_stmt|;
block|}
if|else if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|suppressWS
argument_list|)
condition|)
block|{
name|normalize
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|Boolean
name|temp
decl_stmt|;
if|if
condition|(
operator|(
name|temp
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|preserveWSmixed
operator|=
name|temp
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setValidating
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validate
operator|=
name|validate
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|broker
operator|.
name|getIndexController
argument_list|()
operator|.
name|setDocument
argument_list|(
name|document
argument_list|,
name|StreamListener
operator|.
name|STORE
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexListener
operator|=
name|broker
operator|.
name|getIndexController
argument_list|()
operator|.
name|getStreamListener
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Prepare the indexer for parsing a new document. This will reset the      * internal state of the Indexer object.      *       * @param doc      */
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|CollectionConfiguration
name|collectionConfig
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
if|if
condition|(
name|collectionConfig
operator|!=
literal|null
condition|)
block|{
name|indexSpec
operator|=
name|collectionConfig
operator|.
name|getIndexConfiguration
argument_list|()
expr_stmt|;
block|}
comment|// reset internal fields
name|level
operator|=
literal|0
expr_stmt|;
name|currentPath
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stack
operator|=
operator|new
name|Stack
argument_list|<>
argument_list|()
expr_stmt|;
name|docSize
operator|=
literal|0
expr_stmt|;
name|nsMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|indexListener
operator|=
literal|null
expr_stmt|;
name|rootNode
operator|=
literal|null
expr_stmt|;
name|setPrevious
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the document object to be used by this Indexer. This method doesn't      * reset the internal state.      *       * @param doc      */
specifier|public
name|void
name|setDocumentObject
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
specifier|public
name|int
name|getDocSize
parameter_list|()
block|{
return|return
name|docSize
return|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|charBuf
operator|!=
literal|null
condition|)
block|{
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charBuf
operator|=
operator|new
name|XMLString
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentEntityName
operator|!=
literal|null
condition|)
block|{
name|currentEntityValue
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|insideDTD
condition|)
block|{
return|return;
block|}
specifier|final
name|CommentImpl
name|comment
init|=
operator|new
name|CommentImpl
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|comment
operator|.
name|setNodeId
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createInstance
argument_list|(
name|nodeFactoryInstanceCnt
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|comment
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|appendChild
argument_list|(
operator|(
name|NodeHandle
operator|)
name|comment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ElementImpl
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|processText
argument_list|(
name|last
argument_list|,
name|ProcessTextParent
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|comment
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|comment
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endCDATA
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|ElementImpl
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|CDATASectionImpl
name|cdata
init|=
operator|new
name|CDATASectionImpl
argument_list|(
name|charBuf
argument_list|)
decl_stmt|;
name|cdata
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|cdata
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|cdata
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexListener
operator|!=
literal|null
condition|)
block|{
name|indexListener
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|cdata
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
name|setPrevious
argument_list|(
name|cdata
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeContentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|XMLString
name|next
range|:
name|nodeContentStack
control|)
block|{
name|next
operator|.
name|append
argument_list|(
name|charBuf
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|inCDATASection
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|endDTD
parameter_list|()
block|{
name|insideDTD
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|progress
operator|.
name|finish
argument_list|()
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
comment|//LOG.debug("elementCnt = " + childCnt.length);
block|}
specifier|private
name|void
name|processText
parameter_list|(
name|ElementImpl
name|last
parameter_list|,
name|ProcessTextParent
name|ptp
parameter_list|)
block|{
comment|// if (charBuf != null&& charBuf.length()> 0) {
comment|//    // remove whitespace if the node has just a single text child,
comment|//    // keep whitespace for mixed content.
comment|//     final XMLString normalized;
comment|//     if ((charBuf.isWhitespaceOnly()&& preserveWSmixed) || last.preserveSpace()) {
comment|// 	normalized = charBuf;
comment|//     } else {
comment|// 	if (last.getChildCount() == 0) {
comment|//            normalized = charBuf.normalize(normalize);
comment|// 	} else {
comment|// 	    normalized = charBuf.isWhitespaceOnly() ? null : charBuf;
comment|// 	}
comment|//     }
comment|//     if (normalized != null&& normalized.length()> 0) {
comment|// 	text.setData(normalized);
comment|// 	text.setOwnerDocument(document);
comment|// 	last.appendChildInternal(prevNode, text);
comment|// 	if (!validate) storeText();
comment|// 	setPrevious(text);
comment|//     }
comment|//     charBuf.reset();
comment|// }
comment|//from startElement method
if|if
condition|(
name|charBuf
operator|!=
literal|null
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|XMLString
name|normalized
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|ptp
condition|)
block|{
case|case
name|COMMENT
case|:
case|case
name|PI
case|:
case|case
name|CDATA_START
case|:
name|normalized
operator|=
name|charBuf
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|charBuf
operator|.
name|isWhitespaceOnly
argument_list|()
condition|)
block|{
if|if
condition|(
name|last
operator|.
name|preserveSpace
argument_list|()
operator|||
name|last
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|normalized
operator|=
name|charBuf
expr_stmt|;
block|}
if|else if
condition|(
name|preserveWSmixed
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|last
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
operator|&&
operator|(
name|normalize
operator|&
name|XMLString
operator|.
name|SUPPRESS_LEADING_WS
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|normalized
operator|=
name|charBuf
expr_stmt|;
block|}
block|}
else|else
block|{
name|normalized
operator|=
name|charBuf
operator|.
name|normalize
argument_list|(
name|normalize
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//normalized = charBuf;
if|if
condition|(
name|last
operator|.
name|preserveSpace
argument_list|()
condition|)
block|{
name|normalized
operator|=
name|charBuf
expr_stmt|;
block|}
if|else if
condition|(
name|last
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|normalized
operator|=
name|charBuf
operator|.
name|normalize
argument_list|(
name|normalize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// mixed element content: don't normalize the text node,
comment|// just check if there is any text at all
if|if
condition|(
name|preserveWSmixed
condition|)
block|{
name|normalized
operator|=
name|charBuf
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|normalize
operator|&
name|XMLString
operator|.
name|SUPPRESS_LEADING_WS
operator|)
operator|!=
literal|0
condition|)
block|{
name|normalized
operator|=
name|charBuf
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_LEADING_WS
operator||
name|XMLString
operator|.
name|COLLAPSE_WS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|normalize
operator|&
name|XMLString
operator|.
name|SUPPRESS_TRAILING_WS
operator|)
operator|!=
literal|0
condition|)
block|{
name|normalized
operator|=
name|charBuf
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_TRAILING_WS
operator||
name|XMLString
operator|.
name|COLLAPSE_WS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//normalized = charBuf.normalize(XMLString.COLLAPSE_WS);
name|normalized
operator|=
name|charBuf
operator|.
name|normalize
argument_list|(
name|normalize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|normalized
operator|!=
literal|null
condition|)
block|{
name|text
operator|.
name|setData
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|storeText
argument_list|()
expr_stmt|;
name|setPrevious
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|charBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|qname
parameter_list|)
block|{
specifier|final
name|ElementImpl
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|processText
argument_list|(
name|last
argument_list|,
name|ProcessTextParent
operator|.
name|ELEMENT_END
argument_list|)
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|XMLString
name|elemContent
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|validate
operator|&&
name|RangeIndexSpec
operator|.
name|hasQNameOrValueIndex
argument_list|(
name|last
operator|.
name|getIndexType
argument_list|()
argument_list|)
condition|)
block|{
name|elemContent
operator|=
name|nodeContentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validate
condition|)
block|{
specifier|final
name|String
name|content
init|=
name|elemContent
operator|==
literal|null
condition|?
literal|null
else|:
name|elemContent
operator|.
name|toString
argument_list|()
decl_stmt|;
name|broker
operator|.
name|endElement
argument_list|(
name|last
argument_list|,
name|currentPath
argument_list|,
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexListener
operator|!=
literal|null
condition|)
name|indexListener
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|last
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
name|currentPath
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
if|if
condition|(
name|validate
condition|)
block|{
if|if
condition|(
name|childCnt
operator|!=
literal|null
condition|)
name|setChildCount
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|childCnt
operator|==
literal|null
operator|&&
name|last
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|childCnt
operator|!=
literal|null
operator|&&
name|childCnt
index|[
name|last
operator|.
name|getPosition
argument_list|()
index|]
operator|!=
name|last
operator|.
name|getChildCount
argument_list|()
operator|)
condition|)
block|{
name|broker
operator|.
name|updateNode
argument_list|(
name|transaction
argument_list|,
name|last
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|setPrevious
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
block|}
comment|/**      * @param last      */
specifier|private
name|void
name|setChildCount
parameter_list|(
specifier|final
name|ElementImpl
name|last
parameter_list|)
block|{
if|if
condition|(
name|last
operator|.
name|getPosition
argument_list|()
operator|>=
name|childCnt
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|childCnt
operator|.
name|length
operator|>
name|CACHE_CHILD_COUNT_MAX
condition|)
block|{
name|childCnt
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|int
name|n
index|[]
init|=
operator|new
name|int
index|[
name|childCnt
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|childCnt
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
literal|0
argument_list|,
name|childCnt
operator|.
name|length
argument_list|)
expr_stmt|;
name|childCnt
operator|=
name|n
expr_stmt|;
block|}
name|childCnt
index|[
name|last
operator|.
name|getPosition
argument_list|()
index|]
operator|=
name|last
operator|.
name|getChildCount
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|ignorePrefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|equals
argument_list|(
name|ignorePrefix
argument_list|)
condition|)
block|{
name|ignorePrefix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|nsMappings
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|msg
init|=
literal|"error at ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|","
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|") : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|msg
init|=
literal|"fatal error at ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|","
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|") : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|//Nothing to do
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
block|{
specifier|final
name|ProcessingInstructionImpl
name|pi
init|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pi
operator|.
name|setNodeId
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createInstance
argument_list|(
name|nodeFactoryInstanceCnt
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|pi
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
name|document
operator|.
name|appendChild
argument_list|(
operator|(
name|NodeHandle
operator|)
name|pi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ElementImpl
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|processText
argument_list|(
name|last
argument_list|,
name|ProcessTextParent
operator|.
name|PI
argument_list|)
expr_stmt|;
name|last
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|pi
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|pi
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
name|this
operator|.
name|locator
operator|=
name|locator
expr_stmt|;
block|}
specifier|public
name|void
name|startCDATA
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|processText
argument_list|(
name|stack
operator|.
name|peek
argument_list|()
argument_list|,
name|ProcessTextParent
operator|.
name|CDATA_START
argument_list|)
expr_stmt|;
block|}
name|inCDATASection
operator|=
literal|true
expr_stmt|;
block|}
comment|// Methods of interface LexicalHandler
comment|// used to determine Doctype
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
specifier|final
name|DocumentTypeImpl
name|docType
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|name
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
name|document
operator|.
name|setDocumentType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
name|insideDTD
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|progress
operator|=
operator|new
name|ProgressIndicator
argument_list|(
name|currentLine
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|document
operator|.
name|setChildCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|elementCnt
operator|=
literal|0
expr_stmt|;
block|}
name|docSize
operator|=
literal|0
expr_stmt|;
comment|/*           * Reset node id count          *           * We set this to 1 instead of 0 to match the InMemmory serializer which          * considers the Document to be the first node with an id.          */
name|nodeFactoryInstanceCnt
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// calculate number of real attributes:
comment|// don't store namespace declarations
name|int
name|attrLength
init|=
name|attributes
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|String
name|attrQName
decl_stmt|;
name|String
name|attrNS
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|attrNS
operator|=
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|attrQName
operator|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrQName
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
operator|||
name|attrNS
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
operator|--
name|attrLength
expr_stmt|;
block|}
block|}
name|ElementImpl
name|last
decl_stmt|;
name|ElementImpl
name|node
decl_stmt|;
name|int
name|p
init|=
name|qname
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
specifier|final
name|String
name|prefix
init|=
operator|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
operator|)
condition|?
name|qname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
else|:
literal|""
decl_stmt|;
specifier|final
name|QName
name|qn
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getQName
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|namespace
argument_list|,
name|name
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|last
operator|=
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
name|processText
argument_list|(
name|last
argument_list|,
name|ProcessTextParent
operator|.
name|ELEMENT_START
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|usedElements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|node
operator|=
name|usedElements
operator|.
name|pop
argument_list|()
expr_stmt|;
name|node
operator|.
name|setNodeName
argument_list|(
name|qn
argument_list|,
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|qn
argument_list|,
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DOMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// copy xml:space setting
name|node
operator|.
name|setPreserveSpace
argument_list|(
name|last
operator|.
name|preserveSpace
argument_list|()
argument_list|)
expr_stmt|;
comment|// append the node to its parent
comment|// (computes the node id and updates the parent's child count)
name|last
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
name|attrLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|nsMappings
operator|!=
literal|null
operator|&&
name|nsMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|node
operator|.
name|setNamespaceMappings
argument_list|(
name|nsMappings
argument_list|)
expr_stmt|;
name|nsMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentPath
operator|.
name|addComponent
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPosition
argument_list|(
name|elementCnt
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
if|if
condition|(
name|childCnt
operator|!=
literal|null
condition|)
name|node
operator|.
name|setChildCount
argument_list|(
name|childCnt
index|[
name|node
operator|.
name|getPosition
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|storeElement
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|node
operator|=
operator|new
name|ElementImpl
argument_list|(
name|qn
argument_list|,
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DOMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|rootNode
operator|=
name|node
expr_stmt|;
name|setPrevious
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|node
operator|.
name|setNodeId
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createInstance
argument_list|(
name|nodeFactoryInstanceCnt
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
name|attrLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|nsMappings
operator|!=
literal|null
operator|&&
name|nsMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|node
operator|.
name|setNamespaceMappings
argument_list|(
name|nsMappings
argument_list|)
expr_stmt|;
name|nsMappings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentPath
operator|.
name|addComponent
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPosition
argument_list|(
name|elementCnt
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
if|if
condition|(
name|childCnt
operator|!=
literal|null
condition|)
name|node
operator|.
name|setChildCount
argument_list|(
name|childCnt
index|[
name|node
operator|.
name|getPosition
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|storeElement
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|appendChild
argument_list|(
operator|(
name|NodeHandle
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
name|level
operator|++
expr_stmt|;
name|String
name|attrPrefix
decl_stmt|;
name|String
name|attrLocalName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|attrNS
operator|=
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|attrLocalName
operator|=
name|attributes
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|attrQName
operator|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// skip xmlns-attributes and attributes in eXist's namespace
if|if
condition|(
name|attrQName
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
operator|||
name|attrNS
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
operator|--
name|attrLength
expr_stmt|;
else|else
block|{
name|p
operator|=
name|attrQName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|attrPrefix
operator|=
operator|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
operator|)
condition|?
name|attrQName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
else|:
literal|null
expr_stmt|;
specifier|final
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|NodePool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowNode
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|attrQN
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
operator|.
name|getQName
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attrNS
argument_list|,
name|attrLocalName
argument_list|,
name|attrPrefix
argument_list|)
decl_stmt|;
try|try
block|{
name|attr
operator|.
name|setNodeName
argument_list|(
name|attrQN
argument_list|,
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DOMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|attr
operator|.
name|setValue
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|ATTR_ID_TYPE
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|ID
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|ATTR_IDREF_TYPE
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|IDREF
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|ATTR_IDREFS_TYPE
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|IDREFS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attr
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|XML_ID_QNAME
argument_list|)
condition|)
block|{
comment|// an xml:id attribute. Normalize the attribute and set its
comment|// type to ID
name|attr
operator|.
name|setValue
argument_list|(
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|StringValue
operator|.
name|collapseWhitespace
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|XMLChar
operator|.
name|isValidNCName
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Value of xml:id attribute is not a valid NCName: "
operator|+
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
name|attr
operator|.
name|setType
argument_list|(
name|AttrImpl
operator|.
name|ID
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attr
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|XML_SPACE_QNAME
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPreserveSpace
argument_list|(
literal|"preserve"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|appendChildInternal
argument_list|(
name|prevNode
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|attr
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexListener
operator|!=
literal|null
condition|)
name|indexListener
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attr
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|attrLength
operator|>
literal|0
condition|)
name|node
operator|.
name|setAttributes
argument_list|(
operator|(
name|short
operator|)
name|attrLength
argument_list|)
expr_stmt|;
comment|// notify observers about progress every 100 lines
if|if
condition|(
name|locator
operator|!=
literal|null
condition|)
block|{
name|currentLine
operator|=
name|locator
operator|.
name|getLineNumber
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|validate
condition|)
block|{
name|progress
operator|.
name|setValue
argument_list|(
name|currentLine
argument_list|)
expr_stmt|;
if|if
condition|(
name|progress
operator|.
name|changed
argument_list|()
condition|)
block|{
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|++
name|docSize
expr_stmt|;
block|}
specifier|private
name|void
name|storeText
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nodeContentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|XMLString
name|next
range|:
name|nodeContentStack
control|)
block|{
name|next
operator|.
name|append
argument_list|(
name|charBuf
argument_list|)
expr_stmt|;
block|}
block|}
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexListener
operator|!=
literal|null
condition|)
name|indexListener
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeElement
parameter_list|(
name|ElementImpl
name|node
parameter_list|)
block|{
name|broker
operator|.
name|storeNode
argument_list|(
name|transaction
argument_list|,
name|node
argument_list|,
name|currentPath
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexListener
operator|!=
literal|null
condition|)
name|indexListener
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|node
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|node
operator|.
name|setChildCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|RangeIndexSpec
operator|.
name|hasQNameOrValueIndex
argument_list|(
name|node
operator|.
name|getIndexType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|XMLString
name|contentBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|nodeContentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// while validating, all entities are put into a map
comment|// to cache them for later use
if|if
condition|(
name|validate
condition|)
block|{
if|if
condition|(
name|entityMap
operator|==
literal|null
condition|)
name|entityMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|currentEntityName
operator|=
name|name
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// store the entity into a map for later
if|if
condition|(
name|validate
operator|&&
name|currentEntityValue
operator|!=
literal|null
condition|)
block|{
name|entityMap
operator|.
name|put
argument_list|(
name|currentEntityName
argument_list|,
name|currentEntityValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|currentEntityName
operator|=
literal|null
expr_stmt|;
name|currentEntityValue
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validate
operator|&&
name|entityMap
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|entityMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|characters
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
comment|// skip the eXist namespace
comment|// if (uri.equals(Namespaces.EXIST_NS)) {
comment|// ignorePrefix = prefix;
comment|// return;
comment|// }
name|nsMappings
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|msg
init|=
literal|"warning at ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|","
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|") : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|private
name|void
name|setPrevious
parameter_list|(
name|StoredNode
name|previous
parameter_list|)
block|{
if|if
condition|(
name|prevNode
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|prevNode
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|prevNode
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
if|if
condition|(
name|prevNode
operator|!=
name|rootNode
condition|)
block|{
name|prevNode
operator|.
name|clear
argument_list|()
expr_stmt|;
name|usedElements
operator|.
name|push
argument_list|(
operator|(
name|ElementImpl
operator|)
name|prevNode
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|prevNode
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|prevNode
operator|=
name|previous
expr_stmt|;
block|}
block|}
end_class

end_unit

