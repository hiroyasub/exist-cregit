begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionSignature
block|{
specifier|private
name|QName
name|name
decl_stmt|;
specifier|private
name|SequenceType
index|[]
name|arguments
decl_stmt|;
specifier|private
name|SequenceType
name|returnType
decl_stmt|;
specifier|private
name|boolean
name|isOverloaded
init|=
literal|false
decl_stmt|;
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|,
name|boolean
name|overloaded
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
name|this
operator|.
name|isOverloaded
operator|=
name|overloaded
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
return|return
name|arguments
operator|!=
literal|null
condition|?
name|arguments
operator|.
name|length
else|:
literal|0
return|;
block|}
specifier|public
name|SequenceType
name|getReturnType
parameter_list|()
block|{
return|return
name|returnType
return|;
block|}
specifier|public
name|SequenceType
index|[]
name|getArgumentTypes
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|boolean
name|isOverloaded
parameter_list|()
block|{
return|return
name|isOverloaded
return|;
block|}
block|}
end_class

end_unit

