begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist Native XML Database  * Copyright (C) 2000-03,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Library General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Library General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|FunLast
extends|extends
name|Function
block|{
specifier|public
name|FunLast
parameter_list|()
block|{
name|super
argument_list|(
literal|"last"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|TYPE_NUM
return|;
block|}
specifier|public
name|DocumentSet
name|preselect
parameter_list|(
name|DocumentSet
name|in_docs
parameter_list|,
name|StaticContext
name|context
parameter_list|)
block|{
return|return
name|in_docs
return|;
block|}
specifier|public
name|Value
name|eval
parameter_list|(
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|NodeProxy
name|contextNode
parameter_list|)
block|{
name|DocumentImpl
name|doc
init|=
name|contextNode
operator|.
name|getDoc
argument_list|()
decl_stmt|;
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|contextNode
operator|.
name|getGID
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|pid
init|=
operator|(
name|contextNode
operator|.
name|getGID
argument_list|()
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|/
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|f_gid
init|=
operator|(
name|pid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
operator|)
operator|*
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|long
name|e_gid
init|=
name|f_gid
operator|+
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|contextSet
operator|.
name|getRange
argument_list|(
name|doc
argument_list|,
name|f_gid
argument_list|,
name|e_gid
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|set
operator|.
name|getLength
argument_list|()
decl_stmt|;
return|return
operator|new
name|ValueNumber
argument_list|(
operator|(
name|double
operator|)
name|len
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|nodesEqual
parameter_list|(
name|NodeImpl
name|n1
parameter_list|,
name|NodeImpl
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|.
name|getNodeType
argument_list|()
operator|!=
name|n2
operator|.
name|getNodeType
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|n1
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
return|return
name|n1
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getNodeName
argument_list|()
argument_list|)
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|n1
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|Attr
operator|)
name|n1
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|n2
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
name|n1
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getNodeValue
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|String
name|pprint
parameter_list|()
block|{
return|return
literal|"last()"
return|;
block|}
block|}
end_class

end_unit

