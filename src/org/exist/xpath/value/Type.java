begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Int2IntRBTreeMap
import|;
end_import

begin_class
specifier|public
class|class
name|Type
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NODE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ELEMENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ATTRIBUTE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TEXT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|PROCESSING_INSTRUCTION
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|COMMENT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DOCUMENT
init|=
literal|6
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NAMESPACE
init|=
literal|7
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EMPTY
init|=
literal|10
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ITEM
init|=
literal|11
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ATOMIC
init|=
literal|12
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NUMBER
init|=
literal|13
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ANY_SIMPLE_TYPE
init|=
literal|14
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ANY_TYPE
init|=
literal|15
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|STRING
init|=
literal|100
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|BOOLEAN
init|=
literal|101
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DECIMAL
init|=
literal|200
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|FLOAT
init|=
literal|201
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DOUBLE
init|=
literal|203
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|INTEGER
init|=
literal|300
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Int2IntRBTreeMap
name|typeHierarchy
init|=
operator|new
name|Int2IntRBTreeMap
argument_list|()
decl_stmt|;
block|{
name|defineSubType
parameter_list|(
name|ITEM
parameter_list|,
name|NODE
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|ELEMENT
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|TEXT
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|PROCESSING_INSTRUCTION
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|COMMENT
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|DOCUMENT
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NODE
parameter_list|,
name|NAMESPACE
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|ITEM
parameter_list|,
name|ATOMIC
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|ATOMIC
parameter_list|,
name|STRING
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|ATOMIC
parameter_list|,
name|BOOLEAN
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|ATOMIC
parameter_list|,
name|NUMBER
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NUMBER
parameter_list|,
name|DECIMAL
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NUMBER
parameter_list|,
name|FLOAT
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|NUMBER
parameter_list|,
name|DOUBLE
parameter_list|)
constructor_decl|;
name|defineSubType
parameter_list|(
name|DECIMAL
parameter_list|,
name|INTEGER
parameter_list|)
constructor_decl|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|defineSubType
parameter_list|(
name|int
name|supertype
parameter_list|,
name|int
name|subtype
parameter_list|)
block|{
name|typeHierarchy
operator|.
name|put
argument_list|(
name|subtype
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|subTypeOf
parameter_list|(
name|int
name|subtype
parameter_list|,
name|int
name|supertype
parameter_list|)
block|{
if|if
condition|(
name|subtype
operator|==
name|supertype
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|supertype
operator|==
name|ITEM
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|subtype
operator|==
name|ITEM
operator|||
name|subtype
operator|==
name|EMPTY
condition|)
return|return
literal|false
return|;
return|return
name|subTypeOf
argument_list|(
name|typeHierarchy
operator|.
name|get
argument_list|(
name|subtype
argument_list|)
argument_list|,
name|supertype
argument_list|)
return|;
block|}
block|}
end_class

end_unit

