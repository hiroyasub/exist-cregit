begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Int2IntRBTreeMap
import|;
end_import

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Int2ObjectOpenHashMap
import|;
end_import

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|Object2IntRBTreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|StaticContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|XPathException
import|;
end_import

begin_class
specifier|public
class|class
name|Type
block|{
specifier|public
specifier|final
specifier|static
name|String
index|[]
name|NODETYPES
init|=
block|{
literal|"node"
block|,
literal|"element"
block|,
literal|"attribute"
block|,
literal|"text"
block|,
literal|"processing-instruction"
block|,
literal|"comment"
block|,
literal|"document"
block|,
literal|"namespace"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ELEMENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ATTRIBUTE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TEXT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|PROCESSING_INSTRUCTION
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|COMMENT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DOCUMENT
init|=
literal|6
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NAMESPACE
init|=
literal|7
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EMPTY
init|=
literal|10
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ITEM
init|=
literal|11
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ANY_TYPE
init|=
literal|12
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ATOMIC
init|=
literal|20
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|UNTYPED_ATOMIC
init|=
literal|21
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|STRING
init|=
literal|22
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|BOOLEAN
init|=
literal|23
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|QNAME
init|=
literal|24
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NUMBER
init|=
literal|30
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DECIMAL
init|=
literal|31
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|FLOAT
init|=
literal|32
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DOUBLE
init|=
literal|33
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|INTEGER
init|=
literal|34
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|JAVA_OBJECT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Int2IntRBTreeMap
name|typeHierarchy
init|=
operator|new
name|Int2IntRBTreeMap
argument_list|()
decl_stmt|;
static|static
block|{
name|defineSubType
argument_list|(
name|ITEM
argument_list|,
name|NODE
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|ELEMENT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|TEXT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|PROCESSING_INSTRUCTION
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|COMMENT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|DOCUMENT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NODE
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ITEM
argument_list|,
name|ATOMIC
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|STRING
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|BOOLEAN
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|QNAME
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|NUMBER
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|UNTYPED_ATOMIC
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|ATOMIC
argument_list|,
name|JAVA_OBJECT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NUMBER
argument_list|,
name|DECIMAL
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NUMBER
argument_list|,
name|FLOAT
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|NUMBER
argument_list|,
name|DOUBLE
argument_list|)
expr_stmt|;
name|defineSubType
argument_list|(
name|DECIMAL
argument_list|,
name|INTEGER
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|Int2ObjectOpenHashMap
name|typeNames
init|=
operator|new
name|Int2ObjectOpenHashMap
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object2IntRBTreeMap
name|typeCodes
init|=
operator|new
name|Object2IntRBTreeMap
argument_list|()
decl_stmt|;
static|static
block|{
name|defineBuiltInType
argument_list|(
name|NODE
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|ITEM
argument_list|,
literal|"item"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|EMPTY
argument_list|,
literal|"empty"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|NUMBER
argument_list|,
literal|"number"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|ELEMENT
argument_list|,
literal|"element"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|DOCUMENT
argument_list|,
literal|"document"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|ATTRIBUTE
argument_list|,
literal|"attribute"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|TEXT
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|PROCESSING_INSTRUCTION
argument_list|,
literal|"processing-instruction"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|COMMENT
argument_list|,
literal|"comment"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|NAMESPACE
argument_list|,
literal|"namespace"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|JAVA_OBJECT
argument_list|,
literal|"object"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|ANY_TYPE
argument_list|,
literal|"xs:anyType"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|ATOMIC
argument_list|,
literal|"xdt:anyAtomicType"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|UNTYPED_ATOMIC
argument_list|,
literal|"xdt:untypedAtomic"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|BOOLEAN
argument_list|,
literal|"xs:boolean"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|DECIMAL
argument_list|,
literal|"xs:decimal"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|FLOAT
argument_list|,
literal|"xs:float"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|DOUBLE
argument_list|,
literal|"xs:double"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|INTEGER
argument_list|,
literal|"xs:integer"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|STRING
argument_list|,
literal|"xs:string"
argument_list|)
expr_stmt|;
name|defineBuiltInType
argument_list|(
name|QNAME
argument_list|,
literal|"xs:QName"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|defineBuiltInType
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|typeNames
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|typeCodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|getTypeName
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|typeNames
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|int
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|code
init|=
name|typeCodes
operator|.
name|getInt
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|typeCodes
operator|.
name|defaultReturnValue
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type: "
operator|+
name|name
operator|+
literal|" is not defined"
argument_list|)
throw|;
return|return
name|code
return|;
block|}
specifier|public
specifier|final
specifier|static
name|int
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|StaticContext
operator|.
name|SCHEMA_NS
argument_list|)
condition|)
return|return
name|getType
argument_list|(
literal|"xs:"
operator|+
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
if|else if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|StaticContext
operator|.
name|XPATH_DATATYPES_NS
argument_list|)
condition|)
return|return
name|getType
argument_list|(
literal|"xs:"
operator|+
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getType
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|defineSubType
parameter_list|(
name|int
name|supertype
parameter_list|,
name|int
name|subtype
parameter_list|)
block|{
name|typeHierarchy
operator|.
name|put
argument_list|(
name|subtype
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|subTypeOf
parameter_list|(
name|int
name|subtype
parameter_list|,
name|int
name|supertype
parameter_list|)
block|{
if|if
condition|(
name|subtype
operator|==
name|supertype
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|supertype
operator|==
name|ITEM
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|subtype
operator|==
name|ITEM
operator|||
name|subtype
operator|==
name|EMPTY
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|typeHierarchy
operator|.
name|containsKey
argument_list|(
name|subtype
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type "
operator|+
name|subtype
operator|+
literal|" is not a valid type"
argument_list|)
throw|;
return|return
name|subTypeOf
argument_list|(
name|typeHierarchy
operator|.
name|get
argument_list|(
name|subtype
argument_list|)
argument_list|,
name|supertype
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|int
name|getSuperType
parameter_list|(
name|int
name|subtype
parameter_list|)
block|{
if|if
condition|(
name|subtype
operator|==
name|ITEM
condition|)
return|return
name|ITEM
return|;
return|return
name|typeHierarchy
operator|.
name|get
argument_list|(
name|subtype
argument_list|)
return|;
block|}
block|}
end_class

end_unit

