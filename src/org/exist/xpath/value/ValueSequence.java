begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|XPathException
import|;
end_import

begin_class
specifier|public
class|class
name|ValueSequence
extends|extends
name|AbstractSequence
block|{
name|List
name|values
decl_stmt|;
comment|// used to keep track of the type of added items.
comment|// will be Type.ANY_TYPE if the type is unknown
comment|// and Type.ITEM if there are items of mixed type.
name|int
name|itemType
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
specifier|public
name|ValueSequence
parameter_list|()
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ValueSequence
parameter_list|(
name|Sequence
name|otherSequence
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|addAll
argument_list|(
name|otherSequence
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Item
name|item
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemType
operator|==
name|item
operator|.
name|getType
argument_list|()
condition|)
return|return;
if|else if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
name|itemType
operator|=
name|item
operator|.
name|getType
argument_list|()
expr_stmt|;
else|else
name|itemType
operator|=
name|Type
operator|.
name|getCommonSuperType
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAll
parameter_list|(
name|Sequence
name|otherSequence
parameter_list|)
block|{
for|for
control|(
name|SequenceIterator
name|iterator
init|=
name|otherSequence
operator|.
name|iterate
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|add
argument_list|(
name|iterator
operator|.
name|nextItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#getItemType() 	 */
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|itemType
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
return|return
operator|new
name|ValueSequenceIterator
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#getLength() 	 */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
name|Item
operator|)
name|values
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xpath.value.Sequence#toNodeSet() 	 */
specifier|public
name|NodeSet
name|toNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|itemType
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|NodeSet
name|set
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeValue
name|v
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|v
operator|=
operator|(
name|NodeValue
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot query constructed nodes."
argument_list|)
throw|;
name|set
operator|.
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
else|else
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: the sequence cannot be converted into"
operator|+
literal|" a node set. Item type is "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|itemType
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
class|class
name|ValueSequenceIterator
implements|implements
name|SequenceIterator
block|{
specifier|private
name|Iterator
name|iter
decl_stmt|;
specifier|public
name|ValueSequenceIterator
parameter_list|(
name|Iterator
name|iterator
parameter_list|)
block|{
name|iter
operator|=
name|iterator
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xpath.value.SequenceIterator#hasNext() 		 */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xpath.value.SequenceIterator#nextItem() 		 */
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|(
name|Item
operator|)
name|iter
operator|.
name|next
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

