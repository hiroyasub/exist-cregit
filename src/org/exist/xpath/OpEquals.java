begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *   *  Copyright (C) 2000-03, Wolfgang M. Meier (meier@ifs. tu- darmstadt. de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SingleNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexPaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|TextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|DecimalValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_comment
comment|/**  *  compare two operands by =,<,> etc..  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    31. August 2002  */
end_comment

begin_class
specifier|public
class|class
name|OpEquals
extends|extends
name|BinaryOp
block|{
specifier|protected
name|int
name|relation
init|=
name|Constants
operator|.
name|EQ
decl_stmt|;
specifier|protected
name|NodeSet
name|temp
init|=
literal|null
decl_stmt|;
comment|// in some cases, we use a fulltext expression to preselect nodes
specifier|protected
name|ExtFulltext
name|containsExpr
init|=
literal|null
decl_stmt|;
specifier|public
name|OpEquals
parameter_list|(
name|int
name|relation
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
block|}
specifier|public
name|OpEquals
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
name|add
argument_list|(
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
name|add
argument_list|(
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Left argument is boolean: Convert right argument to a bool. 	 * 	 *@param  left     Description of the Parameter 	 *@param  right    Description of the Parameter 	 *@param  docs     Description of the Parameter 	 *@param  context  Description of the Parameter 	 *@param  node     Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|protected
name|Sequence
name|booleanCompare
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|boolean
name|lvalue
decl_stmt|;
name|boolean
name|rvalue
decl_stmt|;
if|if
condition|(
name|contextSequence
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
block|{
name|ArraySet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|NodeProxy
name|n
decl_stmt|;
name|SingleNodeSet
name|set
init|=
operator|new
name|SingleNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|contextSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|lvalue
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|set
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|rvalue
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|set
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmpBooleans
argument_list|(
name|lvalue
argument_list|,
name|rvalue
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|n
operator|.
name|addContextNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
name|ValueSequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|Item
name|item
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|contextSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|item
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|lvalue
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|item
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|rvalue
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|item
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmpBooleans
argument_list|(
name|lvalue
argument_list|,
name|rvalue
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|protected
name|boolean
name|cmpBooleans
parameter_list|(
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
operator|(
name|left
operator|==
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
operator|(
name|left
operator|!=
name|right
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|cmpNumbers
parameter_list|(
name|double
name|left
parameter_list|,
name|double
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
operator|(
name|left
operator|==
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
operator|(
name|left
operator|!=
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
operator|(
name|left
operator|>
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|LT
case|:
return|return
operator|(
name|left
operator|<
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
operator|(
name|left
operator|>=
name|right
operator|)
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
operator|(
name|left
operator|<=
name|right
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|compareStrings
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
name|int
name|cmp
init|=
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
operator|(
name|cmp
operator|==
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
operator|(
name|cmp
operator|!=
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
operator|(
name|cmp
operator|>
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|LT
case|:
return|return
operator|(
name|cmp
operator|<
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
operator|(
name|cmp
operator|>=
literal|0
operator|)
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
operator|(
name|cmp
operator|<=
literal|0
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 *  Compare left and right statement. Comparison is done like described in 	 *  the spec. If one argument returns a node set, we handle that first. 	 *  Otherwise if one argument is a number, process that. Third follows 	 *  string, boolean is last. If necessary move right to left and left to 	 *  right. 	 * 	 *@param  docs     Description of the Parameter 	 *@param  context  Description of the Parameter 	 *@param  node     Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
return|return
name|nodeSetCompare
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|getRight
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getRight
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|switchOperands
argument_list|()
expr_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|getRight
argument_list|()
argument_list|,
name|getLeft
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
return|return
name|numberCompare
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|getRight
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getRight
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
return|return
name|numberCompare
argument_list|(
name|getRight
argument_list|()
argument_list|,
name|getLeft
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
return|return
name|stringCompare
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|getRight
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
condition|)
return|return
name|booleanCompare
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|getRight
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getRight
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
condition|)
return|return
name|booleanCompare
argument_list|(
name|getRight
argument_list|()
argument_list|,
name|getLeft
argument_list|()
argument_list|,
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
return|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"syntax error"
argument_list|)
throw|;
block|}
comment|/** 	 *  Left argument is a node set. If right arg is a string-literal, call 	 *  broker.getNodesEqualTo - which is fast. If it is a number, convert it. 	 *  If it is a boolean, get the part of context which matches the left 	 *  expression, get the right value for every node of context and compare it 	 *  with the left-part. 	 * 	 *@param  left     Description of the Parameter 	 *@param  right    Description of the Parameter 	 *@param  docs     Description of the Parameter 	 *@param  context  Description of the Parameter 	 *@param  node     Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|protected
name|Sequence
name|nodeSetCompare
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeSet
name|result
init|=
operator|new
name|ArraySet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|contextSequence
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
operator|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"context is not a node sequence"
argument_list|)
throw|;
name|NodeSet
name|contextSet
init|=
operator|(
name|NodeSet
operator|)
name|contextSequence
decl_stmt|;
comment|// TODO: not correct: should test if right is a string literal
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|right
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|||
name|Type
operator|.
name|subTypeOf
argument_list|(
name|right
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
comment|// evaluate left expression
name|NodeSet
name|nodes
init|=
operator|(
name|NodeSet
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
name|String
name|cmp
init|=
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
operator|&&
name|relation
operator|==
name|Constants
operator|.
name|EQ
operator|&&
name|nodes
operator|.
name|hasIndex
argument_list|()
operator|&&
name|cmp
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|cmpCopy
init|=
name|cmp
decl_stmt|;
name|cmp
operator|=
name|maskWildcards
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
comment|// try to use a fulltext search expression to reduce the number
comment|// of potential nodes to scan through
name|SimpleTokenizer
name|tokenizer
init|=
operator|new
name|SimpleTokenizer
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setText
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
name|TextToken
name|token
decl_stmt|;
name|String
name|term
decl_stmt|;
name|boolean
name|foundNumeric
init|=
literal|false
decl_stmt|;
comment|// setup up an&= expression using the fulltext index
name|containsExpr
operator|=
operator|new
name|ExtFulltext
argument_list|(
name|Constants
operator|.
name|FULLTEXT_AND
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|&&
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|true
argument_list|)
operator|)
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
comment|// remember if we find an alphanumeric token
if|if
condition|(
name|token
operator|.
name|getType
argument_list|()
operator|==
name|TextToken
operator|.
name|ALPHANUM
condition|)
name|foundNumeric
operator|=
literal|true
expr_stmt|;
name|containsExpr
operator|.
name|addTerm
argument_list|(
name|token
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check if all elements are indexed. If not, we can't use the
comment|// fulltext index.
if|if
condition|(
name|foundNumeric
condition|)
name|foundNumeric
operator|=
name|checkArgumentTypes
argument_list|(
name|context
argument_list|,
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|foundNumeric
operator|)
operator|&&
name|containsExpr
operator|.
name|countTerms
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// all elements are indexed: use the fulltext index
name|nodes
operator|=
operator|(
name|NodeSet
operator|)
name|containsExpr
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|cmp
operator|=
name|cmpCopy
expr_stmt|;
block|}
comment|// now compare the input node set to the search expression
name|result
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getNodesEqualTo
argument_list|(
name|nodes
argument_list|,
name|docs
argument_list|,
name|relation
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|right
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|DecimalValue
name|rvalue
decl_stmt|;
name|DecimalValue
name|lvalue
decl_stmt|;
name|NodeProxy
name|ln
decl_stmt|;
name|NodeSet
name|temp
init|=
operator|new
name|SingleNodeSet
argument_list|()
decl_stmt|;
name|NodeSet
name|lset
init|=
operator|(
name|NodeSet
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lset
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ln
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|lvalue
operator|=
operator|(
name|DecimalValue
operator|)
name|ln
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|ln
argument_list|)
expr_stmt|;
name|rvalue
operator|=
operator|(
name|DecimalValue
operator|)
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|temp
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmpNumbers
argument_list|(
name|lvalue
operator|.
name|getDouble
argument_list|()
argument_list|,
name|rvalue
operator|.
name|getDouble
argument_list|()
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|ln
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|right
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
condition|)
block|{
name|NodeProxy
name|n
decl_stmt|;
name|NodeProxy
name|parent
decl_stmt|;
name|boolean
name|rvalue
decl_stmt|;
name|boolean
name|lvalue
decl_stmt|;
name|long
name|pid
decl_stmt|;
name|NodeSet
name|lset
init|=
operator|(
name|NodeSet
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
comment|// get left arguments node set
name|NodeSet
name|temp
init|=
operator|new
name|SingleNodeSet
argument_list|()
decl_stmt|;
comment|// get that part of context for which left argument's node set would
comment|// be> 0
for|for
control|(
name|Iterator
name|i
init|=
name|lset
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|parent
operator|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|n
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
name|temp
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|SingleNodeSet
name|ltemp
init|=
operator|new
name|SingleNodeSet
argument_list|()
decl_stmt|;
comment|// now compare every node of context with the temporary set
for|for
control|(
name|Iterator
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|n
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|ltemp
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|lvalue
operator|=
name|temp
operator|.
name|contains
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|rvalue
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|ltemp
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmpBooleans
argument_list|(
name|lvalue
argument_list|,
name|rvalue
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|maskWildcards
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|expr
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'*'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
break|break;
default|default :
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|checkArgumentTypes
parameter_list|(
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|XPathException
block|{
name|Configuration
name|config
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Map
name|idxPathMap
init|=
operator|(
name|Map
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.map"
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|IndexPaths
name|idx
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|idx
operator|=
operator|(
name|IndexPaths
operator|)
name|idxPathMap
operator|.
name|get
argument_list|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
literal|null
operator|&&
name|idx
operator|.
name|isSelective
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|idx
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|idx
operator|.
name|getIncludeAlphaNum
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 *  Left argument is a number: Convert right argument to a number for every 	 *  node in context. 	 * 	 *@param  left     Description of the Parameter 	 *@param  right    Description of the Parameter 	 *@param  docs     Description of the Parameter 	 *@param  context  Description of the Parameter 	 *@param  node     Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|protected
name|Sequence
name|numberCompare
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"comparing numbers"
argument_list|)
expr_stmt|;
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|contextSequence
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
name|result
operator|=
operator|new
name|ArraySet
argument_list|(
literal|10
argument_list|)
expr_stmt|;
else|else
name|result
operator|=
operator|new
name|ValueSequence
argument_list|()
expr_stmt|;
name|Item
name|current
decl_stmt|;
name|double
name|rvalue
decl_stmt|;
name|double
name|lvalue
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|contextSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|rvalue
operator|=
operator|(
operator|(
name|DecimalValue
operator|)
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|current
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|)
operator|.
name|getDouble
argument_list|()
expr_stmt|;
name|lvalue
operator|=
operator|(
operator|(
name|DecimalValue
operator|)
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|current
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|)
operator|.
name|getDouble
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rvalue
operator|+
literal|" = "
operator|+
name|lvalue
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmpNumbers
argument_list|(
name|lvalue
argument_list|,
name|rvalue
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|current
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
operator|(
operator|(
name|NodeProxy
operator|)
name|current
operator|)
operator|.
name|addContextNode
argument_list|(
operator|(
name|NodeProxy
operator|)
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|String
name|pprint
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getLeft
argument_list|()
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|OPS
index|[
name|relation
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getRight
argument_list|()
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  check relevant documents. Does nothing here. 	 * 	 *@param  in_docs  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
name|DocumentSet
name|preselect
parameter_list|(
name|DocumentSet
name|in_docs
parameter_list|,
name|StaticContext
name|context
parameter_list|)
block|{
return|return
name|in_docs
return|;
block|}
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|NODE
return|;
block|}
specifier|protected
name|Sequence
name|stringCompare
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|StaticContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"comparing "
operator|+
name|docs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ValueSequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|Item
name|current
decl_stmt|;
name|String
name|lvalue
decl_stmt|;
name|String
name|rvalue
decl_stmt|;
name|int
name|cmp
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|contextSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|rvalue
operator|=
name|left
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|current
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|lvalue
operator|=
name|right
operator|.
name|eval
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
name|contextSequence
argument_list|,
name|current
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|compareStrings
argument_list|(
name|rvalue
argument_list|,
name|lvalue
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
operator|(
operator|(
name|NodeProxy
operator|)
name|current
operator|)
operator|.
name|addContextNode
argument_list|(
operator|(
name|NodeProxy
operator|)
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|switchOperands
parameter_list|()
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|GT
case|:
name|relation
operator|=
name|Constants
operator|.
name|LT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LT
case|:
name|relation
operator|=
name|Constants
operator|.
name|GT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|GTEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|LTEQ
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

