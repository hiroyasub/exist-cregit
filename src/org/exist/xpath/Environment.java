begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* eXist xml document repository and xpath implementation  * Copyright (C) 2000,  Wolfgang Meier (wolfgang@exist-db.org)  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|Environment
block|{
specifier|protected
name|HashMap
name|functions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|Environment
parameter_list|(
name|String
index|[]
index|[]
name|functionNames
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functionNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|functions
operator|.
name|put
argument_list|(
name|functionNames
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|functionNames
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|func
init|=
operator|(
name|String
operator|)
name|functions
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|func
operator|==
literal|null
condition|?
name|name
else|:
name|func
return|;
block|}
specifier|public
name|boolean
name|hasFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|functions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

