begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang Meier (meier@ifs.tu-darmstadt.de)  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ValueNodeSet
extends|extends
name|Value
block|{
specifier|protected
name|NodeSet
name|nodes
init|=
literal|null
decl_stmt|;
specifier|public
name|ValueNodeSet
parameter_list|(
name|NodeSet
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|Value
operator|.
name|isNodeList
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBooleanValue
parameter_list|()
block|{
return|return
operator|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
specifier|public
name|NodeList
name|getNodeList
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|double
name|getNumericValue
parameter_list|()
block|{
comment|// take the first node from the set and try
comment|// to convert it to a number
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|NodeProxy
name|p
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|p
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|v
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
block|}
return|return
name|Double
operator|.
name|NaN
return|;
block|}
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
name|StringBuffer
name|val
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NodeProxy
name|p
init|=
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|val
operator|.
name|append
argument_list|(
name|p
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|NodeSet
name|value
parameter_list|)
block|{
name|nodes
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

