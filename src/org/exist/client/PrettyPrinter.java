begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * PrettyPrinter.java - Apr 2, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|SimpleAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyleConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyledDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_class
specifier|public
class|class
name|PrettyPrinter
implements|implements
name|ContentHandler
implements|,
name|LexicalHandler
block|{
specifier|private
specifier|final
specifier|static
name|SimpleAttributeSet
name|elementAttrs
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SimpleAttributeSet
name|textAttrs
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SimpleAttributeSet
name|attributeAttrs
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SimpleAttributeSet
name|valueAttrs
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
block|{
name|StyleConstants
operator|.
name|setForeground
parameter_list|(
name|elementAttrs
parameter_list|,
name|Color
operator|.
name|magenta
parameter_list|)
constructor_decl|;
name|StyleConstants
operator|.
name|setForeground
parameter_list|(
name|textAttrs
parameter_list|,
name|Color
operator|.
name|black
parameter_list|)
constructor_decl|;
name|StyleConstants
operator|.
name|setForeground
parameter_list|(
name|attributeAttrs
parameter_list|,
name|Color
operator|.
name|green
parameter_list|)
constructor_decl|;
name|StyleConstants
operator|.
name|setForeground
parameter_list|(
name|valueAttrs
parameter_list|,
name|Color
operator|.
name|pink
parameter_list|)
constructor_decl|;
block|}
specifier|private
name|StyledDocument
name|doc
decl_stmt|;
specifier|private
name|int
name|indentAmount
init|=
literal|4
decl_stmt|;
specifier|private
name|int
name|indent
init|=
literal|0
decl_stmt|;
specifier|private
name|Stack
name|elementStates
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|public
name|PrettyPrinter
parameter_list|(
name|StyledDocument
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator) 	 */
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#startDocument() 	 */
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endDocument() 	 */
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String) 	 */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) 	 */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|pos
init|=
name|doc
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|ElementState
name|state
init|=
name|elementStates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ElementState
operator|)
name|elementStates
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|isOpen
condition|)
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|">\n"
argument_list|,
name|elementAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|2
expr_stmt|;
name|indent
operator|+=
name|indentAmount
expr_stmt|;
name|state
operator|.
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|'<'
operator|+
name|qName
argument_list|,
name|elementAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|qName
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|' '
operator|+
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributeAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|doc
operator|.
name|insertString
argument_list|(
name|pos
operator|++
argument_list|,
literal|"="
argument_list|,
name|textAttrs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|'"'
operator|+
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|+
literal|'"'
argument_list|,
name|valueAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|2
expr_stmt|;
block|}
name|state
operator|=
operator|new
name|ElementState
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
name|elementStates
operator|.
name|push
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|pos
init|=
name|doc
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|ElementState
name|state
init|=
name|elementStates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ElementState
operator|)
name|elementStates
operator|.
name|pop
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|isOpen
condition|)
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|"/>\n"
argument_list|,
name|elementAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
literal|"</"
operator|+
name|qName
operator|+
literal|">\n"
argument_list|,
name|elementAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|qName
operator|.
name|length
argument_list|()
operator|+
literal|4
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#characters(char[], int, int) 	 */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|pos
init|=
name|doc
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|ElementState
name|state
init|=
name|elementStates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ElementState
operator|)
name|elementStates
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|.
name|isOpen
condition|)
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|pos
operator|++
argument_list|,
literal|">"
argument_list|,
name|elementAttrs
argument_list|)
expr_stmt|;
name|state
operator|.
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|doc
operator|.
name|insertString
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|textAttrs
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int) 	 */
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String) 	 */
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startDTD(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endDTD() 	 */
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startEntity(java.lang.String) 	 */
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endEntity(java.lang.String) 	 */
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startCDATA() 	 */
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endCDATA() 	 */
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int) 	 */
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|private
specifier|final
specifier|static
class|class
name|ElementState
block|{
name|String
name|localName
decl_stmt|;
name|String
name|qName
decl_stmt|;
name|String
name|namespaceURI
decl_stmt|;
name|boolean
name|isOpen
init|=
literal|true
decl_stmt|;
specifier|public
name|ElementState
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
name|this
operator|.
name|namespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|qName
operator|=
name|qName
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

