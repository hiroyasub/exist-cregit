begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-03 Wolfgang M.  * Meier meier@ifs.tu-darmstadt.de http://exist.sourceforge.net  *  * This program is free software; you can redistribute it and/or modify it  * under the terms of the GNU Lesser General Public License as published by the  * Free Software Foundation; either version 2 of the License, or (at your  * option) any later version.  *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation,  * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StreamTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLArgsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|DOMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|CollectionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DirectoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ProgressBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ProgressIndicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|service
operator|.
name|ValidationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|CollectionManagementServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XPathQueryServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gnu
operator|.
name|readline
operator|.
name|Readline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gnu
operator|.
name|readline
operator|.
name|ReadlineCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gnu
operator|.
name|readline
operator|.
name|ReadlineLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_comment
comment|/**  * Command-line client based on the XML:DB API.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|InteractiveClient
block|{
comment|// ANSI colors for ls display
comment|// private final static String ANSI_BLUE = "\033[0;34m";
specifier|private
specifier|final
specifier|static
name|String
name|ANSI_CYAN
init|=
literal|"\033[0;36m"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ANSI_WHITE
init|=
literal|"\033[0;37m"
decl_stmt|;
comment|// properties
specifier|protected
specifier|static
name|String
name|EDIT_CMD
init|=
literal|"xemacs $file"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ENCODING
init|=
literal|"ISO-8859-1"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|PASS
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist://localhost:8080/exist/xmlrpc"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|USER
init|=
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
operator|.
name|DBA_USER
decl_stmt|;
specifier|protected
specifier|static
name|int
name|PARALLEL_THREADS
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|static
name|Properties
name|defaultProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
block|{
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"driver"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"uri"
argument_list|,
name|URI
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"editor"
argument_list|,
name|EDIT_CMD
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"permissions"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
literal|"expand-xincludes"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|int
name|colSizes
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|1
block|}
decl_stmt|;
specifier|protected
specifier|static
name|String
name|driver
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|configuration
init|=
literal|null
decl_stmt|;
specifier|protected
name|TreeSet
name|completitions
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|protected
name|LinkedList
name|queryHistory
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|queryHistoryFile
decl_stmt|;
specifier|protected
name|File
name|historyFile
decl_stmt|;
specifier|protected
name|Collection
name|current
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|nextInSet
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|maxResults
init|=
literal|10
decl_stmt|;
specifier|protected
name|String
name|path
init|=
literal|"/db"
decl_stmt|;
specifier|protected
name|Properties
name|properties
decl_stmt|;
specifier|protected
name|String
index|[]
name|resources
init|=
literal|null
decl_stmt|;
specifier|protected
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
specifier|protected
name|HashMap
name|namespaceMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|filesCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|boolean
name|quiet
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|recurseDirs
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|startGUI
init|=
literal|true
decl_stmt|;
specifier|protected
name|Writer
name|traceWriter
init|=
literal|null
decl_stmt|;
specifier|protected
name|ClientFrame
name|frame
decl_stmt|;
specifier|public
name|InteractiveClient
parameter_list|()
block|{
block|}
comment|/** Display help on commands */
specifier|protected
name|void
name|displayHelp
parameter_list|()
block|{
name|messageln
argument_list|(
literal|"--- general commands ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"ls                   list collection contents"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"cd [collection|..]   change current collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"put [file pattern] upload file or directory"
operator|+
literal|" to the database"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"edit [resource] open the resource for editing"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"mkcol collection     create new sub-collection in "
operator|+
literal|"current collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"rm document          remove document from current "
operator|+
literal|"collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"rmcol collection     remove collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"set [key=value]      set property. Calling set without "
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     argument shows current settings."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"\n--- search commands ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"find xpath-expr      execute the given XPath expression."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"show [position]      display query result value at position."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"\n--- user management (may require dba rights) ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"users                list existing users."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"adduser username     create a new user."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"passwd username      change password for user. "
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"chown user group [resource]"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     change resource ownership. chown without"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     resource changes ownership of the current"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     collection."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"chmod [resource] permissions"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     change resource permissions. Format:"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     [user|group|other]=[+|-][read|write|update]."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     chmod without resource changes permissions for"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     the current collection."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"lock resource        put a write lock on the specified resource."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"unlock resource      remove a write lock from the specified resource."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"quit                 quit the program"
argument_list|)
expr_stmt|;
block|}
comment|/**      * The main program for the InteractiveClient class.      *      * @param args      *                   The command line arguments      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|InteractiveClient
name|client
init|=
operator|new
name|InteractiveClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Register XML:DB driver and retrieve root collection.      *      * @exception Exception   Description of the Exception      */
specifier|protected
name|void
name|connect
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setStatus
argument_list|(
literal|"connecting to "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
argument_list|)
expr_stmt|;
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"driver"
argument_list|)
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"configuration"
argument_list|)
condition|)
name|database
operator|.
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"configuration"
argument_list|)
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setStatus
argument_list|(
literal|"connected to "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
literal|" as user "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the current collection.      *      * @return the current collection      */
specifier|protected
name|Collection
name|getCollection
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|protected
name|void
name|reloadCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setProperties
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|properties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|key
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|current
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get list of resources contained in collection.      *      * @exception XMLDBException      *                         Description of the Exception      */
specifier|protected
name|void
name|getResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
return|return;
name|setProperties
argument_list|()
expr_stmt|;
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|childCollections
index|[]
init|=
name|current
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
name|String
name|childResources
index|[]
init|=
name|current
operator|.
name|listResources
argument_list|()
decl_stmt|;
name|resources
operator|=
operator|new
name|String
index|[
name|childCollections
operator|.
name|length
operator|+
name|childResources
operator|.
name|length
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Collection
name|child
decl_stmt|;
name|Permission
name|perm
decl_stmt|;
name|List
name|tableData
init|=
operator|new
name|ArrayList
argument_list|(
name|resources
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// A list of ResourceDescriptor for the GUI
name|String
name|cols
index|[]
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|childCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|current
operator|.
name|getChildCollection
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|perm
operator|=
name|mgtService
operator|.
name|getPermissions
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"permissions"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|cols
index|[
literal|0
index|]
operator|=
name|perm
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cols
index|[
literal|1
index|]
operator|=
name|perm
operator|.
name|getOwner
argument_list|()
expr_stmt|;
name|cols
index|[
literal|2
index|]
operator|=
name|perm
operator|.
name|getOwnerGroup
argument_list|()
expr_stmt|;
name|cols
index|[
literal|3
index|]
operator|=
name|childCollections
index|[
name|i
index|]
expr_stmt|;
name|resources
index|[
name|i
index|]
operator|=
literal|'d'
operator|+
name|formatString
argument_list|(
name|cols
argument_list|,
name|colSizes
argument_list|)
expr_stmt|;
block|}
else|else
name|resources
index|[
name|i
index|]
operator|=
name|childCollections
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|startGUI
condition|)
block|{
name|tableData
operator|.
name|add
argument_list|(
operator|new
name|ResourceDescriptor
operator|.
name|Collection
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|,
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
comment|/*lastModificationTime*/
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|completitions
operator|.
name|add
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Resource
name|res
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|childResources
operator|.
name|length
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|res
operator|=
name|current
operator|.
name|getResource
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|perm
operator|=
name|mgtService
operator|.
name|getPermissions
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|==
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"permissions"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|resources
index|[
name|i
index|]
operator|=
literal|'-'
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|'\t'
operator|+
name|perm
operator|.
name|getOwner
argument_list|()
operator|+
literal|'\t'
operator|+
name|perm
operator|.
name|getOwnerGroup
argument_list|()
operator|+
literal|'\t'
operator|+
name|childResources
index|[
name|j
index|]
expr_stmt|;
block|}
else|else
name|resources
index|[
name|i
index|]
operator|=
name|childResources
index|[
name|j
index|]
expr_stmt|;
name|Date
name|lastModificationTime
init|=
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|getLastModificationTime
argument_list|()
decl_stmt|;
name|resources
index|[
name|i
index|]
operator|+=
literal|"\t"
operator|+
name|lastModificationTime
expr_stmt|;
if|if
condition|(
name|startGUI
condition|)
block|{
name|tableData
operator|.
name|add
argument_list|(
operator|new
name|ResourceDescriptor
operator|.
name|Document
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|,
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|,
name|lastModificationTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|completitions
operator|.
name|add
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startGUI
condition|)
name|frame
operator|.
name|setResources
argument_list|(
name|tableData
argument_list|)
expr_stmt|;
block|}
comment|/**      * Display document on screen, by 24 lines.      *      * @param str string containing the document.      */
specifier|protected
name|void
name|more
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
comment|// int count = 0;
name|int
name|ch
decl_stmt|;
try|try
block|{
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|%
literal|24
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"line: "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"; press [return] for more or [q] for quit."
argument_list|)
expr_stmt|;
name|ch
operator|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'q'
operator|||
name|ch
operator|==
literal|'Q'
condition|)
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IOException: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * In interactive mode, process a line entered by the user.      *      * @param line  the line entered      * @return      true if command != quit      */
specifier|protected
name|boolean
name|process
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|startGUI
condition|)
name|frame
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|args
index|[]
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"find"
argument_list|)
condition|)
block|{
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"find"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StreamTokenizer
name|tok
init|=
operator|new
name|StreamTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|line
argument_list|)
argument_list|)
decl_stmt|;
name|tok
operator|.
name|resetSyntax
argument_list|()
expr_stmt|;
name|tok
operator|.
name|wordChars
argument_list|(
literal|0x21
argument_list|,
literal|0x7FFF
argument_list|)
expr_stmt|;
name|tok
operator|.
name|quoteChar
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|tok
operator|.
name|whitespaceChars
argument_list|(
literal|0x20
argument_list|,
literal|0x20
argument_list|)
expr_stmt|;
name|List
name|argList
init|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// int i = 0;
name|int
name|token
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|StreamTokenizer
operator|.
name|TT_EOF
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|StreamTokenizer
operator|.
name|TT_WORD
operator|||
name|token
operator|==
literal|'"'
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|tok
operator|.
name|sval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not parse command line."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|args
operator|=
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|argList
operator|.
name|toArray
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
name|String
name|newPath
init|=
name|path
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ls"
argument_list|)
condition|)
block|{
comment|// list collection contents
name|getResources
argument_list|()
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"permissions"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|messageln
argument_list|(
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|buf
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
operator|&&
name|j
operator|<
literal|5
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|resources
index|[
name|i
index|]
operator|+
literal|'\t'
argument_list|)
expr_stmt|;
name|k
operator|=
name|j
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|==
literal|4
operator|&&
name|i
operator|<
name|resources
operator|.
name|length
condition|)
name|i
operator|--
expr_stmt|;
name|messageln
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cd"
argument_list|)
condition|)
block|{
comment|// change current collection
name|completitions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|tempPath
init|=
name|newPath
decl_stmt|;
name|Collection
name|temp
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
operator|||
name|args
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|tempPath
operator|=
literal|"/db"
expr_stmt|;
name|temp
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
literal|"/db"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|tempPath
operator|=
name|newPath
operator|.
name|equals
argument_list|(
literal|"/db"
argument_list|)
condition|?
literal|"/db"
else|:
name|tempPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|newPath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|tempPath
operator|=
literal|"/db"
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|tempPath
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
else|else
name|tempPath
operator|=
name|tempPath
operator|+
literal|'/'
operator|+
name|args
index|[
literal|1
index|]
expr_stmt|;
name|temp
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|tempPath
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|current
operator|=
name|temp
expr_stmt|;
name|newPath
operator|=
name|tempPath
expr_stmt|;
if|if
condition|(
name|startGUI
condition|)
name|frame
operator|.
name|setPath
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"no such collection."
argument_list|)
expr_stmt|;
block|}
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cp"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|messageln
argument_list|(
literal|"cp requires two arguments."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|copy
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|editResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"Please specify a resource."
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"wrong number of arguments."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Resource
name|res
init|=
name|retrieve
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// display document
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|String
name|data
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"XMLResource"
argument_list|)
condition|)
name|data
operator|=
operator|(
name|String
operator|)
name|res
operator|.
name|getContent
argument_list|()
expr_stmt|;
else|else
name|data
operator|=
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startGUI
condition|)
block|{
name|frame
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|frame
operator|.
name|display
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|content
init|=
name|data
decl_stmt|;
name|more
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"find"
argument_list|)
condition|)
block|{
comment|// search
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"no query argument found."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|messageln
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|find
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|messageln
argument_list|(
literal|"nothing found"
argument_list|)
expr_stmt|;
else|else
name|messageln
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getSize
argument_list|()
operator|+
literal|" hits in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
name|nextInSet
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"run"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"please specify a query file."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|nextLine
decl_stmt|;
while|while
condition|(
operator|(
name|nextLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|nextLine
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|args
index|[
literal|1
index|]
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|find
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|messageln
argument_list|(
literal|"nothing found"
argument_list|)
expr_stmt|;
else|else
name|messageln
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getSize
argument_list|()
operator|+
literal|" hits in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
name|nextInSet
operator|=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"An error occurred: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"show"
argument_list|)
condition|)
block|{
comment|// show search results
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"no result set."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|int
name|start
init|=
name|nextInSet
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
specifier|final
name|int
name|s
init|=
operator|(
name|int
operator|)
name|result
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|1
operator|||
name|start
operator|>
name|s
condition|)
block|{
name|messageln
argument_list|(
literal|"start offset out of range"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|--
name|start
expr_stmt|;
if|if
condition|(
name|start
operator|+
name|count
operator|>
name|s
condition|)
name|count
operator|=
name|s
operator|-
name|start
expr_stmt|;
name|nextInSet
operator|=
name|start
operator|+
name|count
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|startGUI
condition|)
name|frame
operator|.
name|display
argument_list|(
operator|(
name|String
operator|)
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|more
argument_list|(
operator|(
name|String
operator|)
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|messageln
argument_list|(
literal|"displayed items "
operator|+
operator|(
name|start
operator|+
literal|1
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|start
operator|+
name|count
operator|)
operator|+
literal|" of "
operator|+
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"wrong argument"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mkcol"
argument_list|)
condition|)
block|{
comment|// create collection
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|CollectionManagementService
name|mgtService
init|=
operator|(
name|CollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|newCollection
init|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCollection
operator|==
literal|null
condition|)
name|messageln
argument_list|(
literal|"could not create collection."
argument_list|)
expr_stmt|;
else|else
name|messageln
argument_list|(
literal|"created collection."
argument_list|)
expr_stmt|;
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
comment|// put a document or directory into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|boolean
name|r
init|=
name|parse
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"blob"
argument_list|)
condition|)
block|{
comment|// put a document or directory into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|storeBinary
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"rm"
argument_list|)
condition|)
block|{
comment|// remove document
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|remove
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"rmcol"
argument_list|)
condition|)
block|{
comment|// remove collection
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"wrong argument count."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|rmcol
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"adduser"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: adduser name"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode. Please use the \"Edit users\" menu option."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|p1
decl_stmt|;
name|String
name|p2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|p1
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"password: "
argument_list|)
expr_stmt|;
name|p2
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"re-enter password: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
break|break;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nentered passwords differ. Try again..."
argument_list|)
expr_stmt|;
block|}
name|String
name|home
init|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"home collection [none]: "
argument_list|)
decl_stmt|;
name|User
name|user
init|=
operator|new
name|User
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|p1
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
operator|&&
name|home
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|user
operator|.
name|setHome
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|String
name|groups
init|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"enter groups: "
argument_list|)
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|groups
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|String
name|group
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|group
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|user
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|mgtService
operator|.
name|addUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"user "
operator|+
name|user
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"users"
argument_list|)
condition|)
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|users
index|[]
init|=
name|mgtService
operator|.
name|getUsers
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"User\t\tGroups"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-----------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|users
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"\t\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|users
index|[
name|i
index|]
operator|.
name|getGroups
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"passwd"
argument_list|)
condition|)
block|{
if|if
condition|(
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode. Please use the \"Edit users\" menu option."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: passwd username"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|mgtService
operator|.
name|getUser
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"no such user."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|p1
decl_stmt|;
name|String
name|p2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|p1
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"password: "
argument_list|)
expr_stmt|;
name|p2
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"re-enter password: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
break|break;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nentered passwords differ. Try again..."
argument_list|)
expr_stmt|;
block|}
name|user
operator|.
name|setPassword
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|updateUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"chmod"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: chmod [resource] mode"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Collection
name|temp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"trying collection: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|temp
operator|=
name|current
operator|.
name|getChildCollection
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\ntrying resource: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|r
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|temp
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"chown"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: chown username group [resource]"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Collection
name|temp
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|4
condition|)
name|temp
operator|=
name|current
operator|.
name|getChildCollection
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
else|else
name|temp
operator|=
name|current
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|temp
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
name|mgtService
operator|.
name|getUser
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unknown user"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgtService
operator|.
name|chown
argument_list|(
name|u
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"owner changed."
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
name|mgtService
operator|.
name|getUser
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unknown user"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgtService
operator|.
name|chown
argument_list|(
name|res
argument_list|,
name|u
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource "
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lock"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unlock"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"Usage: lock resource"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|mgtService
operator|.
name|getUser
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|,
literal|"guest"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lock"
argument_list|)
condition|)
name|mgtService
operator|.
name|lockResource
argument_list|(
name|res
argument_list|,
name|user
argument_list|)
expr_stmt|;
else|else
name|mgtService
operator|.
name|unlockResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"elements"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Element occurrences in collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------"
operator|+
literal|"-----------"
argument_list|)
expr_stmt|;
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Occurrences
index|[]
name|elements
init|=
name|service
operator|.
name|getIndexedElements
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatString
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"terms"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: terms [xpath] sequence-start sequence-end"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Occurrences
index|[]
name|terms
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
name|terms
operator|=
name|service
operator|.
name|scanIndexTerms
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|terms
operator|=
name|service
operator|.
name|scanIndexTerms
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Element occurrences in collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------"
operator|+
literal|"-----------"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatString
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"xupdate"
argument_list|)
condition|)
block|{
if|if
condition|(
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|lastLine
decl_stmt|,
name|command
init|=
literal|""
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|lastLine
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastLine
operator|==
literal|null
operator|||
name|lastLine
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
break|break;
name|command
operator|+=
name|lastLine
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
name|String
name|xupdate
init|=
literal|"<xu:modifications version=\"1.0\" "
operator|+
literal|"xmlns:xu=\"http://www.xmldb.org/xupdate\">"
operator|+
name|command
operator|+
literal|"</xu:modifications>"
decl_stmt|;
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
name|service
operator|.
name|update
argument_list|(
name|xupdate
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mods
operator|+
literal|" modifications processed."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"map"
argument_list|)
condition|)
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|"= "
argument_list|)
decl_stmt|;
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
name|prefix
operator|=
literal|""
expr_stmt|;
else|else
block|{
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"please specify a namespace/prefix mapping as: prefix=namespaceURI"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|prefix
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|String
name|uri
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|namespaceMappings
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
name|properties
operator|.
name|list
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
else|else
try|try
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|"= "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"please specify a key=value pair"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|key
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|val
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|current
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shutdown"
argument_list|)
condition|)
block|{
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"Service is not available"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"help"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
condition|)
name|displayHelp
argument_list|()
expr_stmt|;
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"quit"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"validate"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
name|messageln
argument_list|(
literal|"missing document name."
argument_list|)
expr_stmt|;
else|else
block|{
name|ValidationService
name|validationService
init|=
operator|(
name|ValidationService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"ValidationService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|validationService
operator|.
name|validateResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
name|messageln
argument_list|(
literal|"document is valid."
argument_list|)
expr_stmt|;
else|else
name|messageln
argument_list|(
literal|"document is not valid."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"unknown command"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|path
operator|=
name|newPath
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|startGUI
condition|)
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
else|else
block|{
name|messageln
argument_list|(
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**      * @param args      */
specifier|private
name|void
name|editResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Resource
name|res
init|=
name|retrieve
argument_list|(
name|name
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentView
name|view
init|=
operator|new
name|DocumentView
argument_list|(
name|getCollection
argument_list|()
argument_list|,
name|res
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|view
operator|.
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|640
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"XMLResource"
argument_list|)
condition|)
name|view
operator|.
name|setText
argument_list|(
operator|(
name|String
operator|)
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|view
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// lock the resource for editing
name|UserManagementService
name|service
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|service
operator|.
name|getUser
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lockOwner
init|=
name|service
operator|.
name|hasUserLock
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lockOwner
operator|==
literal|null
operator|)
operator|||
operator|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|this
operator|.
name|frame
argument_list|,
literal|"Resource is already locked by user "
operator|+
name|lockOwner
operator|+
literal|". Should I try to relock it?"
argument_list|,
literal|"Resource locked"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
operator|!=
name|JOptionPane
operator|.
name|YES_OPTION
operator|)
condition|)
block|{
try|try
block|{
name|service
operator|.
name|lockResource
argument_list|(
name|res
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|frame
argument_list|,
literal|"Resource cannot be locked. Opening read-only."
argument_list|)
expr_stmt|;
name|view
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
block|}
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|getDefaultCursor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"Illegal argument: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"XMLDB error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|ResourceSet
name|find
parameter_list|(
name|String
name|xpath
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|xpath
operator|.
name|charAt
argument_list|(
name|xpath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
name|xpath
operator|=
name|xpath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|xpath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|traceWriter
operator|!=
literal|null
condition|)
try|try
block|{
name|traceWriter
operator|.
name|write
argument_list|(
literal|"<query>"
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
literal|"</query>\r\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
name|String
name|sortBy
init|=
literal|null
decl_stmt|;
name|int
name|p
init|=
name|xpath
operator|.
name|indexOf
argument_list|(
literal|" sort by "
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|xp
init|=
name|xpath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|sortBy
operator|=
name|xpath
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|" sort by "
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|xpath
operator|=
name|xp
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XPath =   "
operator|+
name|xpath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sort-by = "
operator|+
name|sortBy
argument_list|)
expr_stmt|;
block|}
name|XPathQueryServiceImpl
name|service
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"indent"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
operator|.
name|Entry
name|mapping
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMappings
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|mapping
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
operator|(
name|String
operator|)
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sortBy
operator|==
literal|null
operator|)
condition|?
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|)
else|:
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
comment|/** unused, for testing purposes ?? */
specifier|private
specifier|final
name|void
name|testQuery
parameter_list|(
name|String
name|queryFile
parameter_list|)
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|queryFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"can't read query file: "
operator|+
name|queryFile
argument_list|)
expr_stmt|;
return|return;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|ArrayList
name|queries
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QueryThread
name|thread
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|queries
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PARALLEL_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|thread
operator|=
operator|new
name|QueryThread
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"QueryThread"
operator|+
name|i
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|QueryThread
extends|extends
name|Thread
block|{
name|ArrayList
name|queries
decl_stmt|;
specifier|public
name|QueryThread
parameter_list|(
name|ArrayList
name|queries
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Collection collection =
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|=
operator|(
name|String
operator|)
name|queries
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|queries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" query: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" found: "
operator|+
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|Resource
name|retrieve
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|retrieve
argument_list|(
name|resource
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"indent"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|Resource
name|retrieve
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|indent
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"document not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
return|return
name|res
return|;
block|}
specifier|private
specifier|final
name|void
name|remove
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|collection
init|=
name|current
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"path pattern should be relative to current collection"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Resource
name|resources
index|[]
decl_stmt|;
name|Resource
name|res
init|=
name|collection
operator|.
name|getResource
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
name|resources
operator|=
name|CollectionScanner
operator|.
name|scan
argument_list|(
name|collection
argument_list|,
literal|""
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
else|else
block|{
name|resources
operator|=
operator|new
name|Resource
index|[
literal|1
index|]
expr_stmt|;
name|resources
index|[
literal|0
index|]
operator|=
name|res
expr_stmt|;
block|}
name|Collection
name|parent
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|message
argument_list|(
literal|"removing document "
operator|+
name|resources
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|parent
operator|=
name|resources
index|[
name|i
index|]
operator|.
name|getParentCollection
argument_list|()
expr_stmt|;
name|parent
operator|.
name|removeResource
argument_list|(
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|xupdate
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|canRead
argument_list|()
operator|)
condition|)
block|{
name|messageln
argument_list|(
literal|"cannot read file "
operator|+
name|filename
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|commands
init|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
name|file
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|long
name|modifications
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
name|modifications
operator|=
name|service
operator|.
name|update
argument_list|(
name|commands
argument_list|)
expr_stmt|;
else|else
name|modifications
operator|=
name|service
operator|.
name|updateResource
argument_list|(
name|resource
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
name|modifications
operator|+
literal|" modifications processed "
operator|+
literal|"successfully."
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|rmcol
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|CollectionManagementService
name|mgtService
init|=
operator|(
name|CollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"removing collection "
operator|+
name|collection
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|removeCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|copy
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|destination
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|CollectionManagementServiceImpl
name|mgtService
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
literal|null
decl_stmt|;
name|Collection
name|destCol
init|=
name|resolveCollection
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|destCol
operator|==
literal|null
condition|)
block|{
name|int
name|p
init|=
name|destination
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
name|destName
operator|=
name|destination
expr_stmt|;
name|destination
operator|=
name|current
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destName
operator|=
name|destination
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|destination
operator|=
name|destination
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|Resource
name|srcDoc
init|=
name|resolveResource
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcDoc
operator|!=
literal|null
condition|)
block|{
name|String
name|resourcePath
init|=
name|srcDoc
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'/'
operator|+
name|srcDoc
operator|.
name|getId
argument_list|()
decl_stmt|;
name|messageln
argument_list|(
literal|"Copying resource "
operator|+
name|resourcePath
operator|+
literal|" to "
operator|+
name|destination
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|copyResource
argument_list|(
name|resourcePath
argument_list|,
name|destination
argument_list|,
name|destName
argument_list|)
expr_stmt|;
block|}
else|else
name|messageln
argument_list|(
literal|"Copying collection "
operator|+
name|source
operator|+
literal|" to "
operator|+
name|destination
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|destName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|reindex
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"reindexing collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|storeBinary
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BinaryResource
name|resource
init|=
operator|(
name|BinaryResource
operator|)
name|current
operator|.
name|createResource
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|resource
operator|)
operator|.
name|setMimeType
argument_list|(
name|mime
operator|==
literal|null
condition|?
literal|"application/octet-stream"
else|:
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|boolean
name|findRecursive
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|File
name|temp
index|[]
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|Collection
name|c
decl_stmt|;
name|Resource
name|document
decl_stmt|;
name|CollectionManagementService
name|mgtService
decl_stmt|;
name|String
name|next
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|temp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|base
operator|+
literal|'/'
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|temp
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|messageln
argument_list|(
literal|"entering directory "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|collection
operator|.
name|getChildCollection
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|mgtService
operator|=
operator|(
name|CollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Observable
operator|&&
name|verbose
condition|)
block|{
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|c
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|findRecursive
argument_list|(
name|c
argument_list|,
name|temp
index|[
name|i
index|]
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|start1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
name|messageln
argument_list|(
literal|"File "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" has an unknown "
operator|+
literal|"suffix. Cannot determine file type."
argument_list|)
expr_stmt|;
else|else
block|{
name|message
argument_list|(
literal|"storing document "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|i
operator|+
literal|" of "
operator|+
name|temp
operator|.
name|length
operator|+
literal|") "
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|document
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|temp
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|++
name|filesCount
expr_stmt|;
name|messageln
argument_list|(
literal|" "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start1
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"could not parse file "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** stores given Resource      * @param fileName simple file or directory      * @return      * @throws XMLDBException      */
specifier|protected
specifier|synchronized
name|boolean
name|parse
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|fileName
operator|=
name|fileName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|Resource
name|document
decl_stmt|;
comment|// String xml;
name|File
name|files
index|[]
decl_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|Observable
operator|&&
name|verbose
condition|)
block|{
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|recurseDirs
condition|)
block|{
name|filesCount
operator|=
literal|0
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|findRecursive
argument_list|(
name|current
argument_list|,
name|file
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|messageln
argument_list|(
literal|"storing "
operator|+
name|filesCount
operator|+
literal|" files took "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"sec."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
name|files
operator|=
name|file
operator|.
name|listFiles
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
operator|new
name|File
index|[
literal|1
index|]
expr_stmt|;
name|files
index|[
literal|0
index|]
operator|=
name|file
expr_stmt|;
block|}
block|}
else|else
name|files
operator|=
name|DirectoryScanner
operator|.
name|scanDir
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|start0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytes
init|=
literal|0
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
continue|continue;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
name|document
operator|=
name|current
operator|.
name|createResource
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"storing document "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|files
operator|.
name|length
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"parsing "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|+
literal|" bytes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms.\n"
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|files
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|messageln
argument_list|(
literal|"parsed "
operator|+
name|bytes
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start0
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
specifier|synchronized
name|boolean
name|parse
parameter_list|(
name|File
index|[]
name|files
parameter_list|,
name|UploadDialog
name|upload
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|document
decl_stmt|;
if|if
condition|(
operator|!
name|upload
operator|.
name|isVisible
argument_list|()
condition|)
name|upload
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|Observable
condition|)
block|{
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|addObserver
argument_list|(
name|upload
operator|.
name|getObserver
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|upload
operator|.
name|setTotalSize
argument_list|(
name|calculateFileSizes
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|String
name|resourceType
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|canRead
argument_list|()
condition|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|totalSize
operator|=
name|findRecursive
argument_list|(
name|current
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|path
argument_list|,
name|upload
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setCurrentDir
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|upload
operator|.
name|setCurrent
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|upload
operator|.
name|setCurrentSize
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
name|resourceType
operator|=
name|mimeType
operator|.
name|getType
argument_list|()
operator|==
name|MimeType
operator|.
name|XML
condition|?
literal|"XMLResource"
else|:
literal|"BinaryResource"
expr_stmt|;
name|document
operator|=
name|current
operator|.
name|createResource
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|resourceType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|files
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setStoredSize
argument_list|(
name|totalSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
literal|"could not parse file "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|current
operator|instanceof
name|Observable
condition|)
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|deleteObservers
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|long
name|calculateFileSizes
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|files
index|[
name|i
index|]
operator|.
name|canRead
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
name|size
operator|+=
name|calculateFileSizes
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|listFiles
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|size
operator|+=
name|files
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
specifier|private
name|long
name|findRecursive
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|base
parameter_list|,
name|UploadDialog
name|upload
parameter_list|,
name|long
name|totalSize
parameter_list|)
block|{
name|upload
operator|.
name|setCurrentDir
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|temp
index|[]
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|Collection
name|c
decl_stmt|;
name|Resource
name|document
decl_stmt|;
name|CollectionManagementService
name|mgtService
decl_stmt|;
name|String
name|next
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|temp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|base
operator|+
literal|'/'
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|temp
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|upload
operator|.
name|setCurrentDir
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|collection
operator|.
name|getChildCollection
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|mgtService
operator|=
operator|(
name|CollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Observable
condition|)
block|{
operator|(
operator|(
name|Observable
operator|)
name|c
operator|)
operator|.
name|addObserver
argument_list|(
name|upload
operator|.
name|getObserver
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|totalSize
operator|=
name|findRecursive
argument_list|(
name|c
argument_list|,
name|temp
index|[
name|i
index|]
argument_list|,
name|next
argument_list|,
name|upload
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setCurrent
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|upload
operator|.
name|setCurrentSize
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
name|upload
operator|.
name|showMessage
argument_list|(
literal|"File "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" has an unknown "
operator|+
literal|"suffix. Cannot determine file type."
argument_list|)
expr_stmt|;
else|else
block|{
name|document
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|temp
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|temp
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
operator|++
name|filesCount
expr_stmt|;
name|totalSize
operator|+=
name|temp
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setStoredSize
argument_list|(
name|totalSize
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
literal|"could not parse file "
operator|+
name|temp
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|totalSize
return|;
block|}
specifier|private
name|void
name|mkcol
parameter_list|(
name|String
name|collPath
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"creating "
operator|+
name|collPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|collPath
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|collPath
operator|=
name|collPath
operator|.
name|substring
argument_list|(
literal|"/db"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionManagementService
name|mgtService
decl_stmt|;
name|Collection
name|c
decl_stmt|;
name|String
name|p
init|=
literal|"/db"
decl_stmt|,
name|token
decl_stmt|;
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|collPath
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|p
operator|=
name|p
operator|+
literal|'/'
operator|+
name|token
expr_stmt|;
name|c
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|p
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|mgtService
operator|=
operator|(
name|CollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|current
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
name|current
operator|=
name|c
expr_stmt|;
block|}
name|path
operator|=
name|p
expr_stmt|;
block|}
specifier|protected
name|Collection
name|getCollection
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
return|;
block|}
comment|/** NEVER USED !!! Reads user password from given input stream. */
specifier|private
name|char
index|[]
name|readPassword
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|lineBuffer
decl_stmt|;
name|char
index|[]
name|buf
decl_stmt|;
comment|// int i;
name|buf
operator|=
name|lineBuffer
operator|=
operator|new
name|char
index|[
literal|128
index|]
expr_stmt|;
name|int
name|room
init|=
name|buf
operator|.
name|length
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|;
name|loop
label|:
while|while
condition|(
literal|true
condition|)
switch|switch
condition|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
operator|-
literal|1
case|:
case|case
literal|'\n'
case|:
break|break
name|loop
break|;
case|case
literal|'\r'
case|:
name|int
name|c2
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|c2
operator|!=
literal|'\n'
operator|)
operator|&&
operator|(
name|c2
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|PushbackInputStream
operator|)
condition|)
name|in
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PushbackInputStream
operator|)
name|in
operator|)
operator|.
name|unread
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
else|else
break|break
name|loop
break|;
default|default :
if|if
condition|(
operator|--
name|room
operator|<
literal|0
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
name|offset
operator|+
literal|128
index|]
expr_stmt|;
name|room
operator|=
name|buf
operator|.
name|length
operator|-
name|offset
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lineBuffer
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|lineBuffer
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|lineBuffer
operator|=
name|buf
expr_stmt|;
block|}
name|buf
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|char
index|[]
name|ret
init|=
operator|new
name|char
index|[
name|offset
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Properties
name|loadClientProperties
parameter_list|()
block|{
name|Properties
name|clientProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
name|File
name|propFile
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|propFile
operator|=
operator|new
name|File
argument_list|(
literal|"client.properties"
argument_list|)
expr_stmt|;
else|else
name|propFile
operator|=
operator|new
name|File
argument_list|(
name|home
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"client.properties"
argument_list|)
expr_stmt|;
name|InputStream
name|pin
init|=
literal|null
decl_stmt|;
comment|// Try to load from file
try|try
block|{
name|pin
operator|=
operator|new
name|FileInputStream
argument_list|(
name|propFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// File not found, no exception handling
block|}
if|if
condition|(
name|pin
operator|==
literal|null
condition|)
block|{
comment|// Try to load via classloader
name|pin
operator|=
name|InteractiveClient
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"client.properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pin
operator|!=
literal|null
condition|)
block|{
comment|// Try to load properties from stream
try|try
block|{
name|clientProps
operator|.
name|load
argument_list|(
name|pin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
name|clientProps
return|;
block|}
comment|/**      *  Parse command line options, store into dedicated object      * @param args   Arguments      * @param props  Client configuration      * @return       Object representing commandline parametres.      */
specifier|protected
name|CommandlineOptions
name|getCommandlineOptions
parameter_list|(
name|String
name|args
index|[]
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
comment|// parse command-line options
name|CLArgsParser
name|optParser
init|=
operator|new
name|CLArgsParser
argument_list|(
name|args
argument_list|,
name|CommandlineOptions
operator|.
name|OPTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|optParser
operator|.
name|getErrorString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|optParser
operator|.
name|getErrorString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
name|opt
init|=
name|optParser
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|opt
operator|.
name|size
argument_list|()
decl_stmt|;
name|CLOption
name|option
decl_stmt|;
name|CommandlineOptions
name|cOpt
init|=
operator|new
name|CommandlineOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|option
operator|=
operator|(
name|CLOption
operator|)
name|opt
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|option
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|CommandlineOptions
operator|.
name|HELP_OPT
case|:
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
case|case
name|CommandlineOptions
operator|.
name|NO_GUI_OPT
case|:
name|startGUI
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|QUIET_OPT
case|:
name|quiet
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|VERBOSE_OPT
case|:
name|verbose
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|LOCAL_OPT
case|:
name|props
operator|.
name|setProperty
argument_list|(
literal|"uri"
argument_list|,
literal|"xmldb:exist://"
argument_list|)
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|USER_OPT
case|:
name|props
operator|.
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cOpt
operator|.
name|passwdSpecified
condition|)
name|cOpt
operator|.
name|needPasswd
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|PASS_OPT
case|:
name|props
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
name|cOpt
operator|.
name|needPasswd
operator|=
literal|false
expr_stmt|;
name|cOpt
operator|.
name|passwdSpecified
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|CONFIG_OPT
case|:
name|properties
operator|.
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|COLLECTION_OPT
case|:
name|path
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|foundCollection
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|RESOURCE_OPT
case|:
name|cOpt
operator|.
name|optionResource
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|OUTPUT_FILE_OPT
case|:
name|cOpt
operator|.
name|optionOutputFile
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|PARSE_OPT
case|:
name|cOpt
operator|.
name|doStore
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|getArgumentCount
argument_list|()
operator|==
literal|1
condition|)
name|cOpt
operator|.
name|optionalArgs
operator|.
name|add
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|RECURSE_DIRS_OPT
case|:
name|recurseDirs
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|REMOVE_OPT
case|:
name|cOpt
operator|.
name|optionRemove
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|GET_OPT
case|:
name|cOpt
operator|.
name|optionGet
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|MKCOL_OPT
case|:
name|cOpt
operator|.
name|optionMkcol
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|foundCollection
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|RMCOL_OPT
case|:
name|cOpt
operator|.
name|optionRmcol
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|foundCollection
operator|=
literal|true
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|FIND_OPT
case|:
name|cOpt
operator|.
name|optionXpath
operator|=
operator|(
name|option
operator|.
name|getArgumentCount
argument_list|()
operator|==
literal|1
condition|?
name|option
operator|.
name|getArgument
argument_list|()
else|:
literal|"stdin"
operator|)
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|RESULTS_OPT
case|:
try|try
block|{
name|maxResults
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"parameter -n needs a valid number"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
break|break;
case|case
name|CommandlineOptions
operator|.
name|OPTION_OPT
case|:
name|properties
operator|.
name|setProperty
argument_list|(
name|option
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|,
name|option
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|QUERY_FILE_OPT
case|:
name|cOpt
operator|.
name|optionQueryFile
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|THREADS_OPT
case|:
try|try
block|{
name|PARALLEL_THREADS
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"parameter -t needs a valid number"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CommandlineOptions
operator|.
name|XUPDATE_OPT
case|:
name|cOpt
operator|.
name|optionXUpdate
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|TRACE_QUERIES_OPT
case|:
name|String
name|traceFile
init|=
name|option
operator|.
name|getArgument
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|traceFile
argument_list|)
decl_stmt|;
try|try
block|{
name|traceWriter
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\r\n"
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
literal|"<query-log>\r\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e1
parameter_list|)
block|{
name|messageln
argument_list|(
literal|"Cannot open file "
operator|+
name|traceFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
break|break;
case|case
name|CommandlineOptions
operator|.
name|REINDEX_OPT
case|:
name|cOpt
operator|.
name|doReindex
operator|=
literal|true
expr_stmt|;
name|cOpt
operator|.
name|interactive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|CommandlineOptions
operator|.
name|QUERY_GUI_OPT
case|:
name|cOpt
operator|.
name|openQueryGui
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CLOption
operator|.
name|TEXT_ARGUMENT
case|:
name|cOpt
operator|.
name|optionalArgs
operator|.
name|add
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|cOpt
return|;
block|}
comment|/**      *  Process the command line options      * @param cOpt Object representing commandline options      * @throws java.lang.Exception      * @return TRUE is all successfull, FALSE of not.      */
specifier|private
name|boolean
name|processCommandLineActions
parameter_list|(
name|CommandlineOptions
name|cOpt
parameter_list|)
throws|throws
name|Exception
block|{
comment|// process command-line actions
if|if
condition|(
name|cOpt
operator|.
name|doReindex
condition|)
block|{
if|if
condition|(
operator|!
name|cOpt
operator|.
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|reindex
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while removing collection: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cOpt
operator|.
name|optionRmcol
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cOpt
operator|.
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|rmcol
argument_list|(
name|cOpt
operator|.
name|optionRmcol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while removing collection: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cOpt
operator|.
name|optionMkcol
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mkcol
argument_list|(
name|cOpt
operator|.
name|optionMkcol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during mkcol: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cOpt
operator|.
name|optionGet
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Resource
name|res
init|=
name|retrieve
argument_list|(
name|cOpt
operator|.
name|optionGet
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
comment|// String data;
if|if
condition|(
name|res
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"XMLResource"
argument_list|)
condition|)
block|{
if|if
condition|(
name|cOpt
operator|.
name|optionOutputFile
operator|!=
literal|null
condition|)
name|writeOutputFile
argument_list|(
name|cOpt
operator|.
name|optionOutputFile
argument_list|,
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|res
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cOpt
operator|.
name|optionOutputFile
operator|!=
literal|null
condition|)
name|writeOutputFile
argument_list|(
name|cOpt
operator|.
name|optionOutputFile
argument_list|,
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while trying to retrieve document: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cOpt
operator|.
name|optionRemove
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cOpt
operator|.
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|remove
argument_list|(
name|cOpt
operator|.
name|optionRemove
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XMLDBException during parse: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|cOpt
operator|.
name|doStore
condition|)
block|{
if|if
condition|(
operator|!
name|cOpt
operator|.
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|cOpt
operator|.
name|optionalArgs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
try|try
block|{
name|parse
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XMLDBException during parse: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|cOpt
operator|.
name|optionXpath
operator|!=
literal|null
operator|||
name|cOpt
operator|.
name|optionQueryFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cOpt
operator|.
name|optionQueryFile
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|cOpt
operator|.
name|optionQueryFile
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|cOpt
operator|.
name|optionXpath
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// if no argument has been found, read query from stdin
if|if
condition|(
name|cOpt
operator|.
name|optionXpath
operator|.
name|equals
argument_list|(
literal|"stdin"
argument_list|)
condition|)
block|{
try|try
block|{
name|BufferedReader
name|stdin
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|stdin
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|line
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|cOpt
operator|.
name|optionXpath
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"failed to read query from stdin"
argument_list|)
expr_stmt|;
name|cOpt
operator|.
name|optionXpath
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cOpt
operator|.
name|optionXpath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ResourceSet
name|result
init|=
name|find
argument_list|(
name|cOpt
operator|.
name|optionXpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxResults
operator|<=
literal|0
condition|)
name|maxResults
operator|=
operator|(
name|int
operator|)
name|result
operator|.
name|getSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|cOpt
operator|.
name|optionOutputFile
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxResults
operator|&&
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
operator|(
name|Resource
operator|)
name|result
operator|.
name|getResource
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|cOpt
operator|.
name|optionOutputFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxResults
operator|&&
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|write
argument_list|(
operator|(
operator|(
name|Resource
operator|)
name|result
operator|.
name|getResource
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during query: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|//		} else if (optionQueryFile != null) {
comment|//			testQuery(optionQueryFile);
block|}
if|else if
condition|(
name|cOpt
operator|.
name|optionXUpdate
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xupdate
argument_list|(
name|cOpt
operator|.
name|optionResource
argument_list|,
name|cOpt
operator|.
name|optionXUpdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during xupdate: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IOException during xupdate: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      *  Ask user for login data using gui.      * @param props     Client properties      * @return          FALSE when pressed cancel, TRUE is sucessfull.      */
specifier|private
name|boolean
name|getGuiLoginData
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|String
index|[]
name|loginData
init|=
name|ClientFrame
operator|.
name|getLoginData
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|loginData
operator|==
literal|null
condition|)
block|{
comment|// User pressed<cancel>
return|return
literal|false
return|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|loginData
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|loginData
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"uri"
argument_list|,
name|loginData
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      *  Reusable method for connecting to database.      * @return TRUE if successfull,      */
specifier|private
name|boolean
name|connectToDatabase
parameter_list|()
block|{
try|try
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cnf
parameter_list|)
block|{
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setStatus
argument_list|(
literal|"Connection to database failed; message: "
operator|+
name|cnf
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Connection to database failed; message: "
operator|+
name|cnf
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|cnf
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Main processing method for the InteractiveClient object      *      * @param args arguments from main()      */
specifier|public
name|void
name|run
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// initialize with default properties, add client properties
name|properties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultProps
argument_list|)
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|loadClientProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// parse command-line options
name|CommandlineOptions
name|cOpt
init|=
name|getCommandlineOptions
argument_list|(
name|args
argument_list|,
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|cOpt
operator|==
literal|null
condition|)
block|{
comment|// An error occured during parsing. exit program.
return|return;
block|}
comment|// Fix "uri" property: Excalibur CLI can't parse dashes, so we need to URL encode them:
name|properties
operator|.
name|setProperty
argument_list|(
literal|"uri"
argument_list|,
name|java
operator|.
name|net
operator|.
name|URLDecoder
operator|.
name|decode
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
condition|)
name|printNotice
argument_list|()
expr_stmt|;
comment|// prompt for password if needed
if|if
condition|(
name|cOpt
operator|.
name|interactive
operator|&&
name|startGUI
condition|)
block|{
name|boolean
name|haveLoginData
init|=
name|getGuiLoginData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|haveLoginData
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cOpt
operator|.
name|needPasswd
condition|)
block|{
try|try
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|Readline
operator|.
name|readline
argument_list|(
literal|"password: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|historyFile
operator|=
operator|new
name|File
argument_list|(
name|home
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|".exist_history"
argument_list|)
expr_stmt|;
name|queryHistoryFile
operator|=
operator|new
name|File
argument_list|(
name|home
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|".exist_query_history"
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryHistoryFile
operator|.
name|canRead
argument_list|()
condition|)
name|readQueryHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|cOpt
operator|.
name|interactive
condition|)
block|{
comment|// in gui mode we use Readline for history management
comment|// initialize Readline library
try|try
block|{
name|Readline
operator|.
name|load
argument_list|(
name|ReadlineLibrary
operator|.
name|GnuReadline
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GNU Readline found. IMPORTANT: Don't use GNU Readline"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"to work with other character encodings than ISO-8859-1."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ule
parameter_list|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GNU Readline not found. Using System.in."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"If GNU Readline is available on your system,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"add directory ./lib to your LD_LIBRARY_PATH"
argument_list|)
expr_stmt|;
block|}
block|}
name|Readline
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Readline
operator|.
name|initReadline
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|Readline
operator|.
name|setCompleter
argument_list|(
operator|new
name|CollectionCompleter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|historyFile
operator|.
name|canRead
argument_list|()
condition|)
try|try
block|{
name|Readline
operator|.
name|readHistoryFile
argument_list|(
name|historyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No error handling
block|}
block|}
comment|// connect to the db
name|connectToDatabase
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|setStatus
argument_list|(
literal|"Could not retrieve collection "
operator|+
name|path
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not retrieve collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|processingOK
init|=
name|processCommandLineActions
argument_list|(
name|cOpt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processingOK
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cOpt
operator|.
name|interactive
condition|)
block|{
if|if
condition|(
name|startGUI
condition|)
block|{
name|frame
operator|=
operator|new
name|ClientFrame
argument_list|(
name|this
argument_list|,
name|path
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setLocation
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setSize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// enter interactive mode
if|if
condition|(
operator|(
operator|!
name|startGUI
operator|)
operator|||
operator|(
name|frame
operator|==
literal|null
operator|)
condition|)
block|{
comment|// No gui
try|try
block|{
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XMLDBException while "
operator|+
literal|"retrieving collection contents: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// with gui ; re-login posibility
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|retry
condition|)
block|{
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
literal|"XMLDBException occurred while retrieving collection: "
operator|+
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Determine error text. For special reasons we can retry
comment|// to connect.
if|if
condition|(
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*Invalid password for user.*$"
argument_list|)
operator|||
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*User .* unknown.*"
argument_list|)
operator|||
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*Connection refused: connect.*"
argument_list|)
condition|)
block|{
name|boolean
name|haveLoginData
init|=
name|getGuiLoginData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|haveLoginData
condition|)
block|{
comment|// pressed cancel
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Need to shutdown ?? ask wolfgang
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// connect to the db
name|connectToDatabase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|errorMessage
operator|!=
literal|""
condition|)
block|{
comment|// No pattern match, but we have an error. stop here
name|frame
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No error message, continue startup.
name|retry
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
name|messageln
argument_list|(
literal|"\ntype help or ? for help."
argument_list|)
expr_stmt|;
if|if
condition|(
name|cOpt
operator|.
name|openQueryGui
condition|)
block|{
name|QueryDialog
name|qd
init|=
operator|new
name|QueryDialog
argument_list|(
name|this
argument_list|,
name|current
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|qd
operator|.
name|setLocation
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|qd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|startGUI
condition|)
name|readlineInputLoop
argument_list|(
name|home
argument_list|)
expr_stmt|;
else|else
name|frame
operator|.
name|displayPrompt
argument_list|()
expr_stmt|;
block|}
else|else
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|getExceptionMessage
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
decl_stmt|;
while|while
condition|(
operator|(
name|cause
operator|=
name|e
operator|.
name|getCause
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|e
operator|=
name|cause
expr_stmt|;
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
comment|/**      * @param queryHistoryFile      */
specifier|protected
name|void
name|readQueryHistory
parameter_list|()
block|{
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|queryHistoryFile
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|query
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StringBuffer
name|value
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Node
name|next
init|=
name|query
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|next
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|queryHistory
operator|.
name|addLast
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|startGUI
condition|)
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
literal|"Error while reading query history: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
else|else
name|messageln
argument_list|(
literal|"Error while reading query history: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addToHistory
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|queryHistory
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeQueryHistory
parameter_list|()
block|{
try|try
block|{
name|Readline
operator|.
name|writeHistoryFile
argument_list|(
name|historyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|Readline
operator|.
name|cleanup
argument_list|()
expr_stmt|;
try|try
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|queryHistoryFile
argument_list|)
argument_list|)
decl_stmt|;
name|SAXSerializer
name|serializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|queryHistory
operator|.
name|size
argument_list|()
operator|>
literal|20
condition|)
name|p
operator|=
name|queryHistory
operator|.
name|size
argument_list|()
operator|-
literal|20
expr_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"history"
argument_list|,
literal|"history"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
name|ListIterator
name|i
init|=
name|queryHistory
operator|.
name|listIterator
argument_list|(
name|p
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|serializer
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"query"
argument_list|,
literal|"query"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|String
name|next
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|next
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|next
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"query"
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"history"
argument_list|,
literal|"history"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IO error while writing query history."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SAX exception while writing query history."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readlineInputLoop
parameter_list|(
name|String
name|home
parameter_list|)
block|{
name|String
name|line
decl_stmt|;
name|boolean
name|cont
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|cont
condition|)
try|try
block|{
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"colors"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
name|line
operator|=
name|Readline
operator|.
name|readline
argument_list|(
name|ANSI_CYAN
operator|+
literal|"exist:"
operator|+
name|path
operator|+
literal|">"
operator|+
name|ANSI_WHITE
argument_list|)
expr_stmt|;
else|else
name|line
operator|=
name|Readline
operator|.
name|readline
argument_list|(
literal|"exist:"
operator|+
name|path
operator|+
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
name|cont
operator|=
name|process
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Readline
operator|.
name|writeHistoryFile
argument_list|(
name|historyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not write history File to "
operator|+
name|historyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Readline
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"quit."
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|shutdown
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|traceWriter
operator|!=
literal|null
condition|)
try|try
block|{
name|traceWriter
operator|.
name|write
argument_list|(
literal|"</query-log>"
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
block|}
try|try
block|{
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"service is not available"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mgr
operator|.
name|isLocalInstance
argument_list|()
operator|||
name|force
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"shutting down database..."
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"database shutdown failed: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|InteractiveClient
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLUtil
operator|.
name|describeOptions
argument_list|(
name|CommandlineOptions
operator|.
name|OPTIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printNotice
parameter_list|()
block|{
name|messageln
argument_list|(
literal|"eXist version 1.0, Copyright (C) 2004 Wolfgang Meier"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"eXist comes with ABSOLUTELY NO WARRANTY."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"This is free software, and you are welcome to "
operator|+
literal|"redistribute it\nunder certain conditions; "
operator|+
literal|"for details read the license file.\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|message
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|display
argument_list|(
name|msg
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|messageln
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
if|if
condition|(
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
name|frame
operator|.
name|display
argument_list|(
name|msg
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
name|resolveCollection
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Resource
name|resolveResource
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|collectionPath
decl_stmt|;
name|String
name|resourceName
init|=
name|path
decl_stmt|;
name|int
name|p
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
name|collectionPath
operator|=
name|current
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|collectionPath
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|resourceName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Collection
name|collection
init|=
name|resolveCollection
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"Collection "
operator|+
name|collectionPath
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|messageln
argument_list|(
literal|"Locating resource "
operator|+
name|resourceName
operator|+
literal|" in collection "
operator|+
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getResource
argument_list|(
name|resourceName
argument_list|)
return|;
block|}
specifier|private
class|class
name|CollectionCompleter
implements|implements
name|ReadlineCompleter
block|{
name|Iterator
name|possibleValues
decl_stmt|;
specifier|public
name|String
name|completer
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
literal|0
condition|)
name|possibleValues
operator|=
name|completitions
operator|.
name|tailSet
argument_list|(
name|text
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|possibleValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nextKey
init|=
operator|(
name|String
operator|)
name|possibleValues
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextKey
operator|.
name|startsWith
argument_list|(
name|text
argument_list|)
condition|)
return|return
name|nextKey
return|;
block|}
return|return
literal|null
return|;
comment|// we reached the last choice.
block|}
block|}
specifier|public
specifier|static
class|class
name|ProgressObserver
implements|implements
name|Observer
block|{
name|ProgressBar
name|elementsProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing elements"
argument_list|)
decl_stmt|;
name|Observable
name|lastObservable
init|=
literal|null
decl_stmt|;
name|ProgressBar
name|parseProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing nodes   "
argument_list|)
decl_stmt|;
name|ProgressBar
name|wordsProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing words   "
argument_list|)
decl_stmt|;
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|ProgressIndicator
name|ind
init|=
operator|(
name|ProgressIndicator
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|lastObservable
operator|==
literal|null
operator|||
name|o
operator|!=
name|lastObservable
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementIndex
condition|)
name|elementsProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|o
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|TextSearchEngine
condition|)
name|wordsProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|parseProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|lastObservable
operator|=
name|o
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeOutputFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|data
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"encoding"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|formatString
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|width
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|length
argument_list|()
operator|>
name|width
condition|)
name|s1
operator|=
name|s1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|width
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|int
name|fill
init|=
name|width
operator|-
operator|(
name|s1
operator|.
name|length
argument_list|()
operator|+
name|s2
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fill
condition|;
name|i
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|s2
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|formatString
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
index|[]
name|sizes
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sizes
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sizes
index|[
name|i
index|]
operator|&&
name|j
operator|<
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sizes
index|[
name|i
index|]
operator|-
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

