begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|EXistSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|EditGroupDialog
extends|extends
name|GroupDialog
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|9092253443709031810L
decl_stmt|;
specifier|private
specifier|final
name|Group
name|group
decl_stmt|;
specifier|private
specifier|final
name|String
name|currentUser
decl_stmt|;
specifier|public
name|EditGroupDialog
parameter_list|(
specifier|final
name|UserManagementService
name|userManagementService
parameter_list|,
specifier|final
name|String
name|currentUser
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|userManagementService
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|setFormPropertiesFromGroup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setFormPropertiesFromGroup
parameter_list|()
block|{
name|setTitle
argument_list|(
literal|"Edit Group: "
operator|+
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|btnCreate
operator|.
name|setText
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
name|txtGroupName
operator|.
name|setText
argument_list|(
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|txtGroupName
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|txtDescription
operator|.
name|setText
argument_list|(
name|getGroup
argument_list|()
operator|.
name|getMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
comment|//display existing group members and managers
try|try
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|groupManagers
init|=
name|group
operator|.
name|getManagers
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|groupMembers
init|=
name|getUserManagementService
argument_list|()
operator|.
name|getGroupMembers
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|groupMembers
argument_list|)
expr_stmt|;
comment|//order the members a-z
for|for
control|(
specifier|final
name|String
name|groupMember
range|:
name|groupMembers
control|)
block|{
name|getGroupMembersTableModel
argument_list|()
operator|.
name|addRow
argument_list|(
operator|new
name|Object
index|[]
block|{
name|groupMember
block|,
name|isGroupManager
argument_list|(
name|groupManagers
argument_list|,
name|groupMember
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|xmldbe
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
literal|"Could not get group members: "
operator|+
name|xmldbe
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Edit Group Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
literal|"Could not get group members: "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Edit Group Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createGroup
parameter_list|()
block|{
comment|//dont create a group update instead!
name|updateGroup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateGroup
parameter_list|()
block|{
comment|/*try {             setAccountFromFormProperties();             getUserManagementService().updateAccount(getAccount());         } catch(PermissionDeniedException pde) {             JOptionPane.showMessageDialog(this, "Could not update user '" + txtUsername.getText() + "': " + pde.getMessage(), "Edit User Error", JOptionPane.ERROR_MESSAGE);         } catch(final XMLDBException xmldbe) {             JOptionPane.showMessageDialog(this, "Could not update user '" + txtUsername.getText() + "': " + xmldbe.getMessage(), "Edit User Error", JOptionPane.ERROR_MESSAGE);         }*/
block|}
specifier|protected
name|Group
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|canModifyGroupMembers
parameter_list|()
block|{
try|try
block|{
return|return
name|getUserManagementService
argument_list|()
operator|.
name|getAccount
argument_list|(
name|currentUser
argument_list|)
operator|.
name|hasDbaRole
argument_list|()
operator|||
name|isGroupManager
argument_list|(
name|group
operator|.
name|getManagers
argument_list|()
argument_list|,
name|currentUser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|xmldbe
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
literal|"Could not establish user "
operator|+
name|currentUser
operator|+
literal|"'s group permissions: "
operator|+
name|xmldbe
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Edit Group Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
argument_list|,
literal|"Could not establish user "
operator|+
name|currentUser
operator|+
literal|"'s group permissions: "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Edit Group Error"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|isGroupManager
parameter_list|(
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|groupManagers
parameter_list|,
specifier|final
name|String
name|groupMember
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Account
name|groupManager
range|:
name|groupManagers
control|)
block|{
if|if
condition|(
name|groupManager
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupMember
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

