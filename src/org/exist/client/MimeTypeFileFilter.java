begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_comment
comment|/**  * A FileFilter that filters for files based on their extension  * Uses the filename extensions defined in mime-types.xml  *   *  Java 6 API has a similar FileNameExtensionFilter  */
end_comment

begin_class
specifier|public
class|class
name|MimeTypeFileFilter
extends|extends
name|FileFilter
block|{
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
literal|null
decl_stmt|;
specifier|public
name|MimeTypeFileFilter
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|description
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|mimeType
argument_list|)
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|extensions
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getAllExtensions
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|//permit directories to be viewed
return|return
literal|true
return|;
block|}
name|int
name|extensionOffset
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|//do-not allow files without an extension
if|if
condition|(
name|extensionOffset
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//check the extension is that of a file as defined in mime-types.xml
name|String
name|fileExtension
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|extensionOffset
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|fileExtension
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|String
name|description
init|=
name|this
operator|.
name|description
operator|+
literal|" ("
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|itExtensions
init|=
name|extensions
operator|.
name|iterator
argument_list|()
init|;
name|itExtensions
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|description
operator|+=
name|itExtensions
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|itExtensions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|description
operator|+=
literal|' '
expr_stmt|;
block|}
block|}
return|return
name|description
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

