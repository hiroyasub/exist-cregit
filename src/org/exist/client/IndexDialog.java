begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UserDialog.java - Jun 16, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Box
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BoxLayout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPasswordField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EtchedBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|TitledBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|//DOM
end_comment

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|FactoryConfigurationError
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  * TODO: could loose the member arrays of RangeIndexTableModel, QNameIndexTableModel, and replace with calls to cx  *   */
end_comment

begin_class
class|class
name|IndexDialog
extends|extends
name|JFrame
block|{
name|CollectionXConf
name|cx
init|=
literal|null
decl_stmt|;
name|JTextField
name|txtXPath
decl_stmt|;
name|JComboBox
name|cmbxsType
decl_stmt|;
name|JTable
name|tblFullTextIndexes
decl_stmt|;
name|FullTextIndexTableModel
name|fulltextIndexModel
decl_stmt|;
name|JTable
name|tblRangeIndexes
decl_stmt|;
name|RangeIndexTableModel
name|rangeIndexModel
decl_stmt|;
name|JTable
name|tblQNameIndexes
decl_stmt|;
name|QNameIndexTableModel
name|qnameIndexModel
decl_stmt|;
name|InteractiveClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FULLTEXT_INDEX_ACTIONS
init|=
block|{
literal|"include"
block|,
literal|"exclude"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INDEX_TYPES
init|=
block|{
literal|"xs:boolean"
block|,
literal|"xs:integer"
block|,
literal|"xs:dateTime"
block|,
literal|"xs:string"
block|}
decl_stmt|;
specifier|public
name|IndexDialog
parameter_list|(
name|String
name|title
parameter_list|,
name|InteractiveClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|setupComponents
argument_list|()
expr_stmt|;
name|actionGetIndexes
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupComponents
parameter_list|()
block|{
comment|//Dialog Content Panel
name|GridBagLayout
name|grid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|grid
argument_list|)
expr_stmt|;
comment|//Constraints for Layout
name|GridBagConstraints
name|c
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|c
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//collection label
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
literal|"Collection"
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|label
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
comment|//get the collections but not system collections
name|Vector
name|ourCollectionsVec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|root
init|=
name|client
operator|.
name|getCollection
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
decl_stmt|;
name|Vector
name|allCollectionsVec
init|=
name|getCollections
argument_list|(
name|root
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allCollectionsVec
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|allCollectionsVec
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|DBBroker
operator|.
name|SYSTEM_COLLECTION
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ourCollectionsVec
operator|.
name|add
argument_list|(
name|allCollectionsVec
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//showErrorMessage(e.getMessage(), e);
return|return;
block|}
comment|//Create a combobox listing the collections
name|JComboBox
name|combo
init|=
operator|new
name|JComboBox
argument_list|(
name|ourCollectionsVec
argument_list|)
decl_stmt|;
name|combo
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JComboBox
name|cb
init|=
operator|(
name|JComboBox
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|actionGetIndexes
argument_list|(
name|cb
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|combo
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|combo
argument_list|)
expr_stmt|;
comment|//Panel to hold controls relating to the FullText Index
name|JPanel
name|panelFullTextIndex
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panelFullTextIndex
operator|.
name|setBorder
argument_list|(
operator|new
name|TitledBorder
argument_list|(
literal|"Full Text Index"
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|panelFullTextIndexGrid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelFullTextIndex
operator|.
name|setLayout
argument_list|(
name|panelFullTextIndexGrid
argument_list|)
expr_stmt|;
comment|//fulltext default label
name|JLabel
name|lblDefault
init|=
operator|new
name|JLabel
argument_list|(
literal|"Default"
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|lblDefault
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|lblDefault
argument_list|)
expr_stmt|;
comment|//fulltext default combobox
name|JComboBox
name|cmbDefault
init|=
operator|new
name|JComboBox
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"all"
block|,
literal|"none"
block|}
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|cmbDefault
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|cmbDefault
argument_list|)
expr_stmt|;
comment|//fulltext alphanumeric checkbox
name|JCheckBox
name|chkAlphanum
init|=
operator|new
name|JCheckBox
argument_list|(
literal|"Alphanumeric"
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|chkAlphanum
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|chkAlphanum
argument_list|)
expr_stmt|;
comment|//fulltext attributes checkbox
name|JCheckBox
name|chkAttributes
init|=
operator|new
name|JCheckBox
argument_list|(
literal|"Attributes"
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|chkAttributes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|chkAttributes
argument_list|)
expr_stmt|;
comment|//Table to hold the FullText Indexes with Sroll bar
comment|/*fulltextIndexModel = new FullTextIndexTableModel();         tblFullTextIndexes = new JTable(fulltextIndexModel);         tblFullTextIndexes.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);         tblFullTextIndexes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);         TableColumn colAction = tblFullTextIndexes.getColumnModel().getColumn(1);         colAction.setCellEditor(new ComboBoxCellEditor(FULLTEXT_INDEX_ACTIONS));         colAction.setCellRenderer(new ComboBoxCellRenderer(FULLTEXT_INDEX_ACTIONS));         JScrollPane scrollFullTextIndexes = new JScrollPane(tblFullTextIndexes); 		scrollFullTextIndexes.setPreferredSize(new Dimension(250, 150)); 		c.gridx = 0; 		c.gridy = 3; 		c.gridwidth = 2; 		c.anchor = GridBagConstraints.WEST; 		c.fill = GridBagConstraints.BOTH; 		panelFullTextIndexGrid.setConstraints(scrollFullTextIndexes, c); 		panelFullTextIndex.add(scrollFullTextIndexes);*/
comment|//add fulltext panel to content frame
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|panelFullTextIndex
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panelFullTextIndex
argument_list|)
expr_stmt|;
comment|//Panel to hold controls relating to the Range Indexes
name|JPanel
name|panelRangeIndexes
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panelRangeIndexes
operator|.
name|setBorder
argument_list|(
operator|new
name|TitledBorder
argument_list|(
literal|"Range Indexes"
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|panelRangeIndexesGrid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelRangeIndexes
operator|.
name|setLayout
argument_list|(
name|panelRangeIndexesGrid
argument_list|)
expr_stmt|;
comment|//Table to hold the Range Indexes with Sroll bar
name|rangeIndexModel
operator|=
operator|new
name|RangeIndexTableModel
argument_list|()
expr_stmt|;
name|tblRangeIndexes
operator|=
operator|new
name|JTable
argument_list|(
name|rangeIndexModel
argument_list|)
expr_stmt|;
name|tblRangeIndexes
operator|.
name|setAutoResizeMode
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_NEXT_COLUMN
argument_list|)
expr_stmt|;
name|tblRangeIndexes
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|TableColumn
name|colxsType
init|=
name|tblRangeIndexes
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|colxsType
operator|.
name|setCellEditor
argument_list|(
operator|new
name|ComboBoxCellEditor
argument_list|(
name|INDEX_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|colxsType
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|ComboBoxCellRenderer
argument_list|(
name|INDEX_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollRangeIndexes
init|=
operator|new
name|JScrollPane
argument_list|(
name|tblRangeIndexes
argument_list|)
decl_stmt|;
name|scrollRangeIndexes
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|panelRangeIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|scrollRangeIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelRangeIndexes
operator|.
name|add
argument_list|(
name|scrollRangeIndexes
argument_list|)
expr_stmt|;
comment|//Toolbar with add/delete buttons for Range Index
name|Box
name|rangeIndexToolbarBox
init|=
name|Box
operator|.
name|createHorizontalBox
argument_list|()
decl_stmt|;
comment|//add button
name|JButton
name|btnAddRangeIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|btnAddRangeIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionAddRangeIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rangeIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnAddRangeIndex
argument_list|)
expr_stmt|;
comment|//delete button
name|JButton
name|btnDeleteRangeIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|btnDeleteRangeIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionDeleteRangeIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rangeIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnDeleteRangeIndex
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|CENTER
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|panelRangeIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|rangeIndexToolbarBox
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelRangeIndexes
operator|.
name|add
argument_list|(
name|rangeIndexToolbarBox
argument_list|)
expr_stmt|;
comment|//add request panel to content frame
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|panelRangeIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panelRangeIndexes
argument_list|)
expr_stmt|;
comment|//Panel to hold controls relating to the QName Indexes
name|JPanel
name|panelQNameIndexes
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panelQNameIndexes
operator|.
name|setBorder
argument_list|(
operator|new
name|TitledBorder
argument_list|(
literal|"QName Indexes"
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|panelQNameIndexesGrid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelQNameIndexes
operator|.
name|setLayout
argument_list|(
name|panelQNameIndexesGrid
argument_list|)
expr_stmt|;
comment|//Table to hold the qname Indexes with Sroll bar
name|qnameIndexModel
operator|=
operator|new
name|QNameIndexTableModel
argument_list|()
expr_stmt|;
name|tblQNameIndexes
operator|=
operator|new
name|JTable
argument_list|(
name|qnameIndexModel
argument_list|)
expr_stmt|;
name|tblQNameIndexes
operator|.
name|setAutoResizeMode
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_NEXT_COLUMN
argument_list|)
expr_stmt|;
name|tblQNameIndexes
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollQNameIndexes
init|=
operator|new
name|JScrollPane
argument_list|(
name|tblQNameIndexes
argument_list|)
decl_stmt|;
name|scrollQNameIndexes
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|panelQNameIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|scrollQNameIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelQNameIndexes
operator|.
name|add
argument_list|(
name|scrollQNameIndexes
argument_list|)
expr_stmt|;
comment|//Toolbar with add/delete buttons for qname Index
name|Box
name|qnameIndexToolbarBox
init|=
name|Box
operator|.
name|createHorizontalBox
argument_list|()
decl_stmt|;
comment|//add button
name|JButton
name|btnAddQNameIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|btnAddQNameIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionAddQNameIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|qnameIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnAddQNameIndex
argument_list|)
expr_stmt|;
comment|//delete button
name|JButton
name|btnDeleteQNameIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|btnDeleteQNameIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionDeleteQNameIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|qnameIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnDeleteQNameIndex
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|CENTER
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|panelQNameIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|qnameIndexToolbarBox
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelQNameIndexes
operator|.
name|add
argument_list|(
name|qnameIndexToolbarBox
argument_list|)
expr_stmt|;
comment|//add qname panel to content frame
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|3
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|panelQNameIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panelQNameIndexes
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
comment|//THIS IS A COPY FROM ClientFrame
comment|//TODO: share this code between the two classes
specifier|private
name|Vector
name|getCollections
parameter_list|(
name|Collection
name|root
parameter_list|,
name|Vector
name|collectionsList
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|collectionsList
operator|.
name|addElement
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|childCollections
init|=
name|root
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
name|Collection
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|getCollections
argument_list|(
name|child
argument_list|,
name|collectionsList
argument_list|)
expr_stmt|;
block|}
return|return
name|collectionsList
return|;
block|}
specifier|private
name|void
name|actionAddRangeIndex
parameter_list|()
block|{
name|rangeIndexModel
operator|.
name|addRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|actionDeleteRangeIndex
parameter_list|()
block|{
name|int
name|iSelectedRow
init|=
name|tblRangeIndexes
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedRow
operator|>
operator|-
literal|1
condition|)
block|{
name|rangeIndexModel
operator|.
name|removeRow
argument_list|(
name|iSelectedRow
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|actionAddQNameIndex
parameter_list|()
block|{
name|qnameIndexModel
operator|.
name|addRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|actionDeleteQNameIndex
parameter_list|()
block|{
name|int
name|iSelectedRow
init|=
name|tblQNameIndexes
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedRow
operator|>
operator|-
literal|1
condition|)
block|{
name|qnameIndexModel
operator|.
name|removeRow
argument_list|(
name|iSelectedRow
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Displays the indexes when a collection is selection
specifier|private
name|void
name|actionGetIndexes
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
try|try
block|{
name|cx
operator|=
operator|new
name|CollectionXConf
argument_list|(
name|collectionName
argument_list|,
name|client
argument_list|)
expr_stmt|;
comment|//fulltextIndexModel.reload();
name|rangeIndexModel
operator|.
name|reload
argument_list|()
expr_stmt|;
name|qnameIndexModel
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
comment|//TODO: CONSIDER whether CollectionXConf Should throw xmldb exception at all?
block|}
block|}
specifier|private
name|void
name|tableSelectAction
parameter_list|(
name|MouseEvent
name|ev
parameter_list|)
block|{
name|int
name|row
init|=
name|tblRangeIndexes
operator|.
name|rowAtPoint
argument_list|(
name|ev
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
name|CollectionXConf
operator|.
name|RangeIndex
name|rangeindex
init|=
name|rangeIndexModel
operator|.
name|rangeIndexes
index|[
name|row
index|]
decl_stmt|;
block|}
specifier|public
class|class
name|ComboBoxCellRenderer
extends|extends
name|JComboBox
implements|implements
name|TableCellRenderer
block|{
specifier|public
name|ComboBoxCellRenderer
parameter_list|(
name|String
index|[]
name|items
parameter_list|)
block|{
name|super
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|isSelected
condition|)
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getSelectionForeground
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setBackground
argument_list|(
name|table
operator|.
name|getSelectionBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
name|setBackground
argument_list|(
name|table
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Select the current value
name|setSelectedItem
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
class|class
name|ComboBoxCellEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|public
name|ComboBoxCellEditor
parameter_list|(
name|String
index|[]
name|items
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|JComboBox
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|FullTextIndexTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"XPath"
block|,
literal|"action"
block|}
decl_stmt|;
specifier|public
name|FullTextIndexTableModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|//reload();
block|}
comment|/*public void reload() 		{ 			fireTableDataChanged(); 		}*/
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* XPath */
comment|//		cx.updateFullNameIndex(rowIndex, aValue.toString(), null);
comment|//					reload();
break|break;
case|case
literal|1
case|:
comment|/* action */
comment|//		cx.updateFullNameIndex(rowIndex, null, aValue.toString());
comment|//				reload();
break|break;
default|default :
break|break;
block|}
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
comment|//cx.deleteFullTextIndex(rowIndex);
comment|//	reload();
block|}
specifier|public
name|void
name|addRow
parameter_list|()
block|{
comment|//cx.addFullTextIndex("", "xs:string");
comment|//	reload();
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#getColumnCount() 		*/
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getColumnName(int) 		 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getRowCount() 		 */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|cx
operator|!=
literal|null
condition|?
name|cx
operator|.
name|getFullTextPathCount
argument_list|()
else|:
literal|0
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getValueAt(int, int) 		 */
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* XPath */
return|return
name|cx
operator|.
name|getFullTextIndexPath
argument_list|(
name|rowIndex
argument_list|)
return|;
case|case
literal|1
case|:
comment|/* action */
return|return
name|cx
operator|.
name|getFullTextIndexPathAction
argument_list|(
name|rowIndex
argument_list|)
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
block|}
class|class
name|RangeIndexTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"XPath"
block|,
literal|"xsType"
block|}
decl_stmt|;
specifier|private
name|CollectionXConf
operator|.
name|RangeIndex
name|rangeIndexes
index|[]
init|=
literal|null
decl_stmt|;
specifier|public
name|RangeIndexTableModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|()
block|{
if|if
condition|(
name|cx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cx
operator|.
name|getRangeIndexes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rangeIndexes
operator|=
name|cx
operator|.
name|getRangeIndexes
argument_list|()
expr_stmt|;
block|}
block|}
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* XPath */
name|cx
operator|.
name|updateRangeIndex
argument_list|(
name|rowIndex
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* xsType */
name|cx
operator|.
name|updateRangeIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|cx
operator|.
name|deleteRangeIndex
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|()
block|{
name|cx
operator|.
name|addRangeIndex
argument_list|(
literal|""
argument_list|,
literal|"xs:string"
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#getColumnCount() 		*/
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getColumnName(int) 		 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getRowCount() 		 */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rangeIndexes
operator|==
literal|null
condition|?
literal|0
else|:
name|rangeIndexes
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getValueAt(int, int) 		 */
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* XPath */
return|return
name|rangeIndexes
index|[
name|rowIndex
index|]
operator|.
name|getXPath
argument_list|()
return|;
case|case
literal|1
case|:
comment|/* xsType */
return|return
name|rangeIndexes
index|[
name|rowIndex
index|]
operator|.
name|getxsType
argument_list|()
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
block|}
class|class
name|QNameIndexTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"QName"
block|,
literal|"xsType"
block|}
decl_stmt|;
specifier|private
name|CollectionXConf
operator|.
name|QNameIndex
name|qnameIndexes
index|[]
init|=
literal|null
decl_stmt|;
specifier|public
name|QNameIndexTableModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|()
block|{
if|if
condition|(
name|cx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cx
operator|.
name|getQNameIndexes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|qnameIndexes
operator|=
name|cx
operator|.
name|getQNameIndexes
argument_list|()
expr_stmt|;
block|}
block|}
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* QName */
name|cx
operator|.
name|updateQNameIndex
argument_list|(
name|rowIndex
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* xsType */
name|cx
operator|.
name|updateQNameIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|cx
operator|.
name|deleteQNameIndex
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|()
block|{
name|cx
operator|.
name|addQNameIndex
argument_list|(
literal|""
argument_list|,
literal|"xs:string"
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#getColumnCount() 		*/
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getColumnName(int) 		 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getRowCount() 		 */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|qnameIndexes
operator|==
literal|null
condition|?
literal|0
else|:
name|qnameIndexes
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getValueAt(int, int) 		 */
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
comment|/* QName */
return|return
name|qnameIndexes
index|[
name|rowIndex
index|]
operator|.
name|getQName
argument_list|()
return|;
case|case
literal|1
case|:
comment|/* xsType */
return|return
name|qnameIndexes
index|[
name|rowIndex
index|]
operator|.
name|getxsType
argument_list|()
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

