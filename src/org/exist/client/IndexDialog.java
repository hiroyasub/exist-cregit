begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|TitledBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Dialog for viewing and editing Indexes in the Admin Client   *   * @author Adam Retter<adam.retter@devon.gov.uk>  * @serial 2006-03-12  * @version 1.0  */
end_comment

begin_class
class|class
name|IndexDialog
extends|extends
name|JFrame
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CONFIG_TYPE
init|=
block|{
literal|"qname"
block|,
literal|"path"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FULLTEXT_INDEX_ACTIONS
init|=
block|{
literal|"include"
block|,
literal|"exclude"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INDEX_TYPES
init|=
block|{
literal|"xs:boolean"
block|,
literal|"xs:integer"
block|,
literal|"xs:dateTime"
block|,
literal|"xs:string"
block|}
decl_stmt|;
specifier|private
name|CollectionXConf
name|cx
init|=
literal|null
decl_stmt|;
specifier|private
name|JComboBox
name|cmbCollections
decl_stmt|;
specifier|private
name|JCheckBox
name|chkDefaultAll
decl_stmt|;
specifier|private
name|JCheckBox
name|chkAlphanum
decl_stmt|;
specifier|private
name|JCheckBox
name|chkAttributes
decl_stmt|;
specifier|private
name|JTextField
name|txtXPath
decl_stmt|;
specifier|private
name|JComboBox
name|cmbxsType
decl_stmt|;
specifier|private
name|JTable
name|tblFullTextIndexes
decl_stmt|;
specifier|private
name|FullTextIndexTableModel
name|fulltextIndexModel
decl_stmt|;
specifier|private
name|JTable
name|tblRangeIndexes
decl_stmt|;
specifier|private
name|RangeIndexTableModel
name|rangeIndexModel
decl_stmt|;
specifier|private
name|InteractiveClient
name|client
decl_stmt|;
specifier|public
name|IndexDialog
parameter_list|(
name|String
name|title
parameter_list|,
name|InteractiveClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
comment|//capture the frame's close event
name|WindowListener
name|windowListener
init|=
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|saveChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|IndexDialog
operator|.
name|this
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexDialog
operator|.
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|this
operator|.
name|addWindowListener
argument_list|(
name|windowListener
argument_list|)
expr_stmt|;
comment|//draw the GUI
name|setupComponents
argument_list|()
expr_stmt|;
comment|//Get the indexes for the root collection
name|actionGetIndexes
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupComponents
parameter_list|()
block|{
comment|//Dialog Content Panel
name|GridBagLayout
name|grid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
name|grid
argument_list|)
expr_stmt|;
comment|//Constraints for Layout
name|GridBagConstraints
name|c
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|c
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//collection label
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
literal|"Collection"
argument_list|)
decl_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|label
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
comment|//get the collections but not system collections
name|ArrayList
name|alCollections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|root
init|=
name|client
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
decl_stmt|;
name|ArrayList
name|alAllCollections
init|=
name|getCollections
argument_list|(
name|root
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alAllCollections
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//TODO : use XmldbURIs !
if|if
condition|(
name|alAllCollections
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|CollectionConfigurationManager
operator|.
name|CONFIG_COLLECTION
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|alCollections
operator|.
name|add
argument_list|(
name|alAllCollections
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//showErrorMessage(e.getMessage(), e);
return|return;
block|}
comment|//Create a combobox listing the collections
name|cmbCollections
operator|=
operator|new
name|JComboBox
argument_list|(
name|alCollections
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|cmbCollections
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|saveChanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JComboBox
name|cb
init|=
operator|(
name|JComboBox
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|actionGetIndexes
argument_list|(
name|cb
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|cmbCollections
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|cmbCollections
argument_list|)
expr_stmt|;
comment|//Panel to hold controls relating to the FullText Index
name|JPanel
name|panelFullTextIndex
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panelFullTextIndex
operator|.
name|setBorder
argument_list|(
operator|new
name|TitledBorder
argument_list|(
literal|"Full Text Index"
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|panelFullTextIndexGrid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelFullTextIndex
operator|.
name|setLayout
argument_list|(
name|panelFullTextIndexGrid
argument_list|)
expr_stmt|;
comment|//fulltext default all checkbox
name|chkDefaultAll
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Default All"
argument_list|)
expr_stmt|;
name|chkDefaultAll
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|cx
operator|.
name|setFullTextIndexDefaultAll
argument_list|(
name|chkDefaultAll
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|chkDefaultAll
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|chkDefaultAll
argument_list|)
expr_stmt|;
comment|//fulltext alphanumeric checkbox
name|chkAlphanum
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Alphanumeric"
argument_list|)
expr_stmt|;
name|chkAlphanum
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|cx
operator|.
name|setFullTextIndexAlphanum
argument_list|(
name|chkAlphanum
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|chkAlphanum
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|chkAlphanum
argument_list|)
expr_stmt|;
comment|//fulltext attributes checkbox
name|chkAttributes
operator|=
operator|new
name|JCheckBox
argument_list|(
literal|"Attributes"
argument_list|)
expr_stmt|;
name|chkAttributes
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|cx
operator|.
name|setFullTextIndexAttributes
argument_list|(
name|chkAttributes
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|NONE
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|chkAttributes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|chkAttributes
argument_list|)
expr_stmt|;
comment|//Table to hold the FullText Indexes with Sroll bar
name|fulltextIndexModel
operator|=
operator|new
name|FullTextIndexTableModel
argument_list|()
expr_stmt|;
name|tblFullTextIndexes
operator|=
operator|new
name|JTable
argument_list|(
name|fulltextIndexModel
argument_list|)
expr_stmt|;
name|tblFullTextIndexes
operator|.
name|setAutoResizeMode
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_NEXT_COLUMN
argument_list|)
expr_stmt|;
name|tblFullTextIndexes
operator|.
name|setRowHeight
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|tblFullTextIndexes
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|TableColumn
name|colAction
init|=
name|tblFullTextIndexes
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|colAction
operator|.
name|setCellEditor
argument_list|(
operator|new
name|ComboBoxCellEditor
argument_list|(
name|FULLTEXT_INDEX_ACTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|colAction
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|ComboBoxCellRenderer
argument_list|(
name|FULLTEXT_INDEX_ACTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|colAction
operator|=
name|tblFullTextIndexes
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|colAction
operator|.
name|setCellEditor
argument_list|(
operator|new
name|ComboBoxCellEditor
argument_list|(
name|CONFIG_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|colAction
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|ComboBoxCellRenderer
argument_list|(
name|CONFIG_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollFullTextIndexes
init|=
operator|new
name|JScrollPane
argument_list|(
name|tblFullTextIndexes
argument_list|)
decl_stmt|;
name|scrollFullTextIndexes
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|250
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|3
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|scrollFullTextIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|scrollFullTextIndexes
argument_list|)
expr_stmt|;
comment|//Toolbar with add/delete buttons for FullText Index
name|Box
name|fulltextIndexToolbarBox
init|=
name|Box
operator|.
name|createHorizontalBox
argument_list|()
decl_stmt|;
comment|//add button
name|JButton
name|btnAddFullTextIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|btnAddFullTextIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionAddFullTextIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fulltextIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnAddFullTextIndex
argument_list|)
expr_stmt|;
comment|//delete button
name|JButton
name|btnDeleteFullTextIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|btnDeleteFullTextIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionDeleteFullTextIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fulltextIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnDeleteFullTextIndex
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|4
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|CENTER
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|panelFullTextIndexGrid
operator|.
name|setConstraints
argument_list|(
name|fulltextIndexToolbarBox
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelFullTextIndex
operator|.
name|add
argument_list|(
name|fulltextIndexToolbarBox
argument_list|)
expr_stmt|;
comment|//add fulltext panel to content frame
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|1F
operator|/
literal|3F
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|panelFullTextIndex
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panelFullTextIndex
argument_list|)
expr_stmt|;
comment|//Panel to hold controls relating to the Range Indexes
name|JPanel
name|panelRangeIndexes
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panelRangeIndexes
operator|.
name|setBorder
argument_list|(
operator|new
name|TitledBorder
argument_list|(
literal|"Range Indexes"
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|panelRangeIndexesGrid
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|panelRangeIndexes
operator|.
name|setLayout
argument_list|(
name|panelRangeIndexesGrid
argument_list|)
expr_stmt|;
comment|//Table to hold the Range Indexes with Sroll bar
name|rangeIndexModel
operator|=
operator|new
name|RangeIndexTableModel
argument_list|()
expr_stmt|;
name|tblRangeIndexes
operator|=
operator|new
name|JTable
argument_list|(
name|rangeIndexModel
argument_list|)
expr_stmt|;
name|tblRangeIndexes
operator|.
name|setAutoResizeMode
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_NEXT_COLUMN
argument_list|)
expr_stmt|;
name|tblRangeIndexes
operator|.
name|setRowHeight
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|tblRangeIndexes
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|TableColumn
name|colxsType
init|=
name|tblRangeIndexes
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|colxsType
operator|.
name|setCellEditor
argument_list|(
operator|new
name|ComboBoxCellEditor
argument_list|(
name|INDEX_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|colxsType
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|ComboBoxCellRenderer
argument_list|(
name|INDEX_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|colxsType
operator|=
name|tblRangeIndexes
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|colxsType
operator|.
name|setCellEditor
argument_list|(
operator|new
name|ComboBoxCellEditor
argument_list|(
name|CONFIG_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|colxsType
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|ComboBoxCellRenderer
argument_list|(
name|CONFIG_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollRangeIndexes
init|=
operator|new
name|JScrollPane
argument_list|(
name|tblRangeIndexes
argument_list|)
decl_stmt|;
name|scrollRangeIndexes
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|panelRangeIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|scrollRangeIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelRangeIndexes
operator|.
name|add
argument_list|(
name|scrollRangeIndexes
argument_list|)
expr_stmt|;
comment|//Toolbar with add/delete buttons for Range Index
name|Box
name|rangeIndexToolbarBox
init|=
name|Box
operator|.
name|createHorizontalBox
argument_list|()
decl_stmt|;
comment|//add button
name|JButton
name|btnAddRangeIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|btnAddRangeIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionAddRangeIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rangeIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnAddRangeIndex
argument_list|)
expr_stmt|;
comment|//delete button
name|JButton
name|btnDeleteRangeIndex
init|=
operator|new
name|JButton
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|btnDeleteRangeIndex
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|actionDeleteRangeIndex
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rangeIndexToolbarBox
operator|.
name|add
argument_list|(
name|btnDeleteRangeIndex
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|CENTER
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|panelRangeIndexesGrid
operator|.
name|setConstraints
argument_list|(
name|rangeIndexToolbarBox
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panelRangeIndexes
operator|.
name|add
argument_list|(
name|rangeIndexToolbarBox
argument_list|)
expr_stmt|;
comment|//add range index panel to content frame
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|1F
operator|/
literal|3F
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|panelRangeIndexes
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panelRangeIndexes
argument_list|)
expr_stmt|;
name|Box
name|mainBtnBox
init|=
name|Box
operator|.
name|createHorizontalBox
argument_list|()
decl_stmt|;
name|JButton
name|cancelBtn
init|=
operator|new
name|JButton
argument_list|(
literal|"Cancel"
argument_list|)
decl_stmt|;
name|cancelBtn
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|IndexDialog
operator|.
name|this
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexDialog
operator|.
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JButton
name|saveBtn
init|=
operator|new
name|JButton
argument_list|(
literal|"Save"
argument_list|)
decl_stmt|;
name|saveBtn
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|saveChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexDialog
operator|.
name|this
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexDialog
operator|.
name|this
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mainBtnBox
operator|.
name|add
argument_list|(
name|saveBtn
argument_list|)
expr_stmt|;
name|mainBtnBox
operator|.
name|add
argument_list|(
name|cancelBtn
argument_list|)
expr_stmt|;
name|c
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|gridy
operator|=
literal|3
expr_stmt|;
name|c
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|c
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|grid
operator|.
name|setConstraints
argument_list|(
name|mainBtnBox
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|mainBtnBox
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
block|}
comment|//if changes have been made, allows the user to save them
specifier|private
name|void
name|saveChanges
parameter_list|(
name|boolean
name|ask
parameter_list|)
block|{
comment|//the collection has been changed
if|if
condition|(
name|cx
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
name|boolean
name|doSave
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ask
condition|)
block|{
comment|//ask the user if they would like to save the changes
name|int
name|result
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|getContentPane
argument_list|()
argument_list|,
literal|"The configuration for the collection has changed, would you like to save the changes?"
argument_list|,
literal|"Save Changes"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
name|doSave
operator|=
name|result
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
expr_stmt|;
block|}
if|if
condition|(
name|doSave
condition|)
block|{
comment|//save the collection.xconf changes
if|if
condition|(
name|cx
operator|.
name|Save
argument_list|()
condition|)
block|{
comment|//save ok, reindex?
name|int
name|result
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|getContentPane
argument_list|()
argument_list|,
literal|"Your changes have been saved, but will not take effect until the collection is reindexed!\n Would you like to reindex "
operator|+
name|cmbCollections
operator|.
name|getSelectedItem
argument_list|()
operator|+
literal|" and sub-collections now?"
argument_list|,
literal|"Reindex"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|//reindex collection
name|Runnable
name|reindexThread
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|client
operator|.
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ArrayList
name|subCollections
init|=
name|getCollections
argument_list|(
name|client
operator|.
name|getCollection
argument_list|(
operator|(
name|String
operator|)
name|cmbCollections
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subCollections
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|reindexCollection
argument_list|(
operator|(
operator|(
name|ResourceDescriptor
operator|)
name|subCollections
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//reindex done
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|getContentPane
argument_list|()
argument_list|,
literal|"Reindex Complete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//reindex failed
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|getContentPane
argument_list|()
argument_list|,
literal|"Reindex failed!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
block|}
block|}
else|else
block|{
comment|//save failed
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|getContentPane
argument_list|()
argument_list|,
literal|"Unable to save changes!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//THIS IS A COPY FROM ClientFrame
comment|//TODO: share this code between the two classes
specifier|private
name|ArrayList
name|getCollections
parameter_list|(
name|Collection
name|root
parameter_list|,
name|ArrayList
name|collectionsList
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|collectionsList
operator|.
name|add
argument_list|(
operator|new
name|PrettyXmldbURI
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|childCollections
init|=
name|root
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
name|Collection
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|getCollections
argument_list|(
name|child
argument_list|,
name|collectionsList
argument_list|)
expr_stmt|;
block|}
return|return
name|collectionsList
return|;
block|}
specifier|private
name|void
name|actionAddFullTextIndex
parameter_list|()
block|{
name|fulltextIndexModel
operator|.
name|addRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|actionDeleteFullTextIndex
parameter_list|()
block|{
name|int
name|iSelectedRow
init|=
name|tblFullTextIndexes
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedRow
operator|>
operator|-
literal|1
condition|)
block|{
name|fulltextIndexModel
operator|.
name|removeRow
argument_list|(
name|iSelectedRow
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|actionAddRangeIndex
parameter_list|()
block|{
name|rangeIndexModel
operator|.
name|addRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|actionDeleteRangeIndex
parameter_list|()
block|{
name|int
name|iSelectedRow
init|=
name|tblRangeIndexes
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedRow
operator|>
operator|-
literal|1
condition|)
block|{
name|rangeIndexModel
operator|.
name|removeRow
argument_list|(
name|iSelectedRow
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Displays the indexes when a collection is selection
specifier|private
name|void
name|actionGetIndexes
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
try|try
block|{
name|cx
operator|=
operator|new
name|CollectionXConf
argument_list|(
name|collectionName
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|chkDefaultAll
operator|.
name|setSelected
argument_list|(
name|cx
operator|.
name|getFullTextIndexDefaultAll
argument_list|()
argument_list|)
expr_stmt|;
name|chkAlphanum
operator|.
name|setSelected
argument_list|(
name|cx
operator|.
name|getFullTextIndexAlphanum
argument_list|()
argument_list|)
expr_stmt|;
name|chkAttributes
operator|.
name|setSelected
argument_list|(
name|cx
operator|.
name|getFullTextIndexAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|fulltextIndexModel
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
name|rangeIndexModel
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
comment|//TODO: CONSIDER whether CollectionXConf Should throw xmldb exception at all?
block|}
block|}
specifier|public
class|class
name|ComboBoxCellRenderer
extends|extends
name|JComboBox
implements|implements
name|TableCellRenderer
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ComboBoxCellRenderer
parameter_list|(
name|String
index|[]
name|items
parameter_list|)
block|{
name|super
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|isSelected
condition|)
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getSelectionForeground
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setBackground
argument_list|(
name|table
operator|.
name|getSelectionBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
name|setBackground
argument_list|(
name|table
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Select the current value
name|setSelectedItem
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
class|class
name|ComboBoxCellEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ComboBoxCellEditor
parameter_list|(
name|String
index|[]
name|items
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|JComboBox
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|FullTextIndexTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"Type"
block|,
literal|"QName/Path"
block|,
literal|"Action"
block|}
decl_stmt|;
specifier|public
name|FullTextIndexTableModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|columnIndex
operator|+
literal|"->"
operator|+
name|aValue
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
name|cx
operator|.
name|updateFullTextIndex
argument_list|(
name|rowIndex
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* XPath */
name|cx
operator|.
name|updateFullTextIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* action */
name|cx
operator|.
name|updateFullTextIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
name|fireTableCellUpdated
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|cx
operator|.
name|deleteFullTextIndex
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|fireTableRowsDeleted
argument_list|(
name|rowIndex
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|()
block|{
name|cx
operator|.
name|addFullTextIndex
argument_list|(
name|CollectionXConf
operator|.
name|TYPE_QNAME
argument_list|,
literal|""
argument_list|,
name|CollectionXConf
operator|.
name|ACTION_INCLUDE
argument_list|)
expr_stmt|;
name|fireTableRowsInserted
argument_list|(
name|getRowCount
argument_list|()
argument_list|,
name|getRowCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#getColumnCount() 		*/
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getColumnName(int) 		 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getRowCount() 		 */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|cx
operator|!=
literal|null
condition|?
name|cx
operator|.
name|getFullTextPathCount
argument_list|()
else|:
literal|0
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getValueAt(int, int) 		 */
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|cx
operator|.
name|getFullTextIndexType
argument_list|(
name|rowIndex
argument_list|)
return|;
case|case
literal|1
case|:
comment|/* XPath */
return|return
name|cx
operator|.
name|getFullTextIndexPath
argument_list|(
name|rowIndex
argument_list|)
return|;
case|case
literal|2
case|:
comment|/* action */
return|return
name|cx
operator|.
name|getFullTextIndexPathAction
argument_list|(
name|rowIndex
argument_list|)
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
block|}
class|class
name|RangeIndexTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"Type"
block|,
literal|"XPath"
block|,
literal|"xsType"
block|}
decl_stmt|;
specifier|public
name|RangeIndexTableModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
name|cx
operator|.
name|updateRangeIndex
argument_list|(
name|rowIndex
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* XPath */
name|cx
operator|.
name|updateRangeIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* xsType */
name|cx
operator|.
name|updateRangeIndex
argument_list|(
name|rowIndex
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|aValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
name|fireTableCellUpdated
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|cx
operator|.
name|deleteRangeIndex
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|fireTableRowsDeleted
argument_list|(
name|rowIndex
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|()
block|{
name|cx
operator|.
name|addRangeIndex
argument_list|(
name|CollectionXConf
operator|.
name|TYPE_QNAME
argument_list|,
literal|""
argument_list|,
literal|"xs:string"
argument_list|)
expr_stmt|;
name|fireTableRowsInserted
argument_list|(
name|getRowCount
argument_list|()
argument_list|,
name|getRowCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#isCellEditable() 		*/
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		* @see javax.swing.table.TableModel#getColumnCount() 		*/
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|length
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getColumnName(int) 		 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getRowCount() 		 */
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|cx
operator|!=
literal|null
condition|?
name|cx
operator|.
name|getRangeIndexCount
argument_list|()
else|:
literal|0
return|;
block|}
comment|/* (non-Javadoc) 		 * @see javax.swing.table.TableModel#getValueAt(int, int) 		 */
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|cx
operator|.
name|getRangeIndex
argument_list|(
name|rowIndex
argument_list|)
operator|.
name|getType
argument_list|()
return|;
case|case
literal|1
case|:
comment|/* XPath */
return|return
name|cx
operator|.
name|getRangeIndex
argument_list|(
name|rowIndex
argument_list|)
operator|.
name|getXPath
argument_list|()
return|;
case|case
literal|2
case|:
comment|/* xsType */
return|return
name|cx
operator|.
name|getRangeIndex
argument_list|(
name|rowIndex
argument_list|)
operator|.
name|getxsType
argument_list|()
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

