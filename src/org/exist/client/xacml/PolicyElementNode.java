begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|XACMLUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicyTreeElement
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|PolicyElementNode
extends|extends
name|AbstractNodeContainer
implements|implements
name|NodeContainer
block|{
specifier|private
name|URI
name|originalId
decl_stmt|;
specifier|private
name|URI
name|id
decl_stmt|;
specifier|private
name|String
name|originalDescription
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|TargetNode
name|target
decl_stmt|;
specifier|protected
name|PolicyElementNode
parameter_list|(
name|NodeContainer
name|parent
parameter_list|,
name|PolicyTreeElement
name|policyElement
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|policyElement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Policy element cannot be null"
argument_list|)
throw|;
block|}
name|id
operator|=
name|policyElement
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Policy element ID cannot be null"
argument_list|)
throw|;
block|}
name|description
operator|=
name|policyElement
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|target
operator|=
operator|new
name|TargetNode
argument_list|(
name|this
argument_list|,
name|policyElement
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|originalId
operator|=
name|id
expr_stmt|;
name|originalDescription
operator|=
name|description
expr_stmt|;
block|}
comment|/** 	 * Creates a<code>PolicyTreeElement</code> 	 * from this object's current state. 	 *  	 * @return a<code>PolicyTreeElement</code> 	 */
specifier|abstract
name|PolicyTreeElement
name|create
parameter_list|()
function_decl|;
comment|/** 	 * Creates a<code>PolicyTreeElement</code> 	 * from this object's current state except 	 * that it uses the specified id. 	 *  	 * @return a<code>PolicyTreeElement</code> 	 */
specifier|abstract
name|PolicyTreeElement
name|create
parameter_list|(
name|URI
name|id
parameter_list|)
function_decl|;
comment|/** 	 * Retrieves the id of this element. 	 *   	 * @return the id 	 */
specifier|public
name|URI
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/** 	 * Provides a string representation appropriate for display 	 * to the user. 	 *  	 * @return The string representation 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Sets the id of this element. 	 *  	 * @param id The new id, which cannot be null. 	 */
name|void
name|setId
parameter_list|(
name|URI
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Policy element ID cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|fireChanged
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Gets the description of the element. 	 *  	 * @return the description 	 */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/** 	 * Sets the description of the element.  May be null. 	 *  	 * @param description The new description. 	 */
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|fireChanged
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIdModified
parameter_list|()
block|{
return|return
operator|!
name|id
operator|.
name|equals
argument_list|(
name|originalId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDescriptionModified
parameter_list|()
block|{
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
return|return
name|originalDescription
operator|!=
literal|null
return|;
block|}
return|return
operator|!
name|description
operator|.
name|equals
argument_list|(
name|originalDescription
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|isModified
argument_list|(
name|deep
argument_list|)
operator|||
name|isIdModified
argument_list|()
operator|||
name|isDescriptionModified
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|deep
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|isModified
argument_list|(
name|deep
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|revert
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|description
operator|=
name|originalDescription
expr_stmt|;
name|id
operator|=
name|originalId
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|target
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|originalDescription
operator|=
name|description
expr_stmt|;
name|originalId
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|target
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Gets the wrapper around the target for this element. 	 * The returned value will never be null, even if this 	 * element has an empty target. 	 *  	 * @return a wrapper around this element's target 	 */
specifier|public
name|TargetNode
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
specifier|public
name|String
name|serialize
parameter_list|(
name|boolean
name|indent
parameter_list|)
block|{
return|return
name|XACMLUtil
operator|.
name|serialize
argument_list|(
name|create
argument_list|()
argument_list|,
name|indent
argument_list|)
return|;
block|}
block|}
end_class

end_unit

