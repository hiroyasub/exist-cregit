begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|combine
operator|.
name|CombiningAlgorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|combine
operator|.
name|PolicyCombiningAlgorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|combine
operator|.
name|RuleCombiningAlgorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|combine
operator|.
name|StandardCombiningAlgFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractPolicyEditor
extends|extends
name|PolicyElementEditor
block|{
specifier|public
name|AbstractPolicyEditor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getComboLabel
parameter_list|()
block|{
return|return
operator|(
operator|(
name|node
operator|instanceof
name|PolicySetNode
operator|)
condition|?
literal|"Policy"
else|:
literal|"Rule"
operator|)
operator|+
literal|" Combining Algorithm:"
return|;
block|}
specifier|protected
name|ComboBoxModel
name|getComboModel
parameter_list|()
block|{
specifier|final
name|boolean
name|isPolicy
init|=
name|node
operator|instanceof
name|PolicyNode
decl_stmt|;
specifier|final
name|DefaultComboBoxModel
name|model
init|=
operator|new
name|DefaultComboBoxModel
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CombiningAlgorithm
argument_list|>
name|algorithms
init|=
name|StandardCombiningAlgFactory
operator|.
name|getFactory
argument_list|()
operator|.
name|getStandardAlgorithms
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CombiningAlgorithm
name|algorithm
range|:
name|algorithms
control|)
block|{
if|if
condition|(
name|isPolicy
condition|)
block|{
if|if
condition|(
name|algorithm
operator|instanceof
name|RuleCombiningAlgorithm
condition|)
block|{
specifier|final
name|String
name|abbreviatedID
init|=
name|abbrev
operator|.
name|getAbbreviatedCombiningID
argument_list|(
name|algorithm
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|addElement
argument_list|(
name|abbreviatedID
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|algorithm
operator|instanceof
name|PolicyCombiningAlgorithm
condition|)
block|{
specifier|final
name|String
name|abbreviatedID
init|=
name|abbrev
operator|.
name|getAbbreviatedCombiningID
argument_list|(
name|algorithm
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|addElement
argument_list|(
name|abbreviatedID
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|model
return|;
block|}
specifier|protected
name|Object
name|getComboPrototype
parameter_list|()
block|{
name|Object
name|prototype
init|=
literal|""
decl_stmt|;
name|int
name|maxLength
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CombiningAlgorithm
argument_list|>
name|algorithms
init|=
name|StandardCombiningAlgFactory
operator|.
name|getFactory
argument_list|()
operator|.
name|getStandardAlgorithms
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CombiningAlgorithm
name|algorithm
range|:
name|algorithms
control|)
block|{
specifier|final
name|URI
name|ID
init|=
name|algorithm
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|String
name|abbreviatedID
init|=
name|abbrev
operator|.
name|getAbbreviatedCombiningID
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|abbreviatedID
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|maxLength
condition|)
block|{
name|maxLength
operator|=
name|length
expr_stmt|;
name|prototype
operator|=
name|abbreviatedID
expr_stmt|;
block|}
block|}
return|return
name|prototype
return|;
block|}
specifier|public
name|void
name|setNode
parameter_list|(
name|XACMLTreeNode
name|treeNode
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|treeNode
operator|instanceof
name|AbstractPolicyNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AbstractPolicy Editor can only edit AbstractPolicyNodes"
argument_list|)
throw|;
block|}
specifier|final
name|AbstractPolicyNode
name|node
init|=
operator|(
name|AbstractPolicyNode
operator|)
name|treeNode
decl_stmt|;
name|super
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|CombiningAlgorithm
name|algorithm
init|=
name|node
operator|.
name|getCombiningAlgorithm
argument_list|()
decl_stmt|;
specifier|final
name|String
name|abbreviatedID
init|=
name|abbrev
operator|.
name|getAbbreviatedCombiningID
argument_list|(
name|algorithm
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|setSelectedItem
argument_list|(
name|abbreviatedID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|pushChanges
parameter_list|()
block|{
name|super
operator|.
name|pushChanges
argument_list|()
expr_stmt|;
specifier|final
name|CombiningAlgorithm
name|algorithm
init|=
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
name|algorithm
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AbstractPolicyNode
operator|)
name|node
operator|)
operator|.
name|setCombiningAlgorithm
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

