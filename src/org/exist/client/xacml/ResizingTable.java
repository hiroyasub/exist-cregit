begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TableModelEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|JTableHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_class
specifier|public
class|class
name|ResizingTable
extends|extends
name|JTable
block|{
specifier|public
name|ResizingTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|initColumns
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ResizingTable
parameter_list|(
name|TableModel
name|tableModel
parameter_list|,
name|TableColumnModel
name|columnModel
parameter_list|)
block|{
name|super
argument_list|(
name|tableModel
argument_list|,
name|columnModel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResizingTable
parameter_list|(
name|TableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initColumns
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initColumns
parameter_list|()
block|{
name|setIntercellSpacing
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|setAutoResizeMode
argument_list|(
name|AUTO_RESIZE_OFF
argument_list|)
expr_stmt|;
name|setColumnWidths
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tableChanged
parameter_list|(
name|TableModelEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|tableChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//fix for a NullPointerException when setModel from JTable constructor
comment|//	generates a tableChanged event
if|if
condition|(
name|defaultRenderersByColumnClass
operator|!=
literal|null
condition|)
name|setColumnWidths
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setColumnWidths
parameter_list|()
block|{
if|if
condition|(
name|columnModel
operator|==
literal|null
condition|)
return|return;
name|int
index|[]
name|width
init|=
operator|new
name|int
index|[
name|getColumnCount
argument_list|()
index|]
decl_stmt|;
name|getHeaderWidths
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|getCellMaxWidths
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|setCellWidths
argument_list|(
name|width
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getHeaderWidths
parameter_list|(
name|int
index|[]
name|width
parameter_list|)
block|{
name|JTableHeader
name|header
init|=
name|getTableHeader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|width
operator|.
name|length
condition|;
name|column
operator|++
control|)
block|{
name|TableCellRenderer
name|renderer
init|=
name|columnModel
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
operator|.
name|getHeaderRenderer
argument_list|()
decl_stmt|;
if|if
condition|(
name|renderer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
continue|continue;
name|renderer
operator|=
name|header
operator|.
name|getDefaultRenderer
argument_list|()
expr_stmt|;
if|if
condition|(
name|renderer
operator|==
literal|null
condition|)
continue|continue;
block|}
name|Component
name|comp
init|=
name|renderer
operator|.
name|getTableCellRendererComponent
argument_list|(
name|this
argument_list|,
name|getColumnName
argument_list|(
name|column
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|Dimension
name|prefSize
init|=
name|comp
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefSize
operator|.
name|width
operator|>
name|width
index|[
name|column
index|]
condition|)
name|width
index|[
name|column
index|]
operator|=
name|prefSize
operator|.
name|width
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setCellWidths
parameter_list|(
name|int
index|[]
name|width
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
name|int
name|spacingWidth
init|=
name|getIntercellSpacing
argument_list|()
operator|.
name|width
operator|*
literal|2
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|width
operator|.
name|length
condition|;
name|column
operator|++
control|)
block|{
name|TableColumn
name|tableColumn
init|=
name|columnModel
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|newWidth
init|=
name|width
index|[
name|column
index|]
operator|+
name|spacingWidth
operator|+
literal|6
decl_stmt|;
if|if
condition|(
name|override
condition|)
name|tableColumn
operator|.
name|setPreferredWidth
argument_list|(
name|newWidth
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|currentWidth
init|=
name|tableColumn
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|tableColumn
operator|.
name|setPreferredWidth
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|currentWidth
argument_list|,
name|newWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|getCellMaxWidths
parameter_list|(
name|int
index|[]
name|width
parameter_list|)
block|{
name|int
name|rowCount
init|=
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rowCount
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|width
operator|.
name|length
condition|;
name|column
operator|++
control|)
block|{
name|TableCellRenderer
name|renderer
init|=
name|getCellRenderer
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderer
operator|==
literal|null
condition|)
name|renderer
operator|=
name|getDefaultRenderer
argument_list|(
name|getModel
argument_list|()
operator|.
name|getColumnClass
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|renderer
operator|==
literal|null
condition|)
continue|continue;
name|Object
name|value
init|=
name|getValueAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|boolean
name|isSelected
init|=
name|isCellSelected
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|renderer
operator|.
name|getTableCellRendererComponent
argument_list|(
name|this
argument_list|,
name|value
argument_list|,
name|isSelected
argument_list|,
literal|false
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|width
index|[
name|column
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|comp
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|,
name|width
index|[
name|column
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Dimension
name|getPreferredScrollableViewportSize
parameter_list|()
block|{
name|Dimension
name|prefSize
init|=
name|getPreferredSize
argument_list|()
decl_stmt|;
name|Dimension
name|maxSize
init|=
name|getMaximumSize
argument_list|()
decl_stmt|;
name|Dimension
name|minSize
init|=
name|getMinimumSize
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|maxSize
operator|.
name|width
argument_list|,
name|prefSize
operator|.
name|width
argument_list|)
argument_list|,
name|minSize
operator|.
name|width
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|maxSize
operator|.
name|height
argument_list|,
name|prefSize
operator|.
name|height
argument_list|)
argument_list|,
name|minSize
operator|.
name|height
argument_list|)
decl_stmt|;
return|return
operator|new
name|Dimension
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getScrollableTracksViewportWidth
parameter_list|()
block|{
return|return
name|getPreferredSize
argument_list|()
operator|.
name|width
operator|<
name|getParent
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|width
return|;
block|}
block|}
end_class

end_unit

