begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|XACMLConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|cond
operator|.
name|FunctionBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|cond
operator|.
name|FunctionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|cond
operator|.
name|MatchFunction
import|;
end_import

begin_comment
comment|/**  * Abbreviates the constants used in XACML to something  * shorter and hopefully more user-friendly.  The getFullXXX  * methods should generally only be called with an argument  * obtained as the result of the corresponding getAbbreviatedXXX  * method.  */
end_comment

begin_class
specifier|public
class|class
name|Abbreviator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Abbreviator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|comparisonMap
init|=
block|{
block|{
literal|"equal"
block|,
literal|"="
block|}
block|,
block|{
literal|"less-than-or-equal"
block|,
literal|"<="
block|}
block|,
block|{
literal|"less-than"
block|,
literal|"<"
block|}
block|,
block|{
literal|"greater-than-or-equal"
block|,
literal|">="
block|}
block|,
block|{
literal|"greater-than"
block|,
literal|">"
block|}
block|}
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
name|attributeIdMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|private
name|Map
name|functionMap
init|=
operator|new
name|HashMap
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|public
name|Abbreviator
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getAbbreviatedId
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|toString
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|EXIST_XACML_NS
argument_list|)
condition|)
block|{
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|EXIST_XACML_NS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toString
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|i
operator|=
name|toString
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|VERSION_1_0_BASE
argument_list|)
condition|)
block|{
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|VERSION_1_0_BASE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toString
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
return|return
name|toString
return|;
name|attributeIdMap
operator|.
name|put
argument_list|(
name|toString
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|toString
return|;
block|}
specifier|public
name|URI
name|getFullIdURI
parameter_list|(
name|String
name|abbrev
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|attributeIdMap
argument_list|,
name|abbrev
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAbbreviatedType
parameter_list|(
name|URI
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|toString
init|=
name|type
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|XACML_DATATYPE_BASE
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|XACML_DATATYPE_BASE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|Namespaces
operator|.
name|SCHEMA_NS
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|Namespaces
operator|.
name|SCHEMA_NS
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|XQUERY_OPERATORS_NS
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|XQUERY_OPERATORS_NS
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
return|return
name|toString
return|;
name|typeMap
operator|.
name|put
argument_list|(
name|toString
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|toString
return|;
block|}
specifier|public
name|URI
name|getFullTypeURI
parameter_list|(
name|String
name|abbrev
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|typeMap
argument_list|,
name|abbrev
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAbbreviatedCombiningID
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|toString
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|RULE_COMBINING_BASE
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|RULE_COMBINING_BASE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|XACMLConstants
operator|.
name|POLICY_COMBINING_BASE
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|XACMLConstants
operator|.
name|POLICY_COMBINING_BASE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
else|else
return|return
name|toString
return|;
return|return
name|toString
return|;
block|}
specifier|public
name|URI
name|getFullCombiningURI
parameter_list|(
name|String
name|abbrev
parameter_list|,
name|boolean
name|isRuleAlg
parameter_list|)
block|{
if|if
condition|(
name|abbrev
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|prefix
init|=
name|isRuleAlg
condition|?
name|XACMLConstants
operator|.
name|RULE_COMBINING_BASE
else|:
name|XACMLConstants
operator|.
name|POLICY_COMBINING_BASE
decl_stmt|;
return|return
name|URI
operator|.
name|create
argument_list|(
name|prefix
operator|+
name|abbrev
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAbbreviatedFunctionId
parameter_list|(
name|URI
name|functionId
parameter_list|)
block|{
if|if
condition|(
name|functionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|toString
init|=
name|functionId
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toString
operator|.
name|startsWith
argument_list|(
name|FunctionBase
operator|.
name|FUNCTION_NS
argument_list|)
condition|)
name|toString
operator|=
name|toString
operator|.
name|substring
argument_list|(
name|FunctionBase
operator|.
name|FUNCTION_NS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|functionMap
operator|.
name|put
argument_list|(
name|functionId
argument_list|,
name|toString
argument_list|)
expr_stmt|;
return|return
name|toString
return|;
block|}
if|if
condition|(
name|toString
operator|.
name|equals
argument_list|(
literal|"regexp-string-match"
argument_list|)
condition|)
name|toString
operator|=
literal|"string-match"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comparisonMap
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|toString
operator|.
name|endsWith
argument_list|(
name|comparisonMap
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|toString
operator|=
name|comparisonMap
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
return|return
name|toString
return|;
block|}
block|}
name|functionMap
operator|.
name|put
argument_list|(
name|functionId
argument_list|,
name|toString
argument_list|)
expr_stmt|;
return|return
name|toString
return|;
block|}
specifier|public
name|URI
name|getFullFunctionId
parameter_list|(
name|String
name|abbrev
parameter_list|,
name|URI
name|dataType
parameter_list|)
block|{
if|if
condition|(
name|abbrev
operator|==
literal|null
operator|||
name|dataType
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|URI
name|uri
init|=
operator|(
name|URI
operator|)
name|functionMap
operator|.
name|get
argument_list|(
name|abbrev
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
return|return
name|uri
return|;
name|String
name|abbrevType
init|=
name|getAbbreviatedType
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|abbrev
operator|.
name|equals
argument_list|(
literal|"match"
argument_list|)
operator|&&
name|abbrevType
operator|.
name|equals
argument_list|(
literal|"string"
argument_list|)
condition|)
return|return
name|URI
operator|.
name|create
argument_list|(
name|MatchFunction
operator|.
name|NAME_REGEXP_STRING_MATCH
argument_list|)
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comparisonMap
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|abbrev
operator|.
name|equals
argument_list|(
name|comparisonMap
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|abbrev
operator|=
name|abbrevType
operator|+
literal|"-"
operator|+
name|comparisonMap
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|FunctionBase
operator|.
name|FUNCTION_NS
operator|+
name|abbrev
argument_list|)
return|;
block|}
comment|//TODO: not valid for date-related conversions
specifier|public
name|Set
name|getAbbreviatedTargetFunctions
parameter_list|(
name|URI
name|dataType
parameter_list|)
block|{
comment|//note that sunxacml includes logical functions in the target
comment|//instance
comment|//this is almost certainly wrong
comment|//abbrevTargetFunctionId filters these out because they do
comment|//not include the data type in their name (not, and, or, n-or)
name|FunctionFactory
name|factory
init|=
name|FunctionFactory
operator|.
name|getTargetInstance
argument_list|()
decl_stmt|;
name|Set
name|functionIds
init|=
name|factory
operator|.
name|getSupportedFunctions
argument_list|()
decl_stmt|;
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|abbrevType
init|=
name|getAbbreviatedType
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
name|String
name|functionId
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|functionIds
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|functionId
operator|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|functionId
operator|=
name|abbrevTargetFunctionId
argument_list|(
name|functionId
argument_list|,
name|abbrevType
argument_list|)
expr_stmt|;
if|if
condition|(
name|functionId
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|functionId
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getAbbreviatedTargetFunctionId
parameter_list|(
name|URI
name|functionId
parameter_list|,
name|URI
name|dataType
parameter_list|)
block|{
if|if
condition|(
name|functionId
operator|==
literal|null
operator|||
name|dataType
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|abbrevTargetFunctionId
argument_list|(
name|functionId
operator|.
name|toString
argument_list|()
argument_list|,
name|getAbbreviatedType
argument_list|(
name|dataType
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|abbrevTargetFunctionId
parameter_list|(
name|String
name|functionId
parameter_list|,
name|String
name|abbrevType
parameter_list|)
block|{
if|if
condition|(
name|functionId
operator|.
name|startsWith
argument_list|(
name|FunctionBase
operator|.
name|FUNCTION_NS
argument_list|)
condition|)
name|functionId
operator|=
name|functionId
operator|.
name|substring
argument_list|(
name|FunctionBase
operator|.
name|FUNCTION_NS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
else|else
return|return
literal|null
return|;
if|if
condition|(
name|functionId
operator|.
name|equals
argument_list|(
literal|"regexp-string-match"
argument_list|)
condition|)
name|functionId
operator|=
literal|"string-match"
expr_stmt|;
if|if
condition|(
name|functionId
operator|.
name|startsWith
argument_list|(
name|abbrevType
argument_list|)
condition|)
block|{
name|functionId
operator|=
name|functionId
operator|.
name|substring
argument_list|(
name|abbrevType
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comparisonMap
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|functionId
operator|.
name|equals
argument_list|(
name|comparisonMap
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|functionId
operator|=
name|comparisonMap
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
return|return
name|functionId
return|;
block|}
block|}
return|return
name|functionId
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|URI
name|get
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|URI
argument_list|>
name|map
parameter_list|,
name|String
name|abbrev
parameter_list|)
block|{
name|URI
name|ret
init|=
name|map
operator|.
name|get
argument_list|(
name|abbrev
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|==
literal|null
operator|)
condition|?
name|parse
argument_list|(
name|abbrev
argument_list|)
else|:
name|ret
return|;
block|}
specifier|private
specifier|static
name|URI
name|parse
parameter_list|(
name|String
name|abbrev
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|abbrev
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid URI '"
operator|+
name|abbrev
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

