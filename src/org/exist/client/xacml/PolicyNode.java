begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicyTreeElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|combine
operator|.
name|RuleCombiningAlgorithm
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyNode
extends|extends
name|AbstractPolicyNode
block|{
specifier|private
name|List
argument_list|<
name|RuleNode
argument_list|>
name|rules
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RuleNode
argument_list|>
name|originalRules
decl_stmt|;
specifier|public
name|PolicyNode
parameter_list|(
name|NodeContainer
name|parent
parameter_list|,
name|Policy
name|policy
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PolicyNode
parameter_list|(
name|NodeContainer
name|parent
parameter_list|,
name|String
name|documentName
parameter_list|,
name|Policy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|documentName
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Rule
argument_list|>
name|children
init|=
name|policy
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|RuleNode
argument_list|>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|children
control|)
name|rules
operator|.
name|add
argument_list|(
operator|new
name|RuleNode
argument_list|(
name|this
argument_list|,
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|originalRules
operator|=
operator|new
name|ArrayList
argument_list|<
name|RuleNode
argument_list|>
argument_list|(
name|rules
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PolicyTreeElement
name|create
parameter_list|()
block|{
return|return
name|createPolicy
argument_list|()
return|;
block|}
specifier|public
name|PolicyTreeElement
name|create
parameter_list|(
name|URI
name|id
parameter_list|)
block|{
return|return
name|createPolicy
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|Policy
name|createPolicy
parameter_list|()
block|{
return|return
name|createPolicy
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Policy
name|createPolicy
parameter_list|(
name|URI
name|id
parameter_list|)
block|{
name|Target
name|target
init|=
name|getTarget
argument_list|()
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|RuleCombiningAlgorithm
name|algorithm
init|=
operator|(
name|RuleCombiningAlgorithm
operator|)
name|getCombiningAlgorithm
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Rule
argument_list|>
name|rawRules
init|=
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|(
name|rules
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RuleNode
name|rule
range|:
name|rules
control|)
name|rawRules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|createRule
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|useId
init|=
operator|(
name|id
operator|==
literal|null
operator|)
condition|?
name|getId
argument_list|()
else|:
name|id
decl_stmt|;
return|return
operator|new
name|Policy
argument_list|(
name|useId
argument_list|,
name|algorithm
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|target
argument_list|,
name|rawRules
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PolicyTreeElement
name|element
parameter_list|)
block|{
name|add
argument_list|(
operator|-
literal|1
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|PolicyTreeElement
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|element
operator|instanceof
name|Rule
condition|)
name|add
argument_list|(
name|index
argument_list|,
operator|new
name|RuleNode
argument_list|(
name|this
argument_list|,
operator|(
name|Rule
operator|)
name|element
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Policies can only contain rules."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PolicyElementNode
name|node
parameter_list|)
block|{
name|add
argument_list|(
operator|-
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|PolicyElementNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|node
operator|instanceof
name|RuleNode
condition|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
name|index
operator|=
name|rules
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot insert Rule before Target"
argument_list|)
throw|;
name|rules
operator|.
name|add
argument_list|(
name|index
operator|-
literal|1
argument_list|,
operator|(
name|RuleNode
operator|)
name|node
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeAdded
argument_list|(
name|node
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PolicyNodes can only contain RuleNodes."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|PolicyElementNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return;
name|int
name|index
init|=
name|rules
operator|.
name|indexOf
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return;
name|rules
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeRemoved
argument_list|(
name|node
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RuleNode
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|rules
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
comment|//+1 for the target
block|}
specifier|public
name|XACMLTreeNode
name|getChild
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|==
literal|0
operator|)
condition|?
name|getTarget
argument_list|()
else|:
operator|(
name|XACMLTreeNode
operator|)
name|rules
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|indexOfChild
parameter_list|(
name|Object
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|==
name|getTarget
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|ret
init|=
name|rules
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|>=
literal|0
operator|)
condition|?
name|ret
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|isModified
argument_list|(
name|deep
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|RuleNode
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|isModified
argument_list|(
literal|true
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|revert
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|RuleNode
argument_list|>
argument_list|(
name|originalRules
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|RuleNode
name|rule
range|:
name|rules
control|)
name|rule
operator|.
name|revert
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|originalRules
operator|=
operator|new
name|ArrayList
argument_list|<
name|RuleNode
argument_list|>
argument_list|(
name|rules
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|RuleNode
name|rule
range|:
name|rules
control|)
name|rule
operator|.
name|commit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

