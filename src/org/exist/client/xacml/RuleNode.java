begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicyTreeElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_class
specifier|public
class|class
name|RuleNode
extends|extends
name|PolicyElementNode
block|{
specifier|private
name|int
name|effect
decl_stmt|;
specifier|private
name|int
name|originalEffect
decl_stmt|;
specifier|private
name|ConditionNode
name|condition
decl_stmt|;
specifier|public
name|RuleNode
parameter_list|(
name|NodeContainer
name|parent
parameter_list|,
name|Rule
name|rule
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|rule
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
name|effect
operator|=
name|Result
operator|.
name|DECISION_DENY
expr_stmt|;
name|condition
operator|=
operator|new
name|ConditionNode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|effect
operator|=
name|rule
operator|.
name|getEffect
argument_list|()
expr_stmt|;
name|condition
operator|=
operator|new
name|ConditionNode
argument_list|(
name|this
argument_list|,
name|rule
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|originalEffect
operator|=
name|effect
expr_stmt|;
block|}
specifier|public
name|int
name|getEffect
parameter_list|()
block|{
return|return
name|effect
return|;
block|}
specifier|public
name|void
name|setEffect
parameter_list|(
name|int
name|effect
parameter_list|)
block|{
if|if
condition|(
name|effect
operator|==
name|Result
operator|.
name|DECISION_DENY
operator|||
name|effect
operator|==
name|Result
operator|.
name|DECISION_PERMIT
condition|)
name|this
operator|.
name|effect
operator|=
name|effect
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid effect value: "
operator|+
name|effect
argument_list|)
throw|;
name|fireChanged
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ConditionNode
name|getCondition
parameter_list|()
block|{
return|return
name|condition
return|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|isModified
argument_list|(
name|deep
argument_list|)
operator|||
name|isEffectModified
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|deep
condition|)
block|{
if|if
condition|(
name|condition
operator|.
name|isModified
argument_list|(
literal|true
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isEffectModified
parameter_list|()
block|{
return|return
name|effect
operator|!=
name|originalEffect
return|;
block|}
specifier|public
name|void
name|revert
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|effect
operator|=
name|originalEffect
expr_stmt|;
if|if
condition|(
name|deep
condition|)
name|condition
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
name|super
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|originalEffect
operator|=
name|effect
expr_stmt|;
if|if
condition|(
name|deep
condition|)
name|condition
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
name|super
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PolicyTreeElement
name|create
parameter_list|()
block|{
return|return
name|createRule
argument_list|()
return|;
block|}
specifier|public
name|PolicyTreeElement
name|create
parameter_list|(
name|URI
name|id
parameter_list|)
block|{
return|return
name|createRule
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|Rule
name|createRule
parameter_list|()
block|{
return|return
name|createRule
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Rule
name|createRule
parameter_list|(
name|URI
name|id
parameter_list|)
block|{
name|URI
name|useId
init|=
operator|(
name|id
operator|==
literal|null
operator|)
condition|?
name|getId
argument_list|()
else|:
name|id
decl_stmt|;
return|return
operator|new
name|Rule
argument_list|(
name|useId
argument_list|,
name|effect
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|getTarget
argument_list|()
operator|.
name|getTarget
argument_list|()
argument_list|,
name|condition
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|XACMLTreeNode
name|getChild
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
return|return
name|getTarget
argument_list|()
return|;
if|if
condition|(
name|index
operator|==
literal|1
condition|)
return|return
name|getCondition
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|indexOfChild
parameter_list|(
name|Object
name|child
parameter_list|)
block|{
if|if
condition|(
name|getTarget
argument_list|()
operator|==
name|child
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|getCondition
argument_list|()
operator|==
name|child
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

