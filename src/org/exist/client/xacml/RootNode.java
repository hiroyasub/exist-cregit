begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicySet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicyTreeElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|RootNode
extends|extends
name|AbstractTreeNode
implements|implements
name|PolicyElementContainer
block|{
specifier|private
name|List
name|children
decl_stmt|;
specifier|private
name|List
name|originalChildren
decl_stmt|;
specifier|private
name|List
name|listeners
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|RootNode
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|originalChildren
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PolicyTreeElement
name|element
parameter_list|)
block|{
name|add
argument_list|(
operator|-
literal|1
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|PolicyTreeElement
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|element
operator|instanceof
name|Policy
condition|)
name|add
argument_list|(
name|index
argument_list|,
operator|new
name|PolicyNode
argument_list|(
name|this
argument_list|,
operator|(
name|Policy
operator|)
name|element
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|element
operator|instanceof
name|PolicySet
condition|)
name|add
argument_list|(
name|index
argument_list|,
operator|new
name|PolicySetNode
argument_list|(
name|this
argument_list|,
operator|(
name|PolicySet
operator|)
name|element
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only Policies and PolicySets can be top level elements."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PolicyElementNode
name|node
parameter_list|)
block|{
name|add
argument_list|(
operator|-
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|PolicyElementNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|node
operator|instanceof
name|AbstractPolicyNode
condition|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
name|index
operator|=
name|children
operator|.
name|size
argument_list|()
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeAdded
argument_list|(
name|node
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only PolicyNodes and PolicySetNodes can be top level elements."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|PolicyElementNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
return|return;
name|int
name|index
init|=
name|children
operator|.
name|indexOf
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return;
name|children
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeRemoved
argument_list|(
name|node
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|AbstractPolicyNode
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|XACMLTreeNode
name|getChild
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|XACMLTreeNode
operator|)
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|indexOfChild
parameter_list|(
name|Object
name|child
parameter_list|)
block|{
return|return
name|children
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|isModified
argument_list|(
name|deep
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PolicyElementNode
name|child
init|=
operator|(
name|PolicyElementNode
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|isModified
argument_list|(
literal|true
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|revert
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|children
operator|=
name|originalChildren
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|PolicyElementNode
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|revert
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|revert
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|originalChildren
operator|=
name|children
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|PolicyElementNode
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|commit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|commit
argument_list|(
name|deep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
name|getRemovedDocumentNames
parameter_list|()
block|{
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|originalIt
init|=
name|originalChildren
operator|.
name|iterator
argument_list|()
init|;
name|originalIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractPolicyNode
name|originalChild
init|=
operator|(
name|AbstractPolicyNode
operator|)
name|originalIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|documentName
init|=
name|originalChild
operator|.
name|getDocumentName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|documentNameExists
argument_list|(
name|documentName
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|documentName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|documentNameExists
parameter_list|(
name|String
name|documentName
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|currentIt
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|currentIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractPolicyNode
name|currentChild
init|=
operator|(
name|AbstractPolicyNode
operator|)
name|currentIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|currentDocName
init|=
name|currentChild
operator|.
name|getDocumentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentDocName
operator|!=
literal|null
operator|&&
name|currentDocName
operator|.
name|equals
argument_list|(
name|documentName
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addNodeChangeListener
parameter_list|(
name|NodeChangeListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeNodeChangeListener
parameter_list|(
name|NodeChangeListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeChanged
parameter_list|(
name|XACMLTreeNode
name|node
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|NodeChangeListener
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|nodeChanged
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeAdded
parameter_list|(
name|XACMLTreeNode
name|node
parameter_list|,
name|int
name|newIndex
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|NodeChangeListener
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|nodeAdded
argument_list|(
name|node
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|XACMLTreeNode
name|removedNode
parameter_list|,
name|int
name|oldChildIndex
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|NodeChangeListener
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|nodeRemoved
argument_list|(
name|removedNode
argument_list|,
name|oldChildIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|serialize
parameter_list|(
name|boolean
name|indent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot serialize the root node"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

