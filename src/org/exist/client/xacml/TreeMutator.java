begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DnDConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragGestureEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragGestureListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceDragEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceDropEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DragSourceListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetDragEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetDropEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicySet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|PolicyTreeElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|Rule
import|;
end_import

begin_class
specifier|public
class|class
name|TreeMutator
implements|implements
name|ActionListener
implements|,
name|DragGestureListener
implements|,
name|DragSourceListener
implements|,
name|DropTargetListener
implements|,
name|KeyListener
implements|,
name|MouseListener
implements|,
name|PopupMenuListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NEW_RULE
init|=
literal|"New Rule"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_POLICY
init|=
literal|"New Policy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_POLICY_SET
init|=
literal|"New Policy Set"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REMOVE
init|=
literal|"Remove"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BIAS_BEFORE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BIAS_CURRENT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BIAS_AFTER
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BIAS_NO_DESTINATION
init|=
operator|-
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BIAS_DELTA_Y
init|=
literal|4
decl_stmt|;
specifier|private
name|XACMLTreeNode
name|currentDestinationNode
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|destinationBias
init|=
literal|0
decl_stmt|;
specifier|private
name|NodeCopyAction
name|copyAction
decl_stmt|;
specifier|private
name|NodeExpander
name|expander
decl_stmt|;
specifier|private
name|AutoScroller
name|scroller
decl_stmt|;
specifier|private
name|JTree
name|tree
decl_stmt|;
specifier|private
name|JPopupMenu
name|popup
decl_stmt|;
specifier|private
name|XACMLTreeNode
name|contextNode
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|TreeMutator
parameter_list|()
block|{
block|}
specifier|public
name|TreeMutator
parameter_list|(
name|JTree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Tree cannot be null"
argument_list|)
throw|;
name|popup
operator|=
operator|new
name|JPopupMenu
argument_list|()
expr_stmt|;
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|scroller
operator|=
operator|new
name|AutoScroller
argument_list|()
expr_stmt|;
name|expander
operator|=
operator|new
name|NodeExpander
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|copyAction
operator|=
operator|new
name|NodeCopyAction
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|tree
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|copyAction
operator|.
name|getTrigger
argument_list|()
argument_list|,
name|copyAction
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
name|copyAction
operator|.
name|getName
argument_list|()
argument_list|,
name|copyAction
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setDragEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setTransferHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addMouseListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addKeyListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|DragSource
operator|.
name|getDefaultDragSource
argument_list|()
operator|.
name|createDefaultDragGestureRecognizer
argument_list|(
name|tree
argument_list|,
name|DnDConstants
operator|.
name|ACTION_COPY_OR_MOVE
argument_list|,
name|this
argument_list|)
expr_stmt|;
operator|new
name|DropTarget
argument_list|(
name|tree
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JTree
name|getTree
parameter_list|()
block|{
return|return
name|tree
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|contextNode
operator|=
literal|null
expr_stmt|;
name|copyAction
operator|.
name|setContextNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|popup
operator|.
name|removeAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|popup
operator|.
name|isVisible
argument_list|()
condition|)
name|popup
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//MouseListener methods
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
name|showPopup
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
name|showPopup
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
name|showPopup
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
name|showPopup
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
name|showPopup
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showPopup
parameter_list|(
name|MouseEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|popup
operator|.
name|isPopupTrigger
argument_list|(
name|event
argument_list|)
condition|)
return|return;
name|reset
argument_list|()
expr_stmt|;
name|Object
name|source
init|=
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|!=
name|tree
condition|)
return|return;
name|Point
name|p
init|=
name|event
operator|.
name|getPoint
argument_list|()
decl_stmt|;
name|int
name|row
init|=
name|tree
operator|.
name|getClosestRowForLocation
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
block|{
name|showRootPopup
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
block|}
name|Rectangle
name|bounds
init|=
name|tree
operator|.
name|getRowBounds
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|y
operator|>
name|p
operator|.
name|y
operator|||
name|bounds
operator|.
name|y
operator|+
name|bounds
operator|.
name|height
operator|<=
name|p
operator|.
name|y
condition|)
block|{
name|showRootPopup
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
block|}
name|TreePath
name|path
init|=
name|tree
operator|.
name|getPathForRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|showRootPopup
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|last
init|=
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|XACMLTreeNode
name|node
init|=
operator|(
name|XACMLTreeNode
operator|)
name|last
decl_stmt|;
name|copyAction
operator|.
name|setContextNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|last
operator|instanceof
name|PolicyElementNode
operator|)
condition|)
block|{
name|popup
operator|.
name|add
argument_list|(
name|copyAction
argument_list|)
expr_stmt|;
name|popup
operator|.
name|show
argument_list|(
name|tree
argument_list|,
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
expr_stmt|;
return|return;
block|}
name|contextNode
operator|=
operator|(
name|XACMLTreeNode
operator|)
name|last
expr_stmt|;
name|handleTreeElementNode
argument_list|()
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|copyAction
argument_list|)
expr_stmt|;
name|popup
operator|.
name|show
argument_list|(
name|tree
argument_list|,
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleTreeElementNode
parameter_list|()
block|{
if|if
condition|(
name|contextNode
operator|instanceof
name|PolicySetNode
condition|)
block|{
name|addPolicySetItem
argument_list|()
expr_stmt|;
name|addPolicyItem
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|contextNode
operator|instanceof
name|PolicyNode
condition|)
name|addRuleItem
argument_list|()
expr_stmt|;
comment|//else if(contextNode instanceof Rule)
comment|//	do nothing in this case
name|addRemoveItem
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addRemoveItem
parameter_list|()
block|{
name|JMenuItem
name|remove
init|=
operator|new
name|JMenuItem
argument_list|(
name|REMOVE
argument_list|,
name|KeyEvent
operator|.
name|VK_R
argument_list|)
decl_stmt|;
name|remove
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRuleItem
parameter_list|()
block|{
name|JMenuItem
name|newRule
init|=
operator|new
name|JMenuItem
argument_list|(
name|NEW_RULE
argument_list|,
name|KeyEvent
operator|.
name|VK_R
argument_list|)
decl_stmt|;
name|newRule
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|newRule
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPolicyItem
parameter_list|()
block|{
name|JMenuItem
name|newPolicy
init|=
operator|new
name|JMenuItem
argument_list|(
name|NEW_POLICY
argument_list|,
name|KeyEvent
operator|.
name|VK_P
argument_list|)
decl_stmt|;
name|newPolicy
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|newPolicy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPolicySetItem
parameter_list|()
block|{
name|JMenuItem
name|newPolicySet
init|=
operator|new
name|JMenuItem
argument_list|(
name|NEW_POLICY_SET
argument_list|,
name|KeyEvent
operator|.
name|VK_S
argument_list|)
decl_stmt|;
name|newPolicySet
operator|.
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|newPolicySet
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showRootPopup
parameter_list|(
name|Point
name|p
parameter_list|)
block|{
name|contextNode
operator|=
name|getRootNode
argument_list|()
expr_stmt|;
name|addPolicySetItem
argument_list|()
expr_stmt|;
name|addPolicyItem
argument_list|()
expr_stmt|;
name|popup
operator|.
name|show
argument_list|(
name|tree
argument_list|,
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RootNode
name|getRootNode
parameter_list|()
block|{
name|TreeModel
name|model
init|=
name|tree
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|model
operator|instanceof
name|XACMLTreeModel
operator|)
condition|)
return|return
literal|null
return|;
name|XACMLTreeModel
name|xmodel
init|=
operator|(
name|XACMLTreeModel
operator|)
name|model
decl_stmt|;
return|return
operator|(
name|RootNode
operator|)
name|xmodel
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|private
name|void
name|newRule
parameter_list|()
block|{
if|if
condition|(
name|contextNode
operator|instanceof
name|PolicyNode
condition|)
block|{
name|PolicyNode
name|node
init|=
operator|(
name|PolicyNode
operator|)
name|contextNode
decl_stmt|;
name|Rule
name|rule
init|=
name|XACMLEditor
operator|.
name|createDefaultRule
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|node
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|newPolicySet
parameter_list|()
block|{
if|if
condition|(
name|contextNode
operator|instanceof
name|PolicySetNode
operator|||
name|contextNode
operator|instanceof
name|RootNode
condition|)
block|{
name|PolicyElementContainer
name|node
init|=
operator|(
operator|(
name|PolicyElementContainer
operator|)
name|contextNode
operator|)
decl_stmt|;
name|PolicySet
name|ps
init|=
name|XACMLEditor
operator|.
name|createDefaultPolicySet
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|node
operator|.
name|add
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|newPolicy
parameter_list|()
block|{
if|if
condition|(
name|contextNode
operator|instanceof
name|PolicySetNode
operator|||
name|contextNode
operator|instanceof
name|RootNode
condition|)
block|{
name|PolicyElementContainer
name|node
init|=
operator|(
operator|(
name|PolicyElementContainer
operator|)
name|contextNode
operator|)
decl_stmt|;
name|Policy
name|p
init|=
name|XACMLEditor
operator|.
name|createDefaultPolicy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|node
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|contextNode
operator|==
literal|null
condition|)
return|return;
name|NodeContainer
name|parent
init|=
name|contextNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|PolicyElementContainer
operator|&&
name|contextNode
operator|instanceof
name|PolicyElementNode
condition|)
operator|(
operator|(
name|PolicyElementContainer
operator|)
name|parent
operator|)
operator|.
name|remove
argument_list|(
operator|(
name|PolicyElementNode
operator|)
name|contextNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|String
name|actionCommand
init|=
name|event
operator|.
name|getActionCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionCommand
operator|==
literal|null
condition|)
return|return;
if|else if
condition|(
name|actionCommand
operator|.
name|equals
argument_list|(
name|NEW_RULE
argument_list|)
condition|)
name|newRule
argument_list|()
expr_stmt|;
if|else if
condition|(
name|actionCommand
operator|.
name|equals
argument_list|(
name|NEW_POLICY
argument_list|)
condition|)
name|newPolicy
argument_list|()
expr_stmt|;
if|else if
condition|(
name|actionCommand
operator|.
name|equals
argument_list|(
name|NEW_POLICY_SET
argument_list|)
condition|)
name|newPolicySet
argument_list|()
expr_stmt|;
if|else if
condition|(
name|actionCommand
operator|.
name|equals
argument_list|(
name|REMOVE
argument_list|)
condition|)
name|remove
argument_list|()
expr_stmt|;
name|tree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|tree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|//KeyListener methods
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
comment|//avoid collisions with JTree's builtin bindings
if|if
condition|(
name|event
operator|.
name|isShiftDown
argument_list|()
operator|||
name|event
operator|.
name|isControlDown
argument_list|()
operator|||
operator|!
name|event
operator|.
name|isAltDown
argument_list|()
condition|)
return|return;
name|int
name|keyCode
init|=
name|event
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
name|int
name|delta
decl_stmt|;
if|if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|VK_UP
condition|)
name|delta
operator|=
operator|-
literal|1
expr_stmt|;
if|else if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|VK_DOWN
condition|)
name|delta
operator|=
literal|1
expr_stmt|;
else|else
return|return;
name|TreePath
name|selected
init|=
name|tree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|==
literal|null
condition|)
return|return;
name|XACMLTreeNode
name|treeNode
init|=
operator|(
name|XACMLTreeNode
operator|)
name|selected
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|treeNode
operator|instanceof
name|PolicyElementNode
operator|)
condition|)
return|return;
name|PolicyElementNode
name|node
init|=
operator|(
name|PolicyElementNode
operator|)
name|treeNode
decl_stmt|;
name|PolicyElementContainer
name|parent
init|=
operator|(
name|PolicyElementContainer
operator|)
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|currentIndex
init|=
name|parent
operator|.
name|indexOfChild
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
operator|<
literal|0
condition|)
return|return;
name|currentIndex
operator|+=
name|delta
expr_stmt|;
if|if
condition|(
name|currentIndex
operator|<
literal|0
operator|||
name|currentIndex
operator|>=
name|parent
operator|.
name|getChildCount
argument_list|()
condition|)
return|return;
if|if
condition|(
name|currentIndex
operator|==
literal|0
operator|&&
operator|!
operator|(
name|parent
operator|instanceof
name|RootNode
operator|)
condition|)
return|return;
name|tree
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|parent
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|parent
operator|.
name|add
argument_list|(
name|currentIndex
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setSelectionPath
argument_list|(
name|XACMLTreeModel
operator|.
name|getPathToNode
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
block|}
comment|//PopupMenuListener methods
specifier|public
name|void
name|popupMenuCanceled
parameter_list|(
name|PopupMenuEvent
name|arg0
parameter_list|)
block|{
block|}
specifier|public
name|void
name|popupMenuWillBecomeInvisible
parameter_list|(
name|PopupMenuEvent
name|event
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|popupMenuWillBecomeVisible
parameter_list|(
name|PopupMenuEvent
name|arg0
parameter_list|)
block|{
block|}
comment|//	DragGestureListener method
specifier|public
name|void
name|dragGestureRecognized
parameter_list|(
name|DragGestureEvent
name|event
parameter_list|)
block|{
name|Point
name|location
init|=
name|event
operator|.
name|getDragOrigin
argument_list|()
decl_stmt|;
name|TreePath
name|path
init|=
name|tree
operator|.
name|getPathForLocation
argument_list|(
name|location
operator|.
name|x
argument_list|,
name|location
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
name|int
name|action
init|=
name|event
operator|.
name|getDragAction
argument_list|()
decl_stmt|;
name|XACMLTreeNode
name|transferNode
init|=
operator|(
name|XACMLTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|Cursor
name|cursor
init|=
operator|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
operator|)
condition|?
name|DragSource
operator|.
name|DefaultMoveDrop
else|:
name|DragSource
operator|.
name|DefaultCopyDrop
decl_stmt|;
name|event
operator|.
name|startDrag
argument_list|(
name|cursor
argument_list|,
operator|new
name|NodeTransferable
argument_list|(
name|transferNode
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// DropTargetListener methods
specifier|public
name|void
name|drop
parameter_list|(
name|DropTargetDropEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|acceptDrop
argument_list|(
name|event
operator|.
name|getDropAction
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|success
operator|=
name|handleDrop
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|//these exceptions should not happen:
comment|//	the flavor is checked and the returned
comment|//	data requires no IO
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ufe
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|haltTimers
argument_list|()
expr_stmt|;
name|clearDestination
argument_list|()
expr_stmt|;
name|event
operator|.
name|dropComplete
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dragOver
parameter_list|(
name|DropTargetDragEvent
name|event
parameter_list|)
block|{
name|checkDrag
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dragEnter
parameter_list|(
name|DropTargetDragEvent
name|event
parameter_list|)
block|{
name|checkDrag
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropActionChanged
parameter_list|(
name|DropTargetDragEvent
name|event
parameter_list|)
block|{
name|checkDrag
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dragExit
parameter_list|(
name|DropTargetEvent
name|event
parameter_list|)
block|{
name|haltTimers
argument_list|()
expr_stmt|;
name|clearDestination
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|haltTimers
parameter_list|()
block|{
name|scroller
operator|.
name|stop
argument_list|()
expr_stmt|;
name|expander
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkDrag
parameter_list|(
name|DropTargetDragEvent
name|event
parameter_list|)
block|{
name|XACMLTreeNode
name|oldNode
init|=
name|currentDestinationNode
decl_stmt|;
name|int
name|oldBias
init|=
name|destinationBias
decl_stmt|;
name|Point
name|location
init|=
name|event
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|updateCurrentDestination
argument_list|(
name|location
argument_list|,
name|event
operator|.
name|getDropAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|==
literal|null
condition|)
block|{
name|expander
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clearDestination
argument_list|()
expr_stmt|;
name|event
operator|.
name|rejectDrag
argument_list|()
expr_stmt|;
return|return;
block|}
name|scroller
operator|.
name|autoscroll
argument_list|(
name|tree
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationBias
operator|!=
name|BIAS_CURRENT
condition|)
name|expander
operator|.
name|stop
argument_list|()
expr_stmt|;
if|else if
condition|(
name|oldNode
operator|!=
name|currentDestinationNode
operator|||
name|destinationBias
operator|!=
name|oldBias
condition|)
name|expander
operator|.
name|hover
argument_list|(
name|currentDestinationNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsDrop
argument_list|(
name|event
argument_list|)
condition|)
name|repaintDestination
argument_list|(
name|oldNode
argument_list|,
name|oldBias
argument_list|)
expr_stmt|;
else|else
name|clearDestination
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|supportsDrop
parameter_list|(
name|DropTargetDragEvent
name|event
parameter_list|)
block|{
name|int
name|action
init|=
name|event
operator|.
name|getDropAction
argument_list|()
decl_stmt|;
name|boolean
name|supported
decl_stmt|;
name|updateCurrentDestination
argument_list|(
name|event
operator|.
name|getLocation
argument_list|()
argument_list|,
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|==
literal|null
condition|)
name|supported
operator|=
literal|false
expr_stmt|;
if|else if
condition|(
name|event
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|TARGET_FLAVOR
argument_list|)
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_COPY_OR_MOVE
operator|||
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
condition|)
name|action
operator|=
name|DnDConstants
operator|.
name|ACTION_COPY
expr_stmt|;
name|supported
operator|=
name|isTargetDropValid
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|CONDITION_FLAVOR
argument_list|)
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_COPY_OR_MOVE
operator|||
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
condition|)
name|action
operator|=
name|DnDConstants
operator|.
name|ACTION_COPY
expr_stmt|;
name|supported
operator|=
name|isConditionDropValid
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|RULE_FLAVOR
argument_list|)
condition|)
name|supported
operator|=
name|isRuleDropValid
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|else if
condition|(
name|event
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|ABSTRACT_POLICY_FLAVOR
argument_list|)
condition|)
name|supported
operator|=
name|isAbstractPolicyDropValid
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|else
name|supported
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|supported
condition|)
name|event
operator|.
name|acceptDrag
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|else
name|event
operator|.
name|rejectDrag
argument_list|()
expr_stmt|;
return|return
name|supported
return|;
block|}
specifier|private
name|boolean
name|isTargetDropValid
parameter_list|(
name|int
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|PolicyElementNode
operator|||
name|currentDestinationNode
operator|instanceof
name|TargetNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_CURRENT
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isConditionDropValid
parameter_list|(
name|int
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|ConditionNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_CURRENT
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|RuleNode
operator|||
name|currentDestinationNode
operator|instanceof
name|ConditionNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_CURRENT
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isRuleDropValid
parameter_list|(
name|int
name|action
parameter_list|)
block|{
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|PolicyNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_CURRENT
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|RuleNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_AFTER
operator|||
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_BEFORE
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|TargetNode
operator|&&
name|currentDestinationNode
operator|.
name|getParent
argument_list|()
operator|instanceof
name|PolicyNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_AFTER
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isAbstractPolicyDropValid
parameter_list|(
name|int
name|action
parameter_list|)
block|{
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|PolicySetNode
operator|||
name|currentDestinationNode
operator|instanceof
name|RootNode
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|PolicyNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_AFTER
operator|||
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_BEFORE
return|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|TargetNode
operator|&&
name|currentDestinationNode
operator|.
name|getParent
argument_list|()
operator|instanceof
name|PolicySetNode
condition|)
return|return
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_AFTER
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isPolicyElementDropValid
parameter_list|(
name|int
name|action
parameter_list|,
name|PolicyElementNode
name|srcNode
parameter_list|)
block|{
if|if
condition|(
name|srcNode
operator|instanceof
name|RuleNode
condition|)
return|return
name|isRuleDropValid
argument_list|(
name|action
argument_list|)
return|;
if|else if
condition|(
name|srcNode
operator|instanceof
name|AbstractPolicyNode
condition|)
return|return
name|isAbstractPolicyDropValid
argument_list|(
name|action
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|handleDrop
parameter_list|(
name|DropTargetDropEvent
name|event
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFlavorException
block|{
name|Transferable
name|data
init|=
name|event
operator|.
name|getTransferable
argument_list|()
decl_stmt|;
name|int
name|action
init|=
name|event
operator|.
name|getDropAction
argument_list|()
decl_stmt|;
name|updateCurrentDestination
argument_list|(
name|event
operator|.
name|getLocation
argument_list|()
argument_list|,
name|event
operator|.
name|getDropAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|data
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|TARGET_FLAVOR
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isTargetDropValid
argument_list|(
name|action
argument_list|)
condition|)
return|return
literal|false
return|;
name|TargetNode
name|destTarget
decl_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|PolicyElementNode
condition|)
name|destTarget
operator|=
operator|(
operator|(
name|PolicyElementNode
operator|)
name|currentDestinationNode
operator|)
operator|.
name|getTarget
argument_list|()
expr_stmt|;
if|else if
condition|(
name|currentDestinationNode
operator|instanceof
name|TargetNode
condition|)
name|destTarget
operator|=
operator|(
name|TargetNode
operator|)
name|currentDestinationNode
expr_stmt|;
else|else
return|return
literal|false
return|;
name|TargetNode
name|source
init|=
operator|(
name|TargetNode
operator|)
name|data
operator|.
name|getTransferData
argument_list|(
name|NodeTransferable
operator|.
name|TARGET_FLAVOR
argument_list|)
decl_stmt|;
name|destTarget
operator|.
name|setTarget
argument_list|(
name|source
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|data
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|CONDITION_FLAVOR
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isConditionDropValid
argument_list|(
name|action
argument_list|)
condition|)
return|return
literal|false
return|;
name|ConditionNode
name|destCondition
decl_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|instanceof
name|RuleNode
condition|)
name|destCondition
operator|=
operator|(
operator|(
name|RuleNode
operator|)
name|currentDestinationNode
operator|)
operator|.
name|getCondition
argument_list|()
expr_stmt|;
if|else if
condition|(
name|currentDestinationNode
operator|instanceof
name|ConditionNode
condition|)
name|destCondition
operator|=
operator|(
name|ConditionNode
operator|)
name|currentDestinationNode
expr_stmt|;
else|else
return|return
literal|false
return|;
name|ConditionNode
name|source
init|=
operator|(
name|ConditionNode
operator|)
name|data
operator|.
name|getTransferData
argument_list|(
name|NodeTransferable
operator|.
name|CONDITION_FLAVOR
argument_list|)
decl_stmt|;
name|destCondition
operator|.
name|setCondition
argument_list|(
name|source
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|data
operator|.
name|isDataFlavorSupported
argument_list|(
name|NodeTransferable
operator|.
name|POLICY_ELEMENT_FLAVOR
argument_list|)
condition|)
block|{
name|PolicyElementNode
name|srcNode
init|=
operator|(
name|PolicyElementNode
operator|)
name|data
operator|.
name|getTransferData
argument_list|(
name|NodeTransferable
operator|.
name|POLICY_ELEMENT_FLAVOR
argument_list|)
decl_stmt|;
name|PolicyElementContainer
name|oldParent
init|=
operator|(
name|PolicyElementContainer
operator|)
name|srcNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPolicyElementDropValid
argument_list|(
name|action
argument_list|,
name|srcNode
argument_list|)
condition|)
return|return
literal|false
return|;
name|PolicyElementContainer
name|newParent
decl_stmt|;
if|if
condition|(
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_CURRENT
condition|)
name|newParent
operator|=
operator|(
name|PolicyElementContainer
operator|)
name|currentDestinationNode
expr_stmt|;
else|else
name|newParent
operator|=
operator|(
name|PolicyElementContainer
operator|)
name|currentDestinationNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDescendantOrSelf
argument_list|(
name|srcNode
argument_list|,
name|newParent
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
condition|)
block|{
if|if
condition|(
name|oldParent
operator|!=
literal|null
condition|)
name|oldParent
operator|.
name|remove
argument_list|(
name|srcNode
argument_list|)
expr_stmt|;
block|}
name|int
name|insertionIndex
init|=
name|newParent
operator|.
name|indexOfChild
argument_list|(
name|currentDestinationNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertionIndex
operator|<
literal|0
condition|)
name|insertionIndex
operator|=
name|newParent
operator|.
name|getChildCount
argument_list|()
expr_stmt|;
if|else if
condition|(
name|destinationBias
operator|==
name|TreeMutator
operator|.
name|BIAS_AFTER
condition|)
name|insertionIndex
operator|++
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|DnDConstants
operator|.
name|ACTION_MOVE
operator|&&
name|oldParent
operator|==
name|newParent
condition|)
name|newParent
operator|.
name|add
argument_list|(
name|insertionIndex
argument_list|,
name|srcNode
argument_list|)
expr_stmt|;
else|else
block|{
name|PolicyTreeElement
name|copy
decl_stmt|;
name|String
name|currentId
init|=
name|srcNode
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|newParent
operator|.
name|containsId
argument_list|(
name|currentId
argument_list|)
condition|)
name|copy
operator|=
name|srcNode
operator|.
name|create
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|XACMLEditor
operator|.
name|createUniqueId
argument_list|(
name|newParent
argument_list|,
name|currentId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|copy
operator|=
name|srcNode
operator|.
name|create
argument_list|()
expr_stmt|;
name|newParent
operator|.
name|add
argument_list|(
name|insertionIndex
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isDescendantOrSelf
parameter_list|(
name|PolicyElementNode
name|srcNode
parameter_list|,
name|PolicyElementContainer
name|newParent
parameter_list|)
block|{
name|TreePath
name|srcPath
init|=
name|XACMLTreeModel
operator|.
name|getPathToNode
argument_list|(
name|srcNode
argument_list|)
decl_stmt|;
name|TreePath
name|newParentPath
init|=
name|XACMLTreeModel
operator|.
name|getPathToNode
argument_list|(
name|newParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcPath
operator|==
literal|null
operator|||
name|newParentPath
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|srcNode
operator|==
name|newParent
operator|||
name|srcPath
operator|.
name|isDescendant
argument_list|(
name|newParentPath
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateCurrentDestination
parameter_list|(
name|Point
name|location
parameter_list|,
name|int
name|dropAction
parameter_list|)
block|{
name|TreePath
name|currentPath
init|=
name|tree
operator|.
name|getClosestPathForLocation
argument_list|(
name|location
operator|.
name|x
argument_list|,
name|location
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPath
operator|==
literal|null
condition|)
block|{
name|currentDestinationNode
operator|=
literal|null
expr_stmt|;
name|destinationBias
operator|=
name|BIAS_NO_DESTINATION
expr_stmt|;
return|return;
block|}
name|currentDestinationNode
operator|=
operator|(
name|XACMLTreeNode
operator|)
name|currentPath
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
name|int
name|row
init|=
name|tree
operator|.
name|getRowForPath
argument_list|(
name|currentPath
argument_list|)
decl_stmt|;
name|Rectangle
name|bounds
init|=
name|tree
operator|.
name|getRowBounds
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|y
operator|>
name|location
operator|.
name|y
operator|||
name|location
operator|.
name|y
operator|<
name|BIAS_DELTA_Y
condition|)
name|destinationBias
operator|=
name|BIAS_BEFORE
expr_stmt|;
if|else if
condition|(
name|bounds
operator|.
name|y
operator|+
name|bounds
operator|.
name|height
operator|<=
name|location
operator|.
name|y
condition|)
name|destinationBias
operator|=
name|BIAS_AFTER
expr_stmt|;
else|else
block|{
if|if
condition|(
name|isDestinationDifferent
argument_list|(
name|tree
operator|.
name|getClosestPathForLocation
argument_list|(
name|location
operator|.
name|x
argument_list|,
name|location
operator|.
name|y
operator|-
name|BIAS_DELTA_Y
argument_list|)
argument_list|)
condition|)
name|destinationBias
operator|=
name|BIAS_BEFORE
expr_stmt|;
if|else if
condition|(
name|isDestinationDifferent
argument_list|(
name|tree
operator|.
name|getClosestPathForLocation
argument_list|(
name|location
operator|.
name|x
argument_list|,
name|location
operator|.
name|y
operator|+
name|BIAS_DELTA_Y
argument_list|)
argument_list|)
condition|)
name|destinationBias
operator|=
name|BIAS_AFTER
expr_stmt|;
else|else
name|destinationBias
operator|=
name|BIAS_CURRENT
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isDestinationDifferent
parameter_list|(
name|TreePath
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
operator|(
name|currentDestinationNode
operator|!=
literal|null
operator|)
else|:
operator|(
name|currentDestinationNode
operator|!=
name|path
operator|.
name|getLastPathComponent
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getDestinationBias
parameter_list|(
name|XACMLTreeNode
name|testNode
parameter_list|)
block|{
return|return
operator|(
name|currentDestinationNode
operator|==
literal|null
operator|||
name|destinationBias
operator|==
name|BIAS_NO_DESTINATION
operator|||
name|currentDestinationNode
operator|!=
name|testNode
operator|)
condition|?
name|BIAS_NO_DESTINATION
else|:
name|destinationBias
return|;
block|}
specifier|private
name|void
name|clearDestination
parameter_list|()
block|{
name|XACMLTreeNode
name|oldNode
init|=
name|currentDestinationNode
decl_stmt|;
name|int
name|oldBias
init|=
name|destinationBias
decl_stmt|;
name|currentDestinationNode
operator|=
literal|null
expr_stmt|;
name|destinationBias
operator|=
name|BIAS_NO_DESTINATION
expr_stmt|;
name|repaintDestination
argument_list|(
name|oldNode
argument_list|,
name|oldBias
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|repaintDestination
parameter_list|(
name|XACMLTreeNode
name|oldNode
parameter_list|,
name|int
name|oldBias
parameter_list|)
block|{
if|if
condition|(
name|oldNode
operator|!=
literal|null
operator|&&
name|oldBias
operator|!=
name|BIAS_NO_DESTINATION
condition|)
name|handleRepaintDestination
argument_list|(
name|oldNode
argument_list|,
name|oldBias
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDestinationNode
operator|!=
literal|null
operator|&&
name|destinationBias
operator|!=
name|BIAS_NO_DESTINATION
condition|)
name|handleRepaintDestination
argument_list|(
name|currentDestinationNode
argument_list|,
name|destinationBias
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleRepaintDestination
parameter_list|(
name|XACMLTreeNode
name|node
parameter_list|,
name|int
name|bias
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
operator|||
name|bias
operator|==
name|BIAS_NO_DESTINATION
condition|)
return|return;
name|int
name|row
init|=
name|tree
operator|.
name|getRowForPath
argument_list|(
name|XACMLTreeModel
operator|.
name|getPathToNode
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
name|repaintRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|bias
operator|==
name|BIAS_AFTER
condition|)
block|{
if|if
condition|(
name|row
operator|+
literal|1
operator|<
name|tree
operator|.
name|getRowCount
argument_list|()
condition|)
name|repaintRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bias
operator|==
name|BIAS_BEFORE
condition|)
block|{
if|if
condition|(
name|row
operator|>
literal|0
condition|)
name|repaintRow
argument_list|(
name|row
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|repaintRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Rectangle
name|rect
init|=
name|tree
operator|.
name|getRowBounds
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|!=
literal|null
condition|)
name|tree
operator|.
name|repaint
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
comment|//DragSourceListener methods
specifier|public
name|void
name|dropActionChanged
parameter_list|(
name|DragSourceDragEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragEnter
parameter_list|(
name|DragSourceDragEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragOver
parameter_list|(
name|DragSourceDragEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragDropEnd
parameter_list|(
name|DragSourceDropEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragExit
parameter_list|(
name|DragSourceEvent
name|event
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

