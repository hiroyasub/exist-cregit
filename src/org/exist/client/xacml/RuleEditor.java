begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|Result
import|;
end_import

begin_class
specifier|public
class|class
name|RuleEditor
extends|extends
name|PolicyElementEditor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PERMIT
init|=
literal|"Permit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DENY
init|=
literal|"Deny"
decl_stmt|;
specifier|public
name|RuleEditor
parameter_list|()
block|{
block|}
specifier|protected
name|String
name|getComboLabel
parameter_list|()
block|{
return|return
literal|"Rule Effect:"
return|;
block|}
specifier|protected
name|ComboBoxModel
name|getComboModel
parameter_list|()
block|{
specifier|final
name|DefaultComboBoxModel
name|model
init|=
operator|new
name|DefaultComboBoxModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|addElement
argument_list|(
name|PERMIT
argument_list|)
expr_stmt|;
name|model
operator|.
name|addElement
argument_list|(
name|DENY
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|protected
name|Object
name|getComboPrototype
parameter_list|()
block|{
return|return
name|PERMIT
return|;
block|}
specifier|public
name|int
name|getEffect
parameter_list|()
block|{
specifier|final
name|String
name|effect
init|=
operator|(
name|String
operator|)
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|DENY
operator|.
name|equals
argument_list|(
name|effect
argument_list|)
condition|)
block|{
return|return
name|Result
operator|.
name|DECISION_DENY
return|;
block|}
if|if
condition|(
name|PERMIT
operator|.
name|equals
argument_list|(
name|effect
argument_list|)
condition|)
block|{
return|return
name|Result
operator|.
name|DECISION_PERMIT
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid effect: '"
operator|+
name|effect
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setNode
parameter_list|(
name|XACMLTreeNode
name|treeNode
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|treeNode
operator|instanceof
name|RuleNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"RuleEditor can only edit RuleNodes"
argument_list|)
throw|;
block|}
specifier|final
name|RuleNode
name|node
init|=
operator|(
name|RuleNode
operator|)
name|treeNode
decl_stmt|;
name|super
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|int
name|effect
init|=
name|node
operator|.
name|getEffect
argument_list|()
decl_stmt|;
if|if
condition|(
name|effect
operator|==
name|Result
operator|.
name|DECISION_DENY
condition|)
block|{
name|setSelectedItem
argument_list|(
name|DENY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|effect
operator|==
name|Result
operator|.
name|DECISION_PERMIT
condition|)
block|{
name|setSelectedItem
argument_list|(
name|PERMIT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown effect for rule '"
operator|+
name|getId
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|pushChanges
parameter_list|()
block|{
name|super
operator|.
name|pushChanges
argument_list|()
expr_stmt|;
specifier|final
name|int
name|effect
init|=
name|getEffect
argument_list|()
decl_stmt|;
operator|(
operator|(
name|RuleNode
operator|)
name|node
operator|)
operator|.
name|setEffect
argument_list|(
name|effect
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

