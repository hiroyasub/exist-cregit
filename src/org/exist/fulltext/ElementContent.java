begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fulltext
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ElementContent
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ElementContent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|TextSpan
block|{
name|XMLString
name|content
decl_stmt|;
name|TextSpan
name|next
init|=
literal|null
decl_stmt|;
name|TextSpan
parameter_list|(
name|XMLString
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
operator|new
name|XMLString
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XMLString
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
specifier|public
name|TextSpan
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
block|}
specifier|private
name|QName
name|nodeName
decl_stmt|;
specifier|private
name|boolean
name|mixedContent
decl_stmt|;
specifier|private
name|TextSpan
name|first
init|=
literal|null
decl_stmt|;
specifier|private
name|TextSpan
name|last
init|=
literal|null
decl_stmt|;
specifier|public
name|ElementContent
parameter_list|(
name|QName
name|nodeName
parameter_list|,
name|boolean
name|mixedContent
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|mixedContent
operator|=
name|mixedContent
expr_stmt|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|XMLString
name|string
parameter_list|)
block|{
if|if
condition|(
name|mixedContent
condition|)
block|{
name|appendString
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendSpan
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|appendSpan
parameter_list|(
name|XMLString
name|string
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
operator|new
name|TextSpan
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|last
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|TextSpan
name|span
init|=
operator|new
name|TextSpan
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|last
operator|.
name|next
operator|=
name|span
expr_stmt|;
name|last
operator|=
name|span
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|appendString
parameter_list|(
name|XMLString
name|string
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
operator|new
name|TextSpan
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|last
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|content
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|QName
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
specifier|public
name|void
name|setMixedContent
parameter_list|(
name|boolean
name|mixedContent
parameter_list|)
block|{
name|this
operator|.
name|mixedContent
operator|=
name|mixedContent
expr_stmt|;
block|}
specifier|public
name|TextSpan
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|TextSpan
name|span
init|=
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|span
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
name|span
operator|=
name|span
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

