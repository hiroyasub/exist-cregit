begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fulltext
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * A legacy IndexWorker which wraps around {@link org.exist.storage.NativeTextEngine}. Right  * now, the fulltext index has only partly been moved into the new modularized indexing architecture  * and we thus need some glue classes to keep the old and new parts together. This class will become  * part of the new fulltext indexing module.  */
end_comment

begin_class
specifier|public
class|class
name|FTIndexWorker
implements|implements
name|OrderedValuesIndex
implements|,
name|QNamedKeysIndex
block|{
specifier|public
specifier|final
specifier|static
name|String
name|ID
init|=
name|FTIndexWorker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|NativeTextEngine
name|index
decl_stmt|;
specifier|private
name|DocumentImpl
name|document
decl_stmt|;
specifier|private
name|FulltextIndexSpec
name|config
decl_stmt|;
specifier|private
name|int
name|mode
init|=
name|StreamListener
operator|.
name|UNKNOWN
decl_stmt|;
specifier|private
name|FTStreamListener
name|listener
init|=
operator|new
name|FTStreamListener
argument_list|()
decl_stmt|;
specifier|public
name|FTIndexWorker
parameter_list|(
name|NativeTextEngine
name|engine
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|engine
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"ft-index-old"
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// Not implemented
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|setDocument
argument_list|(
name|doc
argument_list|,
name|StreamListener
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|newMode
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
name|mode
operator|=
name|newMode
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|document
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
name|indexConf
operator|.
name|getFulltextIndexSpec
argument_list|()
expr_stmt|;
name|index
operator|.
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|newMode
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|newMode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
return|return
literal|null
return|;
name|IndexSpec
name|indexConf
init|=
name|node
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
block|{
name|FulltextIndexSpec
name|config
init|=
name|indexConf
operator|.
name|getFulltextIndexSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
name|int
name|len
init|=
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|!
name|includeSelf
condition|?
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qn
init|=
name|path
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|hasQNameIndex
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|StoredNode
name|topMost
init|=
literal|null
decl_stmt|;
name|StoredNode
name|currentNode
init|=
name|node
decl_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|hasQNameIndex
argument_list|(
name|currentNode
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
name|topMost
operator|=
name|currentNode
expr_stmt|;
name|currentNode
operator|=
operator|(
name|StoredNode
operator|)
name|currentNode
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
comment|// Not implemented
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|index
operator|.
name|flush
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|index
operator|.
name|dropIndex
argument_list|(
name|document
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|index
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|index
operator|.
name|dropIndex
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
comment|// Not implemented
return|return
literal|false
return|;
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
comment|// Not implemented
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
block|}
specifier|private
class|class
name|FTStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|private
name|Stack
name|contentStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|public
name|FTStreamListener
parameter_list|()
block|{
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|boolean
name|mixedContent
init|=
name|config
operator|.
name|matchMixedElement
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixedContent
operator|||
name|config
operator|.
name|hasQNameIndex
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|ElementContent
name|contentBuf
init|=
operator|new
name|ElementContent
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|mixedContent
operator|||
name|config
operator|.
name|preserveMixedContent
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|boolean
name|mixedContent
init|=
name|config
operator|.
name|matchMixedElement
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixedContent
operator|||
name|config
operator|.
name|hasQNameIndex
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|ElementContent
name|contentBuf
init|=
operator|(
name|ElementContent
operator|)
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|setNameType
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|index
operator|.
name|storeText
argument_list|(
name|element
argument_list|,
name|contentBuf
argument_list|,
name|mixedContent
condition|?
name|NativeTextEngine
operator|.
name|FOURTH_OPTION
else|:
name|NativeTextEngine
operator|.
name|TEXT_BY_QNAME
argument_list|,
literal|null
argument_list|,
name|mode
operator|==
name|REMOVE_ALL_NODES
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**          *          * @param transaction          * @param text          * @param path          */
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|index
operator|.
name|storeText
argument_list|(
name|text
argument_list|,
name|NativeTextEngine
operator|.
name|TOKENIZE
argument_list|,
name|config
argument_list|,
name|mode
operator|==
name|REMOVE_ALL_NODES
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|config
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|int
name|tokenize
init|=
name|config
operator|.
name|preserveContent
argument_list|(
name|path
argument_list|)
condition|?
name|NativeTextEngine
operator|.
name|DO_NOT_TOKENIZE
else|:
name|NativeTextEngine
operator|.
name|TOKENIZE
decl_stmt|;
name|index
operator|.
name|storeText
argument_list|(
name|text
argument_list|,
name|tokenize
argument_list|,
name|config
argument_list|,
name|mode
operator|==
name|REMOVE_ALL_NODES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ElementContent
name|next
init|=
operator|(
name|ElementContent
operator|)
name|contentStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|path
operator|.
name|addComponent
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
operator|||
name|config
operator|.
name|matchAttribute
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|index
operator|.
name|storeAttribute
argument_list|(
name|attrib
argument_list|,
literal|null
argument_list|,
name|NativeTextEngine
operator|.
name|ATTRIBUTE_NOT_BY_QNAME
argument_list|,
name|config
argument_list|,
name|mode
operator|==
name|REMOVE_ALL_NODES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|hasQNameIndex
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|index
operator|.
name|storeAttribute
argument_list|(
name|attrib
argument_list|,
literal|null
argument_list|,
name|NativeTextEngine
operator|.
name|ATTRIBUTE_BY_QNAME
argument_list|,
name|config
argument_list|,
name|mode
operator|==
name|REMOVE_ALL_NODES
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|FTIndexWorker
operator|.
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

