begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fulltext
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractMatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.exist.indexing.MatchListener} for the fulltext index.  * Right now, the serializer will directly plug this into the listener pipeline. This will  * change once we move the fulltext index into its own module.  */
end_comment

begin_class
specifier|public
class|class
name|FTMatchListener
extends|extends
name|AbstractMatchListener
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FTMatchListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Match
name|match
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
name|offsetStack
init|=
literal|null
decl_stmt|;
specifier|public
name|FTMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|reset
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMatches
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Match
name|nextMatch
init|=
name|proxy
operator|.
name|getMatches
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getIndexId
argument_list|()
operator|==
name|FTIndex
operator|.
name|ID
condition|)
block|{
return|return
literal|true
return|;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|reset
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|proxy
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|setNextInChain
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|/* Check if an index is defined on an ancestor of the current node.         * If yes, scan the ancestor to get the offset of the first character         * in the current node. For example, if the indexed node is&lt;a>abc&lt;b>de&lt;/b></a>         * and we query for //a[text:ngram-contains(., 'de')]/b, proxy will be a&lt;b> node, but         * the offsets of the matches are relative to the start of&lt;a>.         */
name|NodeSet
name|ancestors
init|=
literal|null
decl_stmt|;
name|Match
name|nextMatch
init|=
name|this
operator|.
name|match
decl_stmt|;
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ancestors
operator|==
literal|null
condition|)
block|{
name|ancestors
operator|=
operator|new
name|ExtArrayNodeSet
argument_list|()
expr_stmt|;
block|}
name|ancestors
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|,
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ancestors
operator|!=
literal|null
operator|&&
operator|!
name|ancestors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|ancestors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|startOffset
init|=
literal|0
decl_stmt|;
try|try
block|{
specifier|final
name|XMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|int
name|ev
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|ExtendedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|ev
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
name|startOffset
operator|+=
name|reader
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while serializing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while serializing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offsetStack
operator|==
literal|null
condition|)
block|{
name|offsetStack
operator|=
operator|new
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|offsetStack
operator|.
name|push
argument_list|(
operator|new
name|NodeOffset
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|startOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|AttrList
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
name|Match
name|nextMatch
init|=
name|match
decl_stmt|;
comment|// check if there are any matches in the current element
comment|// if yes, push a NodeOffset object to the stack to track
comment|// the node contents
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCurrentNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetStack
operator|==
literal|null
condition|)
block|{
name|offsetStack
operator|=
operator|new
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|offsetStack
operator|.
name|push
argument_list|(
operator|new
name|NodeOffset
argument_list|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
name|Match
name|nextMatch
init|=
name|match
decl_stmt|;
comment|// check if we need to pop the stack
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCurrentNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|offsetStack
operator|.
name|pop
argument_list|()
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
throws|throws
name|SAXException
block|{
name|List
argument_list|<
name|Match
operator|.
name|Offset
argument_list|>
name|offsets
init|=
literal|null
decl_stmt|;
comment|// a list of offsets to process
if|if
condition|(
name|offsetStack
operator|!=
literal|null
condition|)
block|{
comment|// walk through the stack to find matches which start in
comment|// the current string of text
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsetStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeOffset
name|no
init|=
name|offsetStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|no
operator|.
name|offset
operator|+
name|seq
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// scan all matches
name|Match
name|next
init|=
name|match
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getIndexId
argument_list|()
operator|==
name|FTIndex
operator|.
name|ID
operator|&&
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|no
operator|.
name|nodeId
argument_list|)
condition|)
block|{
specifier|final
name|int
name|freq
init|=
name|next
operator|.
name|getFrequency
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|freq
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Match
operator|.
name|Offset
name|offset
init|=
name|next
operator|.
name|getOffset
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|<
name|end
operator|&&
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
operator|>
name|no
operator|.
name|offset
condition|)
block|{
comment|// add it to the list to be processed
if|if
condition|(
name|offsets
operator|==
literal|null
condition|)
block|{
name|offsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Match
operator|.
name|Offset
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// adjust the offset and add it to the list
name|int
name|start
init|=
name|offset
operator|.
name|getOffset
argument_list|()
operator|-
name|no
operator|.
name|offset
decl_stmt|;
name|int
name|len
init|=
name|offset
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|len
operator|=
name|len
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|+
name|len
operator|>
name|seq
operator|.
name|length
argument_list|()
condition|)
block|{
name|len
operator|=
name|seq
operator|.
name|length
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
name|offsets
operator|.
name|add
argument_list|(
operator|new
name|Match
operator|.
name|Offset
argument_list|(
name|start
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|next
operator|=
name|next
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
comment|// add the length of the current text to the element content length
name|no
operator|.
name|offset
operator|=
name|end
expr_stmt|;
block|}
block|}
comment|// walk through the matches a second time to find matches in the text node itself
name|Match
name|next
init|=
name|match
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getIndexId
argument_list|()
operator|==
name|FTIndex
operator|.
name|ID
operator|&&
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCurrentNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsets
operator|==
literal|null
condition|)
block|{
name|offsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Match
operator|.
name|Offset
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|freq
init|=
name|next
operator|.
name|getFrequency
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|offsets
operator|.
name|add
argument_list|(
name|next
operator|.
name|getOffset
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|next
operator|=
name|next
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
comment|// now print out the text, marking all matches with a match element
if|if
condition|(
name|offsets
operator|!=
literal|null
condition|)
block|{
name|FastQSort
operator|.
name|sort
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|offsets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|seq
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Match
operator|.
name|Offset
name|offset
init|=
name|offsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|>
name|pos
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
operator|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|-
name|pos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|MATCH_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|offset
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|MATCH_ELEMENT
argument_list|)
expr_stmt|;
name|pos
operator|=
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|characters
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|NodeOffset
block|{
name|NodeId
name|nodeId
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|NodeOffset
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
specifier|public
name|NodeOffset
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

