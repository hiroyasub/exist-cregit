begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|ACEAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|FunctionE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbCollectionFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbDocumentFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Local Implementation (i.e. embedded) of an eXist-specific service  * which provides methods to manage users and  * permissions.  *  * @author Wolfgang Meier<meier@ifs.tu-darmstadt.de>  * @author Modified by {Marco.Tampucci, Massimo.Martinelli} @isti.cnr.it  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|LocalUserManagementService
extends|extends
name|AbstractLocalService
implements|implements
name|EXistUserManagementService
block|{
specifier|public
name|LocalUserManagementService
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|LocalCollection
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|,
name|pool
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UserManagementService"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAccount
parameter_list|(
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|onlyAsAdmin
argument_list|(
name|user
argument_list|)
operator|.
name|apply
argument_list|(
name|manager
lambda|->
block|{
if|if
condition|(
name|manager
operator|.
name|hasAccount
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"user "
operator|+
name|u
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|addAccount
argument_list|(
name|u
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|onlyAsAdmin
argument_list|(
name|user
argument_list|)
operator|.
name|apply
argument_list|(
name|manager
lambda|->
block|{
if|if
condition|(
name|manager
operator|.
name|hasGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"group '"
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|"' already exists"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
name|group
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUserPrimaryGroup
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|onlyAsAdmin
argument_list|(
name|user
argument_list|)
operator|.
name|apply
argument_list|(
name|manager
lambda|->
block|{
if|if
condition|(
operator|!
name|manager
operator|.
name|hasGroup
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"Group '"
operator|+
name|groupName
operator|+
literal|"' does not exist!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Account
name|account
init|=
name|manager
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|manager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|account
operator|.
name|setPrimaryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|manager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
return|;
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|Permission
name|perm
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|,
name|getAces
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Collection
name|child
parameter_list|,
specifier|final
name|Permission
name|perm
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|childUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|updateCollection
argument_list|(
name|childUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|,
name|getAces
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Collection
name|child
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|childUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|updateCollection
argument_list|(
name|childUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|owner
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|aces
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|getAces
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|maybeAces
decl_stmt|;
if|if
condition|(
name|permission
operator|!=
literal|null
operator|&&
name|permission
operator|instanceof
name|ACLPermission
condition|)
block|{
specifier|final
name|ACLPermission
name|aclPerm
init|=
operator|(
name|ACLPermission
operator|)
name|permission
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aclPerm
operator|.
name|getACECount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclPerm
operator|.
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|aces
operator|.
name|add
argument_list|(
operator|new
name|ACEAider
argument_list|(
name|aclPerm
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPerm
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPerm
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPerm
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|maybeAces
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|aces
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maybeAces
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
return|return
name|maybeAces
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|owner
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|aces
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chmod
parameter_list|(
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
name|updateCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chmod_str
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|modeStr
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chmod
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chmod
parameter_list|(
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
name|updateCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chmod
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chmod_str
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|modeStr
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chgrp
parameter_list|(
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
name|updateCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chown
parameter_list|(
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
name|updateCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|u
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|::
name|getName
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chown
parameter_list|(
specifier|final
name|Account
name|u
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
name|updateCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|u
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|::
name|getName
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chgrp
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chown
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|u
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|::
name|getName
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|chown
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|Account
name|u
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|u
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|::
name|getName
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|hasUserLock
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|resource
operator|)
operator|.
operator|<
name|String
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
block|{
name|final
name|Account
name|lockOwner
operator|=
name|document
operator|.
name|getUserLock
argument_list|()
argument_list|;             return
name|lockOwner
operator|==
literal|null
condition|?
literal|null
else|:
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|} 	     @
name|Override
specifier|public
name|void
name|lockResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|String
name|resourceId
init|=
name|resource
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|resourceId
argument_list|)
throw|;
block|}
specifier|final
name|SecurityManager
name|manager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|user
operator|.
name|equals
argument_list|(
name|u
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" is not allowed to lock resource '"
operator|+
name|resourceId
operator|+
literal|"' for user "
operator|+
name|u
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Account
name|lockOwner
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lockOwner
operator|.
name|equals
argument_list|(
name|u
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource '"
operator|+
name|resourceId
operator|+
literal|"' is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|document
operator|.
name|setUserLock
argument_list|(
name|u
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|unlockResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
name|resource
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|String
name|resourceId
init|=
name|resource
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource '"
operator|+
name|resourceId
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|final
name|Account
name|lockOwner
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|manager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|lockOwner
operator|.
name|equals
argument_list|(
name|user
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource '"
operator|+
name|resourceId
operator|+
literal|"' is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|document
operator|.
name|setUserLock
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
name|getPermissions
parameter_list|(
specifier|final
name|Collection
name|coll
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|coll
operator|instanceof
name|LocalCollection
condition|)
block|{
return|return
name|this
operator|.
expr|<
name|Permission
operator|>
name|read
argument_list|(
operator|(
operator|(
name|LocalCollection
operator|)
name|coll
operator|)
operator|.
name|getPathURI
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
name|getSubCollectionPermissions
parameter_list|(
specifier|final
name|Collection
name|parent
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|parent
operator|instanceof
name|LocalCollection
condition|)
block|{
return|return
name|this
operator|.
expr|<
name|Permission
operator|>
name|read
argument_list|(
operator|(
operator|(
name|LocalCollection
operator|)
name|parent
operator|)
operator|.
name|getPathURI
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getChildCollectionEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getPermissions
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
name|getSubResourcePermissions
parameter_list|(
specifier|final
name|Collection
name|parent
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|parent
operator|instanceof
name|LocalCollection
condition|)
block|{
return|return
name|this
operator|.
expr|<
name|Permission
operator|>
name|read
argument_list|(
operator|(
operator|(
name|LocalCollection
operator|)
name|parent
operator|)
operator|.
name|getPathURI
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getResourceEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getPermissions
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Date
name|getSubCollectionCreationTime
parameter_list|(
specifier|final
name|Collection
name|parent
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|parent
operator|instanceof
name|LocalCollection
condition|)
block|{
return|return
name|this
operator|.
expr|<
name|Date
operator|>
name|read
argument_list|(
operator|(
operator|(
name|LocalCollection
operator|)
name|parent
operator|)
operator|.
name|getPathURI
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|Date
argument_list|(
name|collection
operator|.
name|getChildCollectionEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
name|getPermissions
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|resource
operator|)
operator|.
operator|<
name|Permission
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
index|[]
name|listResourcePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Permission
index|[]
operator|>
name|read
argument_list|(
name|collectionUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
return|return
operator|new
name|Permission
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|Permission
name|perms
index|[]
init|=
operator|new
name|Permission
index|[
name|collection
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|itDocument
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itDocument
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DocumentImpl
name|document
init|=
name|itDocument
operator|.
name|next
argument_list|()
decl_stmt|;
name|perms
index|[
name|i
operator|++
index|]
operator|=
name|document
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Permission
index|[]
name|listCollectionPermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|collection
operator|.
name|getPathURI
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Permission
index|[]
operator|>
name|read
argument_list|(
name|collectionUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
return|return
operator|new
name|Permission
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|Permission
name|perms
index|[]
init|=
operator|new
name|Permission
index|[
name|collection
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|itChildCollectionUri
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itChildCollectionUri
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|XmldbURI
name|childCollectionUri
init|=
name|collectionUri
operator|.
name|append
argument_list|(
name|itChildCollectionUri
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|childPermission
init|=
name|this
operator|.
expr|<
name|Permission
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|childCollectionUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|childCollection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|childCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
decl_stmt|;
name|perms
index|[
name|i
operator|++
index|]
operator|=
name|childPermission
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Account
name|getAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|sm
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Account
index|[]
name|getAccounts
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|sm
operator|.
name|getUsers
argument_list|()
decl_stmt|;
return|return
name|users
operator|.
name|toArray
argument_list|(
operator|new
name|Account
index|[
name|users
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Group
name|getGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|sm
operator|.
name|getGroup
argument_list|(
name|name
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getGroups
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|sm
operator|.
name|getGroups
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|groupNames
init|=
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|group
range|:
name|groups
control|)
block|{
name|groupNames
index|[
name|i
operator|++
index|]
operator|=
name|group
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|groupNames
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeAccount
parameter_list|(
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|onlyAsAdmin
argument_list|(
name|user
argument_list|)
operator|.
name|apply
argument_list|(
name|manager
lambda|->
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|manager
operator|.
name|deleteAccount
argument_list|(
name|u
argument_list|)
argument_list|;             return
literal|null
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|removeGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|sm
operator|.
name|deleteGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|updateAccount
parameter_list|(
specifier|final
name|Account
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|u
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|updateGroup
parameter_list|(
specifier|final
name|Group
name|g
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getGroupMembers
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupMembers
init|=
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|sm
operator|.
name|findAllGroupMembers
argument_list|(
name|groupName
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
return|return
name|groupMembers
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|groupMembers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addAccountToGroup
parameter_list|(
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
name|account
operator|.
name|addGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addGroupManager
parameter_list|(
specifier|final
name|String
name|manager
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|manager
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|addManager
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeGroupManager
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|,
specifier|final
name|String
name|manager
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|group
operator|.
name|removeManager
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addUserGroup
parameter_list|(
specifier|final
name|Account
name|user
parameter_list|)
throws|throws
name|XMLDBException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeGroupMember
parameter_list|(
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|String
name|member
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|account
operator|.
name|remGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addUser
parameter_list|(
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|UserAider
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|addAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|updateUser
parameter_list|(
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|UserAider
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
name|user
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: groups
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|User
name|getUser
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getAccount
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|User
index|[]
name|getUsers
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeUser
parameter_list|(
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|// TODO Auto-generated method stub
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|lockResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|,
specifier|final
name|User
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|UserAider
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|lockResource
argument_list|(
name|res
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
end_function

begin_comment
comment|/**      * Executes a LocalXmldbFunction only if the supplied user is an Admin user      *      * @param user A user to be tested as an admin user      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|FunctionE
argument_list|<
name|SecurityManager
argument_list|,
name|LocalXmldbFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|XMLDBException
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|onlyAsAdmin
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|" This operation is restricted to Admin users"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|op
lambda|->
name|op
operator|.
name|andThen
argument_list|(
operator|(
name|FunctionE
argument_list|<
name|LocalXmldbFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
operator|)
name|this
operator|::
name|withDb
argument_list|)
operator|.
name|apply
argument_list|(
name|manager
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for performing read/write operations against a database      * resource      *      * @param resource The resource to perform read/write operations on      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|modify
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|modifyOp
lambda|->
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|(
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|resource
operator|)
operator|.
operator|<
name|R
operator|>
name|modify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
name|modifyOp
argument_list|)
operator|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for updating a collection and its metadata      *      * @param collectionUri The collection to perform read/write operations on      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|updateCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|updateOp
lambda|->
name|this
operator|.
block_content|<R>modify(collectionUri
block_content|)
block|.apply((collection
operator|,
function|broker1
operator|,
function|transaction1
end_function

begin_expr_stmt
unit|)
operator|->
block|{
name|final
name|R
name|result
operator|=
name|updateOp
operator|.
name|apply
argument_list|(
name|collection
argument_list|,
name|broker1
argument_list|,
name|transaction1
argument_list|)
block|;
name|broker1
operator|.
name|saveCollection
argument_list|(
name|transaction1
argument_list|,
name|collection
argument_list|)
block|;
return|return
name|result
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

