begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    20. August 2002  */
end_comment

begin_class
specifier|public
class|class
name|LocalUserManagementService
implements|implements
name|UserManagementService
block|{
specifier|private
name|LocalCollection
name|collection
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
comment|/**      *  Constructor for the UserAdminService object      *      *@param  pool        Description of the Parameter      *@param  collection  Description of the Parameter      *@param  user        Description of the Parameter      */
specifier|public
name|LocalUserManagementService
parameter_list|(
name|User
name|user
parameter_list|,
name|BrokerPool
name|pool
parameter_list|,
name|LocalCollection
name|collection
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/**      *  Adds a feature to the User attribute of the LocalUserManagementService      *  object      *      *@param  u                   The feature to be added to the User attribute      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|addUser
parameter_list|(
name|User
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|" you are not allowed to change this user"
argument_list|)
throw|;
if|if
condition|(
name|manager
operator|.
name|hasUser
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"user "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" exists"
argument_list|)
throw|;
name|manager
operator|.
name|setUser
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@param  modeStr             Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|chmod
parameter_list|(
name|String
name|modeStr
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|checkOwner
argument_list|(
name|user
argument_list|)
operator|&&
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"you are not the owner of this collection"
argument_list|)
throw|;
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
name|coll
init|=
name|collection
operator|.
name|getCollection
argument_list|()
decl_stmt|;
try|try
block|{
name|coll
operator|.
name|setPermissions
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|coll
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//broker.sync();
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  resource            Description of the Parameter      *@param  modeStr             Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|chmod
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentImpl
name|document
init|=
operator|(
operator|(
name|LocalXMLResource
operator|)
name|resource
operator|)
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"you are not the owner of this resource"
argument_list|)
throw|;
name|document
operator|.
name|setPermissions
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  u                   Description of the Parameter      *@param  group               Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|chown
parameter_list|(
name|User
name|u
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"need admin privileges for chown"
argument_list|)
throw|;
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
name|coll
init|=
name|collection
operator|.
name|getCollection
argument_list|()
decl_stmt|;
name|coll
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|coll
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|coll
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//broker.sync();
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Description of the Method      *      *@param  res                 Description of the Parameter      *@param  u                   Description of the Parameter      *@param  group               Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|chown
parameter_list|(
name|Resource
name|res
parameter_list|,
name|User
name|u
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"need admin privileges for chown"
argument_list|)
throw|;
if|if
condition|(
name|res
operator|instanceof
name|LocalXMLResource
condition|)
block|{
name|Permission
name|perm
init|=
operator|(
operator|(
name|LocalXMLResource
operator|)
name|res
operator|)
operator|.
name|getDocument
argument_list|()
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|perm
operator|.
name|setOwner
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
else|else
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"resource not found"
argument_list|)
throw|;
block|}
comment|/**      *  Gets the name attribute of the UserAdminService object      *      *@return    The name value      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UserManagementService"
return|;
block|}
comment|/**      *  Gets the permissions attribute of the LocalUserManagementService object      *      *@param  coll                Description of the Parameter      *@return                     The permissions value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|Permission
name|getPermissions
parameter_list|(
name|Collection
name|coll
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|coll
operator|instanceof
name|LocalCollection
condition|)
return|return
operator|(
operator|(
name|LocalCollection
operator|)
name|coll
operator|)
operator|.
name|getCollection
argument_list|()
operator|.
name|getPermissions
argument_list|()
return|;
return|return
literal|null
return|;
block|}
comment|/**      *  Gets the permissions attribute of the LocalUserManagementService object      *      *@param  resource            Description of the Parameter      *@return                     The permissions value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|Permission
name|getPermissions
parameter_list|(
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|resource
operator|instanceof
name|LocalXMLResource
condition|)
return|return
operator|(
operator|(
name|LocalXMLResource
operator|)
name|resource
operator|)
operator|.
name|getDocument
argument_list|()
operator|.
name|getPermissions
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Permission
index|[]
name|listResourcePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
return|return
operator|new
name|Permission
index|[
literal|0
index|]
return|;
name|Permission
name|perms
index|[]
init|=
operator|new
name|Permission
index|[
name|collection
operator|.
name|collection
operator|.
name|getDocumentCount
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|perms
index|[
name|j
index|]
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
specifier|public
name|Permission
index|[]
name|listCollectionPermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
return|return
operator|new
name|Permission
index|[
literal|0
index|]
return|;
name|Permission
name|perms
index|[]
init|=
operator|new
name|Permission
index|[
name|collection
operator|.
name|collection
operator|.
name|getChildCollectionCount
argument_list|()
index|]
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|child
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
name|childColl
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|child
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|childColl
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collection
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|child
argument_list|)
expr_stmt|;
name|perms
index|[
name|j
index|]
operator|=
name|childColl
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Gets the property attribute of the LocalUserManagementService object      *      *@param  property            Description of the Parameter      *@return                     The property value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|property
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
literal|null
return|;
block|}
comment|/**      *  Gets the user attribute of the LocalUserManagementService object      *      *@param  name                Description of the Parameter      *@return                     The user value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|User
name|getUser
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|manager
operator|.
name|getUser
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      *  Gets the users attribute of the LocalUserManagementService object      *      *@return                     The users value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|User
index|[]
name|getUsers
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|manager
operator|.
name|getUsers
argument_list|()
return|;
block|}
comment|/**      *  Gets the version attribute of the UserAdminService object      *      *@return    The version value      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  name                Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|removeUser
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"you are not allowed to remove users"
argument_list|)
throw|;
name|manager
operator|.
name|deleteUser
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Sets the collection attribute of the LocalUserManagementService object      *      *@param  collection          The new collection value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|setCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|this
operator|.
name|collection
operator|=
operator|(
name|LocalCollection
operator|)
name|collection
expr_stmt|;
block|}
comment|/**      *  Sets the property attribute of the LocalUserManagementService object      *      *@param  property            The new property value      *@param  value               The new property value      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
comment|/**      *  Description of the Method      *      *@param  u                   Description of the Parameter      *@exception  XMLDBException  Description of the Exception      */
specifier|public
name|void
name|updateUser
parameter_list|(
name|User
name|u
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|" you are not allowed to change this user"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasUser
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"user "
operator|+
name|u
operator|.
name|getName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|manager
operator|.
name|setUser
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

