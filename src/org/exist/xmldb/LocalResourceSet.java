begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|SortedNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_class
specifier|public
class|class
name|LocalResourceSet
extends|extends
name|AbstractLocal
implements|implements
name|ResourceSet
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LocalResourceSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|outputProperties
decl_stmt|;
specifier|public
name|LocalResourceSet
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|LocalCollection
name|col
parameter_list|,
specifier|final
name|Properties
name|properties
parameter_list|,
specifier|final
name|Sequence
name|val
parameter_list|,
specifier|final
name|String
name|sortExpr
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|super
argument_list|(
name|user
argument_list|,
name|pool
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputProperties
operator|=
name|properties
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|Sequence
name|seq
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|&&
name|sortExpr
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SortedNodeSet
name|sorted
init|=
operator|new
name|SortedNodeSet
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|sortExpr
argument_list|)
decl_stmt|;
try|try
block|{
name|sorted
operator|.
name|addAll
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|seq
operator|=
name|sorted
expr_stmt|;
block|}
else|else
block|{
name|seq
operator|=
name|val
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|seq
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|item
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|resources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|ResourceSet
name|resourceSet
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceSet
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addResource
argument_list|(
name|resourceSet
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//cleanup any binary values
name|resources
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|resource
parameter_list|)
lambda|->
operator|(
name|resource
operator|instanceof
name|BinaryValue
operator|)
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|resource
parameter_list|)
lambda|->
block|{
lambda|try
block|{
operator|(
operator|(
name|BinaryValue
operator|)
name|resource
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to cleanup BinaryValue: "
operator|+
name|resource
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|resources
operator|.
name|clear
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|ResourceIterator
name|getIterator
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
operator|new
name|NewResourceIterator
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|ResourceIterator
name|getIterator
parameter_list|(
specifier|final
name|long
name|start
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
operator|new
name|NewResourceIterator
argument_list|(
name|start
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Resource
name|getMembersAsResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|SAXSerializer
name|handler
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|Resource
operator|>
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
comment|// configure the serializer
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|collection
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|//	serialize results
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
specifier|final
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"hitCount"
argument_list|,
literal|"hitCount"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|resources
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|Item
name|current
decl_stmt|;
name|char
index|[]
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|resources
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
operator|(
name|Item
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|current
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
operator|(
operator|(
name|NodeValue
operator|)
name|current
operator|)
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
specifier|final
name|Resource
name|res
init|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|XmldbURI
operator|.
name|EMPTY_URI
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
literal|"serialization error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Resource
name|getResource
parameter_list|(
specifier|final
name|long
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
name|pos
operator|>=
name|resources
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Object
name|r
init|=
name|resources
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|pos
argument_list|)
decl_stmt|;
name|EXistResource
name|res
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|NodeProxy
condition|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
operator|(
name|NodeProxy
operator|)
name|r
decl_stmt|;
comment|// the resource might belong to a different collection
comment|// than the one by which this resource set has been
comment|// generated: adjust if necessary.
name|LocalCollection
name|coll
init|=
name|collection
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|coll
operator|.
name|getPathURI
argument_list|()
operator|.
name|toCollectionPathURI
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
name|coll
operator|=
operator|new
name|LocalCollection
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
literal|null
argument_list|,
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|coll
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|coll
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|Node
condition|)
block|{
name|res
operator|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|XmldbURI
operator|.
name|EMPTY_URI
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LocalXMLResource
operator|)
name|res
operator|)
operator|.
name|setContentAsDOM
argument_list|(
operator|(
name|Node
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|AtomicValue
condition|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|BinaryValue
condition|)
block|{
specifier|final
name|XmldbURI
name|docId
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Base64BinaryDocument
condition|)
block|{
name|docId
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
operator|(
name|Base64BinaryDocument
operator|)
name|r
operator|)
operator|.
name|getUrl
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|XmldbURI
operator|::
name|create
argument_list|)
operator|.
name|orElse
argument_list|(
name|XmldbURI
operator|.
name|EMPTY_URI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docId
operator|=
name|XmldbURI
operator|.
name|EMPTY_URI
expr_stmt|;
block|}
name|res
operator|=
operator|new
name|LocalBinaryResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|docId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|XmldbURI
operator|.
name|EMPTY_URI
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContent
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|Resource
condition|)
block|{
return|return
operator|(
name|Resource
operator|)
name|r
return|;
block|}
name|res
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
specifier|public
name|Sequence
name|toSequence
parameter_list|()
block|{
if|if
condition|(
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
if|else if
condition|(
name|resources
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|Item
operator|)
name|resources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toSequence
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|ValueSequence
name|s
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|resource
range|:
name|resources
control|)
block|{
specifier|final
name|Item
name|item
init|=
operator|(
name|Item
operator|)
name|resource
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|resources
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeResource
parameter_list|(
specifier|final
name|long
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|resources
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
class|class
name|NewResourceIterator
implements|implements
name|ResourceIterator
block|{
name|long
name|pos
init|=
literal|0
decl_stmt|;
specifier|public
name|NewResourceIterator
parameter_list|()
block|{
block|}
specifier|public
name|NewResourceIterator
parameter_list|(
specifier|final
name|long
name|start
parameter_list|)
block|{
name|pos
operator|=
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|pos
operator|<
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|nextResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|getResource
argument_list|(
name|pos
operator|++
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

