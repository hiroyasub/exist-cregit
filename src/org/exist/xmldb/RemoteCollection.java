begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|ACEAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Leasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * A remote implementation of the Collection interface. This implementation  * communicates with the server through the XMLRPC protocol.  *  * @author wolf Updated Andy Foster - Updated code to allow child collection  * cache to resync with the remote collection.  */
end_comment

begin_class
specifier|public
class|class
name|RemoteCollection
extends|extends
name|AbstractRemote
implements|implements
name|EXistCollection
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RemoteCollection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Max size of a resource to be send to the server.
comment|// If the resource exceeds this limit, the data is split into
comment|// chunks and uploaded to the server via the update() call
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CHUNK_LENGTH
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
comment|//512KB
specifier|public
specifier|static
specifier|final
name|int
name|MAX_UPLOAD_CHUNK
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//10 MB
specifier|private
specifier|final
name|XmldbURI
name|path
decl_stmt|;
specifier|private
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
name|leasableXmlRpcClient
decl_stmt|;
specifier|private
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
operator|.
name|Lease
name|xmlRpcClientLease
decl_stmt|;
specifier|private
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|RemoteCollection
name|instance
parameter_list|(
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
name|leasableXmlRpcClient
parameter_list|,
specifier|final
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|instance
argument_list|(
name|leasableXmlRpcClient
argument_list|,
literal|null
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RemoteCollection
name|instance
parameter_list|(
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
name|leasableXmlRpcClient
parameter_list|,
specifier|final
name|RemoteCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
operator|.
name|Lease
name|xmlRpcClientLease
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xmlRpcClientLease
operator|=
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
expr_stmt|;
comment|//check we can open the collection i.e. that we have permission!
specifier|final
name|boolean
name|existsAndCanOpen
init|=
operator|(
name|Boolean
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"existsAndCanOpenCollection"
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|existsAndCanOpen
condition|)
block|{
return|return
operator|new
name|RemoteCollection
argument_list|(
name|leasableXmlRpcClient
argument_list|,
name|xmlRpcClientLease
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
return|;
block|}
else|else
block|{
name|xmlRpcClientLease
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
if|if
condition|(
name|xmlRpcClientLease
operator|!=
literal|null
condition|)
block|{
name|xmlRpcClientLease
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RemoteCollection
parameter_list|(
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
name|leasableXmlRpcClient
parameter_list|,
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
operator|.
name|Lease
name|xmlRpcClientLease
parameter_list|,
specifier|final
name|RemoteCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
operator|.
name|toCollectionPathURI
argument_list|()
expr_stmt|;
name|this
operator|.
name|leasableXmlRpcClient
operator|=
name|leasableXmlRpcClient
expr_stmt|;
name|this
operator|.
name|xmlRpcClientLease
operator|=
name|xmlRpcClientLease
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|xmlRpcClientLease
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createId
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|String
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"createResourceId"
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
literal|"Failed to close collection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|createResource
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
specifier|final
name|XmldbURI
name|newId
init|=
operator|(
name|id
operator|==
literal|null
operator|)
condition|?
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|createId
argument_list|()
argument_list|)
else|:
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|RemoteXMLResource
argument_list|(
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
argument_list|,
name|this
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|newId
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|BinaryResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|RemoteBinaryResource
argument_list|(
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
argument_list|,
name|this
argument_list|,
name|newId
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_RESOURCE_TYPE
argument_list|,
literal|"Unknown resource type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getChildCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
return|return
name|getChildCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Collection
name|getChildCollection
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|// AF: get the child collection refreshing cache from server if not found
return|return
name|getChildCollection
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// AF: NEW METHOD
specifier|protected
name|Collection
name|getChildCollection
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|boolean
name|refreshCacheIfNotFound
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|instance
argument_list|(
name|leasableXmlRpcClient
argument_list|,
name|this
argument_list|,
name|name
operator|.
name|numSegments
argument_list|()
operator|>
literal|1
condition|?
name|name
else|:
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildCollectionCount
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|listChildCollections
argument_list|()
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
condition|)
block|{
specifier|final
name|XmldbURI
name|parentUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
return|return
operator|new
name|RemoteCollection
argument_list|(
name|leasableXmlRpcClient
argument_list|,
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
argument_list|,
literal|null
argument_list|,
name|parentUri
argument_list|)
return|;
block|}
return|return
name|collection
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|getPathURI
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getPathURI
parameter_list|()
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
return|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
return|;
block|}
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getResourceCount
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|Integer
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getResourceCount"
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
literal|"failed to close collection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Service
name|service
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"XPathQueryService"
case|:
case|case
literal|"XQueryService"
case|:
name|service
operator|=
operator|new
name|RemoteXPathQueryService
argument_list|(
name|leasableXmlRpcClient
argument_list|,
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"CollectionManagementService"
case|:
case|case
literal|"CollectionManager"
case|:
name|service
operator|=
operator|new
name|RemoteCollectionManagementService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UserManagementService"
case|:
name|service
operator|=
operator|new
name|RemoteUserManagementService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"DatabaseInstanceManager"
case|:
name|service
operator|=
operator|new
name|RemoteDatabaseInstanceManager
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"IndexQueryService"
case|:
name|service
operator|=
operator|new
name|RemoteIndexQueryService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"XUpdateQueryService"
case|:
name|service
operator|=
operator|new
name|RemoteXUpdateQueryService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NO_SUCH_SERVICE
argument_list|)
throw|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
operator|new
name|Service
index|[]
block|{
operator|new
name|RemoteXPathQueryService
argument_list|(
name|leasableXmlRpcClient
argument_list|,
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|RemoteCollectionManagementService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|RemoteUserManagementService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|RemoteDatabaseInstanceManager
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|)
block|,
operator|new
name|RemoteIndexQueryService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|RemoteXUpdateQueryService
argument_list|(
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
argument_list|,
name|this
argument_list|)
block|}
return|;
block|}
specifier|protected
name|boolean
name|hasChildCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
specifier|final
name|String
name|child
range|:
name|listChildCollections
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOpen
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listChildCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Object
index|[]
name|r
init|=
operator|(
name|Object
index|[]
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getCollectionListing"
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|collections
init|=
operator|new
name|String
index|[
name|r
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|collections
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|collections
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getChildCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|listChildCollections
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Object
index|[]
name|r
init|=
operator|(
name|Object
index|[]
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getDocumentListing"
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|resources
init|=
operator|new
name|String
index|[
name|r
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|resources
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|resources
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|listResources
argument_list|()
return|;
block|}
specifier|public
name|Permission
name|getSubCollectionPermissions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Map
name|result
init|=
operator|(
name|Map
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getSubCollectionPermissions"
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
operator|(
name|Integer
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|)
decl_stmt|;
specifier|final
name|Stream
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
name|extractAces
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|"acl"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getPermission
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|mode
argument_list|,
name|aces
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Permission
name|getSubResourcePermissions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Map
name|result
init|=
operator|(
name|Map
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getSubResourcePermissions"
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
operator|(
name|Integer
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|)
decl_stmt|;
specifier|final
name|Stream
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
name|extractAces
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|"acl"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getPermission
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|mode
argument_list|,
name|aces
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Long
name|getSubCollectionCreationTime
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
name|params
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|Long
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getSubCollectionCreationTime"
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|XmldbURI
name|docUri
decl_stmt|;
try|try
block|{
name|docUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|docUri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
name|hash
decl_stmt|;
try|try
block|{
name|hash
operator|=
operator|(
name|Map
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"describeResource"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
specifier|final
name|String
name|docName
init|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|docName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// resource does not exist!
block|}
try|try
block|{
name|docUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|docName
argument_list|)
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
operator|(
name|Integer
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|)
decl_stmt|;
specifier|final
name|Stream
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
name|extractAces
argument_list|(
name|hash
operator|.
name|get
argument_list|(
literal|"acl"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|perm
decl_stmt|;
try|try
block|{
name|perm
operator|=
name|getPermission
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|mode
argument_list|,
name|aces
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"Unable to retrieve permissions for resource '"
operator|+
name|name
operator|+
literal|"': "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
specifier|final
name|String
name|type
init|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|long
name|contentLen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hash
operator|.
name|containsKey
argument_list|(
literal|"content-length-64bit"
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|o
init|=
name|hash
operator|.
name|get
argument_list|(
literal|"content-length-64bit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|contentLen
operator|=
operator|(
name|Long
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
name|contentLen
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|hash
operator|.
name|containsKey
argument_list|(
literal|"content-length"
argument_list|)
condition|)
block|{
name|contentLen
operator|=
operator|(
name|Integer
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"content-length"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AbstractRemoteResource
name|r
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
literal|"XMLResource"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|r
operator|=
operator|new
name|RemoteXMLResource
argument_list|(
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
argument_list|,
name|this
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|docUri
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|RemoteBinaryResource
argument_list|(
name|leasableXmlRpcClient
operator|.
name|lease
argument_list|()
argument_list|,
name|this
argument_list|,
name|docUri
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setPermissions
argument_list|(
name|perm
argument_list|)
expr_stmt|;
name|r
operator|.
name|setContentLength
argument_list|(
name|contentLen
argument_list|)
expr_stmt|;
name|r
operator|.
name|dateCreated
operator|=
operator|(
name|Date
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"created"
argument_list|)
expr_stmt|;
name|r
operator|.
name|dateModified
operator|=
operator|(
name|Date
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"modified"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|.
name|containsKey
argument_list|(
literal|"mime-type"
argument_list|)
condition|)
block|{
name|r
operator|.
name|setMimeType
argument_list|(
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"mime-type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|void
name|registerService
parameter_list|(
specifier|final
name|Service
name|serv
parameter_list|)
throws|throws
name|XMLDBException
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NOT_IMPLEMENTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|params
operator|.
name|add
argument_list|(
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"remove"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCreationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|Date
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"getCreationDate"
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|storeResource
argument_list|(
name|res
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|,
specifier|final
name|Date
name|a
parameter_list|,
specifier|final
name|Date
name|b
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Object
name|content
init|=
operator|(
name|res
operator|instanceof
name|ExtendedResource
operator|)
condition|?
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getExtendedContent
argument_list|()
else|:
name|res
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Path
operator|||
name|content
operator|instanceof
name|File
operator|||
name|content
operator|instanceof
name|InputSource
condition|)
block|{
name|long
name|fileLength
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Path
condition|)
block|{
specifier|final
name|Path
name|file
init|=
operator|(
name|Path
operator|)
name|content
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Failed to read resource from file "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|fileLength
operator|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|File
condition|)
block|{
specifier|final
name|File
name|file
init|=
operator|(
name|File
operator|)
name|content
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Failed to read resource from file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|fileLength
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|content
operator|instanceof
name|EXistInputSource
condition|)
block|{
name|fileLength
operator|=
operator|(
operator|(
name|EXistInputSource
operator|)
name|content
operator|)
operator|.
name|getByteStreamLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|instanceof
name|AbstractRemoteResource
condition|)
block|{
operator|(
operator|(
name|AbstractRemoteResource
operator|)
name|res
operator|)
operator|.
name|dateCreated
operator|=
name|a
expr_stmt|;
operator|(
operator|(
name|AbstractRemoteResource
operator|)
name|res
operator|)
operator|.
name|dateModified
operator|=
name|b
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|BinaryResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|&&
name|fileLength
operator|!=
operator|-
literal|1
operator|&&
name|fileLength
operator|<
name|MAX_CHUNK_LENGTH
condition|)
block|{
name|store
argument_list|(
operator|(
name|RemoteXMLResource
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uploadAndStore
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|(
operator|(
name|AbstractRemoteResource
operator|)
name|res
operator|)
operator|.
name|dateCreated
operator|=
name|a
expr_stmt|;
operator|(
operator|(
name|AbstractRemoteResource
operator|)
name|res
operator|)
operator|.
name|dateModified
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|XMLResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
condition|)
block|{
name|store
argument_list|(
operator|(
name|RemoteXMLResource
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
argument_list|(
operator|(
name|RemoteBinaryResource
operator|)
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|RemoteXMLResource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|res
operator|.
name|getData
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|params
operator|.
name|add
argument_list|(
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|getCreationTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|res
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|res
operator|.
name|getLastModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"parse"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|xre
operator|==
literal|null
condition|?
literal|"Unknown error"
else|:
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|RemoteBinaryResource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|params
operator|.
name|add
argument_list|(
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
name|res
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|getCreationTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|res
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|res
operator|.
name|getLastModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"storeBinary"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
comment|/* the error code previously was INVALID_RESOURCE, but this was also thrown              * in case of insufficient permissions. As you cannot tell here any more what the              * error really was, use UNKNOWN_ERROR.               * The reason is in XmlRpcResponseProcessor#processException              * which will only pass on the error message.              */
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|xre
operator|==
literal|null
condition|?
literal|"unknown error"
else|:
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|uploadAndStore
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|String
name|descString
init|=
literal|"<unknown>"
decl_stmt|;
try|try
block|{
if|if
condition|(
name|res
operator|instanceof
name|RemoteBinaryResource
condition|)
block|{
name|is
operator|=
operator|(
operator|(
name|RemoteBinaryResource
operator|)
name|res
operator|)
operator|.
name|getStreamContent
argument_list|()
expr_stmt|;
name|descString
operator|=
operator|(
operator|(
name|RemoteBinaryResource
operator|)
name|res
operator|)
operator|.
name|getStreamSymbolicPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Object
name|content
init|=
name|res
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|File
condition|)
block|{
specifier|final
name|File
name|file
init|=
operator|(
name|File
operator|)
name|content
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"could not read resource from file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|content
operator|instanceof
name|InputSource
condition|)
block|{
name|is
operator|=
operator|(
operator|(
name|InputSource
operator|)
name|content
operator|)
operator|.
name|getByteStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|EXistInputSource
condition|)
block|{
name|descString
operator|=
operator|(
operator|(
name|EXistInputSource
operator|)
name|content
operator|)
operator|.
name|getSymbolicPath
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|is
operator|=
operator|new
name|FastByteArrayInputStream
argument_list|(
operator|(
operator|(
name|String
operator|)
name|content
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get content from {}"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|byte
index|[]
name|chunk
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|ExtendedResource
condition|)
block|{
if|if
condition|(
name|res
operator|instanceof
name|AbstractRemoteResource
condition|)
block|{
name|chunk
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|AbstractRemoteResource
operator|)
name|res
operator|)
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|MAX_UPLOAD_CHUNK
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|chunk
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getStreamLength
argument_list|()
argument_list|,
name|MAX_UPLOAD_CHUNK
argument_list|)
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|chunk
operator|=
operator|new
name|byte
index|[
name|MAX_UPLOAD_CHUNK
index|]
expr_stmt|;
block|}
try|try
block|{
name|int
name|len
decl_stmt|;
name|String
name|fileName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|chunk
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
specifier|final
name|byte
index|[]
name|compressed
init|=
name|Compressor
operator|.
name|compress
argument_list|(
name|chunk
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|fileName
operator|=
operator|(
name|String
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"uploadCompressed"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|// Zero length stream? Let's get a fileName!
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
specifier|final
name|byte
index|[]
name|compressed
init|=
name|Compressor
operator|.
name|compress
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fileName
operator|=
operator|(
name|String
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"uploadCompressed"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|paramsEx
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|resURI
init|=
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|resURI
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|resURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|EXistResource
condition|)
block|{
specifier|final
name|EXistResource
name|rxres
init|=
operator|(
name|EXistResource
operator|)
name|res
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
comment|// This one is only for the new style!!!!
name|paramsEx
operator|.
name|add
argument_list|(
operator|(
name|BinaryResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|)
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|rxres
operator|.
name|getCreationTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getLastModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|paramsEx
operator|.
name|add
argument_list|(
name|rxres
operator|.
name|getLastModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"parseLocalExt"
argument_list|,
name|paramsEx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
comment|// Identifying old versions
specifier|final
name|String
name|excMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|excMsg
operator|.
name|contains
argument_list|(
literal|"No such handler"
argument_list|)
operator|||
name|excMsg
operator|.
name|contains
argument_list|(
literal|"No method matching"
argument_list|)
condition|)
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"parseLocal"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"failed to read resource from "
operator|+
name|descString
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"networking error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRemoteCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTriggersEnabled
parameter_list|(
specifier|final
name|boolean
name|triggersEnabled
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|this
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|triggersEnabled
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"setTriggersEnabled"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"networking error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

