begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_class
specifier|public
class|class
name|LocalCollectionManagementService
extends|extends
name|AbstractLocalService
implements|implements
name|CollectionManagementServiceImpl
block|{
specifier|public
name|LocalCollectionManagementService
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|LocalCollection
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|,
name|pool
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"CollectionManagementService"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"1.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|createCollection
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|createCollection
argument_list|(
name|collName
argument_list|,
operator|(
name|Date
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|createCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collName
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|createCollection
argument_list|(
name|collName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|createCollection
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
return|return
name|createCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|,
name|created
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|createCollection
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collName
init|=
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|coll
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|coll
operator|.
name|setCreationTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|coll
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocalCollection
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|collName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCollection
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|removeCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCollection
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|collName
init|=
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|modify
argument_list|(
name|collName
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|move
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
specifier|final
name|XmldbURI
name|src
parameter_list|,
specifier|final
name|XmldbURI
name|dest
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|srcPath
init|=
name|resolve
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|destPath
init|=
name|dest
operator|==
literal|null
condition|?
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
else|:
name|resolve
argument_list|(
name|dest
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|newName
operator|=
name|srcPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|name
expr_stmt|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|modify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|srcPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|source
parameter_list|,
name|b1
parameter_list|,
name|t1
parameter_list|)
lambda|->
name|modify
argument_list|(
name|b1
argument_list|,
name|t1
argument_list|,
name|destPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destination
parameter_list|,
name|b2
parameter_list|,
name|t2
parameter_list|)
lambda|->
block|{
name|b2
operator|.
name|moveCollection
argument_list|(
name|t2
argument_list|,
name|source
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
argument_list|;                             return
literal|null
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)         )
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|moveResource
parameter_list|(
specifier|final
name|String
name|resourcePath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|moveResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resourcePath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|moveResource
parameter_list|(
specifier|final
name|XmldbURI
name|src
parameter_list|,
specifier|final
name|XmldbURI
name|dest
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|srcPath
init|=
name|resolve
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|destPath
init|=
name|dest
operator|==
literal|null
condition|?
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
else|:
name|resolve
argument_list|(
name|dest
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|newName
operator|=
name|srcPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|name
expr_stmt|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|modify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|sourceCol
parameter_list|,
name|b1
parameter_list|,
name|t1
parameter_list|)
lambda|->
block|{
name|final
name|DocumentImpl
name|source
operator|=
name|sourceCol
operator|.
name|getDocument
argument_list|(
name|b1
argument_list|,
name|srcPath
operator|.
name|lastSegment
argument_list|()
argument_list|)
argument_list|;                     if
operator|(
name|source
operator|==
literal|null
operator|)
block|{
throw|throw
argument_list|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NO_SUCH_RESOURCE
argument_list|,
literal|"Resource "
operator|+
name|srcPath
operator|+
literal|" not found"
argument_list|)
block|;                     }
return|return
name|modify
argument_list|(
name|b1
argument_list|,
name|t1
argument_list|,
name|destPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destinationCol
parameter_list|,
name|b2
parameter_list|,
name|t2
parameter_list|)
lambda|->
block|{
name|b2
operator|.
name|moveResource
argument_list|(
name|t2
argument_list|,
name|source
argument_list|,
name|destinationCol
argument_list|,
name|newName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_empty_stmt
unit|)         )
empty_stmt|;
end_empty_stmt

begin_function
unit|}          @
name|Override
specifier|public
name|void
name|copy
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|copy
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
specifier|final
name|XmldbURI
name|src
parameter_list|,
specifier|final
name|XmldbURI
name|dest
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|srcPath
init|=
name|resolve
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|destPath
init|=
name|dest
operator|==
literal|null
condition|?
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
else|:
name|resolve
argument_list|(
name|dest
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|newName
operator|=
name|srcPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|name
expr_stmt|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|modify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|srcPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|source
parameter_list|,
name|b1
parameter_list|,
name|t1
parameter_list|)
lambda|->
name|modify
argument_list|(
name|b1
argument_list|,
name|t1
argument_list|,
name|destPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destination
parameter_list|,
name|b2
parameter_list|,
name|t2
parameter_list|)
lambda|->
block|{
block_content|try
block|{
name|b2
operator|.
name|copyCollection
argument_list|(
name|t2
argument_list|,
name|source
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"failed to move collection "
operator|+
name|srcPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)                 )         )
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|copyResource
parameter_list|(
specifier|final
name|String
name|resourcePath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|copyResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resourcePath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|copyResource
parameter_list|(
specifier|final
name|XmldbURI
name|src
parameter_list|,
specifier|final
name|XmldbURI
name|dest
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|srcPath
init|=
name|resolve
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|destPath
init|=
name|dest
operator|==
literal|null
condition|?
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
else|:
name|resolve
argument_list|(
name|dest
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|newName
operator|=
name|srcPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|name
expr_stmt|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|modify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|srcPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|sourceCol
parameter_list|,
name|b1
parameter_list|,
name|t1
parameter_list|)
lambda|->
block|{
name|final
name|DocumentImpl
name|source
operator|=
name|sourceCol
operator|.
name|getDocument
argument_list|(
name|b1
argument_list|,
name|srcPath
operator|.
name|lastSegment
argument_list|()
argument_list|)
argument_list|;                             if
operator|(
name|source
operator|==
literal|null
operator|)
block|{
throw|throw
argument_list|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NO_SUCH_RESOURCE
argument_list|,
literal|"Resource "
operator|+
name|srcPath
operator|+
literal|" not found"
argument_list|)
block|;                             }
return|return
name|modify
argument_list|(
name|b1
argument_list|,
name|t1
argument_list|,
name|destPath
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destinationCol
parameter_list|,
name|b2
parameter_list|,
name|t2
parameter_list|)
lambda|->
block|{
try|try
block|{
name|b2
operator|.
name|copyResource
argument_list|(
name|t2
argument_list|,
name|source
argument_list|,
name|destinationCol
argument_list|,
name|newName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"failed to copy resource "
operator|+
name|srcPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
end_function

begin_empty_stmt
unit|)         )
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|runCommand
parameter_list|(
specifier|final
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|command
operator|.
name|Commands
operator|.
name|command
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collection
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

