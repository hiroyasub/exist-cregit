begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
operator|.
name|FunctionE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbDocumentFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * Abstract base implementation of interface EXistResource.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractEXistResource
extends|extends
name|AbstractLocal
implements|implements
name|EXistResource
block|{
specifier|protected
specifier|final
name|XmldbURI
name|docId
decl_stmt|;
specifier|private
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|isNewResource
init|=
literal|false
decl_stmt|;
specifier|protected
name|Date
name|datecreated
init|=
literal|null
decl_stmt|;
specifier|protected
name|Date
name|datemodified
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractEXistResource
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|LocalCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|docId
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|,
name|pool
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|docId
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMimeType
parameter_list|(
specifier|final
name|String
name|mime
parameter_list|)
block|{
name|this
operator|.
name|mimeType
operator|=
name|mime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMimeType
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|isNewResource
condition|)
block|{
return|return
name|mimeType
return|;
block|}
else|else
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|docId
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_COLLECTION
argument_list|,
literal|"collection parent is null"
argument_list|)
throw|;
block|}
return|return
name|collection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCreationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|Date
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getLastModificationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|Date
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|document
operator|.
name|getContentLength
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Permission
name|getPermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Higher-order-function for performing read-only operations against this resource      *      * NOTE this read will occur using the database user set on the resource      *      * @param readOp The read-only operation to execute against the resource      * @return The result of the read-only operation      */
specifier|protected
parameter_list|<
name|R
parameter_list|>
name|R
name|read
parameter_list|(
specifier|final
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
name|readOp
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>read(broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
name|readOp
argument_list|)
block_content|)
function|;
block|}
end_class

begin_comment
comment|/**      * Higher-order-function for performing read-only operations against this resource      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @return A function to receive a read-only operation to perform against the resource      */
end_comment

begin_function
specifier|public
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|read
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|with
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for performing read/write operations against this resource      *      * NOTE this operation will occur using the database user set on the resource      *      * @param op The read/write operation to execute against the resource      * @return The result of the operation      */
end_comment

begin_function
specifier|protected
parameter_list|<
name|R
parameter_list|>
name|R
name|modify
parameter_list|(
specifier|final
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
name|op
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>modify(broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
name|op
argument_list|)
block_content|)
function|;
end_function

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read/write operations against this resource      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @return A function to receive an operation to perform against the resource      */
end_comment

begin_function
unit|public
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|modify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|writeOp
lambda|->
name|this
operator|.
block_content|<R>with(Lock.WRITE_LOCK
operator|,
name|broker
operator|,
name|transaction
block_content|)
block|.apply((document
operator|,
function|broker1
operator|,
function|transaction1
end_function

begin_expr_stmt
unit|)
operator|->
block|{
name|final
name|R
name|result
operator|=
name|writeOp
operator|.
name|apply
argument_list|(
name|document
argument_list|,
name|broker1
argument_list|,
name|transaction1
argument_list|)
block|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction1
argument_list|,
name|document
argument_list|)
block|;
return|return
name|result
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing lockable operations on this resource      *      * @param lockMode      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @return A function to receive an operation to perform on the locked database resource      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|with
parameter_list|(
specifier|final
name|int
name|lockMode
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|documentOp
lambda|->
name|collection
operator|.
block_content|<R>with(lockMode
operator|,
name|broker
operator|,
name|transaction
block_content|)
block|.apply((collection
operator|,
function|broker1
operator|,
function|transaction1
end_function

begin_expr_stmt
unit|)
operator|->
block|{
name|DocumentImpl
name|doc
operator|=
literal|null
block|;
try|try
block|{
name|doc
operator|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker1
argument_list|,
name|docId
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|)
throw|;
block|}
end_expr_stmt

begin_return
return|return
name|documentOp
operator|.
name|apply
argument_list|(
name|doc
argument_list|,
name|broker1
argument_list|,
name|transaction1
argument_list|)
return|;
end_return

begin_block
unit|} finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|lockMode
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

