begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; er version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/** A utility class for xmldb URis.  * Since, java.net.URI is<strong>final</strong> this class acts as a wrapper.  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|public
class|class
name|XmldbURI
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NO_PORT
init|=
operator|-
literal|1
decl_stmt|;
comment|//Should be provided by org.xmldb.api package !!!
specifier|public
specifier|static
specifier|final
name|String
name|XMLDB_URI_PREFIX
init|=
literal|"xmldb:"
decl_stmt|;
specifier|private
name|URI
name|wrappedURI
decl_stmt|;
specifier|private
name|String
name|instanceName
decl_stmt|;
specifier|private
name|String
name|userInfo
decl_stmt|;
specifier|private
name|String
name|host
decl_stmt|;
specifier|private
name|int
name|port
init|=
name|NO_PORT
decl_stmt|;
specifier|private
name|String
name|context
decl_stmt|;
specifier|private
name|String
name|escapedCollectionPath
decl_stmt|;
specifier|private
name|String
name|apiName
decl_stmt|;
comment|//TODO : deprecate when we split at root collection
specifier|public
specifier|final
specifier|static
name|String
name|API_XMLRPC
init|=
literal|"xmlrpc"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_WEBDAV
init|=
literal|"webdav"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_REST
init|=
literal|"rest-style"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_LOCAL
init|=
literal|"local"
decl_stmt|;
comment|/** Contructs an XmldbURI from given string. 	 * Note that we construct URIs starting with XmldbURI.XMLDB_URI_PREFIX. 	 * Do not forget that org.xmldb.api.DatabaseManager<strong>trims</strong> this prefix.  	 * @param xmldbURI A string  	 * @throws URISyntaxException If the given string is not a valid xmldb URI. 	 */
specifier|public
name|XmldbURI
parameter_list|(
name|String
name|xmldbURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
try|try
block|{
name|parseURI
argument_list|(
name|xmldbURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|wrappedURI
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** Contructs an XmldbURI from the given string, handling the necessary escapings. 	 * @param accessURI 	 * @param collection An unescaped collection path. 	 * @throws URISyntaxException 	 */
specifier|public
name|XmldbURI
parameter_list|(
name|String
name|accessURI
parameter_list|,
name|String
name|collectionPath
parameter_list|)
throws|throws
name|URISyntaxException
block|{
try|try
block|{
name|String
name|escaped
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|collectionPath
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|//This is the trick : unescape slashed in order to keep java.net.URI capabilities
comment|//TODO : use escape functions in XQuery -pb
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%2F"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%23"
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%3F"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|parseURI
argument_list|(
name|accessURI
operator|+
name|escaped
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|wrappedURI
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|wrappedURI
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|accessURI
operator|+
name|collectionPath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Feeds private members 	 * @throws URISyntaxException 	 */
specifier|private
name|void
name|parseURI
parameter_list|(
name|String
name|xmldbURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
name|URI
name|truncatedURI
decl_stmt|;
name|wrappedURI
operator|=
operator|new
name|URI
argument_list|(
name|xmldbURI
argument_list|)
expr_stmt|;
comment|//Reinitialise members
name|this
operator|.
name|instanceName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|host
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|NO_PORT
expr_stmt|;
name|this
operator|.
name|apiName
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|wrappedURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|wrappedURI
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|wrappedURI
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xmldb URI scheme does not start with "
operator|+
name|XMLDB_URI_PREFIX
argument_list|)
throw|;
try|try
block|{
name|truncatedURI
operator|=
operator|new
name|URI
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|XMLDB_URI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//Put the "right" URI in the message ;-)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|truncatedURI
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
comment|//Put the "right" URI in the message ;-)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xmldb URI should not provide a query part"
argument_list|)
throw|;
if|if
condition|(
name|truncatedURI
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
comment|//Put the "right" URI in the message ;-)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xmldb URI should not provide a fragment part"
argument_list|)
throw|;
comment|//Is an encoded scheme ever possible ?
name|instanceName
operator|=
name|truncatedURI
operator|.
name|getScheme
argument_list|()
expr_stmt|;
if|if
condition|(
name|instanceName
operator|==
literal|null
condition|)
comment|//Put the "right" URI in the message ;-)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xmldb URI scheme has no instance name"
argument_list|)
throw|;
name|userInfo
operator|=
name|truncatedURI
operator|.
name|getUserInfo
argument_list|()
expr_stmt|;
name|host
operator|=
name|truncatedURI
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|port
operator|=
name|truncatedURI
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|path
operator|=
name|truncatedURI
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|//Eventually rewrite wrappedURI *without* user info
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|recomputed
init|=
operator|new
name|StringBuffer
argument_list|(
name|XMLDB_URI_PREFIX
argument_list|)
decl_stmt|;
name|recomputed
operator|.
name|append
argument_list|(
name|truncatedURI
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|recomputed
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
name|recomputed
operator|.
name|append
argument_list|(
name|truncatedURI
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|truncatedURI
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|recomputed
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|truncatedURI
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|recomputed
operator|.
name|append
argument_list|(
name|truncatedURI
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|wrappedURI
operator|=
operator|new
name|URI
argument_list|(
name|recomputed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|splitPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/** Given a java.net.URI.getPath(),<strong>tries</strong> to dispatch the host's context 	 * from the collection path as smartly as possible.  	 * One would probably prefer a split policy based on the presence of a well-known root collection. 	 * @param path The java.net.URI.getPath() provided. 	 * @throws URISyntaxException 	 */
specifier|private
name|void
name|splitPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|//Reinitialise members
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|escapedCollectionPath
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
comment|//TODO : use named constants
name|index
operator|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/xmlrpc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|lastIndex
condition|)
block|{
name|apiName
operator|=
name|API_XMLRPC
expr_stmt|;
name|escapedCollectionPath
operator|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|"/xmlrpc"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|+
literal|"/xmlrpc"
expr_stmt|;
name|lastIndex
operator|=
name|index
expr_stmt|;
block|}
comment|//TODO : use named constants
name|index
operator|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/webdav"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|lastIndex
condition|)
block|{
name|apiName
operator|=
name|API_WEBDAV
expr_stmt|;
name|escapedCollectionPath
operator|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|"/webdav"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|+
literal|"/webdav"
expr_stmt|;
name|lastIndex
operator|=
name|index
expr_stmt|;
block|}
comment|//Default : a local URI...
if|if
condition|(
name|apiName
operator|==
literal|null
condition|)
block|{
name|apiName
operator|=
name|API_REST
expr_stmt|;
name|escapedCollectionPath
operator|=
name|path
expr_stmt|;
comment|//TODO : determine the context out of a clean root collection policy.
name|context
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|port
operator|!=
name|NO_PORT
condition|)
comment|//Put the "right" URI in the message ;-)
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|wrappedURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Local xmldb URI should not provide a port"
argument_list|)
throw|;
name|apiName
operator|=
name|API_LOCAL
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
name|escapedCollectionPath
operator|=
name|path
expr_stmt|;
block|}
comment|//Trim trailing slash if necessary
if|if
condition|(
name|escapedCollectionPath
operator|!=
literal|null
operator|&&
name|escapedCollectionPath
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|escapedCollectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|escapedCollectionPath
operator|=
name|escapedCollectionPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|escapedCollectionPath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//TODO : check that collectionPath starts with DBBroker.ROOT_COLLECTION ?
block|}
block|}
comment|/** To be called each time a private member that interacts with the wrapped URI is modified. 	 * @throws URISyntaxException 	 */
specifier|private
name|void
name|recomputeURI
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|instanceName
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|XMLDB_URI_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|instanceName
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
comment|//No userInfo
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|!=
name|NO_PORT
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//TODO : eventually use a prepend.root.collection system property
if|if
condition|(
name|escapedCollectionPath
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|escapedCollectionPath
argument_list|)
expr_stmt|;
try|try
block|{
name|wrappedURI
operator|=
operator|new
name|URI
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|wrappedURI
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** To be called before a context operation with another XmldbURI. 	 * @param uri 	 * @throws IllegalArgumentException 	 */
specifier|private
name|void
name|checkCompatibilityForContextOperation
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getInstanceName
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|+
literal|" instance differs from "
operator|+
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
throw|;
comment|//case insensitive comparison
if|if
condition|(
name|this
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getHost
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getHost
argument_list|()
operator|+
literal|" host differs from "
operator|+
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|&&
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|&&
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|uri
operator|.
name|getPort
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getPort
argument_list|()
operator|+
literal|" port differs from "
operator|+
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getCollectionPath
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|" collection differs from "
operator|+
name|uri
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
throw|;
block|}
comment|/** To be called before a collection path operation with another XmldbURI. 	 * @param uri 	 * @throws IllegalArgumentException 	 */
specifier|private
name|void
name|checkCompatibilityForCollectionOperation
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getInstanceName
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|+
literal|" instance differs from "
operator|+
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
throw|;
comment|//case insensitive comparison
if|if
condition|(
name|this
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getHost
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getHost
argument_list|()
operator|+
literal|" host differs from "
operator|+
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|&&
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|&&
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|uri
operator|.
name|getPort
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getPort
argument_list|()
operator|+
literal|" port differs from "
operator|+
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getContext
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getContext
argument_list|()
operator|+
literal|" context differs from "
operator|+
name|uri
operator|.
name|getContext
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setInstanceName
parameter_list|(
name|String
name|instanceName
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|oldInstanceName
init|=
name|this
operator|.
name|instanceName
decl_stmt|;
try|try
block|{
name|this
operator|.
name|instanceName
operator|=
name|instanceName
expr_stmt|;
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|instanceName
operator|=
name|oldInstanceName
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setUserInfo
parameter_list|(
name|String
name|userInfo
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|oldUserInfo
init|=
name|this
operator|.
name|userInfo
decl_stmt|;
try|try
block|{
name|this
operator|.
name|userInfo
operator|=
name|userInfo
expr_stmt|;
comment|//unnecessary
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|userInfo
operator|=
name|oldUserInfo
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|oldHost
init|=
name|this
operator|.
name|host
decl_stmt|;
try|try
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|oldHost
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|//TODO : check range ?
name|int
name|oldPort
init|=
name|this
operator|.
name|port
decl_stmt|;
try|try
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|oldPort
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|String
name|context
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|oldContext
init|=
name|this
operator|.
name|context
decl_stmt|;
try|try
block|{
comment|//trims any trailing slash
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|//include root slash if we have a host
if|if
condition|(
name|this
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
name|context
operator|=
name|context
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|context
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|?
literal|null
else|:
name|context
expr_stmt|;
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|oldContext
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|URI
name|context
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|str
init|=
name|context
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setContext
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCollectionPath
parameter_list|(
name|String
name|collectionPath
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|oldCollectionPath
init|=
name|collectionPath
decl_stmt|;
try|try
block|{
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
name|this
operator|.
name|escapedCollectionPath
operator|=
literal|null
expr_stmt|;
else|else
block|{
name|String
name|escaped
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|collectionPath
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|//This is the trick : unescape slashed in order to keep java.net.URI capabilities
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%2F"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%23"
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
name|escaped
operator|=
name|escaped
operator|.
name|replaceAll
argument_list|(
literal|"%3F"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|this
operator|.
name|escapedCollectionPath
operator|=
name|escaped
expr_stmt|;
block|}
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|this
operator|.
name|escapedCollectionPath
operator|=
name|oldCollectionPath
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|wrappedURI
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setCollectionPath
parameter_list|(
name|URI
name|collectionPath
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|str
init|=
name|context
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setCollectionPath
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
return|return
name|wrappedURI
return|;
block|}
specifier|public
name|String
name|getInstanceName
parameter_list|()
block|{
return|return
name|instanceName
return|;
block|}
specifier|public
name|String
name|getUserInfo
parameter_list|()
block|{
return|return
name|userInfo
return|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|String
name|getCollectionPath
parameter_list|()
block|{
if|if
condition|(
name|escapedCollectionPath
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|escapedCollectionPath
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//Should never happen
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|escapedCollectionPath
operator|+
literal|" can not be properly escaped"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|ob
parameter_list|)
throws|throws
name|ClassCastException
block|{
if|if
condition|(
operator|!
operator|(
name|ob
operator|instanceof
name|XmldbURI
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"The provided Object is not an XmldbURI"
argument_list|)
throw|;
return|return
name|wrappedURI
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|XmldbURI
operator|)
name|ob
operator|)
operator|.
name|getURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|create
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|XmldbURI
argument_list|(
name|str
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|XmldbURI
name|create
parameter_list|(
name|String
name|accessURI
parameter_list|,
name|String
name|collectionPath
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|XmldbURI
argument_list|(
name|accessURI
argument_list|,
name|collectionPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//Ugly workaround for non-URI compliant collection pathes
specifier|public
specifier|static
name|String
name|recoverPseudoURIs
parameter_list|(
name|String
name|pseudoURI
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|p
operator|.
name|split
argument_list|(
name|pseudoURI
argument_list|)
decl_stmt|;
name|StringBuffer
name|newURIString
init|=
operator|new
name|StringBuffer
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newURIString
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
condition|)
block|{
try|try
block|{
name|URI
name|dummy
init|=
operator|new
name|URI
argument_list|(
name|newURIString
operator|+
name|parts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|newURIString
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//We'd nee a logger here.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Had to escape : ''"
operator|+
name|parts
index|[
name|i
index|]
operator|+
literal|"' in '"
operator|+
name|pseudoURI
operator|+
literal|"' !"
argument_list|)
expr_stmt|;
try|try
block|{
name|newURIString
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ee
parameter_list|)
block|{
comment|//We'd nee a logger here.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Can't do anything with : ''"
operator|+
name|parts
index|[
name|i
index|]
operator|+
literal|"' in '"
operator|+
name|pseudoURI
operator|+
literal|"' !"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
return|return
name|newURIString
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|ob
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ob
operator|instanceof
name|XmldbURI
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|wrappedURI
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XmldbURI
operator|)
name|ob
operator|)
operator|.
name|getURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
return|return
name|wrappedURI
operator|.
name|isAbsolute
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isContextAbsolute
parameter_list|()
block|{
name|String
name|context
init|=
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|context
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
specifier|public
name|XmldbURI
name|normalizeContext
parameter_list|()
block|{
name|String
name|context
init|=
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
return|return
name|this
return|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|XmldbURI
name|xmldbURI
init|=
operator|new
name|XmldbURI
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|xmldbURI
operator|.
name|setContext
argument_list|(
operator|(
name|uri
operator|.
name|normalize
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|xmldbURI
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|URI
name|relativizeContext
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|context
init|=
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current context is null"
argument_list|)
throw|;
name|URI
name|contextURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|context
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|contextURI
operator|.
name|relativize
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|URI
name|resolveContext
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|context
init|=
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current context is null"
argument_list|)
throw|;
name|URI
name|contextURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|context
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|contextURI
operator|.
name|resolve
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|public
name|URI
name|resolveContext
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|NullPointerException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|context
init|=
name|this
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current context is null"
argument_list|)
throw|;
name|URI
name|contextURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|context
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|contextURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|contextURI
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCollectionPathAbsolute
parameter_list|()
block|{
name|String
name|collectionPath
init|=
name|this
operator|.
name|escapedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|collectionPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
specifier|public
name|XmldbURI
name|normalizeCollectionPath
parameter_list|()
block|{
name|String
name|collectionPath
init|=
name|this
operator|.
name|escapedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
return|return
name|this
return|;
name|URI
name|collectionPathURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
try|try
block|{
name|XmldbURI
name|xmldbURI
init|=
operator|new
name|XmldbURI
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|xmldbURI
operator|.
name|setCollectionPath
argument_list|(
name|collectionPathURI
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|xmldbURI
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|URI
name|relativizeCollectionPath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|collectionPath
init|=
name|this
operator|.
name|escapedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current collection path is null"
argument_list|)
throw|;
name|URI
name|collectionPathURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
return|return
name|collectionPathURI
operator|.
name|relativize
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|URI
name|resolveCollectionPath
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|collectionPath
init|=
name|this
operator|.
name|escapedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current collection path is null"
argument_list|)
throw|;
name|URI
name|collectionPathURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
return|return
name|collectionPathURI
operator|.
name|resolve
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|public
name|URI
name|resolveCollectionPath
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|NullPointerException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
throw|;
name|String
name|collectionPath
init|=
name|this
operator|.
name|escapedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The current collection path is null"
argument_list|)
throw|;
name|URI
name|collectionPathURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
return|return
name|collectionPathURI
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|String
name|toASCIIString
parameter_list|()
block|{
comment|//TODO : trim trailing slash if necessary
return|return
name|wrappedURI
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
specifier|public
name|URL
name|toURL
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|MalformedURLException
block|{
return|return
name|wrappedURI
operator|.
name|toURL
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//TODO : trim trailing slash if necessary
return|return
name|wrappedURI
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*      * if the currentPath is null return the parentPath else       * 	if the currentPath doesnt not start with "/db/" and is not equal to "/db" then adjust the path to start with the parentPath      *       * Fix to Jens collection/resource name problem by deliriumsky      */
specifier|public
specifier|static
name|String
name|checkPath
parameter_list|(
name|String
name|currentPath
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
comment|/*String path = (collectionPath.startsWith(DBBroker.ROOT_COLLECTION + "/") ? collectionPath :  		parent.getPath() + "/" + collectionPath);*/
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|currentPath
operator|.
name|startsWith
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|currentPath
operator|.
name|equals
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|currentPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|currentPath
operator|=
name|parentPath
operator|+
name|currentPath
expr_stmt|;
block|}
else|else
block|{
name|currentPath
operator|=
name|parentPath
operator|+
literal|"/"
operator|+
name|currentPath
expr_stmt|;
block|}
block|}
return|return
operator|(
name|currentPath
operator|)
return|;
block|}
return|return
operator|(
name|parentPath
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|checkPath2
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|fileName
operator|=
literal|"/"
operator|+
name|fileName
expr_stmt|;
comment|/*if (!fileName.startsWith(ROOT_COLLECTION))             fileName = ROOT_COLLECTION + fileName;*/
return|return
name|checkPath
argument_list|(
name|fileName
argument_list|,
name|parentPath
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getPathComponents
parameter_list|(
name|String
name|collectionPath
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|split
init|=
name|p
operator|.
name|split
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|split
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|split
argument_list|,
literal|1
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|split
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|//	TODO : prefefined URIs as static classes...
block|}
end_class

end_unit

