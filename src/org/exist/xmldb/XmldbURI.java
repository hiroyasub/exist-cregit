begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2006 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; er version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A utility class for xmldb URis. Since, java.net.URI is<strong>final</strong> this class acts as a wrapper.  *  * @author  Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_comment
comment|/*  * This base class implementation only provides a path.  FullXmldbURI provides  * full uri support.  The create method creates a minimal object to keep memory  * usage low.  */
end_comment

begin_class
specifier|public
class|class
name|XmldbURI
implements|implements
name|Comparable
argument_list|<
name|Object
argument_list|>
implements|,
name|Serializable
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XmldbURI
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NO_PORT
init|=
operator|-
literal|1
decl_stmt|;
comment|//Should be provided by org.xmldb.api package !!!
specifier|public
specifier|static
specifier|final
name|String
name|XMLDB_SCHEME
init|=
literal|"xmldb"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMLDB_URI_PREFIX
init|=
literal|"xmldb:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INSTANCE_NAME
init|=
literal|"exist"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDED_SERVER_AUTHORITY
init|=
literal|"embedded-eXist-server"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDED_SERVER_URI_PREFIX
init|=
name|XMLDB_URI_PREFIX
operator|+
name|DEFAULT_INSTANCE_NAME
operator|+
literal|"://"
decl_stmt|;
comment|/** 'db' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|ROOT_COLLECTION_NAME
init|=
literal|"db"
decl_stmt|;
comment|/** '/db' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|ROOT_COLLECTION
init|=
literal|"/"
operator|+
name|ROOT_COLLECTION_NAME
decl_stmt|;
comment|/** 'system' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|SYSTEM_COLLECTION_NAME
init|=
literal|"system"
decl_stmt|;
comment|/** '/db/system' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|SYSTEM_COLLECTION
init|=
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|SYSTEM_COLLECTION_NAME
decl_stmt|;
comment|/** 'temp' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|TEMP_COLLECTION_NAME
init|=
literal|"temp"
decl_stmt|;
comment|/** '/db/system/temp' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|TEMP_COLLECTION
init|=
name|SYSTEM_COLLECTION
operator|+
literal|"/"
operator|+
name|TEMP_COLLECTION_NAME
decl_stmt|;
comment|/** '/db/system/config' collection name */
specifier|public
specifier|final
specifier|static
name|String
name|CONFIG_COLLECTION
init|=
name|SYSTEM_COLLECTION
operator|+
literal|"/config"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|ROOT_COLLECTION_URI
init|=
name|create
argument_list|(
name|ROOT_COLLECTION
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|RELATIVE_ROOT_COLLECTION_URI
init|=
name|create
argument_list|(
name|ROOT_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|SYSTEM_COLLECTION_URI
init|=
name|create
argument_list|(
name|SYSTEM_COLLECTION
argument_list|)
decl_stmt|;
comment|/** /db/etc */
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|ETC_COLLECTION_URI
init|=
name|SYSTEM_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"/etc"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|CONFIG_COLLECTION_URI
init|=
name|create
argument_list|(
name|CONFIG_COLLECTION
argument_list|)
decl_stmt|;
comment|//TODO : create using resolve()
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|ROOT_COLLECTION_CONFIG_URI
init|=
name|create
argument_list|(
name|CONFIG_COLLECTION
operator|+
literal|"/"
operator|+
name|ROOT_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|METADATA_COLLECTION_URI
init|=
name|create
argument_list|(
name|SYSTEM_COLLECTION
operator|+
literal|"/metadata"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|TEMP_COLLECTION_URI
init|=
name|create
argument_list|(
name|TEMP_COLLECTION
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|EMPTY_URI
init|=
name|createInternal
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|XmldbURI
name|EMBEDDED_SERVER_URI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|EMBEDDED_SERVER_URI_PREFIX
operator|+
name|EMBEDDED_SERVER_AUTHORITY
argument_list|)
decl_stmt|;
comment|/** 'xmldb:exist///db' */
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_DB
init|=
name|EMBEDDED_SERVER_URI_PREFIX
operator|+
name|ROOT_COLLECTION
decl_stmt|;
comment|/** 'xmldb:exist///db' XmldbURI */
specifier|public
specifier|static
specifier|final
name|XmldbURI
name|LOCAL_DB_URI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|EMBEDDED_SERVER_URI_PREFIX
operator|+
name|ROOT_COLLECTION
argument_list|)
decl_stmt|;
comment|//TODO : deprecate when we split at root collection
specifier|public
specifier|final
specifier|static
name|String
name|API_XMLRPC
init|=
literal|"xmlrpc"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_WEBDAV
init|=
literal|"webdav"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_REST
init|=
literal|"rest-style"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|API_LOCAL
init|=
literal|"local"
decl_stmt|;
specifier|private
name|String
name|encodedCollectionPath
decl_stmt|;
comment|/**      * Contructs an XmldbURI from given URI. The provided URI must have the XMLDB_SCHEME ("xmldb")      *      * @param   xmldbURI  A string      *      * @throws  URISyntaxException  If the given string is not a valid xmldb URI.      */
specifier|protected
name|XmldbURI
parameter_list|(
name|URI
name|xmldbURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|uriStr
init|=
name|xmldbURI
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|uriStr
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|uriStr
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|&&
operator|!
name|uriStr
operator|.
name|endsWith
argument_list|(
literal|"/."
argument_list|)
operator|&&
operator|!
name|uriStr
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
comment|// Only normalize if uri is not "." or ".." or doesn't end with "/." or "/.." .  If it's a dot uri, then the final segment is assumed to be a document name
name|xmldbURI
operator|=
name|xmldbURI
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hadXmldbPrefix
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|xmldbURI
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|XMLDB_SCHEME
operator|.
name|equals
argument_list|(
name|xmldbURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|URISyntaxException
argument_list|(
name|xmldbURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"xmldb URI scheme does not start with "
operator|+
name|XMLDB_URI_PREFIX
argument_list|)
operator|)
throw|;
block|}
name|xmldbURI
operator|=
operator|new
name|URI
argument_list|(
name|xmldbURI
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|XMLDB_URI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hadXmldbPrefix
operator|=
literal|true
expr_stmt|;
block|}
name|parseURI
argument_list|(
name|xmldbURI
argument_list|,
name|hadXmldbPrefix
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XmldbURI
parameter_list|(
name|String
name|collectionPath
parameter_list|)
block|{
name|this
operator|.
name|encodedCollectionPath
operator|=
name|collectionPath
expr_stmt|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|xmldbUriFor
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|(
name|getXmldbURI
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|xmldbUriFor
parameter_list|(
name|String
name|xmldbURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|(
name|xmldbUriFor
argument_list|(
name|xmldbURI
argument_list|,
literal|true
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|xmldbUriFor
parameter_list|(
name|String
name|xmldbURI
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|xmldbURI
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|escape
condition|?
name|AnyURIValue
operator|.
name|escape
argument_list|(
name|xmldbURI
argument_list|)
else|:
name|xmldbURI
argument_list|)
decl_stmt|;
return|return
operator|(
name|getXmldbURI
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|xmldbUriFor
parameter_list|(
name|String
name|accessURI
parameter_list|,
name|String
name|collectionPath
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|accessURI
operator|+
name|URIUtils
operator|.
name|iriToURI
argument_list|(
name|collectionPath
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|getXmldbURI
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|XmldbURI
name|create
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|xmldbUriFor
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|XmldbURI
name|create
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|xmldbUriFor
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|XmldbURI
name|create
parameter_list|(
name|String
name|accessURI
parameter_list|,
name|String
name|collectionPath
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|xmldbUriFor
argument_list|(
name|accessURI
argument_list|,
name|collectionPath
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|XmldbURI
name|createInternal
parameter_list|(
name|String
name|collectionPath
parameter_list|)
block|{
return|return
operator|(
operator|new
name|XmldbURI
argument_list|(
name|collectionPath
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|XmldbURI
name|getXmldbURI
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
operator|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|uri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|uri
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
operator|(
operator|new
name|FullXmldbURI
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
operator|new
name|XmldbURI
argument_list|(
name|uri
argument_list|)
operator|)
return|;
comment|/*             //TODO : get rid of this and use a more robust approach (dedicated constructor ?) -pb             //TODO : use named constants             index = path.lastIndexOf("/xmlrpc");             if (index> lastIndex) {                 return false;             }             //TODO : use named constants             index = path.lastIndexOf("/webdav");             if (index> lastIndex) {                 return false;             }             */
block|}
comment|/**      * Feeds private members. Receives a URI with the xmldb: scheme already stripped      *      * @param   xmldbURI        DOCUMENT ME!      * @param   hadXmldbPrefix  DOCUMENT ME!      *      * @throws  URISyntaxException      */
specifier|protected
name|void
name|parseURI
parameter_list|(
name|URI
name|xmldbURI
parameter_list|,
name|boolean
name|hadXmldbPrefix
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|splitPath
argument_list|(
name|xmldbURI
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Given a java.net.URI.getPath(),<strong>tries</strong> to dispatch the host's context from the collection path as smartly as possible. One      * would probably prefer a split policy based on the presence of a well-known root collection.      *      * @param   path  The java.net.URI.getPath() provided.      *      * @throws  URISyntaxException      */
specifier|protected
name|void
name|splitPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|encodedCollectionPath
operator|=
name|path
expr_stmt|;
if|if
condition|(
operator|(
name|encodedCollectionPath
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|encodedCollectionPath
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
operator|&&
name|encodedCollectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|encodedCollectionPath
operator|=
name|encodedCollectionPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|encodedCollectionPath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//TODO : check that collectionPath starts with DBBroker.ROOT_COLLECTION ?
block|}
comment|/**      * To be called before a context operation with another XmldbURI.      *      * @param   uri      *      * @throws  IllegalArgumentException      */
specifier|protected
name|void
name|checkCompatibilityForContextOperation
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getInstanceName
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|+
literal|" instance differs from "
operator|+
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|)
throw|;
block|}
comment|//case insensitive comparison
if|if
condition|(
operator|(
name|this
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getHost
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getHost
argument_list|()
operator|+
literal|" host differs from "
operator|+
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|)
operator|&&
operator|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|uri
operator|.
name|getPort
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getPort
argument_list|()
operator|+
literal|" port differs from "
operator|+
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getCollectionPath
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|" collection differs from "
operator|+
name|uri
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
comment|/**      * To be called before a collection path operation with another XmldbURI.      *      * @param   uri      *      * @throws  IllegalArgumentException      */
specifier|protected
name|void
name|checkCompatibilityForCollectionOperation
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getInstanceName
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getInstanceName
argument_list|()
operator|+
literal|" instance differs from "
operator|+
name|uri
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|)
throw|;
block|}
comment|//case insensitive comparison
if|if
condition|(
operator|(
name|this
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getHost
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getHost
argument_list|()
operator|+
literal|" host differs from "
operator|+
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
name|NO_PORT
operator|)
operator|&&
operator|(
name|this
operator|.
name|getPort
argument_list|()
operator|!=
name|uri
operator|.
name|getPort
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getPort
argument_list|()
operator|+
literal|" port differs from "
operator|+
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|this
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|this
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|this
operator|.
name|getContext
argument_list|()
operator|+
literal|" context differs from "
operator|+
name|uri
operator|.
name|getContext
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
comment|/*      * It is an error for any of the following private members to throw an exception.      */
comment|/*     private void setInstanceName(String instanceName) {         String oldInstanceName = this.instanceName;         try {             this.instanceName = instanceName;             recomputeURI();         } catch (URISyntaxException e) {             this.instanceName = oldInstanceName;             throw new IllegalArgumentException("Invalid URI: "+e.getMessage());         }     }      private void setContext(String context) throws URISyntaxException {         String oldContext = this.context;         try {             //trims any trailing slash             if (context != null&& context.endsWith("/")) {                 //include root slash if we have a host                 if (this.getHost() != null)                     context = context.substring(0, context.length() - 1);             }             this.context = "".equals(context) ? null : context;             recomputeURI();         } catch (URISyntaxException e) {             this.context = oldContext;             throw e;         }     }      private void setCollectionPath(String collectionPath) throws URISyntaxException {         String oldCollectionPath = collectionPath;         try {             if (collectionPath == null)                 this.encodedCollectionPath = null;             else {                 String escaped = URIUtils.escapeHtmlURI(collectionPath);                 this.encodedCollectionPath = escaped;             }             recomputeURI();         } catch (URISyntaxException e) {             this.encodedCollectionPath = oldCollectionPath;             throw e;         } catch (UnsupportedEncodingException e) {             wrappedURI = null;             throw new URISyntaxException(this.toString(), e.getMessage());         }     }     */
comment|/**      * This returns a proper heirarchical URI - the xmldb scheme is trimmed from the beginning. The scheme will be the instance name, and all other      * fields will be populated as would be expected from a heirarchical URI      *      * @return  DOCUMENT ME!      *      * @see     #getXmldbURI      */
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
return|return
operator|(
name|URI
operator|.
name|create
argument_list|(
name|encodedCollectionPath
argument_list|)
operator|)
return|;
block|}
comment|/**      * This returns an xmldb uri. This is the most generic sort of uri - the only fields set in the uri are scheme and schemeSpecificPart      *      * @return  DOCUMENT ME!      */
specifier|public
name|URI
name|getXmldbURI
parameter_list|()
block|{
return|return
operator|(
name|URI
operator|.
name|create
argument_list|(
name|encodedCollectionPath
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getInstanceName
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/**      * Method to return the collection path with reserved characters percent encoded.      *      * @return  Returns the encoded collection path      */
specifier|public
name|String
name|getRawCollectionPath
parameter_list|()
block|{
return|return
operator|(
name|encodedCollectionPath
operator|)
return|;
block|}
specifier|public
name|String
name|getCollectionPath
parameter_list|()
block|{
if|if
condition|(
name|encodedCollectionPath
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
try|try
block|{
comment|//TODO: we might want to cache this value
return|return
operator|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|encodedCollectionPath
argument_list|,
literal|"UTF-8"
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//Should never happen
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|encodedCollectionPath
operator|+
literal|" can not be properly escaped"
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|public
name|XmldbURI
name|toCollectionPathURI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|this
operator|instanceof
name|FullXmldbURI
operator|)
condition|?
name|XmldbURI
operator|.
name|create
argument_list|(
name|getRawCollectionPath
argument_list|()
argument_list|)
else|:
name|this
operator|)
return|;
block|}
comment|/**      * To be called each time a private member that interacts with the wrapped URI is modified.      *      * @throws  URISyntaxException      */
specifier|protected
name|void
name|recomputeURI
parameter_list|()
throws|throws
name|URISyntaxException
block|{
block|}
comment|/**      * To be called each time a private member that interacts with the wrapped URI is modified.      */
specifier|protected
name|void
name|safeRecomputeURI
parameter_list|()
block|{
try|try
block|{
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/*      * Must be encoded!      */
specifier|private
name|void
name|setCollectionPath
parameter_list|(
name|String
name|collectionPath
parameter_list|)
block|{
name|String
name|oldCollectionPath
init|=
name|encodedCollectionPath
decl_stmt|;
try|try
block|{
name|encodedCollectionPath
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|collectionPath
argument_list|)
condition|?
literal|null
else|:
name|collectionPath
expr_stmt|;
comment|//include root slash if we have a context
if|if
condition|(
operator|(
name|encodedCollectionPath
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|getContext
argument_list|()
operator|!=
literal|null
operator|)
operator|&
operator|(
name|encodedCollectionPath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
operator|)
operator|)
condition|)
block|{
name|encodedCollectionPath
operator|=
literal|"/"
operator|+
name|encodedCollectionPath
expr_stmt|;
block|}
name|recomputeURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|encodedCollectionPath
operator|=
name|oldCollectionPath
expr_stmt|;
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|public
name|String
name|getApiName
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|ob
parameter_list|)
throws|throws
name|ClassCastException
block|{
if|if
condition|(
operator|!
operator|(
name|ob
operator|instanceof
name|XmldbURI
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|ClassCastException
argument_list|(
literal|"The provided Object is not an XmldbURI"
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|XmldbURI
operator|)
name|ob
operator|)
operator|.
name|getXmldbURI
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**      * This function returns a relative XmldbURI with the value after the last / in the collection path of the URI.      *      * @return  A relative XmldbURI containing the value after the last / in the collection path      */
specifier|public
name|XmldbURI
name|lastSegment
parameter_list|()
block|{
name|String
name|name
init|=
name|getRawCollectionPath
argument_list|()
decl_stmt|;
name|int
name|last
decl_stmt|;
comment|// No slash - give them the whole thing!
if|if
condition|(
operator|(
name|last
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|)
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
return|return
operator|(
name|this
operator|)
return|;
block|}
comment|// Checks against a trailing slash
comment|// is this appropriate?
if|if
condition|(
name|last
operator|==
operator|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|last
operator|+
literal|1
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/**      * This function returns a relative XmldbURI with the value after the last / in the collection path of the URI.      *      * @return  A relative XmldbURI containing the value after the last / in the collection path      */
specifier|public
name|int
name|numSegments
parameter_list|()
block|{
name|String
name|name
init|=
name|getRawCollectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
name|String
index|[]
name|split
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
operator|(
name|split
operator|.
name|length
operator|)
return|;
block|}
comment|/**      * This function returns a relative XmldbURI with the value after the last / in the collection path of the URI.      *      * @return  A relative XmldbURI containing the value after the last / in the collection path      */
specifier|public
name|XmldbURI
index|[]
name|getPathSegments
parameter_list|()
block|{
name|String
name|name
init|=
name|getRawCollectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|XmldbURI
index|[
literal|0
index|]
operator|)
return|;
block|}
name|String
index|[]
name|split
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|fix
init|=
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|XmldbURI
index|[]
name|segments
init|=
operator|new
name|XmldbURI
index|[
name|split
operator|.
name|length
operator|-
name|fix
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fix
init|;
name|i
operator|<
name|split
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|segments
index|[
name|i
operator|-
name|fix
index|]
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|split
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|segments
operator|)
return|;
block|}
comment|/**      * This function returns a string with everything after the last / removed.      *      * @return  A relative XmldbURI containing the value after the last / in the collection path      */
specifier|public
name|XmldbURI
name|removeLastSegment
parameter_list|()
block|{
name|String
name|uri
init|=
name|toString
argument_list|()
decl_stmt|;
name|int
name|last
decl_stmt|;
comment|// No slash - return null!
if|if
condition|(
operator|(
name|last
operator|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|)
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
return|return
operator|(
name|XmldbURI
operator|.
name|EMPTY_URI
operator|)
return|;
block|}
comment|// Checks against a trailing slash
comment|// is this appropriate?
if|if
condition|(
name|last
operator|==
operator|(
name|uri
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|uri
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|last
operator|<=
literal|0
operator|)
condition|?
name|XmldbURI
operator|.
name|EMPTY_URI
else|:
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|last
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|XmldbURI
name|append
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|(
name|append
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|XmldbURI
name|append
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|String
name|toAppend
init|=
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
decl_stmt|;
name|String
name|prepend
init|=
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|toAppend
argument_list|)
condition|)
block|{
return|return
operator|(
name|this
operator|)
return|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|prepend
argument_list|)
condition|)
block|{
return|return
operator|(
name|uri
operator|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|prepend
operator|.
name|charAt
argument_list|(
name|prepend
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|!
operator|(
name|toAppend
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
return|return
operator|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|prepend
operator|+
literal|"/"
operator|+
name|toAppend
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|prepend
operator|+
name|toAppend
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
name|XmldbURI
name|appendInternal
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
return|return
operator|(
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|getRawCollectionPath
argument_list|()
operator|+
literal|'/'
operator|+
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**      * Ugly workaround for non-URI compliant pathes.      *      * @param       pseudoURI  What is supposed to be a URI      *      * @return      an supposedly correctly escaped URI<strong>string representation</string></strong>      *      * @throws      URISyntaxException  DOCUMENT ME!      *      * @deprecated  By definition, using this method is strongly discouraged      */
specifier|public
specifier|static
name|String
name|recoverPseudoURIs
parameter_list|(
name|String
name|pseudoURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|p
operator|.
name|split
argument_list|(
name|pseudoURI
argument_list|)
decl_stmt|;
name|StringBuilder
name|newURIString
init|=
operator|new
name|StringBuilder
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newURIString
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
condition|)
block|{
try|try
block|{
comment|//Try to instantiate the parst as a URI
operator|new
name|URI
argument_list|(
name|newURIString
operator|+
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|newURIString
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to escape : ''"
operator|+
name|parts
index|[
name|i
index|]
operator|+
literal|"' in '"
operator|+
name|pseudoURI
operator|+
literal|"' !"
argument_list|)
expr_stmt|;
name|newURIString
operator|.
name|append
argument_list|(
name|URIUtils
operator|.
name|encodeForURI
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|newURIString
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|ob
parameter_list|)
block|{
if|if
condition|(
name|ob
operator|instanceof
name|XmldbURI
condition|)
block|{
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|XmldbURI
operator|)
name|ob
operator|)
operator|.
name|getXmldbURI
argument_list|()
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|ob
operator|instanceof
name|URI
condition|)
block|{
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ob
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|ob
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|URI
argument_list|(
operator|(
name|String
operator|)
name|ob
argument_list|)
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|boolean
name|equalsInternal
parameter_list|(
name|XmldbURI
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
return|return
operator|(
name|encodedCollectionPath
operator|.
name|equals
argument_list|(
name|other
operator|.
name|encodedCollectionPath
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
return|return
operator|(
name|isCollectionPathAbsolute
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isContextAbsolute
parameter_list|()
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|XmldbURI
name|normalizeContext
parameter_list|()
block|{
return|return
operator|(
name|this
operator|)
return|;
block|}
specifier|public
name|URI
name|relativizeContext
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|URI
name|resolveContext
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|URI
name|resolveContext
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|NullPointerException
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|isCollectionPathAbsolute
parameter_list|()
block|{
return|return
operator|(
operator|(
name|encodedCollectionPath
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|encodedCollectionPath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|encodedCollectionPath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
operator|)
operator|)
return|;
block|}
specifier|public
name|XmldbURI
name|normalizeCollectionPath
parameter_list|()
block|{
name|String
name|collectionPath
init|=
name|this
operator|.
name|encodedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|this
operator|)
return|;
block|}
name|URI
name|collectionPathURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionPathURI
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|collectionPath
argument_list|)
condition|)
block|{
return|return
operator|(
name|this
operator|)
return|;
block|}
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|getXmldbURI
argument_list|()
argument_list|)
decl_stmt|;
name|uri
operator|.
name|setCollectionPath
argument_list|(
name|collectionPathURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|uri
operator|)
return|;
block|}
specifier|public
name|URI
name|relativizeCollectionPath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
operator|)
throw|;
block|}
name|String
name|collectionPath
init|=
name|this
operator|.
name|encodedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
literal|"The current collection path is null"
argument_list|)
operator|)
throw|;
block|}
name|URI
name|collectionPathURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added a final '/' to '"
operator|+
name|collectionPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|collectionPathURI
operator|.
name|relativize
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
comment|//TODO: unit test!
specifier|public
name|XmldbURI
name|resolveCollectionPath
parameter_list|(
name|XmldbURI
name|child
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
literal|"The provided child URI is null"
argument_list|)
operator|)
throw|;
block|}
comment|//        if (child.isAbsolute())
comment|//            return child;
comment|//Old method:
comment|/*         String collectionPath = this.encodedCollectionPath;         if (collectionPath == null)             throw new NullPointerException("The current collection path is null");         URI collectionPathURI;         //Adds a final slash if necessary         if (!collectionPath.endsWith("/")) {             LOG.info("Added a final '/' to '" + collectionPath + "'");             collectionPathURI = URI.create(collectionPath + "/");         } else             collectionPathURI = URI.create(collectionPath);         */
name|String
name|collectionPath
init|=
name|toCollectionPathURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|URI
name|newCollectionURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|newCollectionURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
operator|.
name|resolve
argument_list|(
name|child
operator|.
name|toCollectionPathURI
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCollectionURI
operator|=
name|getURI
argument_list|()
operator|.
name|resolve
argument_list|(
name|child
operator|.
name|toCollectionPathURI
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XmldbURI
name|newURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|getXmldbURI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newCollectionPath
init|=
name|newCollectionURI
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCollectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|newCollectionPath
operator|=
name|newCollectionPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|newCollectionPath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|newURI
operator|.
name|encodedCollectionPath
operator|=
name|newCollectionPath
expr_stmt|;
name|newURI
operator|.
name|safeRecomputeURI
argument_list|()
expr_stmt|;
return|return
operator|(
name|newURI
operator|)
return|;
block|}
specifier|public
name|URI
name|resolveCollectionPath
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|NullPointerException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
literal|"The provided URI is null"
argument_list|)
operator|)
throw|;
block|}
name|String
name|collectionPath
init|=
name|this
operator|.
name|encodedCollectionPath
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
literal|"The current collection path is null"
argument_list|)
operator|)
throw|;
block|}
name|URI
name|collectionPathURI
decl_stmt|;
comment|//Adds a final slash if necessary
if|if
condition|(
operator|!
name|collectionPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added a final '/' to '"
operator|+
name|collectionPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionPathURI
operator|=
name|URI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|collectionPathURI
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|toASCIIString
parameter_list|()
block|{
comment|//TODO : trim trailing slash if necessary
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|URL
name|toURL
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|MalformedURLException
block|{
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|)
return|;
block|}
comment|//TODO: add unit test for this
comment|//TODO : come on ! use a URI method name.
comment|//resolve() is a must here
specifier|public
name|boolean
name|startsWith
parameter_list|(
name|XmldbURI
name|xmldbUri
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xmldbUri
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|xmldbUri
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|//TODO : come on ! use a URI method name.
comment|//resolve() is a must here
specifier|public
name|boolean
name|startsWith
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|(
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|string
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|//TODO: add unit test for this
specifier|public
name|boolean
name|endsWith
parameter_list|(
name|XmldbURI
name|xmldbUri
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xmldbUri
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmldbUri
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|endsWith
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|(
name|endsWith
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|string
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|//TODO: add unit test for this
specifier|public
name|XmldbURI
name|prepend
parameter_list|(
name|XmldbURI
name|xmldbUri
parameter_list|)
block|{
if|if
condition|(
name|xmldbUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" cannot start with null!"
argument_list|)
operator|)
throw|;
block|}
comment|//TODO : resolve URIs !!! xmldbUri.resolve(this)
return|return
operator|(
name|xmldbUri
operator|.
name|append
argument_list|(
name|this
argument_list|)
operator|)
return|;
block|}
comment|//TODO: add unit test for this
specifier|public
name|XmldbURI
name|trimFromBeginning
parameter_list|(
name|XmldbURI
name|xmldbUri
parameter_list|)
block|{
if|if
condition|(
name|xmldbUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|NullPointerException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" cannot start with null!"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|!
name|startsWith
argument_list|(
name|xmldbUri
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|IllegalArgumentException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" does not start with "
operator|+
name|xmldbUri
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|xmldbUri
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|XmldbURI
name|trimFromBeginning
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|(
name|trimFromBeginning
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|string
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|encodedCollectionPath
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getPathComponents
parameter_list|(
name|String
name|collectionPath
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|split
init|=
name|p
operator|.
name|split
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|split
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|split
argument_list|,
literal|1
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|split
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|result
operator|)
return|;
block|}
comment|/* @deprecated Legacy method used here and there in the code      * if the currentPath is null return the parentPath else      * if the currentPath doesnt not start with "/db/" and is not equal to "/db" then adjust the path to start with the parentPath      *      * Fix to Jens collection/resource name problem by deliriumsky      *      * @deprecated Use {@link #resolveCollectionPath(String) resolveCollectionPath} instead      */
specifier|public
specifier|static
name|String
name|checkPath
parameter_list|(
name|String
name|currentPath
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
if|if
condition|(
name|currentPath
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|parentPath
operator|)
return|;
block|}
comment|//Absolute path
if|if
condition|(
name|ROOT_COLLECTION
operator|.
name|equals
argument_list|(
name|currentPath
argument_list|)
condition|)
block|{
return|return
operator|(
name|currentPath
operator|)
return|;
block|}
comment|//Absolute path
if|if
condition|(
name|currentPath
operator|.
name|startsWith
argument_list|(
name|ROOT_COLLECTION
operator|+
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|(
name|currentPath
operator|)
return|;
block|}
comment|//Kind of relative path : against all conventions ! -pb
if|if
condition|(
name|currentPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Initial '/' for relative path '"
operator|+
name|currentPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
comment|//OK : let's process this so-called relative path
if|if
condition|(
name|currentPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|parentPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|(
name|parentPath
operator|+
name|currentPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
name|parentPath
operator|+
name|currentPath
operator|)
return|;
block|}
comment|//True relative pathes
if|if
condition|(
name|parentPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|(
name|parentPath
operator|+
name|currentPath
operator|)
return|;
block|}
return|return
operator|(
name|parentPath
operator|+
literal|"/"
operator|+
name|currentPath
operator|)
return|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param       fileName      * @param       parentPath      *      * @return      DOCUMENT ME!      *      * @deprecated  Legacy method used here and there in the code      */
specifier|public
specifier|static
name|String
name|checkPath2
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
comment|//if (!fileName.startsWith("/"))
comment|//    fileName = "/" + fileName;
comment|/*if (!fileName.startsWith(ROOT_COLLECTION))             fileName = ROOT_COLLECTION + fileName;*/
return|return
operator|(
name|checkPath
argument_list|(
name|fileName
argument_list|,
name|parentPath
argument_list|)
operator|)
return|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param       name      *      * @return      DOCUMENT ME!      *      * @deprecated  Legacy method used here and there in the code and copied as such      */
comment|//TODO : changes // into /  */
specifier|public
name|String
name|makeAbsolute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//TODO : use dedicated function in XmldbURI
if|if
condition|(
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|name
operator|.
name|length
argument_list|()
operator|>
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
operator|&&
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name2
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|name2
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|name2
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
operator|)
condition|)
block|{
name|name2
operator|=
literal|"/"
operator|+
name|name2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|name2
operator|.
name|startsWith
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
condition|)
block|{
name|name2
operator|=
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
name|name2
expr_stmt|;
block|}
if|if
condition|(
name|name2
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|(
name|name2
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|name2
operator|=
name|name2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|name2
operator|)
return|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param       name      *      * @return      DOCUMENT ME!      *      * @deprecated  Legacy method used here and there in the code and copied as such      */
comment|//TODO : changes // into /  */
specifier|public
specifier|final
specifier|static
name|String
name|normalizeCollectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//TODO : use dedicated function in XmldbURI
if|if
condition|(
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|name
operator|.
name|length
argument_list|()
operator|>
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
operator|&&
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name2
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|name2
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|name2
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
operator|)
condition|)
block|{
name|name2
operator|=
literal|"/"
operator|+
name|name2
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|name2
operator|.
name|startsWith
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
condition|)
block|{
name|name2
operator|=
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
name|name2
expr_stmt|;
block|}
if|if
condition|(
name|name2
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|(
name|name2
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|name2
operator|=
name|name2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|name2
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getAuthority()      */
specifier|public
name|String
name|getAuthority
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getFragment()      */
specifier|public
name|String
name|getFragment
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getPort()      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
operator|(
name|NO_PORT
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getQuery()      */
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getRawAuthority()      */
specifier|public
name|String
name|getRawAuthority
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getHost()      */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getUserInfo()      */
specifier|public
name|String
name|getUserInfo
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getRawFragment()      */
specifier|public
name|String
name|getRawFragment
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getRawQuery()      */
specifier|public
name|String
name|getRawQuery
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.net.URI#getRawUserInfo()      */
specifier|public
name|String
name|getRawUserInfo
parameter_list|()
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see java.lang.Object#hashCode()      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|getXmldbURI
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
comment|//  TODO : prefefined URIs as static classes...
block|}
end_class

end_unit

