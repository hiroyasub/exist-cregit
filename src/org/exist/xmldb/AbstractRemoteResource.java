begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Leasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ZipEntryInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|TemporaryFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|InputStreamUtil
operator|.
name|copy
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRemoteResource
extends|extends
name|AbstractRemote
implements|implements
name|EXistResource
implements|,
name|ExtendedResource
implements|,
name|Resource
block|{
specifier|protected
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
operator|.
name|Lease
name|xmlRpcClientLease
decl_stmt|;
specifier|protected
specifier|final
name|XmldbURI
name|path
decl_stmt|;
specifier|private
name|String
name|mimeType
decl_stmt|;
specifier|protected
name|Path
name|file
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|contentFile
init|=
literal|null
decl_stmt|;
specifier|protected
name|InputSource
name|inputSource
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|contentLen
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|Permission
name|permissions
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
name|Date
name|dateCreated
init|=
literal|null
decl_stmt|;
name|Date
name|dateModified
init|=
literal|null
decl_stmt|;
specifier|protected
name|AbstractRemoteResource
parameter_list|(
specifier|final
name|Leasable
argument_list|<
name|XmlRpcClient
argument_list|>
operator|.
name|Lease
name|xmlRpcClientLease
parameter_list|,
specifier|final
name|RemoteCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|documentName
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|xmlRpcClientLease
operator|=
name|xmlRpcClientLease
expr_stmt|;
if|if
condition|(
name|documentName
operator|.
name|numSegments
argument_list|()
operator|>
literal|1
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|documentName
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
name|parent
operator|.
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|documentName
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|collection
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getContent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Object
name|res
init|=
name|getExtendedContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|res
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|res
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|Path
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
name|Path
operator|)
name|res
argument_list|)
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|java
operator|.
name|io
operator|.
name|File
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|File
operator|)
name|res
operator|)
operator|.
name|toPath
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|InputSource
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
name|InputSource
operator|)
name|res
argument_list|)
return|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**      * @deprecated Here for backward compatibility, instead use {@see org.xmldb.api.base.Resource#getContent()}      */
annotation|@
name|Deprecated
specifier|protected
name|byte
index|[]
name|getData
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Object
name|res
init|=
name|getExtendedContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|res
operator|instanceof
name|Path
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
name|Path
operator|)
name|res
argument_list|)
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|java
operator|.
name|io
operator|.
name|File
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|File
operator|)
name|res
operator|)
operator|.
name|toPath
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|InputSource
condition|)
block|{
return|return
name|readFile
argument_list|(
operator|(
name|InputSource
operator|)
name|res
argument_list|)
return|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|res
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
block|}
return|return
operator|(
name|byte
index|[]
operator|)
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|contentLen
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCreationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|dateCreated
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getLastModificationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|dateModified
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLastModificationTime
parameter_list|(
specifier|final
name|Date
name|dateModified
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|dateModified
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dateModified
operator|.
name|before
argument_list|(
name|getCreationTime
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"Modification time must be after creation time."
argument_list|)
throw|;
block|}
specifier|final
name|List
name|params
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|dateModified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"setLastModified"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|dateModified
operator|=
name|dateModified
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getExtendedContentLength
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|contentLen
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|collection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
specifier|protected
name|boolean
name|setContentInternal
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|boolean
name|wasSet
init|=
literal|false
decl_stmt|;
try|try
block|{
name|freeResources
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Path
condition|)
block|{
name|file
operator|=
operator|(
name|Path
operator|)
name|value
expr_stmt|;
name|setExtendendContentLength
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|wasSet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|java
operator|.
name|io
operator|.
name|File
condition|)
block|{
name|file
operator|=
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|File
operator|)
name|value
operator|)
operator|.
name|toPath
argument_list|()
expr_stmt|;
name|setExtendendContentLength
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|wasSet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|InputSource
condition|)
block|{
name|inputSource
operator|=
operator|(
name|InputSource
operator|)
name|value
expr_stmt|;
if|if
condition|(
name|inputSource
operator|instanceof
name|EXistInputSource
condition|)
block|{
name|setExtendendContentLength
argument_list|(
operator|(
operator|(
name|EXistInputSource
operator|)
name|inputSource
operator|)
operator|.
name|getByteStreamLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|wasSet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|file
operator|=
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getTemporaryFile
argument_list|()
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
name|setExtendendContentLength
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|wasSet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|file
operator|=
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getTemporaryFile
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|file
argument_list|,
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
name|setExtendendContentLength
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|wasSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|wasSet
return|;
block|}
specifier|protected
name|void
name|setExtendendContentLength
parameter_list|(
specifier|final
name|long
name|len
parameter_list|)
block|{
name|this
operator|.
name|contentLen
operator|=
name|len
expr_stmt|;
block|}
specifier|public
name|void
name|setContentLength
parameter_list|(
specifier|final
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|contentLen
operator|=
name|len
expr_stmt|;
block|}
specifier|public
name|void
name|setContentLength
parameter_list|(
specifier|final
name|long
name|len
parameter_list|)
block|{
name|this
operator|.
name|contentLen
operator|=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMimeType
parameter_list|(
specifier|final
name|String
name|mimeType
parameter_list|)
block|{
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Permission
name|perms
parameter_list|)
block|{
name|permissions
operator|=
name|perms
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getContentIntoAFile
parameter_list|(
specifier|final
name|Path
name|localfile
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
init|(
specifier|final
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|localfile
argument_list|)
init|)
block|{
name|getContentIntoAStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|getRemoteContentIntoLocalFile
parameter_list|(
specifier|final
name|OutputStream
name|os
parameter_list|,
specifier|final
name|boolean
name|isRetrieve
parameter_list|,
specifier|final
name|int
name|handle
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|command
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRetrieve
condition|)
block|{
name|command
operator|=
literal|"retrieveFirstChunk"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|=
literal|"getDocumentData"
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|TemporaryFileManager
name|tempFileManager
init|=
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tempFile
init|=
name|tempFileManager
operator|.
name|getTemporaryFile
argument_list|()
decl_stmt|;
name|Map
name|table
init|=
operator|(
name|Map
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
name|command
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|method
decl_stmt|;
specifier|final
name|boolean
name|useLongOffset
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|containsKey
argument_list|(
literal|"supports-long-offset"
argument_list|)
operator|&&
operator|(
name|Boolean
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"supports-long-offset"
argument_list|)
condition|)
block|{
name|useLongOffset
operator|=
literal|true
expr_stmt|;
name|method
operator|=
literal|"getNextExtendedChunk"
expr_stmt|;
block|}
else|else
block|{
name|useLongOffset
operator|=
literal|false
expr_stmt|;
name|method
operator|=
literal|"getNextChunk"
expr_stmt|;
block|}
name|long
name|offset
init|=
operator|(
operator|(
name|Integer
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isCompressed
init|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|,
literal|"no"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|OutputStream
name|osTempFile
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tempFile
argument_list|)
init|)
block|{
comment|// One for the local cached file
name|Inflater
name|dec
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|decResult
init|=
literal|null
decl_stmt|;
name|int
name|decLength
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|dec
operator|=
operator|new
name|Inflater
argument_list|()
expr_stmt|;
name|decResult
operator|=
operator|new
name|byte
index|[
literal|65536
index|]
expr_stmt|;
name|dec
operator|.
name|setInput
argument_list|(
name|data
argument_list|)
expr_stmt|;
do|do
block|{
name|decLength
operator|=
name|dec
operator|.
name|inflate
argument_list|(
name|decResult
argument_list|)
expr_stmt|;
name|osTempFile
operator|.
name|write
argument_list|(
name|decResult
argument_list|,
literal|0
argument_list|,
name|decLength
argument_list|)
expr_stmt|;
comment|// And other for the stream where we want to save it!
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|decResult
argument_list|,
literal|0
argument_list|,
name|decLength
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|decLength
operator|==
name|decResult
operator|.
name|length
operator|||
operator|!
name|dec
operator|.
name|needsInput
argument_list|()
condition|)
do|;
block|}
else|else
block|{
name|osTempFile
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// And other for the stream where we want to save it!
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"handle"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|useLongOffset
condition|?
name|Long
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
name|method
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|offset
operator|=
name|useLongOffset
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
argument_list|)
else|:
operator|(
operator|(
name|Integer
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
operator|)
expr_stmt|;
name|data
operator|=
operator|(
name|byte
index|[]
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
comment|// One for the local cached file
if|if
condition|(
name|isCompressed
condition|)
block|{
name|dec
operator|.
name|setInput
argument_list|(
name|data
argument_list|)
expr_stmt|;
do|do
block|{
name|decLength
operator|=
name|dec
operator|.
name|inflate
argument_list|(
name|decResult
argument_list|)
expr_stmt|;
name|osTempFile
operator|.
name|write
argument_list|(
name|decResult
argument_list|,
literal|0
argument_list|,
name|decLength
argument_list|)
expr_stmt|;
comment|// And other for the stream where we want to save it!
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|decResult
argument_list|,
literal|0
argument_list|,
name|decLength
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|decLength
operator|==
name|decResult
operator|.
name|length
operator|||
operator|!
name|dec
operator|.
name|needsInput
argument_list|()
condition|)
do|;
block|}
else|else
block|{
name|osTempFile
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// And other for the stream where we want to save it!
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dec
operator|!=
literal|null
condition|)
block|{
name|dec
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
name|contentFile
operator|=
name|tempFile
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|DataFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|InputStream
name|getAnyStream
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|FastByteArrayInputStream
argument_list|(
operator|(
operator|(
name|String
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|new
name|FastByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"don't know how to handle value of type "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|getContentIntoAStreamInternal
parameter_list|(
specifier|final
name|OutputStream
name|os
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|boolean
name|isRetrieve
parameter_list|,
specifier|final
name|int
name|handle
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|file
operator|!=
literal|null
operator|||
name|contentFile
operator|!=
literal|null
operator|||
name|inputSource
operator|!=
literal|null
operator|||
name|obj
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// First, the local content, then the remote one!!!!
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|bis
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|bis
operator|=
name|inputSource
operator|.
name|getByteStream
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|bis
operator|=
name|getAnyStream
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bis
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
block|}
name|copy
argument_list|(
name|bis
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bis
operator|!=
literal|null
condition|)
block|{
comment|// As it comes from an input source, we cannot blindly close it,
comment|// but at least let's reset it! (if it is possible)
if|if
condition|(
name|bis
operator|.
name|markSupported
argument_list|()
condition|)
block|{
try|try
block|{
name|bis
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|bis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Let's fetch it, and save just in time!!!
name|getRemoteContentIntoLocalFile
argument_list|(
name|os
argument_list|,
name|isRetrieve
argument_list|,
name|handle
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Object
name|getExtendedContentInternal
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|boolean
name|isRetrieve
parameter_list|,
specifier|final
name|int
name|handle
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
return|return
name|obj
return|;
block|}
if|else if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
if|else if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
return|return
name|inputSource
return|;
block|}
else|else
block|{
if|if
condition|(
name|contentFile
operator|==
literal|null
condition|)
block|{
name|getRemoteContentIntoLocalFile
argument_list|(
literal|null
argument_list|,
name|isRetrieve
argument_list|,
name|handle
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|contentFile
return|;
block|}
block|}
specifier|protected
name|InputStream
name|getStreamContentInternal
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|boolean
name|isRetrieve
parameter_list|,
specifier|final
name|int
name|handle
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|InputStream
name|retval
decl_stmt|;
try|try
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|inputSource
operator|.
name|getByteStream
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|getAnyStream
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// At least one value, please!!!
if|if
condition|(
name|contentFile
operator|==
literal|null
condition|)
block|{
name|getRemoteContentIntoLocalFile
argument_list|(
literal|null
argument_list|,
name|isRetrieve
argument_list|,
name|handle
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|retval
return|;
block|}
specifier|protected
name|long
name|getStreamLengthInternal
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|long
name|retval
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|inputSource
operator|!=
literal|null
operator|&&
name|inputSource
operator|instanceof
name|EXistInputSource
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|EXistInputSource
operator|)
name|inputSource
operator|)
operator|.
name|getByteStreamLength
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|String
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
operator|.
name|length
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|byte
index|[]
operator|)
name|obj
operator|)
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"don't know how to handle value of type "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Map
name|table
init|=
operator|(
name|Map
operator|)
name|xmlRpcClientLease
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
literal|"describeResource"
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|containsKey
argument_list|(
literal|"content-length-64bit"
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|o
init|=
name|table
operator|.
name|get
argument_list|(
literal|"content-length-64bit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|Long
operator|)
name|o
operator|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
operator|(
operator|(
name|Integer
operator|)
name|table
operator|.
name|get
argument_list|(
literal|"content-length"
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XmlRpcException
name|xre
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|xre
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xre
argument_list|)
throw|;
block|}
block|}
return|return
name|retval
return|;
block|}
specifier|protected
name|byte
index|[]
name|readFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
return|return
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|byte
index|[]
name|readFile
parameter_list|(
specifier|final
name|InputSource
name|in
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|InputStream
name|bis
init|=
name|in
operator|.
name|getByteStream
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|readFile
argument_list|(
name|bis
argument_list|)
return|;
block|}
finally|finally
block|{
comment|//TODO(AR) why do we do this? should probably close it?
comment|// As it comes from an input source, we cannot blindly close it,
comment|// but at least let's reset it! (if it is possible)
if|if
condition|(
name|bis
operator|.
name|markSupported
argument_list|()
condition|)
block|{
try|try
block|{
name|bis
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|bos
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|file
operator|=
literal|null
expr_stmt|;
name|inputSource
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
operator|.
name|returnTemporaryFile
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
name|contentFile
operator|=
literal|null
expr_stmt|;
block|}
name|xmlRpcClientLease
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|freeResources
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

