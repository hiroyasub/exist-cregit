begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|Debuggee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockedDocumentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DefaultDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|MutableDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_class
specifier|public
class|class
name|LocalXPathQueryService
extends|extends
name|AbstractLocalService
implements|implements
name|EXistXPathQueryService
implements|,
name|EXistXQueryService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LocalXPathQueryService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceDecls
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variableDecls
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|xpathCompatible
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|moduleLoadPath
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|properties
decl_stmt|;
specifier|private
name|boolean
name|lockDocuments
init|=
literal|false
decl_stmt|;
specifier|private
name|LockedDocumentMap
name|lockedDocuments
init|=
literal|null
decl_stmt|;
specifier|private
name|DBBroker
name|reservedBroker
init|=
literal|null
decl_stmt|;
specifier|public
name|LocalXPathQueryService
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|LocalCollection
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|,
name|pool
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|Properties
argument_list|(
name|collection
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"XPathQueryService"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"1.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearNamespaces
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|namespaceDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|namespaceDecls
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|query
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|query
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|query
parameter_list|(
specifier|final
name|XMLResource
name|res
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|query
argument_list|(
name|res
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|query
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|String
name|sortBy
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
block|}
decl_stmt|;
return|return
name|doQuery
argument_list|(
name|query
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|query
parameter_list|(
specifier|final
name|XMLResource
name|res
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|String
name|sortBy
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Node
name|n
init|=
operator|(
operator|(
name|LocalXMLResource
operator|)
name|res
operator|)
operator|.
name|root
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
operator|&&
name|n
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
condition|)
block|{
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|res
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
block|}
decl_stmt|;
return|return
name|doQuery
argument_list|(
name|query
argument_list|,
name|docs
argument_list|,
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
operator|)
name|n
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
specifier|final
name|NodeProxy
name|node
init|=
operator|(
operator|(
name|LocalXMLResource
operator|)
name|res
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// resource is a document
comment|//TODO : use dedicated function in XmldbURI
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|res
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|res
operator|.
name|getDocumentId
argument_list|()
argument_list|)
block|}
decl_stmt|;
return|return
name|doQuery
argument_list|(
name|query
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|NodeSet
name|set
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
decl_stmt|;
return|return
name|doQuery
argument_list|(
name|query
argument_list|,
name|docs
argument_list|,
name|set
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
block|}
specifier|private
name|ResourceSet
name|doQuery
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|XmldbURI
index|[]
name|docs
parameter_list|,
specifier|final
name|Sequence
name|contextSet
parameter_list|,
specifier|final
name|String
name|sortExpr
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Either
argument_list|<
name|XPathException
argument_list|,
name|CompiledExpression
argument_list|>
name|maybeExpr
init|=
name|compileAndCheck
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeExpr
operator|.
name|isLeft
argument_list|()
condition|)
block|{
specifier|final
name|XPathException
name|e
init|=
name|maybeExpr
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|execute
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|maybeExpr
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|sortExpr
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|execute
parameter_list|(
specifier|final
name|CompiledExpression
name|expression
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|execute
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|expression
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|execute
parameter_list|(
specifier|final
name|XMLResource
name|res
parameter_list|,
specifier|final
name|CompiledExpression
name|expression
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|NodeProxy
name|node
init|=
operator|(
operator|(
name|LocalXMLResource
operator|)
name|res
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// resource is a document
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|res
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|res
operator|.
name|getDocumentId
argument_list|()
argument_list|)
block|}
empty_stmt|;
return|return
name|execute
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|,
name|expression
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|NodeSet
name|set
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
empty_stmt|;
return|return
name|execute
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|docs
argument_list|,
name|set
argument_list|,
name|expression
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|ResourceSet
name|execute
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
index|[]
name|docs
parameter_list|,
specifier|final
name|Sequence
name|contextSet
parameter_list|,
specifier|final
name|CompiledExpression
name|expression
parameter_list|,
specifier|final
name|String
name|sortExpr
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|CompiledXQuery
name|expr
init|=
operator|(
name|CompiledXQuery
operator|)
name|expression
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
name|expr
operator|.
name|getContext
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockedDocuments
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setProtectedDocs
argument_list|(
name|lockedDocuments
argument_list|)
expr_stmt|;
block|}
name|setupContext
argument_list|(
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|brokerPool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|result
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|expr
argument_list|,
name|contextSet
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|// need to catch all runtime exceptions here to be able to release locked documents
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|/*              * Run the cleanup tasks, but don't close BinaryValues which              * are in the result set as the user has not yet accessed them.              *              * Final cleanup of those BinaryValues is done by the user              * calling EXistResource#close(), ResourceSet#clear() or CompiledExpression#reset().              */
specifier|final
name|Sequence
name|resSeq
init|=
name|result
decl_stmt|;
name|context
operator|.
name|runCleanupTasks
argument_list|(
name|o
lambda|->
block|{
if|if
condition|(
name|resSeq
operator|!=
literal|null
operator|&&
name|o
operator|instanceof
name|BinaryValue
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resSeq
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resSeq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|==
name|o
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"query took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LocalResourceSet
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|properties
argument_list|,
name|result
argument_list|,
name|sortExpr
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|execute
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|execute
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|executeStoredQuery
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|execute
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|DocumentImpl
name|resource
init|=
name|broker
operator|.
name|getResource
argument_list|(
operator|new
name|XmldbURI
argument_list|(
name|uri
argument_list|)
argument_list|,
name|Permission
operator|.
name|READ
operator||
name|Permission
operator|.
name|EXECUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
literal|"No stored XQuery exists at: "
operator|+
name|uri
argument_list|)
throw|;
block|}
return|return
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|false
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|ResourceSet
name|execute
parameter_list|(
specifier|final
name|LocalXmldbFunction
argument_list|<
name|Source
argument_list|>
name|sourceOp
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|source
init|=
name|sourceOp
operator|.
name|apply
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
block|}
empty_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|brokerPool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|brokerPool
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|variableDecls
operator|.
name|containsKey
argument_list|(
name|Debuggee
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|)
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|Debuggee
operator|.
name|SESSION
argument_list|,
name|variableDecls
operator|.
name|get
argument_list|(
name|Debuggee
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|)
argument_list|)
expr_stmt|;
name|variableDecls
operator|.
name|remove
argument_list|(
name|Debuggee
operator|.
name|PREFIX
operator|+
literal|":session"
argument_list|)
expr_stmt|;
block|}
name|setupContext
argument_list|(
name|source
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"query took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|!=
literal|null
condition|?
operator|new
name|LocalResourceSet
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|collection
argument_list|,
name|properties
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
else|:
literal|null
return|;
block|}
finally|finally
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompiledExpression
name|compile
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Either
argument_list|<
name|XPathException
argument_list|,
name|CompiledExpression
argument_list|>
name|maybeExpr
init|=
name|compileAndCheck
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeExpr
operator|.
name|isLeft
argument_list|()
condition|)
block|{
specifier|final
name|XPathException
name|e
init|=
name|maybeExpr
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|maybeExpr
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompiledExpression
name|compileAndCheck
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|XPathException
block|{
specifier|final
name|Either
argument_list|<
name|XPathException
argument_list|,
name|CompiledExpression
argument_list|>
name|result
init|=
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|compileAndCheck
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|query
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isLeft
argument_list|()
condition|)
block|{
throw|throw
name|result
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|result
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
specifier|private
name|Either
argument_list|<
name|XPathException
argument_list|,
name|CompiledExpression
argument_list|>
name|compileAndCheck
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|setupContext
argument_list|(
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|expr
init|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"compilation took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Either
operator|.
name|Right
argument_list|(
name|expr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
return|return
name|Either
operator|.
name|Left
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ResourceSet
name|queryResource
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|LocalXMLResource
name|res
init|=
operator|(
name|LocalXMLResource
operator|)
name|collection
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"resource '"
operator|+
name|resource
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
specifier|final
name|XmldbURI
index|[]
name|docs
init|=
operator|new
name|XmldbURI
index|[]
block|{
name|XmldbURI
operator|.
name|create
argument_list|(
name|res
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|res
operator|.
name|getDocumentId
argument_list|()
argument_list|)
block|}
decl_stmt|;
return|return
name|doQuery
argument_list|(
name|query
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setupContext
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|XQueryContext
name|context
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|XPathException
block|{
try|try
block|{
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"base-uri"
argument_list|,
name|collection
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
literal|"Invalid base uri"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|moduleLoadPath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|moduleLoadPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|String
name|modulePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|DBSource
condition|)
block|{
name|modulePath
operator|=
operator|(
operator|(
name|DBSource
operator|)
name|source
operator|)
operator|.
name|getDocumentPath
argument_list|()
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|source
operator|instanceof
name|FileSource
condition|)
block|{
name|modulePath
operator|=
operator|(
operator|(
name|FileSource
operator|)
name|source
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|modulePath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|modulePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// declare namespace/prefix mappings
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|namespaceDecls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|context
operator|.
name|declareNamespace
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// declare static variables
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|variableDecls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Execute all following queries in a protected environment.      * Protected means: it is guaranteed that documents referenced by the      * query or the result set are not modified by other threads      * until {@link #endProtected} is called.      */
annotation|@
name|Override
specifier|public
name|void
name|beginProtected
parameter_list|()
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|int
name|retries
init|=
name|BEGIN_PROTECTED_MAX_LOCKING_RETRIES
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
name|BEGIN_PROTECTED_MAX_LOCKING_RETRIES
operator|-
literal|2
decl_stmt|;
name|boolean
name|deadlockCaught
decl_stmt|;
do|do
block|{
name|reservedBroker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|deadlockCaught
operator|=
literal|false
expr_stmt|;
name|MutableDocumentSet
name|docs
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|coll
init|=
name|reservedBroker
operator|.
name|getCollection
argument_list|(
name|collection
operator|.
name|getPathURI
argument_list|()
argument_list|)
decl_stmt|;
name|lockedDocuments
operator|=
operator|new
name|LockedDocumentMap
argument_list|()
expr_stmt|;
name|docs
operator|=
operator|new
name|DefaultDocumentSet
argument_list|()
expr_stmt|;
name|coll
operator|.
name|allDocs
argument_list|(
name|reservedBroker
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|,
name|lockedDocuments
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deadlock detected. Starting over again. Docs: {}; locked: {}. Cause: {}"
argument_list|,
name|docs
operator|.
name|getDocumentCount
argument_list|()
argument_list|,
name|lockedDocuments
operator|.
name|size
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|lockedDocuments
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|reservedBroker
operator|.
name|close
argument_list|()
expr_stmt|;
name|deadlockCaught
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
literal|"Permission denied on document"
argument_list|)
throw|;
block|}
name|retries
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|deadlockCaught
operator|&&
name|retries
operator|>=
operator|-
literal|1
condition|)
do|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
if|if
condition|(
name|reservedBroker
operator|!=
literal|null
condition|)
block|{
name|reservedBroker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Unable to beginProtected after "
operator|+
name|BEGIN_PROTECTED_MAX_LOCKING_RETRIES
operator|+
literal|" retries"
argument_list|)
throw|;
block|}
comment|/**      * Close the protected environment. All locks held      * by the current thread are released. The result set      * is no longer guaranteed to be stable.      */
annotation|@
name|Override
specifier|public
name|void
name|endProtected
parameter_list|()
block|{
name|lockDocuments
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|lockedDocuments
operator|!=
literal|null
condition|)
block|{
name|lockedDocuments
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|lockedDocuments
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|reservedBroker
operator|!=
literal|null
condition|)
block|{
name|reservedBroker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|reservedBroker
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
specifier|final
name|String
name|ns
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|namespaceDecls
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCollection
parameter_list|(
specifier|final
name|Collection
name|col
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|namespaceDecls
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|declareVariable
parameter_list|(
specifier|final
name|String
name|qname
parameter_list|,
specifier|final
name|Object
name|initialValue
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|variableDecls
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|initialValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearVariables
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|variableDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setXPathCompatibility
parameter_list|(
specifier|final
name|boolean
name|backwardsCompatible
parameter_list|)
block|{
name|this
operator|.
name|xpathCompatible
operator|=
name|backwardsCompatible
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setModuleLoadPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|moduleLoadPath
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|CompiledExpression
name|expression
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|CompiledXQuery
name|expr
init|=
operator|(
name|CompiledXQuery
operator|)
name|expression
decl_stmt|;
name|expr
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

