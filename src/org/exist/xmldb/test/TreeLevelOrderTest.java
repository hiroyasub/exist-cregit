begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xpath
operator|.
name|XPathAPI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|CompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests the TreeLevelOrder function.  *   * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|TreeLevelOrderTest
extends|extends
name|TestCase
block|{
comment|/** eXist database url */
specifier|static
specifier|final
name|String
name|eXistUrl
init|=
literal|"xmldb:exist://"
decl_stmt|;
comment|/** eXist configuration file */
specifier|static
specifier|final
name|String
name|eXistConf
init|=
literal|"conf.xml"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|TreeLevelOrderTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test for the TreeLevelOrder function. This test 	 *<ul> 	 *<li>Registers a database instance</li> 	 *<li>Writes a document to the database using the XQueryService</li> 	 *<li>Reads the document from the database using XmlDB</li> 	 *<li>Accesses the document using Apache's XPathAPI</li> 	 *</ul> 	 */
specifier|public
specifier|final
name|void
name|testTreeLevelOrder
parameter_list|()
block|{
name|Database
name|eXist
init|=
literal|null
decl_stmt|;
name|String
name|document
init|=
literal|"survey.xml"
decl_stmt|;
try|try
block|{
name|eXist
operator|=
name|registerDatabase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to register database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Obtain XQuery service
name|XQueryService
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|=
name|getXQueryService
argument_list|(
name|eXist
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to obtain xquery service instance!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to obtain xquery service instance: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create document
name|StringBuffer
name|xmlDocument
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<survey>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<date>2004/11/24 17:42:31 GMT</date>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<from><![CDATA[tobias.wunden@o2it.ch]]></from>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<to><![CDATA[tobias.wunden@o2it.ch]]></to>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<subject><![CDATA[Test]]></subject>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<field>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<name><![CDATA[homepage]]></name>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<value><![CDATA[-]]></value>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"</field>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"</survey>"
argument_list|)
expr_stmt|;
comment|// write document to the database
try|try
block|{
name|store
argument_list|(
name|xmlDocument
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to write document to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read document back from database
name|Node
name|root
init|=
literal|null
decl_stmt|;
try|try
block|{
name|root
operator|=
name|load
argument_list|(
name|service
argument_list|,
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Document "
operator|+
name|document
operator|+
literal|" was not found in the database!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to write document to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// issue xpath query
try|try
block|{
name|Node
name|node
init|=
name|XPathAPI
operator|.
name|selectSingleNode
argument_list|(
name|root
argument_list|,
literal|"/survey/to/text()"
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to issue xpath on root node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Stores the given xml fragment into the database. 	 *  	 * @param xml the xml document 	 * @param service the xquery service 	 * @param document the document name 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|void
name|store
parameter_list|(
name|String
name|xml
parameter_list|,
name|XQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xdb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $root := xdb:collection('"
operator|+
name|eXistUrl
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', 'admin', 'admin'),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xdb:store($root, $document, $survey)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"survey"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Loads the xml document identified by<code>document</code> from the database. 	 *  	 * @param service the xquery service 	 * @param document the document to load 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|Node
name|load
parameter_list|(
name|XQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $survey := document(concat(\"/db/\", $document))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return ($survey)"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceSet
name|set
init|=
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|set
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Registers a new database instance and returns it. 	 *  	 * @throws XMLDBException 	 */
specifier|private
specifier|final
name|Database
name|registerDatabase
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Class
name|driver
init|=
literal|null
decl_stmt|;
name|String
name|driverName
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
try|try
block|{
name|driver
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|driver
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//			database.setProperty("configuration", eXistConf);
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
return|return
name|database
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Driver class "
operator|+
name|driverName
operator|+
literal|" was not found!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Driver class "
operator|+
name|driverName
operator|+
literal|" could not be instantiated!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Access violation when trying to instantiate XMLDB Driver "
operator|+
name|driverName
operator|+
literal|"!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
block|}
comment|/** 	 * Retrieves the base collection and thereof returns a reference to the collection's 	 * xquery service. 	 *  	 * @param db the database 	 * @return the xquery service 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|XQueryService
name|getXQueryService
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|collection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|eXistUrl
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

