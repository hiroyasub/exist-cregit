begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CreateCollectionsTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist:///db"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|public
name|Collection
name|root
init|=
literal|null
decl_stmt|;
specifier|public
name|CreateCollectionsTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// try to get collection
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCreateCollection
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created Collection: "
operator|+
name|root
operator|.
name|getName
argument_list|()
operator|+
literal|"( "
operator|+
name|root
operator|.
name|getClass
argument_list|()
operator|+
literal|" )"
argument_list|)
expr_stmt|;
name|Service
index|[]
name|services
init|=
name|root
operator|.
name|getServices
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"services array: "
operator|+
name|services
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection must provide at least one Service"
argument_list|,
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  number of services: "
operator|+
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|services
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Service: "
operator|+
name|services
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"( "
operator|+
name|services
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|+
literal|" )"
argument_list|)
expr_stmt|;
block|}
name|Collection
name|parentCollection
init|=
name|root
operator|.
name|getParentCollection
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"root parentCollection: "
operator|+
name|parentCollection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root collection has no parent"
argument_list|,
name|parentCollection
argument_list|)
expr_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Collection
name|testCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|int
name|ccc
init|=
name|testCollection
operator|.
name|getChildCollectionCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Collection just created: ChildCollectionCount==0"
argument_list|,
name|ccc
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection state should be Open after creation"
argument_list|,
name|testCollection
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"storing files ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------------------------"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"samples/shakespeare"
argument_list|)
decl_stmt|;
name|File
name|files
index|[]
init|=
name|f
operator|.
name|listFiles
argument_list|(
operator|new
name|XMLFilenameFilter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// XMLResource storeResourceFromFile(File f, Collection col)
name|storeResourceFromFile
argument_list|(
name|files
index|[
name|i
index|]
argument_list|,
name|testCollection
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|fileNames
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|file
init|=
name|files
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|lastSeparator
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|)
decl_stmt|;
name|fileNames
operator|.
name|add
argument_list|(
name|file
operator|.
name|substring
argument_list|(
name|lastSeparator
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fileNames: "
operator|+
name|fileNames
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|resourcesNames
init|=
name|testCollection
operator|.
name|listResources
argument_list|()
decl_stmt|;
name|int
name|resourceCount
init|=
name|testCollection
operator|.
name|getResourceCount
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCollection.getResourceCount()="
operator|+
name|resourceCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceCount
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"resourcesNames[i]="
operator|+
name|resourcesNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"resourcesNames must contain fileNames just stored"
argument_list|,
name|fileNames
operator|.
name|contains
argument_list|(
name|resourcesNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fileToRemove
init|=
literal|"macbeth.xml"
decl_stmt|;
name|Resource
name|resMacbeth
init|=
name|testCollection
operator|.
name|getResource
argument_list|(
name|fileToRemove
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getResource("
operator|+
name|fileToRemove
operator|+
literal|"\")"
argument_list|,
name|resMacbeth
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|removeResource
argument_list|(
name|resMacbeth
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"After removal resource count must decrease"
argument_list|,
name|testCollection
operator|.
name|getResourceCount
argument_list|()
operator|==
name|resourceCount
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// restore the resource just removed :
name|storeResourceFromFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"samples/shakespeare"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|fileToRemove
argument_list|)
argument_list|,
name|testCollection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|XMLResource
name|storeResourceFromFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Collection
name|testCollection
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
name|XMLResource
name|res
decl_stmt|;
name|String
name|xml
decl_stmt|;
name|res
operator|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"storeResourceFromFile"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|xml
operator|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
name|file
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

