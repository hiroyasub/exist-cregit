begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2000-04,  Wolfgang M. Meier (wolfgang@exist-db.org)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|test
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Abstract base class for concurrent tests.  *   * @author wolf  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ConcurrentTestBase
extends|extends
name|TestCase
block|{
specifier|protected
name|String
name|uri
decl_stmt|;
specifier|protected
name|Collection
name|root
decl_stmt|;
specifier|protected
name|String
name|testCol
decl_stmt|;
specifier|protected
name|String
index|[]
name|wordList
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|/** 	 * @param arg0 	 */
specifier|public
name|ConcurrentTestBase
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|testCollection
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|testCol
operator|=
name|testCollection
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|testConcurrent
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/* 	 * @see TestCase#setUp() 	 */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|DBUtils
operator|.
name|setupDB
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|wordList
operator|=
name|DBUtils
operator|.
name|wordList
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|DBUtils
operator|.
name|generateXMLFile
argument_list|(
literal|"testdoc.xml"
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|wordList
argument_list|)
decl_stmt|;
name|Collection
name|c1
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|testCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|null
condition|)
block|{
name|CollectionManagementService
name|mgr
init|=
name|DBUtils
operator|.
name|getCollectionManagementService
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|removeCollection
argument_list|(
name|testCol
argument_list|)
expr_stmt|;
block|}
name|c1
operator|=
name|DBUtils
operator|.
name|addCollection
argument_list|(
name|root
argument_list|,
name|testCol
argument_list|)
expr_stmt|;
name|DBUtils
operator|.
name|addXMLResource
argument_list|(
name|c1
argument_list|,
literal|"R1.xml"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * @see TestCase#tearDown() 	 */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|DBUtils
operator|.
name|removeCollection
argument_list|(
name|root
argument_list|,
name|testCol
argument_list|)
expr_stmt|;
name|DBUtils
operator|.
name|shutdownDB
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
class|class
name|Runner
extends|extends
name|Thread
block|{
specifier|private
name|Action
name|action
decl_stmt|;
specifier|private
name|int
name|repeat
decl_stmt|;
specifier|public
name|Runner
parameter_list|(
name|Action
name|action
parameter_list|,
name|int
name|repeat
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|repeat
operator|=
name|repeat
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see java.lang.Thread#run() 		 */
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|failed
condition|)
block|{
break|break;
block|}
name|failed
operator|=
name|action
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Action failed in Thread "
operator|+
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

