begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $Header$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ResourceSetTest
extends|extends
name|TestCase
block|{
name|String
name|XPathPrefix
decl_stmt|;
name|String
name|query1
decl_stmt|;
name|String
name|query2
decl_stmt|;
name|int
name|expected
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist:///db"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
comment|/** JUnit style constructor */
specifier|public
name|ResourceSetTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Currently (2003-04-02) fires an exception in FunPosition:
name|XPathPrefix
operator|=
literal|"document('/db/test/hamlet.xml')/*/*"
expr_stmt|;
name|query1
operator|=
name|XPathPrefix
operator|+
literal|"[position()>=5 ]"
expr_stmt|;
name|query2
operator|=
name|XPathPrefix
operator|+
literal|"[position()<=10]"
expr_stmt|;
name|expected
operator|=
literal|6
expr_stmt|;
comment|// This validates OK:
comment|//   XPathPrefix = "document('/db/test/hamlet.xml')//LINE";
comment|//		query1 = XPathPrefix + "[ .&='funeral' ]";		// count=4
comment|//		query2 = XPathPrefix + "[.&='dirge']";		// count=1, intersection=1
comment|//		expected = 1;
block|}
specifier|public
name|void
name|testIntersection
parameter_list|()
block|{
try|try
block|{
comment|// try to get collection
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
literal|"/test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query1: "
operator|+
name|query1
argument_list|)
expr_stmt|;
name|ResourceSet
name|result1
init|=
name|service
operator|.
name|query
argument_list|(
name|query1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query1: getSize()="
operator|+
name|result1
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query2: "
operator|+
name|query2
argument_list|)
expr_stmt|;
name|ResourceSet
name|result2
init|=
name|service
operator|.
name|query
argument_list|(
name|query2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query2: getSize()="
operator|+
name|result2
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size of intersection of "
operator|+
name|query1
operator|+
literal|" and "
operator|+
name|query2
operator|+
literal|" yields "
argument_list|,
name|expected
argument_list|,
operator|(
name|ResourceSetHelper
operator|.
name|intersection
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|)
operator|)
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* useless if we catch the relevant exception in the debugger: 	public static void main(String args[]){ 		ResourceSetTest t = new ResourceSetTest("ResourceSetTest"); 		t.setUp(); 		t.testIntersection(); 	} ****/
block|}
end_class

end_unit

