begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|IndexController
block|{
specifier|protected
name|IndexWorker
name|indexWorkers
index|[]
decl_stmt|;
specifier|public
name|IndexController
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|indexWorkers
operator|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getIndexManager
argument_list|()
operator|.
name|getWorkers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|StreamListener
name|getStreamListener
parameter_list|()
block|{
name|StreamListener
name|first
init|=
literal|null
decl_stmt|;
name|StreamListener
name|listener
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexWorkers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexWorker
name|worker
init|=
name|indexWorkers
index|[
name|i
index|]
decl_stmt|;
name|listener
operator|=
name|worker
operator|.
name|getListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|listener
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|.
name|setNextInChain
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|listener
expr_stmt|;
block|}
return|return
name|first
return|;
block|}
block|}
end_class

end_unit

