begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Manages all custom indexes registered with the database instance.  */
end_comment

begin_class
specifier|public
class|class
name|IndexManager
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|IndexManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|Map
name|indexers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new IndexManager and registers the indexes specified in      * the global configuration object.      *      * @param pool the BrokerPool representing the current database instance      * @param config the configuration object      * @throws DatabaseConfigurationException      */
specifier|public
name|IndexManager
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|Configuration
operator|.
name|IndexModuleConfig
name|modConf
index|[]
init|=
operator|(
name|Configuration
operator|.
name|IndexModuleConfig
index|[]
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.modules"
argument_list|)
decl_stmt|;
name|String
name|dataDir
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"db-connection.data-dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|modConf
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modConf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|className
init|=
name|modConf
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Index
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" does not implement "
operator|+
name|Index
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|index
operator|.
name|open
argument_list|(
name|pool
argument_list|,
name|dataDir
argument_list|,
name|modConf
index|[
name|i
index|]
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|indexers
operator|.
name|put
argument_list|(
name|modConf
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered index "
operator|+
name|className
operator|+
literal|" as "
operator|+
name|modConf
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" not found. Cannot configure index."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while configuring index "
operator|+
name|className
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while configuring index "
operator|+
name|className
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|indexers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns a set of IndexWorkers, one for each registered index. The      * returned IndexWorkers are used by the DBBroker instances to do the      * actual work.      *      * @return      */
specifier|public
specifier|synchronized
name|IndexWorker
index|[]
name|getWorkers
parameter_list|()
block|{
specifier|final
name|IndexWorker
name|workers
index|[]
init|=
operator|new
name|IndexWorker
index|[
name|indexers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Index
name|index
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|indexers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|index
operator|=
operator|(
name|Index
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|workers
index|[
name|j
index|]
operator|=
name|index
operator|.
name|getWorker
argument_list|()
expr_stmt|;
block|}
return|return
name|workers
return|;
block|}
comment|/**      * Shutdown all registered indexes by calling {@link org.exist.indexing.Index#close()}      * on them.      *      * @throws DBException      */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|DBException
block|{
name|Index
name|index
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|index
operator|=
operator|(
name|Index
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

