begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ExampleIndexer
implements|implements
name|Index
block|{
specifier|private
name|BFile
name|db
decl_stmt|;
specifier|public
name|void
name|open
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|Element
name|config
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|fileName
init|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|=
operator|new
name|BFile
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|file
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
literal|0.1
argument_list|,
literal|0.1
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Failed to create index file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DBException
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sync
parameter_list|()
block|{
block|}
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
operator|new
name|ExampleWorker
argument_list|()
return|;
block|}
class|class
name|ExampleWorker
implements|implements
name|IndexWorker
block|{
specifier|public
name|void
name|flush
parameter_list|()
block|{
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
operator|new
name|ExampleListener
argument_list|()
return|;
block|}
block|}
class|class
name|ExampleListener
extends|extends
name|AbstractStreamListener
block|{
specifier|public
name|ExampleListener
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setNextInChain
parameter_list|(
name|StreamListener
name|listener
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting next listener: "
operator|+
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setNextInChain
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"START ELEMENT: "
operator|+
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ATTRIBUTE: "
operator|+
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"END ELEMENT: "
operator|+
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TEXT: "
operator|+
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

