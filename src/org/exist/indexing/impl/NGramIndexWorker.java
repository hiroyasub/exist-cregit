begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|OccurrenceList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  *  * Each index entry maps a key (collectionId, ngram) to a list of occurrences, which has the  * following structure:  *  *<pre>[docId : int, nameType: byte, occurrenceCount: int, entrySize: long, [id: NodeId, offset: int, ...]* ]</pre>  */
end_comment

begin_class
specifier|public
class|class
name|NGramIndexWorker
implements|implements
name|IndexWorker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NGramIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_ELEMENT
init|=
literal|"ngram"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QNAME_ATTR
init|=
literal|"qname"
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|NGramIndex
name|index
decl_stmt|;
specifier|private
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
specifier|private
name|int
name|currentChar
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentImpl
name|currentDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
name|ngrams
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|(
literal|7
argument_list|)
decl_stmt|;
specifier|public
name|NGramIndexWorker
parameter_list|(
name|NGramIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|NGramIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// We use a map to store the QNames to be indexed
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|qname
init|=
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
operator|||
name|qname
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Configuration error: element "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" must have an attribute "
operator|+
name|QNAME_ATTR
argument_list|)
throw|;
name|NGramIndexConfig
name|config
init|=
operator|new
name|NGramIndexConfig
argument_list|(
name|namespaces
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|config
operator|.
name|getQName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|saveIndex
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE
case|:
case|case
name|StreamListener
operator|.
name|REMOVE_NODES
case|:
name|dropIndex
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|saveIndex
parameter_list|()
block|{
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|iterator
init|=
name|ngrams
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|QNameTerm
name|key
init|=
operator|(
name|QNameTerm
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OccurrenceList
name|occurences
init|=
operator|(
name|OccurrenceList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|occurences
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|key
operator|.
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|occurences
operator|.
name|getTermCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurences
operator|.
name|getSize
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|previous
operator|=
name|occurences
operator|.
name|getNode
argument_list|(
name|m
argument_list|)
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOException while writing fulltext index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|freq
init|=
name|occurences
operator|.
name|getOccurrences
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|occurences
operator|.
name|getOffset
argument_list|(
name|m
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|+=
name|freq
expr_stmt|;
block|}
comment|//Write (variable) length of node IDs + frequency + offsets
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
name|ByteArray
name|data
init|=
name|os
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|NGramKey
name|value
init|=
operator|new
name|NGramKey
argument_list|(
name|currentDoc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|key
operator|.
name|term
argument_list|)
decl_stmt|;
name|index
operator|.
name|db
operator|.
name|append
argument_list|(
name|value
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropIndex
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|iterator
init|=
name|ngrams
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|QNameTerm
name|key
init|=
operator|(
name|QNameTerm
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OccurrenceList
name|occurencesList
init|=
operator|(
name|OccurrenceList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|occurencesList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|NGramKey
name|value
init|=
operator|new
name|NGramKey
argument_list|(
name|currentDoc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|key
operator|.
name|term
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|VariableByteInput
name|is
init|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|currentDoc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// copy them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|nameType
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|occurrences
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
if|if
condition|(
name|mode
operator|==
name|StreamListener
operator|.
name|REMOVE
condition|)
block|{
comment|// skip them
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// removing nodes: need to filter out the node ids to be removed
comment|// feed the new list with the GIDs
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
name|OccurrenceList
name|newOccurrences
init|=
operator|new
name|OccurrenceList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|pool
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// add the node to the new list if it is not
comment|// in the list of removed nodes
if|if
condition|(
operator|!
name|occurencesList
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|newOccurrences
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|is
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
block|}
comment|// append the data from the new list
if|if
condition|(
name|newOccurrences
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//Don't forget this one
name|newOccurrences
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|nameType
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|newOccurrences
operator|.
name|getTermCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|newOccurrences
operator|.
name|getSize
argument_list|()
condition|;
control|)
block|{
name|previous
operator|=
name|newOccurrences
operator|.
name|getNode
argument_list|(
name|m
argument_list|)
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
name|newOccurrences
operator|.
name|getOccurrences
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|newOccurrences
operator|.
name|getOffset
argument_list|(
name|m
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|+=
name|freq
expr_stmt|;
block|}
comment|//Write (variable) length of node IDs + frequency + offsets
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//Store new data, if relevant
if|if
condition|(
name|changed
condition|)
block|{
comment|//Well, nothing to store : remove the existing data
if|if
condition|(
name|os
operator|.
name|data
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|index
operator|.
name|db
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|index
operator|.
name|db
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for token '"
operator|+
name|key
operator|.
name|term
operator|+
literal|"' in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping NGram index for collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|// remove generic index
name|Value
name|value
init|=
operator|new
name|NGramKey
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|.
name|db
operator|.
name|removeAll
argument_list|(
literal|null
argument_list|,
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NodeSet
name|search
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|String
name|ngram
parameter_list|,
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|axis
parameter_list|)
throws|throws
name|TerminatedException
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|docs
operator|.
name|getLength
argument_list|()
argument_list|,
literal|250
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|NGramKey
name|key
init|=
operator|new
name|NGramKey
argument_list|(
name|collectionId
argument_list|,
name|ngram
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|VariableByteInput
name|is
init|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|//Does the token already has data in the index ?
if|if
condition|(
name|is
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|pool
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|NodeProxy
name|storedNode
decl_stmt|;
switch|switch
condition|(
name|nameType
condition|)
block|{
case|case
name|ElementValue
operator|.
name|ATTRIBUTE
case|:
name|storedNode
operator|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ElementValue
operator|.
name|ELEMENT
case|:
name|storedNode
operator|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
expr_stmt|;
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid section type in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// if a context set is specified, we can directly check if the
comment|// matching text node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|NodeProxy
name|parent
decl_stmt|;
switch|switch
condition|(
name|nameType
condition|)
block|{
case|case
name|ElementValue
operator|.
name|ATTRIBUTE
case|:
if|if
condition|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
name|parent
operator|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|storedNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
name|parent
operator|=
literal|null
expr_stmt|;
block|}
else|else
name|parent
operator|=
name|contextSet
operator|.
name|get
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
break|break;
case|case
name|ElementValue
operator|.
name|ELEMENT
case|:
name|parent
operator|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
expr_stmt|;
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid section type in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Match
name|match
init|=
operator|new
name|Match
argument_list|(
name|nodeId
argument_list|,
name|ngram
argument_list|,
name|freq
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|match
operator|.
name|addOffset
argument_list|(
name|is
operator|.
name|readInt
argument_list|()
argument_list|,
name|ngram
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
condition|)
block|{
name|parent
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|parent
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, we add all text nodes without check
block|}
else|else
block|{
name|Match
name|match
init|=
operator|new
name|Match
argument_list|(
name|nodeId
argument_list|,
name|ngram
argument_list|,
name|freq
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|match
operator|.
name|addOffset
argument_list|(
name|is
operator|.
name|readInt
argument_list|()
argument_list|,
name|ngram
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|Constants
operator|.
name|NO_SIZE_HINT
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
specifier|final
name|IndexScanCallback
name|cb
init|=
operator|new
name|IndexScanCallback
argument_list|(
name|docs
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|short
name|collectionId
init|=
operator|(
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Value
name|ref
init|=
operator|new
name|NGramKey
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|ref
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|db
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
name|Occurrences
index|[]
name|result
init|=
operator|new
name|Occurrences
index|[
name|cb
operator|.
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|Occurrences
index|[]
operator|)
name|cb
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|(
name|int
name|mode
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
name|this
operator|.
name|currentDoc
operator|=
name|document
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
return|return
operator|new
name|NGramStreamListener
argument_list|(
name|document
argument_list|,
name|mode
argument_list|)
return|;
block|}
specifier|private
name|void
name|indexText
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|XMLString
name|text
parameter_list|)
block|{
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|gramSize
init|=
name|index
operator|.
name|getN
argument_list|()
decl_stmt|;
name|String
name|ngram
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|checkBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gramSize
operator|&&
name|i
operator|+
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
comment|// TODO: case sensitivity should be configurable
name|buf
index|[
name|currentChar
operator|+
name|j
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|i
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ngram
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|currentChar
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
name|QNameTerm
name|key
init|=
operator|new
name|QNameTerm
argument_list|(
name|qname
argument_list|,
name|ngram
argument_list|)
decl_stmt|;
name|OccurrenceList
name|list
init|=
operator|(
name|OccurrenceList
operator|)
name|ngrams
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|OccurrenceList
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ngrams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|currentChar
operator|+=
name|gramSize
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkBuffer
parameter_list|()
block|{
if|if
condition|(
name|currentChar
operator|+
name|index
operator|.
name|getN
argument_list|()
operator|>
name|buf
operator|.
name|length
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
literal|1024
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|currentChar
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|NGramStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|private
name|boolean
name|top
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
name|config
decl_stmt|;
specifier|private
name|Stack
name|contentStack
init|=
literal|null
decl_stmt|;
specifier|public
name|NGramStreamListener
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|newMode
parameter_list|)
block|{
name|currentDoc
operator|=
name|document
expr_stmt|;
name|config
operator|=
literal|null
expr_stmt|;
name|top
operator|=
literal|true
expr_stmt|;
name|contentStack
operator|=
literal|null
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|document
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
operator|(
name|Map
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|NGramIndex
operator|.
name|ID
argument_list|)
expr_stmt|;
name|mode
operator|=
name|newMode
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|top
operator|&&
name|mode
operator|==
name|REMOVE_NODES
condition|)
block|{
comment|// if a node is removed from a lower tree level, we also have to check its
comment|// ancestors and maybe reindex them
name|checkAncestors
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|XMLString
name|contentBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
name|top
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**          * When removing nodes at a lower level of the document tree, we also need to check          * the ancestor nodes of the removed node for potential indexes. If indexes are found,          * we need to reindex those ancestor nodes.          *          * @param transaction          * @param element          * @param path          * @param config          * @return          */
specifier|private
name|boolean
name|checkAncestors
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|StoredNode
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|Map
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
comment|// no index defined
return|return
literal|false
return|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
name|int
name|len
init|=
name|element
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|?
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qn
init|=
name|path
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|qn
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|StoredNode
name|top
init|=
literal|null
decl_stmt|;
name|StoredNode
name|parent
init|=
operator|(
name|StoredNode
operator|)
name|element
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|parent
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|top
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
operator|(
name|StoredNode
operator|)
name|parent
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NGramIndexWorker$NGramStreamListener.checkAncestors: Indexing "
operator|+
name|top
operator|.
name|getQName
argument_list|()
operator|+
literal|" for "
operator|+
name|element
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexUtils
operator|.
name|scanNode
argument_list|(
name|transaction
argument_list|,
name|top
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XMLString
name|content
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|top
operator|&&
name|mode
operator|==
name|REMOVE_NODES
condition|)
block|{
name|checkAncestors
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLString
name|next
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|QNameTerm
implements|implements
name|Comparable
block|{
name|QName
name|qname
decl_stmt|;
name|String
name|term
decl_stmt|;
specifier|public
name|QNameTerm
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|QNameTerm
name|other
init|=
operator|(
name|QNameTerm
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|qname
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|term
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|term
argument_list|)
return|;
else|else
return|return
name|cmp
return|;
block|}
block|}
specifier|private
class|class
name|NGramKey
extends|extends
name|Value
block|{
specifier|public
name|NGramKey
parameter_list|(
name|short
name|collectionId
parameter_list|)
block|{
name|len
operator|=
literal|2
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NGramKey
parameter_list|(
name|short
name|collectionId
parameter_list|,
name|String
name|ngram
parameter_list|)
block|{
name|len
operator|=
name|UTF8
operator|.
name|encoded
argument_list|(
name|ngram
argument_list|)
operator|+
literal|2
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|UTF8
operator|.
name|encode
argument_list|(
name|ngram
argument_list|,
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
class|class
name|IndexScanCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
name|DocumentSet
name|docs
decl_stmt|;
specifier|private
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|IndexScanCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see org.dbxml.core.filer.BTreeCallback#indexInfo(org.dbxml.core.data.Value, long) 		 */
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|String
name|term
decl_stmt|;
try|try
block|{
name|term
operator|=
operator|new
name|String
argument_list|(
name|key
operator|.
name|getData
argument_list|()
argument_list|,
literal|2
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
operator|-
literal|2
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|VariableByteInput
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|docAdded
init|=
literal|false
decl_stmt|;
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|pool
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
name|Occurrences
name|oc
init|=
operator|(
name|Occurrences
operator|)
name|map
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|docAdded
condition|)
block|{
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|docAdded
operator|=
literal|true
expr_stmt|;
block|}
name|oc
operator|.
name|addOccurrences
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

