begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|NGramIndexWorker
implements|implements
name|IndexWorker
block|{
specifier|private
specifier|final
specifier|static
name|String
name|ID
init|=
name|NGramIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_ELEMENT
init|=
literal|"ngram"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QNAME_ATTR
init|=
literal|"qname"
decl_stmt|;
specifier|private
name|NGramIndex
name|index
decl_stmt|;
specifier|private
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
specifier|private
name|int
name|currentChar
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
name|ngrams
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|public
name|NGramIndexWorker
parameter_list|(
name|NGramIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
comment|// We use a map to store the QNames to be indexed
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|qname
init|=
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
operator|||
name|qname
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Configuration error: element "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" must have an attribute "
operator|+
name|QNAME_ATTR
argument_list|)
throw|;
name|NGramIndexConfig
name|config
init|=
operator|new
name|NGramIndexConfig
argument_list|(
name|namespaces
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|config
operator|.
name|getQName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|ngrams
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//            System.out.println("NGram: " + entry.getKey().toString());
block|}
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
return|return
operator|new
name|NGramStreamListener
argument_list|(
name|document
argument_list|)
return|;
block|}
specifier|private
name|void
name|indexText
parameter_list|(
name|XMLString
name|text
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|gramSize
init|=
name|index
operator|.
name|getN
argument_list|()
decl_stmt|;
name|XMLString
name|ngram
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|checkBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gramSize
operator|&&
name|i
operator|+
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|buf
index|[
name|currentChar
operator|+
name|j
index|]
operator|=
name|text
operator|.
name|charAt
argument_list|(
name|i
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|ngram
operator|=
operator|new
name|XMLString
argument_list|(
name|buf
argument_list|,
name|currentChar
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ngram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ngrams
operator|.
name|containsKey
argument_list|(
name|ngram
argument_list|)
condition|)
name|ngrams
operator|.
name|put
argument_list|(
name|ngram
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentChar
operator|+=
name|gramSize
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkBuffer
parameter_list|()
block|{
if|if
condition|(
name|currentChar
operator|+
name|index
operator|.
name|getN
argument_list|()
operator|>
name|buf
operator|.
name|length
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
literal|1024
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|currentChar
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|NGramStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|private
name|Map
name|config
decl_stmt|;
specifier|private
name|Stack
name|contentStack
init|=
literal|null
decl_stmt|;
specifier|public
name|NGramStreamListener
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|document
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
operator|(
name|Map
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|XMLString
name|contentBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XMLString
name|content
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLString
name|next
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

