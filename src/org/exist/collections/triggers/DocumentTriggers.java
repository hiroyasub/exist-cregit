begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|DocumentTriggers
implements|implements
name|DocumentTrigger
implements|,
name|ContentHandler
implements|,
name|LexicalHandler
implements|,
name|ErrorHandler
block|{
specifier|private
name|Indexer
name|indexer
decl_stmt|;
specifier|private
name|ContentHandler
name|contentHandler
decl_stmt|;
specifier|private
name|LexicalHandler
name|lexicalHandler
decl_stmt|;
specifier|private
name|ErrorHandler
name|errorHandler
decl_stmt|;
specifier|private
name|SAXTrigger
name|last
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|DocumentTrigger
argument_list|>
name|triggers
decl_stmt|;
specifier|public
name|DocumentTriggers
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentTriggers
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
name|collection
argument_list|,
name|collection
operator|.
name|isTriggersEnabled
argument_list|()
condition|?
name|collection
operator|.
name|getConfiguration
argument_list|(
name|broker
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentTriggers
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Indexer
name|indexer
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|CollectionConfiguration
name|config
parameter_list|)
throws|throws
name|TriggerException
block|{
name|List
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
argument_list|>
name|docTriggers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|docTriggers
operator|=
name|config
operator|.
name|documentTriggers
argument_list|()
expr_stmt|;
block|}
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
argument_list|>
name|masterTriggers
init|=
name|broker
operator|.
name|getDatabase
argument_list|()
operator|.
name|getDocumentTriggers
argument_list|()
decl_stmt|;
name|triggers
operator|=
operator|new
name|ArrayList
argument_list|<
name|DocumentTrigger
argument_list|>
argument_list|(
name|masterTriggers
operator|.
name|size
argument_list|()
operator|+
operator|(
name|docTriggers
operator|==
literal|null
condition|?
literal|0
else|:
name|docTriggers
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
name|docTrigger
range|:
name|masterTriggers
control|)
block|{
name|DocumentTrigger
name|instance
init|=
name|docTrigger
operator|.
name|newInstance
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docTriggers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TriggerProxy
argument_list|<
name|?
extends|extends
name|DocumentTrigger
argument_list|>
name|docTrigger
range|:
name|docTriggers
control|)
block|{
name|DocumentTrigger
name|instance
init|=
name|docTrigger
operator|.
name|newInstance
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexer
operator|!=
literal|null
condition|)
block|{
name|finishPreparation
argument_list|(
name|indexer
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|finishPreparation
parameter_list|(
name|Indexer
name|indexer
parameter_list|)
block|{
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|contentHandler
operator|=
name|indexer
expr_stmt|;
name|lexicalHandler
operator|=
name|indexer
expr_stmt|;
name|errorHandler
operator|=
name|indexer
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|next
argument_list|(
name|indexer
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
block|}
specifier|private
name|void
name|register
parameter_list|(
name|DocumentTrigger
name|trigger
parameter_list|)
block|{
if|if
condition|(
name|trigger
operator|instanceof
name|SAXTrigger
condition|)
block|{
name|SAXTrigger
name|filteringTrigger
init|=
operator|(
name|SAXTrigger
operator|)
name|trigger
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|contentHandler
operator|=
name|filteringTrigger
expr_stmt|;
name|lexicalHandler
operator|=
name|filteringTrigger
expr_stmt|;
name|errorHandler
operator|=
name|filteringTrigger
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|next
argument_list|(
name|filteringTrigger
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|filteringTrigger
expr_stmt|;
block|}
name|triggers
operator|.
name|add
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
name|contentHandler
operator|.
name|setDocumentLocator
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|ignorableWhitespace
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|processingInstruction
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|skippedEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|startDTD
argument_list|(
name|name
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|endDTD
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|startEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|endEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|startCDATA
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|endCDATA
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|lexicalHandler
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeCreateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterCreateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeUpdateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterUpdateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeUpdateDocumentMetadata
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterUpdateDocumentMetadata
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeCopyDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterCopyDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|oldUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeMoveDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterMoveDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|oldUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|beforeDeleteDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
try|try
block|{
name|trigger
operator|.
name|afterDeleteDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Trigger
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValidating
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValidating
parameter_list|(
name|boolean
name|validating
parameter_list|)
block|{
for|for
control|(
name|DocumentTrigger
name|trigger
range|:
name|triggers
control|)
block|{
name|trigger
operator|.
name|setValidating
argument_list|(
name|validating
argument_list|)
expr_stmt|;
block|}
name|indexer
operator|.
name|setValidating
argument_list|(
name|validating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|errorHandler
operator|!=
literal|null
condition|)
name|errorHandler
operator|.
name|warning
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|errorHandler
operator|!=
literal|null
condition|)
name|errorHandler
operator|.
name|error
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|errorHandler
operator|!=
literal|null
condition|)
name|errorHandler
operator|.
name|fatalError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

