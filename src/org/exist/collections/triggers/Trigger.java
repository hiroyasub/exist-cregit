begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2003-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *   * $Id$  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * Defines the base interface for collection triggers. Triggers are registered through the  * collection configuration file, called "collection.xconf", which should be  * stored in the corresponding database collection. If a collection configuration file is  * found in the collection, it will be parsed and any triggers will be created and configured.  * The {@link #configure(DBBroker, Collection, Map) configure} method is called once on each trigger.  *   * Triggers listen to events. Currently, there are five events to which triggers may be  * attached:  *   *<table border="0">  *<tr>  *<td>{@link #STORE_DOCUMENT_EVENT}</td>  *<td>Fired, if a new document is inserted into the collection.</td>  *</tr>  *<tr>  *<td>{@link #UPDATE_DOCUMENT_EVENT}</td>  *<td>Fired, whenever an existing document is updated, i.e. replaced  * 		with a new version.</td>  *</tr>  *<tr>  *<td>{@link #REMOVE_DOCUMENT_EVENT}</td>  *<td>Fired, whenever a document is removed from the collection.</td>  *</tr>  *<tr>  *<td>{@link #RENAME_COLLECTION_EVENT}</td>  *<td>Fired, before a collection is renamed.</td>  *</tr>  *<tr>  *<td>{@link #CREATE_COLLECTION_EVENT}</td>  *<td>Fired, before a new collection is created.</td>  *</tr>  *</table>  *   * The document-related events are handled by the sub-interface {@link org.exist.collections.triggers.DocumentTrigger},  * collection-related events are handled by {@link org.exist.collections.triggers.CollectionTrigger}.  *   * The collection configuration file looks as follows:  *   *<pre>  *&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;  *&lt;exist:collection xmlns:exist="http://exist-db.org/collection-config/1.0"&gt;  *&lt;exist:triggers&gt;  *&lt;exist:trigger event="store"  *		class="fully qualified classname of the trigger"&gt;  *&lt;exist:parameter name="parameter-name"  *				value="parameter-value"/&gt;  *&lt;/exist:trigger&gt;  *&lt;/exist:triggers&gt;  *&lt;/exist:collection&gt;  *</pre>  *   * @author wolf  * @see org.exist.collections.triggers.DocumentTrigger  */
end_comment

begin_interface
specifier|public
interface|interface
name|Trigger
block|{
specifier|public
specifier|final
specifier|static
name|int
name|STORE_DOCUMENT_EVENT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|CREATE_COLLECTION_EVENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|UPDATE_DOCUMENT_EVENT
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|UPDATE_COLLECTION_EVENT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|RENAME_DOCUMENT_EVENT
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|RENAME_COLLECTION_EVENT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MOVE_DOCUMENT_EVENT
init|=
literal|6
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MOVE_COLLECTION_EVENT
init|=
literal|7
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|REMOVE_DOCUMENT_EVENT
init|=
literal|8
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|REMOVE_COLLECTION_EVENT
init|=
literal|9
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
index|[]
name|OLD_EVENTS
init|=
block|{
literal|"STORE"
block|,
literal|"CREATE-COLLECTION"
block|,
literal|"UPDATE"
block|,
literal|"UPDATE-COLLECTION"
block|,
literal|"RENAME-DOCUMENT"
block|,
literal|"RENAME-COLLECTION"
block|,
literal|"MOVE-DOCUMENT"
block|,
literal|"MOVE-COLLECTION"
block|,
literal|"REMOVE"
block|,
literal|"DELETE-COLLECTION"
block|}
decl_stmt|;
comment|/** 	 * The configure method is called once whenever the collection configuration is loaded. Use it to 	 * initialize the trigger, probably by looking at the parameters. 	 *  	 * @param broker the database instance used to load the collection configuration. The broker object is 	 * 	required for all database actions. Please note: the broker instance used for configuration is probably 	 * 	different from the one passed to the prepare method. Don't store the broker object in your class. 	 * @param parent the collection to which this trigger belongs.  	 * @param parameters a Map containing any key/value parameters defined in the configuration file. 	 * @throws CollectionConfigurationException if the trigger cannot be initialized. 	 */
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|CollectionConfigurationException
function_decl|;
comment|/** 	 * Returns a Logger object. Use this to log debugging information. 	 *  	 */
specifier|public
name|Logger
name|getLogger
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

