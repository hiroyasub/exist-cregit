begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|DocumentTriggersVisitor
extends|extends
name|AbstractTriggersVisitor
argument_list|<
name|DocumentTrigger
argument_list|,
name|DocumentTriggerProxies
argument_list|>
implements|implements
name|DocumentTrigger
block|{
specifier|protected
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|DocumentTriggersVisitor
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentTriggerProxies
name|proxies
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|proxies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//ignore triggers are already configured by this stage!
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|existingDocument
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|prepare
argument_list|(
name|event
argument_list|,
name|broker
argument_list|,
name|txn
argument_list|,
name|documentPath
argument_list|,
name|existingDocument
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
try|try
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|finish
argument_list|(
name|event
argument_list|,
name|broker
argument_list|,
name|txn
argument_list|,
name|documentPath
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeCreateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterCreateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeUpdateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterUpdateDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeCopyDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterCopyDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|oldUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeMoveDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterMoveDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|,
name|oldUri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeDeleteDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterDeleteDocument
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|ignorableWhitespace
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|processingInstruction
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|skippedEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startDTD
argument_list|(
name|name
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endDTD
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|startCDATA
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|endCDATA
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
try|try
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|setDocumentLocator
argument_list|(
name|locator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|validating
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isValidating
parameter_list|()
block|{
return|return
name|this
operator|.
name|validating
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValidating
parameter_list|(
name|boolean
name|validating
parameter_list|)
block|{
name|this
operator|.
name|validating
operator|=
name|validating
expr_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|setValidating
argument_list|(
name|validating
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ContentHandler
name|outputHandler
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getOutputHandler
parameter_list|()
block|{
return|return
name|outputHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOutputHandler
parameter_list|(
name|ContentHandler
name|outputHandler
parameter_list|)
block|{
name|ContentHandler
name|prevOutputHandler
init|=
name|outputHandler
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|prevOutputHandler
operator|=
operator|new
name|ContentHandlerWrapper
argument_list|(
name|prevOutputHandler
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|outputHandler
operator|=
name|prevOutputHandler
expr_stmt|;
block|}
specifier|private
name|LexicalHandler
name|lexicalHandler
decl_stmt|;
annotation|@
name|Override
specifier|public
name|LexicalHandler
name|getLexicalOutputHandler
parameter_list|()
block|{
return|return
name|lexicalHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLexicalOutputHandler
parameter_list|(
name|LexicalHandler
name|lexicalHandler
parameter_list|)
block|{
name|LexicalHandler
name|prevLexicalHandler
init|=
name|lexicalHandler
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|prevLexicalHandler
operator|=
operator|new
name|LexicalHandlerWrapper
argument_list|(
name|prevLexicalHandler
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TriggerException
name|te
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lexicalHandler
operator|=
name|prevLexicalHandler
expr_stmt|;
block|}
comment|//TODO check this
comment|/*** these should defer to the Handler methods invoked above ***/
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getInputHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|LexicalHandler
name|getLexicalInputHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|lexicalHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|beforeUpdateDocumentMetadata
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
for|for
control|(
specifier|final
name|DocumentTrigger
name|trigger
range|:
name|getTriggers
argument_list|()
control|)
block|{
name|trigger
operator|.
name|afterUpdateDocumentMetadata
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

