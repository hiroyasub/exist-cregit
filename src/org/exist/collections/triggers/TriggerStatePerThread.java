begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_comment
comment|/** Finite State Machine, managing the state of a Running trigger;  * allows to avoid infinite recursions by forbidding another trigger to run  * where there is allready one; feature trigger_update .  * I implemented that when a trigger is running , another trigger in the same  * Thread cannot be fired .  * There is a second condition that  when a trigger is running triggered by   * some document d, even the same trigger cannot run on a different document .   * maybe TODO: apply "state" design pattern */
end_comment

begin_class
specifier|public
class|class
name|TriggerStatePerThread
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NO_TRIGGER_RUNNING
init|=
operator|(
literal|0
operator|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TRIGGER_RUNNING_PREPARE
init|=
operator|(
literal|1
operator|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TRIGGER_RUNNING_FINISH
init|=
operator|(
literal|2
operator|)
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
name|triggerRunningState
init|=
operator|new
name|ThreadLocal
argument_list|()
block|{
specifier|protected
specifier|synchronized
name|Object
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|TriggerState
argument_list|(
name|NO_TRIGGER_RUNNING
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
comment|/** */
specifier|public
specifier|static
name|boolean
name|verifyUniqueTriggerPerThreadBeforePrepare
parameter_list|(
name|DocumentTrigger
name|trigger
parameter_list|,
name|DocumentImpl
name|modifiedDocument
parameter_list|)
block|{
if|if
condition|(
name|getTriggerRunningState
argument_list|()
operator|==
name|NO_TRIGGER_RUNNING
condition|)
block|{
name|setTriggerRunningState
argument_list|(
name|TRIGGER_RUNNING_PREPARE
argument_list|,
name|trigger
argument_list|,
name|modifiedDocument
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * @param modifiedDocument 	 *            the document whose modification triggered the trigger 	 */
specifier|public
specifier|static
name|boolean
name|verifyUniqueTriggerPerThreadBeforeFinish
parameter_list|(
name|DocumentTrigger
name|trigger
parameter_list|,
name|DocumentImpl
name|modifiedDocument
parameter_list|)
block|{
comment|// another trigger is allready running
name|DocumentTrigger
name|runningTrigger
init|=
name|getRunningTrigger
argument_list|()
decl_stmt|;
if|if
condition|(
name|runningTrigger
operator|!=
literal|null
operator|&&
name|trigger
operator|!=
name|runningTrigger
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// current trigger is busy with another document
if|if
condition|(
name|getModifiedDocument
argument_list|()
operator|!=
literal|null
operator|&&
name|modifiedDocument
operator|!=
name|getModifiedDocument
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getTriggerRunningState
argument_list|()
operator|==
name|TRIGGER_RUNNING_PREPARE
condition|)
block|{
name|setTriggerRunningState
argument_list|(
name|TRIGGER_RUNNING_FINISH
argument_list|,
name|trigger
argument_list|,
name|modifiedDocument
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TriggerState
block|{
specifier|private
name|int
name|state
decl_stmt|;
specifier|private
name|DocumentTrigger
name|currentTrigger
decl_stmt|;
specifier|private
name|Txn
name|transaction
decl_stmt|;
specifier|private
name|DocumentImpl
name|modifiedDocument
decl_stmt|;
specifier|public
name|TriggerState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|setState
argument_list|(
name|state
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setState
parameter_list|(
name|int
name|state
parameter_list|,
name|DocumentTrigger
name|trigger
parameter_list|,
name|DocumentImpl
name|modifiedDocument
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|NO_TRIGGER_RUNNING
condition|)
block|{
name|this
operator|.
name|currentTrigger
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|setModifiedDocument
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|currentTrigger
operator|=
name|trigger
expr_stmt|;
name|this
operator|.
name|setModifiedDocument
argument_list|(
name|modifiedDocument
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
name|void
name|setTransaction
parameter_list|(
name|Txn
name|transaction
parameter_list|)
block|{
name|this
operator|.
name|transaction
operator|=
name|transaction
expr_stmt|;
block|}
name|Txn
name|getTransaction
parameter_list|()
block|{
return|return
name|transaction
return|;
block|}
specifier|public
name|DocumentTrigger
name|getTrigger
parameter_list|()
block|{
return|return
name|currentTrigger
return|;
block|}
specifier|private
name|void
name|setModifiedDocument
parameter_list|(
name|DocumentImpl
name|modifiedDocument
parameter_list|)
block|{
name|this
operator|.
name|modifiedDocument
operator|=
name|modifiedDocument
expr_stmt|;
block|}
specifier|private
name|DocumentImpl
name|getModifiedDocument
parameter_list|()
block|{
return|return
name|modifiedDocument
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|getTriggerRunningState
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getState
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|DocumentTrigger
name|getRunningTrigger
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getTrigger
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setTriggerRunningState
parameter_list|(
name|int
name|state
parameter_list|,
name|DocumentTrigger
name|trigger
parameter_list|,
name|DocumentImpl
name|modifiedDocument
parameter_list|)
block|{
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|setState
argument_list|(
name|state
argument_list|,
name|trigger
argument_list|,
name|modifiedDocument
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Txn
name|getTransaction
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getTransaction
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setTransaction
parameter_list|(
name|Txn
name|transaction
parameter_list|)
block|{
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|setTransaction
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|DocumentImpl
name|getModifiedDocument
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TriggerState
operator|)
name|triggerRunningState
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getModifiedDocument
argument_list|()
return|;
block|}
block|}
end_class

end_unit

