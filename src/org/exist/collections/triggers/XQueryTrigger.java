begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ProcessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AnalyzeContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|LiteralValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|UserDefinedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A trigger that executes a user XQuery statement when invoked.  *   * The XQuery source executed is the value of the parameter named "query" or the  * query at the URL indicated by the parameter named "url".  *   * Any additional parameters will be declared as external variables with the type xs:string  *   * These external variables for the Trigger are accessible to the user XQuery statement  *<code>xxx:type</code> : the type of event for the Trigger. Either "prepare" or "finish"  *<code>xxx:collection</code> : the uri of the collection from which the event is triggered  *<code>xxx:uri</code> : the uri of the document or collection from which the event is triggered  *<code>xxx:new-uri</code> : the new uri of the document or collection from which the event is triggered  *<code>xxx:event</code> : the kind of triggered event  * xxx is the namespace prefix within the XQuery, can be set by the variable "bindingPrefix"  *   * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  * @author Adam Retter<adam.retter@devon.gov.uk>  * @author Evgeny Gazdovsky<gazdovsky@gmail.com> */
end_comment

begin_class
specifier|public
class|class
name|XQueryTrigger
extends|extends
name|FilteringTrigger
implements|implements
name|DocumentTrigger
implements|,
name|CollectionTrigger
block|{
specifier|protected
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NAMESPACE
init|=
literal|"http://exist-db.org/xquery/trigger"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EVENT_TYPE_PREPARE
init|=
literal|"prepare"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EVENT_TYPE_FINISH
init|=
literal|"finish"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_BINDING_PREFIX
init|=
literal|"local:"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
index|[]
name|EVENTS
init|=
block|{
literal|"CREATE-DOCUMENT"
block|,
comment|//0
literal|"CREATE-COLLECTION"
block|,
comment|//1
literal|"UPDATE-DOCUMENT"
block|,
comment|//2
literal|"UPDATE-COLLECTION"
block|,
comment|//3 ???
literal|"COPY-DOCUMENT"
block|,
comment|//4
literal|"COPY-COLLECTION"
block|,
comment|//5
literal|"MOVE-DOCUMENT"
block|,
comment|//6
literal|"MOVE-COLLECTION"
block|,
comment|//7
literal|"DELETE-DOCUMENT"
block|,
comment|//8
literal|"DELETE-COLLECTION"
comment|//9
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeCreateCollection
init|=
operator|new
name|QName
argument_list|(
literal|"before-create-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterCreateCollection
init|=
operator|new
name|QName
argument_list|(
literal|"after-create-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeUpdateCollection
init|=
operator|new
name|QName
argument_list|(
literal|"before-update-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterUpdateCollection
init|=
operator|new
name|QName
argument_list|(
literal|"after-update-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeCopyCollection
init|=
operator|new
name|QName
argument_list|(
literal|"before-copy-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterCopyCollection
init|=
operator|new
name|QName
argument_list|(
literal|"after-copy-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeMoveCollection
init|=
operator|new
name|QName
argument_list|(
literal|"before-move-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterMoveCollection
init|=
operator|new
name|QName
argument_list|(
literal|"after-move-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeDeleteCollection
init|=
operator|new
name|QName
argument_list|(
literal|"before-delete-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterDeleteCollection
init|=
operator|new
name|QName
argument_list|(
literal|"after-delete-collection"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeCreateDocument
init|=
operator|new
name|QName
argument_list|(
literal|"before-create-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterCreateDocument
init|=
operator|new
name|QName
argument_list|(
literal|"after-create-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeUpdateDocument
init|=
operator|new
name|QName
argument_list|(
literal|"before-update-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterUpdateDocument
init|=
operator|new
name|QName
argument_list|(
literal|"after-update-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeCopyDocument
init|=
operator|new
name|QName
argument_list|(
literal|"before-copy-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterCopyDocument
init|=
operator|new
name|QName
argument_list|(
literal|"after-copy-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeMoveDocument
init|=
operator|new
name|QName
argument_list|(
literal|"before-move-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterMoveDocument
init|=
operator|new
name|QName
argument_list|(
literal|"after-move-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|beforeDeleteDocument
init|=
operator|new
name|QName
argument_list|(
literal|"before-delete-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|afterDeleteDocument
init|=
operator|new
name|QName
argument_list|(
literal|"after-delete-document"
argument_list|,
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
name|SAXAdapter
name|adapter
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|TriggerEvents
operator|.
name|EVENTS
argument_list|>
name|events
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|strQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|urlQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|Properties
name|userDefinedVariables
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/** Namespace prefix associated to trigger */
specifier|private
name|String
name|bindingPrefix
init|=
literal|null
decl_stmt|;
specifier|private
name|XQuery
name|service
decl_stmt|;
specifier|private
name|ContentHandler
name|originalOutputHandler
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PEPARE_EXCEIPTION_MESSAGE
init|=
literal|"Error during trigger prepare"
decl_stmt|;
specifier|public
name|XQueryTrigger
parameter_list|()
block|{
name|adapter
operator|=
operator|new
name|SAXAdapter
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @link org.exist.collections.Trigger#configure(org.exist.storage.DBBroker, org.exist.collections.Collection, java.util.Map) 	 */
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
operator|.
name|collection
operator|=
name|parent
expr_stmt|;
comment|//for an XQuery trigger there must be at least
comment|//one parameter to specify the XQuery
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|events
operator|=
operator|new
name|HashSet
argument_list|<
name|TriggerEvents
operator|.
name|EVENTS
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paramEvents
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"event"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramEvents
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|event
range|:
name|paramEvents
control|)
block|{
name|events
operator|.
name|addAll
argument_list|(
name|TriggerEvents
operator|.
name|convertFromOldDesign
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|addAll
argument_list|(
name|TriggerEvents
operator|.
name|convertFromString
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|urlQueries
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|urlQuery
operator|=
name|urlQueries
operator|!=
literal|null
condition|?
name|urlQueries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strQueries
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|strQuery
operator|=
name|strQueries
operator|!=
literal|null
condition|?
name|strQueries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|itParamName
init|=
name|parameters
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itParamName
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|paramName
init|=
operator|(
name|String
operator|)
name|itParamName
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//get the binding prefix (if any)
if|if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
literal|"bindingPrefix"
argument_list|)
condition|)
block|{
name|String
name|bindingPrefix
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"bindingPrefix"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingPrefix
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|bindingPrefix
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|bindingPrefix
operator|=
name|bindingPrefix
operator|.
name|trim
argument_list|()
operator|+
literal|":"
expr_stmt|;
block|}
block|}
comment|//get the URL of the query (if any)
if|else if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
literal|"url"
argument_list|)
condition|)
block|{
name|urlQuery
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//get the query (if any)
if|else if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
literal|"query"
argument_list|)
condition|)
block|{
name|strQuery
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//make any other parameters available as external variables for the query
else|else
block|{
comment|//TODO could be enhanced to setup a sequence etc
name|userDefinedVariables
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//set a default binding prefix if none was specified
if|if
condition|(
name|this
operator|.
name|bindingPrefix
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bindingPrefix
operator|=
name|DEFAULT_BINDING_PREFIX
expr_stmt|;
block|}
comment|//old
if|if
condition|(
name|urlQuery
operator|!=
literal|null
operator|||
name|strQuery
operator|!=
literal|null
condition|)
block|{
name|service
operator|=
name|broker
operator|.
name|getXQueryService
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
comment|//no query to execute
name|LOG
operator|.
name|error
argument_list|(
literal|"XQuery Trigger for: '"
operator|+
name|parent
operator|.
name|getURI
argument_list|()
operator|+
literal|"' is missing its XQuery parameter"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get's a Source for the Trigger's XQuery 	 *  	 * @param the database broker 	 *  	 * @return the Source for the XQuery  	 */
specifier|private
name|Source
name|getQuerySource
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|Source
name|querySource
init|=
literal|null
decl_stmt|;
comment|//try and get the XQuery from a URL
if|if
condition|(
name|urlQuery
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|querySource
operator|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
name|urlQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|strQuery
operator|!=
literal|null
condition|)
block|{
comment|//try and get the XQuery from a string
name|querySource
operator|=
operator|new
name|StringSource
argument_list|(
name|strQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|querySource
return|;
block|}
comment|/** 	 * @link org.exist.collections.Trigger#prepareForExecution(java.lang.String, org.w3c.dom.Document) 	 */
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|existingDocument
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//		LOG.debug("Preparing " + eventToString(event) + "XQuery trigger for document: '" + documentPath + "'");
comment|//		prepareForExecution(event, broker, transaction, documentPath, (XmldbURI) null);
block|}
specifier|private
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|src
parameter_list|,
name|XmldbURI
name|dst
parameter_list|,
name|boolean
name|isCollection
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//get the query
name|Source
name|query
init|=
name|getQuerySource
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
return|return;
comment|// avoid infinite recursion by allowing just one trigger per thread
if|if
condition|(
operator|!
name|TriggerStatePerThread
operator|.
name|verifyUniqueTriggerPerThreadBeforePrepare
argument_list|(
name|this
argument_list|,
name|src
argument_list|)
condition|)
block|{
return|return;
block|}
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|XQueryContext
name|context
init|=
name|service
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|TRIGGER
argument_list|)
decl_stmt|;
comment|//TODO : further initialisations ?
name|CompiledXQuery
name|compiledQuery
decl_stmt|;
try|try
block|{
comment|//compile the XQuery
name|compiledQuery
operator|=
name|service
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|//declare external variables
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"type"
argument_list|,
name|EVENT_TYPE_PREPARE
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"event"
argument_list|,
operator|new
name|StringValue
argument_list|(
name|eventToString
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCollection
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collection"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collection"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"uri"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dst
operator|==
literal|null
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"new-uri"
argument_list|,
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"new-uri"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// For backward compatibility
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"eventType"
argument_list|,
name|EVENT_TYPE_PREPARE
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"triggerEvent"
argument_list|,
operator|new
name|StringValue
argument_list|(
name|eventToString
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCollection
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collectionName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collectionName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"documentName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//declare user defined parameters as external variables
for|for
control|(
name|Iterator
name|itUserVarName
init|=
name|userDefinedVariables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itUserVarName
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|varName
init|=
operator|(
name|String
operator|)
name|itUserVarName
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|varValue
init|=
name|userDefinedVariables
operator|.
name|getProperty
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
name|varName
argument_list|,
operator|new
name|StringValue
argument_list|(
name|varValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//execute the XQuery
try|try
block|{
comment|//TODO : should we provide another contextSet ?
name|NodeSet
name|contextSet
init|=
name|NodeSet
operator|.
name|EMPTY_SET
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|compiledQuery
argument_list|,
name|contextSet
argument_list|)
expr_stmt|;
comment|//TODO : should we have a special processing ?
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger fired for prepare"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @link org.exist.collections.triggers.DocumentTrigger#finish(int, org.exist.storage.DBBroker, java.lang.String, org.w3c.dom.Document)      */
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
comment|//    	LOG.debug("Finishing " + eventToString(event) + " XQuery trigger for document : '" + documentPath + "'");
comment|//    	finish(event, broker, transaction, documentPath, (XmldbURI) null);
block|}
specifier|private
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|src
parameter_list|,
name|XmldbURI
name|dst
parameter_list|,
name|boolean
name|isCollection
parameter_list|)
block|{
comment|//get the query
name|Source
name|query
init|=
name|getQuerySource
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
return|return;
comment|// avoid infinite recursion by allowing just one trigger per thread
if|if
condition|(
operator|!
name|TriggerStatePerThread
operator|.
name|verifyUniqueTriggerPerThreadBeforeFinish
argument_list|(
name|this
argument_list|,
name|src
argument_list|)
condition|)
return|return;
name|XQueryContext
name|context
init|=
name|service
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|TRIGGER
argument_list|)
decl_stmt|;
name|CompiledXQuery
name|compiledQuery
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//compile the XQuery
name|compiledQuery
operator|=
name|service
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|//declare external variables
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"type"
argument_list|,
name|EVENT_TYPE_FINISH
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"event"
argument_list|,
operator|new
name|StringValue
argument_list|(
name|eventToString
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCollection
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collection"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collection"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"uri"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dst
operator|==
literal|null
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"new-uri"
argument_list|,
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"new-uri"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// For backward compatibility
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"eventType"
argument_list|,
name|EVENT_TYPE_FINISH
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"triggerEvent"
argument_list|,
operator|new
name|StringValue
argument_list|(
name|eventToString
argument_list|(
name|event
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCollection
condition|)
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collectionName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"collectionName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|"documentName"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//declare user defined parameters as external variables
for|for
control|(
name|Iterator
name|itUserVarName
init|=
name|userDefinedVariables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itUserVarName
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|varName
init|=
operator|(
name|String
operator|)
name|itUserVarName
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|varValue
init|=
name|userDefinedVariables
operator|.
name|getProperty
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
name|varName
argument_list|,
operator|new
name|StringValue
argument_list|(
name|varValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//Should never be reached
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//Should never be reached
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
comment|//Should never be reached
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//execute the XQuery
try|try
block|{
comment|//TODO : should we provide another contextSet ?
name|NodeSet
name|contextSet
init|=
name|NodeSet
operator|.
name|EMPTY_SET
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|compiledQuery
argument_list|,
name|contextSet
argument_list|)
expr_stmt|;
comment|//TODO : should we have a special processing ?
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//Should never be reached
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during trigger finish"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
comment|//Should never be reached
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger fired for finish"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompiledXQuery
name|getScript
parameter_list|(
name|boolean
name|isBefore
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|src
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//get the query
name|Source
name|query
init|=
name|getQuerySource
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// avoid infinite recursion by allowing just one trigger per thread
if|if
condition|(
name|isBefore
operator|&&
operator|!
name|TriggerStatePerThread
operator|.
name|verifyUniqueTriggerPerThreadBeforePrepare
argument_list|(
name|this
argument_list|,
name|src
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
operator|!
name|isBefore
operator|&&
operator|!
name|TriggerStatePerThread
operator|.
name|verifyUniqueTriggerPerThreadBeforeFinish
argument_list|(
name|this
argument_list|,
name|src
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|XQueryContext
name|context
init|=
name|service
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|TRIGGER
argument_list|)
decl_stmt|;
name|CompiledXQuery
name|compiledQuery
decl_stmt|;
try|try
block|{
comment|//compile the XQuery
name|compiledQuery
operator|=
name|service
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|//declare user defined parameters as external variables
for|for
control|(
name|Iterator
name|itUserVarName
init|=
name|userDefinedVariables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itUserVarName
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|varName
init|=
operator|(
name|String
operator|)
name|itUserVarName
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|varValue
init|=
name|userDefinedVariables
operator|.
name|getProperty
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
name|varName
argument_list|,
operator|new
name|StringValue
argument_list|(
name|varValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//reset& prepareForExecution for execution
name|compiledQuery
operator|.
name|reset
argument_list|()
expr_stmt|;
name|context
operator|.
name|getWatchDog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//do any preparation before execution
name|context
operator|.
name|prepareForExecution
argument_list|()
expr_stmt|;
return|return
name|compiledQuery
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|boolean
name|isBefore
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|QName
name|functionName
parameter_list|,
name|XmldbURI
modifier|...
name|urls
parameter_list|)
throws|throws
name|TriggerException
block|{
name|XmldbURI
name|src
init|=
name|urls
index|[
literal|0
index|]
decl_stmt|;
name|CompiledXQuery
name|compiledQuery
init|=
name|getScript
argument_list|(
name|isBefore
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiledQuery
operator|==
literal|null
condition|)
return|return;
name|ProcessMonitor
name|pm
init|=
literal|null
decl_stmt|;
name|XQueryContext
name|context
init|=
name|compiledQuery
operator|.
name|getContext
argument_list|()
decl_stmt|;
comment|//execute the XQuery
try|try
block|{
name|UserDefinedFunction
name|function
init|=
name|context
operator|.
name|resolveFunction
argument_list|(
name|functionName
argument_list|,
name|urls
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|function
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
name|urls
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|args
operator|.
name|add
argument_list|(
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|urls
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getProcessMonitor
argument_list|()
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceQueryStart
argument_list|()
expr_stmt|;
name|pm
operator|.
name|queryStarted
argument_list|(
name|context
operator|.
name|getWatchDog
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionCall
name|call
init|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|call
operator|.
name|setArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|call
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|eval
argument_list|(
name|NodeSet
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceQueryEnd
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|pm
operator|.
name|queryCompleted
argument_list|(
name|context
operator|.
name|getWatchDog
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compiledQuery
operator|.
name|reset
argument_list|()
expr_stmt|;
name|context
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isBefore
condition|)
block|{
name|TriggerStatePerThread
operator|.
name|setTriggerRunningState
argument_list|(
name|TriggerStatePerThread
operator|.
name|NO_TRIGGER_RUNNING
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TriggerStatePerThread
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger fired 'after'"
argument_list|)
expr_stmt|;
block|}
else|else
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger fired 'before'"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|originalOutputHandler
operator|=
name|getOutputHandler
argument_list|()
expr_stmt|;
comment|//TODO : uncomment when it works
comment|/* 		if (isValidating())  			setOutputHandler(adapter);	 		*/
name|super
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|setOutputHandler
argument_list|(
name|originalOutputHandler
argument_list|)
expr_stmt|;
comment|//if (!isValidating())
comment|//		return;
comment|//XQueryContext context = service.newContext(AccessContext.TRIGGER);
comment|//TODO : futher initializations ?
comment|// CompiledXQuery compiledQuery;
comment|//try {
comment|// compiledQuery =
comment|//service.compile(context, query);
comment|//context.declareVariable(bindingPrefix + "validating", new BooleanValue(isValidating()));
comment|//if (adapter.getDocument() == null)
comment|//context.declareVariable(bindingPrefix + "document", Sequence.EMPTY_SEQUENCE);
comment|//TODO : find the right method ;-)
comment|/*         	else         		context.declareVariable(bindingPrefix + "document", (DocumentImpl)adapter.getDocument());         	*/
comment|//} catch (XPathException e) {
comment|//query = null; //prevents future use
comment|//	throw new SAXException("Error during endDocument", e);
comment|//} catch (IOException e) {
comment|//query = null; //prevents future use
comment|//	throw new SAXException("Error during endDocument", e);
comment|//}
comment|//TODO : uncomment when it works
comment|/*         try {         	//TODO : should we provide another contextSet ? 	        NodeSet contextSet = NodeSet.EMPTY_SET;	         			//Sequence result = service.execute(compiledQuery, contextSet); 			//TODO : should we have a special processing ? 			LOG.debug("done."); 			         } catch (XPathException e) {         	query = null; //prevents future use         	throw new SAXException("Error during endDocument", e); 		}	 		*/
comment|//TODO : check that result is a document node
comment|//TODO : Stream result to originalOutputHandler
block|}
comment|/** 	 * Returns a String representation of the Trigger event 	 *  	 * @param event The Trigger event 	 *  	 * @return The String representation 	 */
specifier|public
specifier|static
name|String
name|eventToString
parameter_list|(
name|int
name|event
parameter_list|)
block|{
return|return
name|EVENTS
index|[
name|event
index|]
return|;
block|}
comment|//Collection's methods
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|Collection
name|newCollection
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//		LOG.debug("Preparing " + eventToString(event) + "XQuery trigger for collection: '" + collection.getURI() + "'");
comment|//
comment|//		//get the query
comment|//		Source query = getQuerySource(broker);
comment|//		if(query == null)
comment|//			return;
comment|//
comment|//		// avoid infinite recursion by allowing just one trigger per thread
comment|//		if(!TriggerStatePerThread.verifyUniqueTriggerPerThreadBeforePrepare(this, collection.getURI()))
comment|//		{
comment|//			return;
comment|//		}
comment|//		TriggerStatePerThread.setTransaction(transaction);
comment|//
comment|//		XQueryContext context = service.newContext(AccessContext.TRIGGER);
comment|//         //TODO : further initialisations ?
comment|//        CompiledXQuery compiledQuery;
comment|//        try
comment|//        {
comment|//        	//compile the XQuery
comment|//        	compiledQuery = service.compile(context, query);
comment|//
comment|//        	//declare external variables
comment|//        	context.declareVariable(bindingPrefix + "eventType", EVENT_TYPE_PREPARE);
comment|//        	context.declareVariable(bindingPrefix + "collectionName", new AnyURIValue(collection.getURI()));
comment|//        	context.declareVariable(bindingPrefix + "triggerEvent", new StringValue(eventToString(event)));
comment|//
comment|//        	//declare user defined parameters as external variables
comment|//        	for(Iterator itUserVarName = userDefinedVariables.keySet().iterator(); itUserVarName.hasNext();)
comment|//        	{
comment|//        		String varName = (String)itUserVarName.next();
comment|//        		String varValue = userDefinedVariables.getProperty(varName);
comment|//
comment|//        		context.declareVariable(bindingPrefix + varName, new StringValue(varValue));
comment|//        	}
comment|//
comment|//    		//context.declareVariable(bindingPrefix + "collection", Sequence.EMPTY_SEQUENCE);
comment|//        }
comment|//        catch(XPathException e)
comment|//        {
comment|//    		TriggerStatePerThread.setTriggerRunningState(TriggerStatePerThread.NO_TRIGGER_RUNNING, this, null);
comment|//    		TriggerStatePerThread.setTransaction(null);
comment|//        	throw new TriggerException(PEPARE_EXCEIPTION_MESSAGE, e);
comment|//	    }
comment|//        catch(IOException e)
comment|//        {
comment|//    		TriggerStatePerThread.setTriggerRunningState(TriggerStatePerThread.NO_TRIGGER_RUNNING, this, null);
comment|//    		TriggerStatePerThread.setTransaction(null);
comment|//        	throw new TriggerException(PEPARE_EXCEIPTION_MESSAGE, e);
comment|//	    }
comment|//
comment|//        //execute the XQuery
comment|//        try
comment|//        {
comment|//        	//TODO : should we provide another contextSet ?
comment|//	        NodeSet contextSet = NodeSet.EMPTY_SET;
comment|//			service.execute(compiledQuery, contextSet);
comment|//			//TODO : should we have a special processing ?
comment|//			LOG.debug("Trigger fired for prepareForExecution");
comment|//        }
comment|//        catch(XPathException e)
comment|//        {
comment|//    		TriggerStatePerThread.setTriggerRunningState(TriggerStatePerThread.NO_TRIGGER_RUNNING, this, null);
comment|//    		TriggerStatePerThread.setTransaction(null);
comment|//        	throw new TriggerException(PEPARE_EXCEIPTION_MESSAGE, e);
comment|//        }
block|}
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|Collection
name|newCollection
parameter_list|)
block|{
comment|//    	LOG.debug("Finishing " + eventToString(event) + " XQuery trigger for collection : '" + collection.getURI() + "'");
comment|//
comment|//    	//get the query
comment|//    	Source query = getQuerySource(broker);
comment|//		if (query == null)
comment|//			return;
comment|//
comment|//		// avoid infinite recursion by allowing just one trigger per thread
comment|//		if(!TriggerStatePerThread.verifyUniqueTriggerPerThreadBeforeFinish(this, collection.getURI()))
comment|//		{
comment|//			return;
comment|//		}
comment|//
comment|//        XQueryContext context = service.newContext(AccessContext.TRIGGER);
comment|//        CompiledXQuery compiledQuery = null;
comment|//        try
comment|//        {
comment|//        	//compile the XQuery
comment|//        	compiledQuery = service.compile(context, query);
comment|//
comment|//        	//declare external variables
comment|//        	context.declareVariable(bindingPrefix + "eventType", EVENT_TYPE_FINISH);
comment|//        	context.declareVariable(bindingPrefix + "collectionName", new AnyURIValue(collection.getURI()));
comment|//        	context.declareVariable(bindingPrefix + "triggerEvent", new StringValue(eventToString(event)));
comment|//
comment|//        	//declare user defined parameters as external variables
comment|//        	for(Iterator itUserVarName = userDefinedVariables.keySet().iterator(); itUserVarName.hasNext();)
comment|//        	{
comment|//        		String varName = (String)itUserVarName.next();
comment|//        		String varValue = userDefinedVariables.getProperty(varName);
comment|//
comment|//        		context.declareVariable(bindingPrefix + varName, new StringValue(varValue));
comment|//        	}
comment|//
comment|//    		//context.declareVariable(bindingPrefix + "collection", Sequence.EMPTY_SEQUENCE);
comment|//        }
comment|//        catch(XPathException e)
comment|//        {
comment|//        	//Should never be reached
comment|//        	LOG.error(e);
comment|//	    }
comment|//        catch(IOException e)
comment|//        {
comment|//	    	//Should never be reached
comment|//        	LOG.error(e);
comment|//	    }
comment|//
comment|//	    //execute the XQuery
comment|//        try
comment|//        {
comment|//        	//TODO : should we provide another contextSet ?
comment|//	        NodeSet contextSet = NodeSet.EMPTY_SET;
comment|//			service.execute(compiledQuery, contextSet);
comment|//			//TODO : should we have a special processing ?
comment|//        }
comment|//        catch (XPathException e)
comment|//        {
comment|//        	//Should never be reached
comment|//			LOG.error("Error during trigger finish", e);
comment|//        }
comment|//
comment|//		TriggerStatePerThread.setTriggerRunningState(TriggerStatePerThread.NO_TRIGGER_RUNNING, this, null);
comment|//		TriggerStatePerThread.setTransaction(null);
comment|//		LOG.debug("Trigger fired for finish");
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|CREATE_COLLECTION
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|1
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeCreateCollection
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|CREATE_COLLECTION
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|1
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterCreateCollection
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|COPY_COLLECTION
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|5
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeCopyCollection
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|COPY_COLLECTION
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|5
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterCopyCollection
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|MOVE_COLLECTION
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|7
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeMoveCollection
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|MOVE_COLLECTION
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|7
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|oldUri
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterMoveCollection
argument_list|,
name|oldUri
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|DELETE_COLLECTION
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|9
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeDeleteCollection
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|DELETE_COLLECTION
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|9
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterDeleteCollection
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|CREATE_DOCUMENT
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|0
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeCreateDocument
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|CREATE_DOCUMENT
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|0
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterCreateDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|UPDATE_DOCUMENT
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|2
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeUpdateDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|UPDATE_DOCUMENT
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|2
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterUpdateDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|COPY_DOCUMENT
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|4
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeCopyDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|COPY_DOCUMENT
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|4
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterCopyDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|MOVE_DOCUMENT
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|6
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|newUri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeMoveDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|MOVE_DOCUMENT
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|6
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|oldUri
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterMoveDocument
argument_list|,
name|oldUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|DELETE_DOCUMENT
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
literal|8
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|true
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|beforeDeleteDocument
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|events
operator|.
name|contains
argument_list|(
name|TriggerEvents
operator|.
name|EVENTS
operator|.
name|DELETE_DOCUMENT
argument_list|)
condition|)
block|{
name|finish
argument_list|(
literal|8
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|execute
argument_list|(
literal|false
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|afterDeleteDocument
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/*public String toString() { 		return "collection=" + collection + "\n" + 			"modifiedDocument=" + TriggerStatePerThread.getModifiedDocument() + "\n" + 			( query != null ? query.substring(0, 40 ) : null ); 	}*/
block|}
end_class

end_unit

