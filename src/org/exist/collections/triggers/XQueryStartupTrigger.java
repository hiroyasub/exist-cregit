begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2014 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StartupTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_comment
comment|/**  * Startup Trigger to fire XQuery scripts during database startup. Usage:  *  *<pre>  * {@code  *<startup>  *<triggers>  *<trigger class="org.exist.collections.triggers.XQueryStartupTrigger">  *<parameter name="xquery" value="/db/script1.xq"/>  *<parameter name="xquery" value="/db/script2.xq"/>  *</trigger>  *</triggers>  *</startup>  * }  *</pre>  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|XQueryStartupTrigger
implements|implements
name|StartupTrigger
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XQueryStartupTrigger
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Startup Trigger for stored XQueries"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getParameters
argument_list|(
name|params
argument_list|)
control|)
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get all XQuery paths      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
comment|// Return values
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// The complete data map
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
name|data
init|=
name|params
operator|.
name|entrySet
argument_list|()
decl_stmt|;
comment|// Iterate over all entries
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|data
control|)
block|{
comment|// only the 'xpath' parameter is used.
if|if
condition|(
literal|"xquery"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// Iterate over all values (object lists)
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// Rewrite to URL in database
name|value
operator|=
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
operator|+
name|value
expr_stmt|;
comment|// Prevent double entries
if|if
condition|(
operator|!
name|paths
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Path '%s' should start with a '/'"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %s 'xquery' entries."
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
comment|/**      * Execute xquery on path      *      * @param broker eXist database broker      * @param path path to query, formatted as xmldb:exist:///db/...      */
specifier|private
name|void
name|executeQuery
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|XQueryContext
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Get path to xquery
name|Source
name|source
init|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|broker
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No Xquery found at '%s'"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Setup xquery service
name|XQuery
name|service
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|context
operator|=
name|service
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|TRIGGER
argument_list|)
expr_stmt|;
comment|// Allow use of modules with relative paths
name|String
name|moduleLoadPath
init|=
name|StringUtils
operator|.
name|substringBeforeLast
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|moduleLoadPath
argument_list|)
expr_stmt|;
comment|// Compile query
name|CompiledXQuery
name|compiledQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Starting Xquery at '%s'"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish preparation
name|context
operator|.
name|prepareForExecution
argument_list|()
expr_stmt|;
comment|// Execute
name|Sequence
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|compiledQuery
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Log results
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Result xquery: '%s'"
argument_list|,
name|result
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Dirty, catch it all
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"An error occured during preparation/execution of the xquery script %s: %s"
argument_list|,
name|path
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

