begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TemplatesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Cache for STX Templates  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|STXTemplatesCache
block|{
specifier|protected
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|CachedTemplate
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|XmldbURI
argument_list|,
name|CachedTemplate
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|TransformerFactory
operator|.
name|newInstance
argument_list|(
literal|"net.sf.joost.trax.TransformerFactoryImpl"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Will get the compiled stylesheet from the cache      *      * If the stylesheet is not present in the cache it will be compiled and added to the cache      *      * If the stylesheet is in the cache but older than the current stylesheet it will be re-compiled and cached      *      * @param broker Database broker for accessing the serializer pool      * @return The compiled stylesheet      */
specifier|public
specifier|synchronized
name|Templates
name|getOrUpdateTemplate
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|stylesheet
parameter_list|)
throws|throws
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
comment|//is it already in the cache
specifier|final
name|XmldbURI
name|stylesheetUri
init|=
name|stylesheet
operator|.
name|getURI
argument_list|()
decl_stmt|;
specifier|final
name|long
name|lastModified
init|=
name|stylesheet
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|CachedTemplate
name|cachedTemplate
init|=
name|cache
operator|.
name|get
argument_list|(
name|stylesheetUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedTemplate
operator|==
literal|null
condition|)
block|{
name|cachedTemplate
operator|=
name|storeInCache
argument_list|(
name|broker
argument_list|,
name|stylesheetUri
argument_list|,
name|stylesheet
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//has it been modified since it was cached?
if|if
condition|(
name|lastModified
operator|>
name|cachedTemplate
operator|.
name|getLastUpdated
argument_list|()
condition|)
block|{
comment|//refresh the entry in the cache
name|cachedTemplate
operator|=
name|storeInCache
argument_list|(
name|broker
argument_list|,
name|stylesheetUri
argument_list|,
name|stylesheet
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved STX Template '"
operator|+
name|stylesheetUri
operator|.
name|toString
argument_list|()
operator|+
literal|"' from cache."
argument_list|)
expr_stmt|;
return|return
name|cachedTemplate
operator|.
name|getTemplate
argument_list|()
return|;
block|}
specifier|private
name|CachedTemplate
name|storeInCache
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|stylesheetUri
parameter_list|,
name|DocumentImpl
name|stylesheet
parameter_list|,
name|long
name|lastModified
parameter_list|)
throws|throws
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|Templates
name|compiled
init|=
name|compileTemplate
argument_list|(
name|broker
argument_list|,
name|stylesheet
argument_list|)
decl_stmt|;
specifier|final
name|CachedTemplate
name|cachedTemplate
init|=
operator|new
name|CachedTemplate
argument_list|(
name|compiled
argument_list|,
name|lastModified
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|stylesheetUri
argument_list|,
name|cachedTemplate
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compiled and Stored STX Template '"
operator|+
name|stylesheetUri
operator|.
name|toString
argument_list|()
operator|+
literal|"' in cache."
argument_list|)
expr_stmt|;
return|return
name|cachedTemplate
return|;
block|}
specifier|private
name|Templates
name|compileTemplate
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|stylesheet
parameter_list|)
throws|throws
name|TransformerConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
specifier|final
name|TemplatesHandler
name|thandler
init|=
name|factory
operator|.
name|newTemplatesHandler
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|thandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
return|return
name|thandler
operator|.
name|getTemplates
argument_list|()
return|;
block|}
specifier|private
class|class
name|CachedTemplate
block|{
specifier|private
specifier|final
name|Templates
name|templates
decl_stmt|;
specifier|private
specifier|final
name|long
name|lastUpdated
decl_stmt|;
specifier|public
name|CachedTemplate
parameter_list|(
name|Templates
name|templates
parameter_list|,
name|long
name|lastUpdated
parameter_list|)
block|{
name|this
operator|.
name|templates
operator|=
name|templates
expr_stmt|;
name|this
operator|.
name|lastUpdated
operator|=
name|lastUpdated
expr_stmt|;
block|}
specifier|private
name|long
name|getLastUpdated
parameter_list|()
block|{
return|return
name|lastUpdated
return|;
block|}
specifier|private
name|Templates
name|getTemplate
parameter_list|()
block|{
return|return
name|templates
return|;
block|}
block|}
block|}
end_class

end_unit

