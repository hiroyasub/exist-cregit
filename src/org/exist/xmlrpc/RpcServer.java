begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-06, Wolfgang M.  * Meier (meier@ifs.tu-darmstadt.de)  *   * This library is free software; you can redistribute it and/or modify it under  * the terms of the GNU Library General Public License as published by the Free  * Software Foundation; either version 2 of the License, or (at your option) any  * later version.  *   * This library is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more  * details.  *   * You should have received a copy of the GNU Library General Public License  * along with this program; if not, write to the Free Software Foundation, Inc.,  * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Int2ObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  Handler class for XMLRPC calls.<p>  *  *  To allow calls by many parallel users, RpcServer does not directly execute  *  calls. Instead it delegates all calls to instances of the inner class  *  RpcConnection, which run in their own thread.</p><p>  *  *  On startup, RpcServer creates a pool of RpcConnections. For every call the  *  server first gets a RpcConnection object from the pool, executes the call  *  and releases the RpcConnection.</p><p>  *  *  If the pool's maximum of concurrent connections (MAX_CONNECT) is reached,  *  RpcServer will block until a connection is available.</p><p>  *  *  All methods returning XML data will return UTF-8 encoded strings, unless an  *  encoding is specified. Methods that allow to set the encoding will always  *  return byte[] instead of string. byte[]-values are handled as binary data  *  and are automatically BASE64-encoded by the XMLRPC engine. This way the  *  correct character encoding is preserved during transport.</p>  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    18. Mai 2002  */
end_comment

begin_class
specifier|public
class|class
name|RpcServer
implements|implements
name|RpcAPI
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RpcServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MIN_CONNECT
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MAX_CONNECT
init|=
literal|10
decl_stmt|;
specifier|protected
name|ConnectionPool
name|pool
decl_stmt|;
comment|/**      * Constructor for the RpcServer object      *       * @param conf      *                   Description of the Parameter      * @exception EXistException      *                        Description of the Exception      */
specifier|public
name|RpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|EXistException
block|{
name|pool
operator|=
operator|new
name|ConnectionPool
argument_list|(
name|MIN_CONNECT
argument_list|,
name|MAX_CONNECT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|createCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|createCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|createCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|Date
name|created
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|createCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|created
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|createId
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|createId
argument_list|(
name|user
argument_list|,
name|collection
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|executeQuery
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|executeQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|executeQuery
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xpath
parameter_list|,
name|String
name|encoding
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|String
name|xpathString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
try|try
block|{
name|xpathString
operator|=
operator|new
name|String
argument_list|(
name|xpath
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|xpathString
operator|==
literal|null
condition|)
name|xpathString
operator|=
operator|new
name|String
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query: "
operator|+
name|xpathString
argument_list|)
expr_stmt|;
return|return
name|executeQuery
argument_list|(
name|user
argument_list|,
name|xpathString
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|public
name|int
name|executeQuery
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xpath
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|executeQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|public
name|Hashtable
name|getCollectionDesc
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|rootCollection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getCollectionDesc
argument_list|(
name|user
argument_list|,
name|rootCollection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|rootCollection
operator|+
literal|" not found!"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|describeResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|describeResource
argument_list|(
name|user
argument_list|,
name|resourceName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"resource "
operator|+
name|resourceName
operator|+
literal|" not found!"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|describeCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|rootCollection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|describeCollection
argument_list|(
name|user
argument_list|,
name|rootCollection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|rootCollection
operator|+
literal|" not found!"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|encoding
parameter_list|,
name|int
name|prettyPrint
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Hashtable
name|parametri
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|prettyPrint
operator|>
literal|0
condition|)
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
comment|//	String xml = con.getDocument(user, name, (prettyPrint> 0),
comment|// encoding, null);
name|String
name|xml
init|=
name|con
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parametri
argument_list|)
decl_stmt|;
if|if
condition|(
name|xml
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
throw|;
try|try
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|encoding
parameter_list|,
name|int
name|prettyPrint
parameter_list|,
name|String
name|stylesheet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Hashtable
name|parametri
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|prettyPrint
operator|>
literal|0
condition|)
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|parametri
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
comment|//String xml = con.getDocument(user, name, (prettyPrint> 0),
comment|// encoding, stylesheet);
name|String
name|xml
init|=
name|con
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parametri
argument_list|)
decl_stmt|;
if|if
condition|(
name|xml
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
throw|;
try|try
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|prettyPrint
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|getDocumentAsString
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|prettyPrint
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|prettyPrint
parameter_list|,
name|String
name|stylesheet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
comment|//String xml = con.getDocument(user, name, (prettyPrint> 0),
comment|// "UTF-8", stylesheet);
name|Hashtable
name|parametri
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|prettyPrint
operator|>
literal|0
condition|)
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|parametri
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|String
name|xml
init|=
name|con
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parametri
argument_list|)
decl_stmt|;
if|if
condition|(
name|xml
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
throw|;
else|else
return|return
name|xml
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getBinaryResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getBinaryResource
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve a document. The document data is returned as a string.      */
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|parametri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
name|String
name|compression
init|=
literal|"no"
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|parametri
operator|.
name|get
argument_list|(
literal|"encoding"
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
else|else
block|{
name|encoding
operator|=
operator|(
name|String
operator|)
name|parametri
operator|.
name|get
argument_list|(
literal|"encoding"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|parametri
operator|.
name|get
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|compression
operator|=
operator|(
name|String
operator|)
name|parametri
operator|.
name|get
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|)
expr_stmt|;
block|}
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|xml
init|=
name|con
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parametri
argument_list|)
decl_stmt|;
if|if
condition|(
name|xml
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
throw|;
try|try
block|{
if|if
condition|(
name|compression
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getdocument with compression"
argument_list|)
expr_stmt|;
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
if|if
condition|(
name|compression
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getdocument with compression"
argument_list|)
expr_stmt|;
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|getDocumentData
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getDocumentData
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|getNextChunk
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|handle
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getNextChunk
argument_list|(
name|user
argument_list|,
name|handle
argument_list|,
name|offset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getDocumentListing
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Vector
name|result
init|=
name|con
operator|.
name|getDocumentListing
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getDocumentListing
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Vector
name|result
init|=
name|con
operator|.
name|getDocumentListing
argument_list|(
name|user
argument_list|,
name|collection
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|listDocumentPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|listDocumentPermissions
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|listCollectionPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|listCollectionPermissions
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getHits
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getHits
argument_list|(
name|user
argument_list|,
name|resultId
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|getPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getPermissions
argument_list|(
name|user
argument_list|,
name|docName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Date
name|getCreationDate
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getCreationDate
argument_list|(
name|user
argument_list|,
name|collectionName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getTimestamps
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|documentName
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getTimestamps
argument_list|(
name|user
argument_list|,
name|documentName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the user attribute of the RpcServer object      *       * @param user      *                   Description of the Parameter      * @param name      *                   Description of the Parameter      * @return The user value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|Hashtable
name|getUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|getUser
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getUsers
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|getUsers
argument_list|(
name|user
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#getGroups(org.exist.security.User)      */
specifier|public
name|Vector
name|getGroups
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getIndexedElements
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|getIndexedElements
argument_list|(
name|user
argument_list|,
name|collectionName
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|scanIndexTerms
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|scanIndexTerms
argument_list|(
name|user
argument_list|,
name|collectionName
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xmlrpc.RpcAPI#scanIndexTerms(org.exist.security.User, java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|Vector
name|scanIndexTerms
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|scanIndexTerms
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|EXistException
condition|)
throw|throw
operator|(
name|EXistException
operator|)
name|e
throw|;
if|else if
condition|(
name|e
operator|instanceof
name|PermissionDeniedException
condition|)
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
throw|;
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * does a document called<code>name</code> exist in the repository?      *       * @param name      *                   Description of the Parameter      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|hasDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|hasDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * does a document called<code>name</code> exist in the repository?      *       * @param name      *                   Description of the Parameter      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|hasCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|hasCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getResourceCount
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getResourceCount
argument_list|(
name|user
argument_list|,
name|collectionName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * parse an XML document and store it into the database. The document will      * later be identified by<code>docName</code>. Some xmlrpc clients seem      * to have problems with character encodings when sending xml content. To      * avoid this, parse() accepts the xml document content as byte[].      *       * @param xmlData      *                   the document's XML content as UTF-8 encoded array of bytes.      * @param docName      *                   the document's name      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xmlData
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
name|user
argument_list|,
name|xmlData
argument_list|,
name|docName
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xmlData
parameter_list|,
name|String
name|docName
parameter_list|,
name|int
name|overwrite
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|parse
argument_list|(
name|user
argument_list|,
name|xmlData
argument_list|,
name|docName
argument_list|,
operator|(
name|overwrite
operator|!=
literal|0
operator|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xmlData
parameter_list|,
name|String
name|docName
parameter_list|,
name|int
name|overwrite
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|parse
argument_list|(
name|user
argument_list|,
name|xmlData
argument_list|,
name|docName
argument_list|,
operator|(
name|overwrite
operator|!=
literal|0
operator|)
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xml
parameter_list|,
name|String
name|docName
parameter_list|,
name|int
name|overwrite
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|parse
argument_list|(
name|user
argument_list|,
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|docName
argument_list|,
operator|(
name|overwrite
operator|!=
literal|0
operator|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parse a file previously uploaded with upload.      *       * The temporary file will be removed.      *       * @param user      * @param localFile      * @throws EXistException      * @throws IOException      */
specifier|public
name|boolean
name|parseLocal
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|localFile
parameter_list|,
name|String
name|docName
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
block|{
return|return
name|parseLocal
argument_list|(
name|user
argument_list|,
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|parseLocal
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|localFile
parameter_list|,
name|String
name|docName
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|parseLocal
argument_list|(
name|user
argument_list|,
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|uploadCompressed
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|uploadCompressed
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|String
name|uploadCompressed
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|file
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compressed upload: "
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|data
operator|=
name|Compressor
operator|.
name|uncompress
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|con
operator|.
name|upload
argument_list|(
name|user
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|upload
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|upload
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|String
name|upload
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|file
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|upload
argument_list|(
name|user
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xml
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
name|user
argument_list|,
name|xml
argument_list|,
name|docName
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|storeBinary
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|storeBinary
argument_list|(
name|user
argument_list|,
name|data
argument_list|,
name|docName
argument_list|,
name|mimeType
argument_list|,
name|replace
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|storeBinary
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|storeBinary
argument_list|(
name|user
argument_list|,
name|data
argument_list|,
name|docName
argument_list|,
name|mimeType
argument_list|,
name|replace
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#createResourceId(org.exist.security.User,      *           java.lang.String)      */
specifier|public
name|String
name|createResourceId
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|createResourceId
argument_list|(
name|user
argument_list|,
name|collection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|queryP
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xpath
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|queryP
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|public
name|Hashtable
name|queryP
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xpath
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|s_id
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|String
name|xpathString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpathString
operator|=
operator|new
name|String
argument_list|(
name|xpath
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"failed to decode xpath expression"
argument_list|)
throw|;
block|}
comment|// some clients (Perl) encode strings with a \0 at the end.
comment|// remove it ...
if|if
condition|(
name|xpathString
operator|.
name|charAt
argument_list|(
name|xpathString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|0x0
condition|)
name|xpathString
operator|=
name|xpathString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|xpathString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|queryP
argument_list|(
name|user
argument_list|,
name|xpathString
argument_list|,
name|docName
argument_list|,
name|s_id
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|execute
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|path
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
index|[]
name|doc
init|=
name|getBinaryResource
argument_list|(
name|user
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|xpath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xpath
operator|=
operator|new
name|String
argument_list|(
name|doc
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"failed to decode xpath expression"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|con
operator|.
name|execute
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|printDiagnostics
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|query
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|printDiagnostics
argument_list|(
name|user
argument_list|,
name|query
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|releaseQueryResult
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|handle
parameter_list|)
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|releaseQueryResult
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * execute XPath query and return howmany nodes from the result set,      * starting at position<code>start</code>. If<code>prettyPrint</code>      * is set to>0 (true), results are pretty printed.      *        */
specifier|public
name|byte
index|[]
name|query
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xquery
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|xqueryStr
decl_stmt|;
try|try
block|{
name|xqueryStr
operator|=
operator|new
name|String
argument_list|(
name|xquery
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|xqueryStr
operator|=
operator|new
name|String
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|con
operator|.
name|query
argument_list|(
name|user
argument_list|,
name|xqueryStr
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|querySummary
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|summary
argument_list|(
name|user
argument_list|,
name|resultId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * execute XPath query and return a summary of hits per document and hits 	 * per doctype. This method returns a struct with the following fields: 	 *  	 *<tableborder="1"> 	 *  	 *<tr> 	 *  	 *<td>"queryTime"</td> 	 *  	 *<td>int</td> 	 *  	 *</tr> 	 *  	 *<tr> 	 *  	 *<td>"hits"</td> 	 *  	 *<td>int</td> 	 *  	 *</tr> 	 *  	 *<tr> 	 *  	 *<td>"documents"</td> 	 *  	 *<td>array of array: Object[][3]</td> 	 *  	 *</tr> 	 *  	 *<tr> 	 *  	 *<td>"doctypes"</td> 	 *  	 *<td>array of array: Object[][2]</td> 	 *  	 *</tr> 	 *  	 *</table> Documents and doctypes represent tables where each row describes 	 * one document or doctype for which hits were found. Each document entry 	 * has the following structure: docId (int), docName (string), hits (int) 	 * The doctype entry has this structure: doctypeName (string), hits (int) 	 *  	 * @param xpath 	 *            Description of the Parameter 	 * @param user 	 *            Description of the Parameter 	 * @return Description of the Return Value 	 * @exception EXistException 	 *                Description of the Exception 	 * @exception PermissionDeniedException 	 *                Description of the Exception 	 */
specifier|public
name|Hashtable
name|querySummary
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|summary
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * remove a document from the repository.      *       * @param docName      *                   Description of the Parameter      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|remove
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|remove
argument_list|(
name|user
argument_list|,
name|docName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|copyCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|moveOrCopyCollection
argument_list|(
name|user
argument_list|,
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.xmlrpc.RpcAPI#moveCollection(org.exist.security.User, java.lang.String, java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|moveCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|moveOrCopyCollection
argument_list|(
name|user
argument_list|,
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.xmlrpc.RpcAPI#moveResource(org.exist.security.User, java.lang.String, java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|moveResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|moveOrCopyResource
argument_list|(
name|user
argument_list|,
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|copyResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|moveOrCopyResource
argument_list|(
name|user
argument_list|,
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|removeCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|con
operator|.
name|synchronize
argument_list|()
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|removeUser
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * retrieve a single node from a document. The node is identified by it's      * internal id.      *       * @param doc      *                   the document containing the node      * @param id      *                   the node's internal id      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|doc
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|retrieve
argument_list|(
name|user
argument_list|,
name|doc
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * retrieve a single node from a document. The node is identified by it's      * internal id.      *       * @param doc      *                   the document containing the node      * @param id      *                   the node's internal id      * @param prettyPrint      *                   result is pretty printed if>0      * @param encoding      *                   character encoding to use      * @param user      *                   Description of the Parameter      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|doc
parameter_list|,
name|String
name|id
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|xml
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xml
operator|=
name|con
operator|.
name|retrieve
argument_list|(
name|user
argument_list|,
name|doc
argument_list|,
name|id
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|retrieveAsString
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|doc
parameter_list|,
name|String
name|id
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|retrieve
argument_list|(
name|user
argument_list|,
name|doc
argument_list|,
name|id
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|,
name|int
name|num
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|compression
init|=
literal|"no"
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|compression
operator|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|xml
init|=
name|con
operator|.
name|retrieve
argument_list|(
name|user
argument_list|,
name|resultId
argument_list|,
name|num
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
try|try
block|{
if|if
condition|(
name|compression
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get result with compression"
argument_list|)
expr_stmt|;
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
if|if
condition|(
name|compression
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get result with compression"
argument_list|)
expr_stmt|;
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#retrieveAll(org.exist.security.User, int,      *           java.util.Hashtable)      */
specifier|public
name|byte
index|[]
name|retrieveAll
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|xml
init|=
name|con
operator|.
name|retrieveAll
argument_list|(
name|user
argument_list|,
name|resultId
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
try|try
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the permissions attribute of the RpcServer object      *       * @param user      *                   The new permissions value      * @param resource      *                   The new permissions value      * @param permissions      *                   The new permissions value      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|setPermissions
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**      * Sets the permissions attribute of the RpcServer object      *       * @param user      *                   The new permissions value      * @param resource      *                   The new permissions value      * @param permissions      *                   The new permissions value      * @param owner      *                   The new permissions value      * @param ownerGroup      *                   The new permissions value      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|ownerGroup
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|setPermissions
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
name|owner
argument_list|,
name|ownerGroup
argument_list|,
name|permissions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.exist.xmlrpc.RpcAPI#setPermissions(org.exist.security.User,      *           java.lang.String, int)      */
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|setPermissions
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|permissions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.exist.xmlrpc.RpcAPI#setPermissions(org.exist.security.User,      *           java.lang.String, java.lang.String, java.lang.String, int)      */
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|ownerGroup
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|setPermissions
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
name|owner
argument_list|,
name|ownerGroup
argument_list|,
name|permissions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the password attribute of the RpcServer object      *       * @param user      *                   The new password value      * @param name      *                   The new password value      * @param password      *                   The new password value      * @param groups      *                   The new user value      * @return Description of the Return Value      * @exception EXistException      *                        Description of the Exception      * @exception PermissionDeniedException      *                        Description of the Exception      */
specifier|public
name|boolean
name|setUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|,
name|Vector
name|groups
parameter_list|,
name|String
name|home
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|setUser
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|password
argument_list|,
name|groups
argument_list|,
name|home
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|setUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|,
name|Vector
name|groups
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|setUser
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|password
argument_list|,
name|groups
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#xupdate(org.exist.security.User,      *           java.lang.String, byte[])      */
specifier|public
name|int
name|xupdate
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|byte
index|[]
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|SAXException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|xupdateStr
init|=
operator|new
name|String
argument_list|(
name|xupdate
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|con
operator|.
name|xupdate
argument_list|(
name|user
argument_list|,
name|collectionName
argument_list|,
name|xupdateStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#xupdateResource(org.exist.security.User,      *           java.lang.String, byte[])      */
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|byte
index|[]
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|SAXException
block|{
return|return
name|xupdateResource
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
name|xupdate
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#xupdateResource(org.exist.security.User,      *           java.lang.String, byte[])      */
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|byte
index|[]
name|xupdate
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|SAXException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|xupdateStr
init|=
operator|new
name|String
argument_list|(
name|xupdate
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
return|return
name|con
operator|.
name|xupdateResource
argument_list|(
name|user
argument_list|,
name|resource
argument_list|,
name|xupdateStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|shutdown
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
return|return
name|shutdown
argument_list|(
name|user
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|shutdown
parameter_list|(
name|User
name|user
parameter_list|,
name|long
name|delay
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|hasDbaRole
argument_list|()
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to shut down"
operator|+
literal|"the database"
argument_list|)
throw|;
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|TimerTask
name|task
init|=
operator|new
name|TimerTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|BrokerPool
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"shutdown failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|BrokerPool
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"shutdown failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|sync
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|con
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dataBackup
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to backup the database"
argument_list|)
throw|;
block|}
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|con
operator|.
name|dataBackup
argument_list|(
name|user
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
class|class
name|ConnectionPool
block|{
specifier|public
specifier|final
specifier|static
name|int
name|CHECK_INTERVAL
init|=
literal|5000
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TIMEOUT
init|=
literal|180000
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|int
name|connections
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|lastCheck
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|max
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|min
init|=
literal|0
decl_stmt|;
specifier|protected
name|Int2ObjectHashMap
name|resultSets
init|=
operator|new
name|Int2ObjectHashMap
argument_list|(
literal|128
argument_list|)
decl_stmt|;
specifier|protected
name|Stack
name|pool
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|ArrayList
name|threads
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|ConnectionPool
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkResultSets
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|resultSets
operator|.
name|valueIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|QueryResult
name|qr
init|=
operator|(
name|QueryResult
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
operator|(
operator|(
name|QueryResult
operator|)
name|qr
operator|)
operator|.
name|timestamp
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ts
operator|>
name|TIMEOUT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"releasing result set "
operator|+
name|qr
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|RpcConnection
name|createConnection
parameter_list|()
block|{
try|try
block|{
name|RpcConnection
name|con
init|=
operator|new
name|RpcConnection
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|connections
operator|++
expr_stmt|;
return|return
name|con
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ee
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|synchronized
name|RpcConnection
name|get
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|connections
operator|<
name|max
condition|)
return|return
name|createConnection
argument_list|()
return|;
else|else
while|while
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for connection to become available"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|RpcConnection
name|con
init|=
operator|(
name|RpcConnection
operator|)
name|pool
operator|.
name|pop
argument_list|()
decl_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastCheck
operator|>
name|CHECK_INTERVAL
condition|)
name|checkResultSets
argument_list|()
expr_stmt|;
return|return
name|con
return|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
name|RpcConnection
name|con
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|RpcConnection
name|con
parameter_list|)
block|{
name|pool
operator|.
name|push
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|threads
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|RpcConnection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|terminate
argument_list|()
expr_stmt|;
while|while
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|<
name|connections
condition|)
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|BrokerPool
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"shutdown failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|synchronize
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|threads
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|RpcConnection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|synchronize
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|copyCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|namedest
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|createCollection
argument_list|(
name|user
argument_list|,
name|namedest
argument_list|)
expr_stmt|;
name|Hashtable
name|parametri
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|parametri
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|parametri
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Hashtable
name|lista
init|=
name|getCollectionDesc
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Vector
name|collezioni
init|=
operator|(
name|Vector
operator|)
name|lista
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|Vector
name|documents
init|=
operator|(
name|Vector
operator|)
name|lista
operator|.
name|get
argument_list|(
literal|"documents"
argument_list|)
decl_stmt|;
comment|//ricrea le directory
name|Iterator
name|collezioniItr
init|=
name|collezioni
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|nome
decl_stmt|;
while|while
condition|(
name|collezioniItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nome
operator|=
name|collezioniItr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|createCollection
argument_list|(
name|user
argument_list|,
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
name|copyCollection
argument_list|(
name|user
argument_list|,
name|name
operator|+
literal|"/"
operator|+
name|nome
argument_list|,
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
block|}
comment|//Copy i file
name|Hashtable
name|hash
decl_stmt|;
name|int
name|p
decl_stmt|,
name|dsize
init|=
name|documents
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dsize
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
operator|(
name|Hashtable
operator|)
name|documents
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|nome
operator|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
comment|//TODO : use dedicated function in XmldbURI
if|if
condition|(
operator|(
name|p
operator|=
name|nome
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|nome
operator|=
name|nome
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|xml
init|=
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
operator|+
literal|"/"
operator|+
name|nome
argument_list|,
name|parametri
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|user
argument_list|,
name|xml
argument_list|,
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#lockResource(org.exist.security.User,      *           java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|lockResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|lockResource
argument_list|(
name|user
argument_list|,
name|path
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#hasUserLock(org.exist.security.User,      *           java.lang.String)      */
specifier|public
name|String
name|hasUserLock
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|hasUserLock
argument_list|(
name|user
argument_list|,
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xmlrpc.RpcAPI#unlockResource(org.exist.security.User,      *           java.lang.String)      */
specifier|public
name|boolean
name|unlockResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|unlockResource
argument_list|(
name|user
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|//FIXME: Check it for possible security hole. The name of file is not generated in random mode
specifier|public
name|Vector
name|getDocumentChunk
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|Hashtable
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
name|Vector
name|result
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|File
name|file
decl_stmt|;
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"rpc"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The file is created with name: "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|byte
index|[]
name|getDocumentChunk
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getDocumentChunk
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|reindexCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|reindexCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.xmlrpc.RpcAPI#configureCollection(org.exist.security.User, java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|configureCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|configuration
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|con
operator|.
name|configureCollection
argument_list|(
name|user
argument_list|,
name|collection
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
comment|// DWES
specifier|public
name|boolean
name|isValid
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|boolean
name|retVal
init|=
literal|false
decl_stmt|;
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|retVal
operator|=
name|con
operator|.
name|isValid
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|public
name|Vector
name|getDocType
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|documentName
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|RpcConnection
name|con
init|=
name|pool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|con
operator|.
name|getDocType
argument_list|(
name|user
argument_list|,
name|documentName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|setDocType
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|documentName
parameter_list|,
name|String
name|doctypename
parameter_list|,
name|String
name|publicid
parameter_list|,
name|String
name|systemid
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|RpcConnection
name|con
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|setDocType
argument_list|(
name|user
argument_list|,
name|documentName
argument_list|,
name|doctypename
argument_list|,
name|publicid
argument_list|,
name|systemid
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

