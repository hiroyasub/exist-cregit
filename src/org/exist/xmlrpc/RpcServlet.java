begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|webserver
operator|.
name|XmlRpcServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|server
operator|.
name|XmlRpcHandlerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|server
operator|.
name|AbstractReflectiveHandlerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|server
operator|.
name|RequestProcessorFactoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|server
operator|.
name|XmlRpcNoSuchHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_class
specifier|public
class|class
name|RpcServlet
extends|extends
name|XmlRpcServlet
block|{
specifier|protected
name|XmlRpcHandlerMapping
name|newXmlRpcHandlerMapping
parameter_list|()
throws|throws
name|XmlRpcException
block|{
name|DefaultHandlerMapping
name|mapping
init|=
operator|new
name|DefaultHandlerMapping
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setVoidMethodEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setRequestProcessorFactoryFactory
argument_list|(
operator|new
name|XmldbRequestProcessorFactoryFactory
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|loadDefault
argument_list|(
name|RpcConnection
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
specifier|private
specifier|static
class|class
name|XmldbRequestProcessorFactoryFactory
extends|extends
name|RequestProcessorFactoryFactory
operator|.
name|RequestSpecificProcessorFactoryFactory
block|{
name|RequestProcessorFactory
name|instance
init|=
literal|null
decl_stmt|;
specifier|public
name|RequestProcessorFactory
name|getRequestProcessorFactory
parameter_list|(
name|Class
name|pClass
parameter_list|)
throws|throws
name|XmlRpcException
block|{
try|try
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
name|instance
operator|=
operator|new
name|XmldbRequestProcessorFactory
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlRpcException
argument_list|(
literal|"Failed to initialize XMLRPC interface: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|DefaultHandlerMapping
extends|extends
name|AbstractReflectiveHandlerMapping
block|{
specifier|private
name|DefaultHandlerMapping
parameter_list|()
throws|throws
name|XmlRpcException
block|{
block|}
specifier|public
name|void
name|loadDefault
parameter_list|(
name|Class
name|clazz
parameter_list|)
throws|throws
name|XmlRpcException
block|{
name|registerPublicMethods
argument_list|(
literal|"Default"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XmlRpcHandler
name|getHandler
parameter_list|(
name|String
name|pHandlerName
parameter_list|)
throws|throws
name|XmlRpcNoSuchHandlerException
throws|,
name|XmlRpcException
block|{
if|if
condition|(
name|pHandlerName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|pHandlerName
operator|=
literal|"Default."
operator|+
name|pHandlerName
expr_stmt|;
return|return
name|super
operator|.
name|getHandler
argument_list|(
name|pHandlerName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

