begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Used by {@link XmldbRequestProcessorFactory} to cache query results. Each query result  * is identified by a unique integer id.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|public
class|class
name|QueryResultCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|QueryResultCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|180_000
decl_stmt|;
comment|// ms (e.g. 2 minutes)
specifier|private
specifier|final
name|AtomicInteger
name|cacheIdCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|AbstractCachedResult
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|QueryResultCache
parameter_list|()
block|{
name|this
operator|.
name|cache
operator|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|,
name|cause
parameter_list|)
lambda|->
block|{
specifier|final
name|AbstractCachedResult
name|qr
init|=
operator|(
name|AbstractCachedResult
operator|)
name|value
decl_stmt|;
name|qr
operator|.
name|free
argument_list|()
expr_stmt|;
comment|// must free associated resources
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing cached result set: "
operator|+
operator|new
name|Date
argument_list|(
name|qr
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|add
parameter_list|(
specifier|final
name|AbstractCachedResult
name|qr
parameter_list|)
block|{
specifier|final
name|int
name|cacheId
init|=
name|cacheIdCounter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|cacheId
argument_list|,
name|qr
argument_list|)
expr_stmt|;
return|return
name|cacheId
return|;
block|}
specifier|public
name|AbstractCachedResult
name|get
parameter_list|(
specifier|final
name|int
name|cacheId
parameter_list|)
block|{
if|if
condition|(
name|cacheId
operator|<
literal|0
operator|||
name|cacheId
operator|>=
name|cacheIdCounter
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|cache
operator|.
name|getIfPresent
argument_list|(
name|cacheId
argument_list|)
return|;
block|}
specifier|public
name|QueryResult
name|getResult
parameter_list|(
specifier|final
name|int
name|cacheId
parameter_list|)
block|{
specifier|final
name|AbstractCachedResult
name|acr
init|=
name|get
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
return|return
operator|(
name|acr
operator|!=
literal|null
operator|&&
name|acr
operator|instanceof
name|QueryResult
operator|)
condition|?
operator|(
name|QueryResult
operator|)
name|acr
else|:
literal|null
return|;
block|}
specifier|public
name|SerializedResult
name|getSerializedResult
parameter_list|(
specifier|final
name|int
name|cacheId
parameter_list|)
block|{
specifier|final
name|AbstractCachedResult
name|acr
init|=
name|get
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
return|return
operator|(
name|acr
operator|!=
literal|null
operator|&&
name|acr
operator|instanceof
name|SerializedResult
operator|)
condition|?
operator|(
name|SerializedResult
operator|)
name|acr
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|int
name|cacheId
parameter_list|)
block|{
if|if
condition|(
name|cacheId
operator|<
literal|0
operator|||
name|cacheId
operator|>=
name|cacheIdCounter
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
comment|// out of scope
block|}
name|cache
operator|.
name|invalidate
argument_list|(
name|cacheId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|int
name|cacheId
parameter_list|,
specifier|final
name|int
name|hash
parameter_list|)
block|{
if|if
condition|(
name|cacheId
operator|<
literal|0
operator|||
name|cacheId
operator|>=
name|cacheIdCounter
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
comment|// out of scope
block|}
specifier|final
name|AbstractCachedResult
name|qr
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|!=
literal|null
operator|&&
name|qr
operator|.
name|hashCode
argument_list|()
operator|==
name|hash
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|cacheId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

