begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcStreamConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|serializer
operator|.
name|TypeSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|serializer
operator|.
name|TypeSerializerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * XML-RPC type serializer for sub-classes of  * {@link com.evolvedbinary.j8fu.tuple.Tuple}.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
class|class
name|TupleSerializer
extends|extends
name|TypeSerializerImpl
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TUPLE_TAG
init|=
literal|"tuple"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_TAG
init|=
literal|"data"
decl_stmt|;
specifier|private
specifier|final
name|TypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|XmlRpcStreamConfig
name|config
decl_stmt|;
name|TupleSerializer
parameter_list|(
specifier|final
name|TypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|XmlRpcStreamConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
specifier|final
name|ContentHandler
name|handler
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
throws|throws
name|SAXException
block|{
name|TypeSerializer
name|ts
init|=
name|typeFactory
operator|.
name|getSerializer
argument_list|(
name|config
argument_list|,
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unsupported Java type: "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ts
operator|.
name|write
argument_list|(
name|handler
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeData
parameter_list|(
specifier|final
name|ContentHandler
name|handler
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|Tuple
name|tuple
init|=
operator|(
name|Tuple
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|tuple
operator|instanceof
name|Tuple2
condition|)
block|{
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple2
operator|)
name|tuple
operator|)
operator|.
name|_1
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple2
operator|)
name|tuple
operator|)
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|tuple
operator|instanceof
name|Tuple3
condition|)
block|{
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple3
operator|)
name|tuple
operator|)
operator|.
name|_1
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple3
operator|)
name|tuple
operator|)
operator|.
name|_2
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple3
operator|)
name|tuple
operator|)
operator|.
name|_3
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|tuple
operator|instanceof
name|Tuple4
condition|)
block|{
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple4
operator|)
name|tuple
operator|)
operator|.
name|_1
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple4
operator|)
name|tuple
operator|)
operator|.
name|_2
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple4
operator|)
name|tuple
operator|)
operator|.
name|_3
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple4
operator|)
name|tuple
operator|)
operator|.
name|_4
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|tuple
operator|instanceof
name|Tuple5
condition|)
block|{
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple5
operator|)
name|tuple
operator|)
operator|.
name|_1
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple5
operator|)
name|tuple
operator|)
operator|.
name|_2
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple5
operator|)
name|tuple
operator|)
operator|.
name|_3
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple5
operator|)
name|tuple
operator|)
operator|.
name|_4
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple5
operator|)
name|tuple
operator|)
operator|.
name|_5
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|tuple
operator|instanceof
name|Tuple6
condition|)
block|{
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_1
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_2
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_3
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_4
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_5
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|handler
argument_list|,
operator|(
operator|(
name|Tuple6
operator|)
name|tuple
operator|)
operator|.
name|_6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unsupported Tuple class: "
operator|+
name|tuple
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ContentHandler
name|pHandler
parameter_list|,
name|Object
name|pObject
parameter_list|)
throws|throws
name|SAXException
block|{
name|pHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
name|VALUE_TAG
argument_list|,
name|VALUE_TAG
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|pHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
name|TUPLE_TAG
argument_list|,
name|TUPLE_TAG
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|pHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
name|DATA_TAG
argument_list|,
name|DATA_TAG
argument_list|,
name|ZERO_ATTRIBUTES
argument_list|)
expr_stmt|;
name|writeData
argument_list|(
name|pHandler
argument_list|,
name|pObject
argument_list|)
expr_stmt|;
name|pHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
name|DATA_TAG
argument_list|,
name|DATA_TAG
argument_list|)
expr_stmt|;
name|pHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
name|TUPLE_TAG
argument_list|,
name|TUPLE_TAG
argument_list|)
expr_stmt|;
name|pHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
name|VALUE_TAG
argument_list|,
name|VALUE_TAG
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

