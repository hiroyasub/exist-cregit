begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|util
operator|.
name|NamespaceContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|common
operator|.
name|XmlRpcStreamConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|parser
operator|.
name|RecursiveTypeParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|serializer
operator|.
name|TypeSerializerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * XML-RPC type parser for sub-classes of  * {@link com.evolvedbinary.j8fu.tuple.Tuple}.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
class|class
name|TupleParser
extends|extends
name|RecursiveTypeParserImpl
block|{
specifier|private
name|int
name|level
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
comment|/**      * Creates a new instance.      *      * @param context The namespace context.      * @param config The request or response configuration.      * @param factory The type factory.      */
name|TupleParser
parameter_list|(
specifier|final
name|XmlRpcStreamConfig
name|config
parameter_list|,
specifier|final
name|NamespaceContextImpl
name|context
parameter_list|,
specifier|final
name|TypeFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|level
operator|=
literal|0
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|super
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addResult
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
operator|--
name|level
condition|)
block|{
case|case
literal|0
case|:
name|setResult
argument_list|(
name|toTuple
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
break|break;
case|case
literal|2
case|:
name|endValueTag
argument_list|()
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qname
parameter_list|,
specifier|final
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|level
operator|++
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|!
name|XMLConstants
operator|.
name|NULL_NS_URI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
operator|!
name|TupleSerializer
operator|.
name|TUPLE_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Expected tuple element, got "
operator|+
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
argument_list|,
name|getDocumentLocator
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|!
name|XMLConstants
operator|.
name|NULL_NS_URI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
operator|!
name|TupleSerializer
operator|.
name|DATA_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Expected data element, got "
operator|+
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
argument_list|,
name|getDocumentLocator
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
operator|!
name|XMLConstants
operator|.
name|NULL_NS_URI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
operator|!
name|TypeSerializerImpl
operator|.
name|VALUE_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Expected data element, got "
operator|+
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
argument_list|,
name|getDocumentLocator
argument_list|()
argument_list|)
throw|;
block|}
name|startValueTag
argument_list|()
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|Tuple
name|toTuple
parameter_list|(
specifier|final
name|List
name|list
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
operator|new
name|Tuple3
argument_list|<>
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
return|return
operator|new
name|Tuple4
argument_list|<>
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
case|case
literal|5
case|:
return|return
operator|new
name|Tuple5
argument_list|<>
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
return|;
case|case
literal|6
case|:
return|return
operator|new
name|Tuple6
argument_list|<>
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unsupported Tuple arity: "
operator|+
name|list
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

