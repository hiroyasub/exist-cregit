begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SortedNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RelationalBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|ValueNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|ValueSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
end_comment

begin_class
specifier|public
class|class
name|RpcConnection
extends|extends
name|Thread
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RpcConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|protected
name|WeakHashMap
name|documentCache
init|=
operator|new
name|WeakHashMap
argument_list|()
decl_stmt|;
specifier|protected
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|terminate
init|=
literal|false
decl_stmt|;
specifier|protected
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
specifier|protected
name|RpcServer
operator|.
name|ConnectionPool
name|connectionPool
decl_stmt|;
specifier|protected
name|TreeMap
name|tempFiles
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
comment|/** 	 *  Constructor for the RpcConnection object 	 * 	 *@param  conf                Description of the Parameter 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|RpcConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RpcServer
operator|.
name|ConnectionPool
name|pool
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
argument_list|()
expr_stmt|;
name|connectionPool
operator|=
name|pool
expr_stmt|;
name|brokerPool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  name                           Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@exception  Exception                  Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|void
name|createCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|current
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|name
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//broker.sync();
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|name
operator|+
literal|" has been created"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  collName            Description of the Parameter 	 *@param  user                Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|String
name|createId
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collName
parameter_list|)
throws|throws
name|EXistException
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collName
operator|+
literal|" not found!"
argument_list|)
throw|;
name|String
name|id
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
do|do
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|id
operator|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|".xml"
expr_stmt|;
comment|// check if this id does already exist
if|if
condition|(
name|collection
operator|.
name|hasDocument
argument_list|(
name|id
argument_list|)
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|collection
operator|.
name|hasSubcollection
argument_list|(
name|id
argument_list|)
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|ok
condition|)
do|;
return|return
name|id
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  xpath          Description of the Parameter 	 *@param  user           Description of the Parameter 	 *@return                Description of the Return Value 	 *@exception  Exception  Description of the Exception 	 */
specifier|protected
name|Value
name|doQuery
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathLexer
name|lexer
init|=
operator|new
name|XPathLexer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xpath
argument_list|)
argument_list|)
decl_stmt|;
name|XPathParser
name|parser
init|=
operator|new
name|XPathParser
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|lexer
argument_list|)
decl_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|brokerPool
argument_list|)
decl_stmt|;
name|parser
operator|.
name|expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"query: "
operator|+
name|expr
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
name|parser
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
throw|;
name|DocumentSet
name|ndocs
init|=
operator|(
name|docs
operator|==
literal|null
condition|?
name|expr
operator|.
name|preselect
argument_list|()
else|:
name|expr
operator|.
name|preselect
argument_list|(
name|docs
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ndocs
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pre-select took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
name|Value
name|result
init|=
name|expr
operator|.
name|eval
argument_list|(
name|ndocs
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"query took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|executeQuery
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query: "
operator|+
name|xpath
argument_list|)
expr_stmt|;
name|Value
name|resultValue
init|=
name|doQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|QueryResult
name|qr
init|=
operator|new
name|QueryResult
argument_list|(
name|resultValue
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
decl_stmt|;
name|connectionPool
operator|.
name|resultSets
operator|.
name|put
argument_list|(
name|qr
operator|.
name|hashCode
argument_list|()
argument_list|,
name|qr
argument_list|)
expr_stmt|;
return|return
name|qr
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  message  Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|protected
name|String
name|formatErrorMsg
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|formatErrorMsg
argument_list|(
literal|"error"
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|protected
name|String
name|formatErrorMsg
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\"0\">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"></exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Hashtable
name|getCollectionDesc
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|rootCollection
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|rootCollection
operator|==
literal|null
condition|)
name|rootCollection
operator|=
literal|"/"
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|rootCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|rootCollection
operator|+
literal|" not found!"
argument_list|)
throw|;
name|Hashtable
name|desc
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Vector
name|docs
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|collections
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|docs
operator|.
name|addElement
argument_list|(
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|collections
operator|.
name|addElement
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|put
argument_list|(
literal|"collections"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|stylesheet
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"document "
operator|+
name|name
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document not found"
argument_list|)
throw|;
block|}
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|PRELOAD
argument_list|)
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|stylesheet
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// make path relative to current collection
name|String
name|collection
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
condition|)
name|collection
operator|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
block|{
name|int
name|cp
init|=
name|doc
operator|.
name|getFileName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|collection
operator|=
operator|(
name|cp
operator|>
literal|0
operator|)
condition|?
name|doc
operator|.
name|getFileName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cp
argument_list|)
else|:
literal|"/"
expr_stmt|;
block|}
name|stylesheet
operator|=
operator|(
name|collection
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|'/'
operator|+
name|stylesheet
else|:
name|collection
operator|+
literal|'/'
operator|+
name|stylesheet
operator|)
expr_stmt|;
block|}
name|serializer
operator|.
name|setStylesheet
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|String
name|xml
decl_stmt|;
name|serializer
operator|.
name|setIndent
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
name|xml
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|SINGLE
argument_list|)
expr_stmt|;
return|return
name|xml
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodError
name|nsme
parameter_list|)
block|{
name|nsme
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|xupdate
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|xupdate
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
name|DocumentSet
name|docs
init|=
name|collection
operator|.
name|allDocs
argument_list|(
name|user
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|()
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|xupdate
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|Document
name|doc
init|=
name|broker
operator|.
name|getDocument
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document "
operator|+
name|resource
operator|+
literal|" not found"
argument_list|)
throw|;
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|()
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|sync
parameter_list|()
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 *  Gets the documentListing attribute of the RpcConnection object 	 * 	 *@param  user                Description of the Parameter 	 *@return                     The documentListing value 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|Vector
name|getDocumentListing
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentSet
name|docs
init|=
name|broker
operator|.
name|getAllDocuments
argument_list|()
decl_stmt|;
name|String
name|names
index|[]
init|=
name|docs
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|Vector
name|vec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|vec
operator|.
name|addElement
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|vec
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Gets the documentListing attribute of the RpcConnection object 	 * 	 *@param  collection                     Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                The documentListing value 	 *@exception  EXistException             Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|Vector
name|getDocumentListing
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|name
operator|=
literal|'/'
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Vector
name|vec
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
return|return
name|vec
return|;
name|String
name|resource
decl_stmt|;
name|int
name|p
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|resource
operator|=
operator|(
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|p
operator|=
name|resource
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|vec
operator|.
name|addElement
argument_list|(
name|p
operator|<
literal|0
condition|?
name|resource
else|:
name|resource
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vec
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|listDocumentPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|name
operator|=
literal|'/'
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read collection "
operator|+
name|name
argument_list|)
throw|;
name|Hashtable
name|result
init|=
operator|new
name|Hashtable
argument_list|(
name|collection
operator|.
name|getDocumentCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
return|return
name|result
return|;
name|DocumentImpl
name|doc
decl_stmt|;
name|Permission
name|perm
decl_stmt|;
name|Vector
name|tmp
decl_stmt|;
name|String
name|docName
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|perm
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|tmp
operator|=
operator|new
name|Vector
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|docName
operator|=
name|doc
operator|.
name|getFileName
argument_list|()
operator|.
name|substring
argument_list|(
name|doc
operator|.
name|getFileName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Hashtable
name|listCollectionPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|name
operator|=
literal|'/'
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read collection "
operator|+
name|name
argument_list|)
throw|;
name|Hashtable
name|result
init|=
operator|new
name|Hashtable
argument_list|(
name|collection
operator|.
name|getChildCollectionCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
return|return
name|result
return|;
name|String
name|child
decl_stmt|,
name|path
decl_stmt|;
name|Collection
name|childColl
decl_stmt|;
name|Permission
name|perm
decl_stmt|;
name|Vector
name|tmp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|child
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|path
operator|=
name|name
operator|+
literal|'/'
operator|+
name|child
expr_stmt|;
name|childColl
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|perm
operator|=
name|childColl
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|tmp
operator|=
operator|new
name|Vector
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Gets the hits attribute of the RpcConnection object 	 * 	 *@param  resultId            Description of the Parameter 	 *@param  user                Description of the Parameter 	 *@return                     The hits value 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|int
name|getHits
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
block|{
name|QueryResult
name|qr
init|=
operator|(
name|QueryResult
operator|)
name|connectionPool
operator|.
name|resultSets
operator|.
name|get
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
if|if
condition|(
name|qr
operator|.
name|result
operator|==
literal|null
condition|)
return|return
literal|0
return|;
switch|switch
condition|(
name|qr
operator|.
name|result
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
return|return
name|qr
operator|.
name|result
operator|.
name|getNodeList
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
default|default :
return|return
name|qr
operator|.
name|result
operator|.
name|getValueSet
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
comment|/** 	 *  Get permissions for the given collection or resource 	 * 	 *@param  name                           Description of the Parameter 	 *@param  user                           Description of the Parameter 	 *@return                                The permissions value 	 *@exception  EXistException             Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|Hashtable
name|getPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|User
name|admin
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
literal|"admin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|name
operator|=
literal|'/'
operator|+
name|name
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
name|name
operator|=
literal|"/db"
operator|+
name|name
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Permission
name|perm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|admin
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document or collection "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
name|perm
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|perm
operator|=
name|collection
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection found finally"
argument_list|)
expr_stmt|;
block|}
name|Hashtable
name|result
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
operator|new
name|Integer
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Gets the permissions attribute of the RpcConnection object 	 * 	 *@param  user                           Description of the Parameter 	 *@param  name                           Description of the Parameter 	 *@return                                The permissions value 	 *@exception  EXistException             Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|Hashtable
name|getUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|User
name|u
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"user "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|Hashtable
name|tab
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|u
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|groups
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|u
operator|.
name|getGroups
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|groups
operator|.
name|addElement
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groups
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|getHome
argument_list|()
operator|!=
literal|null
condition|)
name|tab
operator|.
name|put
argument_list|(
literal|"home"
argument_list|,
name|u
operator|.
name|getHome
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tab
return|;
block|}
specifier|public
name|Vector
name|getUsers
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|User
name|users
index|[]
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUsers
argument_list|()
decl_stmt|;
name|Vector
name|r
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Hashtable
name|tab
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|users
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|groups
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|users
index|[
name|i
index|]
operator|.
name|getGroups
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|groups
operator|.
name|addElement
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groups
argument_list|)
expr_stmt|;
if|if
condition|(
name|users
index|[
name|i
index|]
operator|.
name|getHome
argument_list|()
operator|!=
literal|null
condition|)
name|tab
operator|.
name|put
argument_list|(
literal|"home"
argument_list|,
name|users
index|[
name|i
index|]
operator|.
name|getHome
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addElement
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|Vector
name|getGroups
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|String
index|[]
name|groups
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|groups
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|.
name|addElement
argument_list|(
name|groups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|public
name|boolean
name|hasDocument
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|r
init|=
operator|(
name|broker
operator|.
name|getDocument
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|boolean
name|parse
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|xml
parameter_list|,
name|String
name|docName
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
name|parser
operator|=
operator|new
name|Parser
argument_list|(
name|broker
argument_list|,
name|user
argument_list|,
name|replace
argument_list|)
expr_stmt|;
else|else
block|{
name|parser
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setOverwrite
argument_list|(
name|replace
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|xml
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//LOG.debug( "sync" );
comment|//broker.sync();
name|LOG
operator|.
name|debug
argument_list|(
literal|"parsing "
operator|+
name|docName
operator|+
literal|" took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
name|doc
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Parse a file previously uploaded with upload. 	 *  	 * The temporary file will be removed. 	 *  	 * @param user 	 * @param localFile 	 * @throws EXistException 	 * @throws IOException 	 */
specifier|public
name|boolean
name|parseLocal
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|localFile
parameter_list|,
name|String
name|docName
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"unable to read file "
operator|+
name|localFile
argument_list|)
throw|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
name|parser
operator|=
operator|new
name|Parser
argument_list|(
name|broker
argument_list|,
name|user
argument_list|,
name|replace
argument_list|)
expr_stmt|;
else|else
block|{
name|parser
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setOverwrite
argument_list|(
name|replace
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|file
argument_list|,
name|docName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|doc
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|upload
parameter_list|(
name|User
name|user
parameter_list|,
name|byte
index|[]
name|chunk
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|IOException
block|{
name|File
name|file
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
operator|||
name|fileName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// create temporary file
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"rpc"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"created temporary file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"appending to file "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|canWrite
argument_list|()
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"cannot write to file "
operator|+
name|fileName
argument_list|)
throw|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|fileName
return|;
block|}
specifier|protected
name|String
name|printAll
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeList
name|resultSet
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|long
name|queryTime
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"<?xml version=\"1.0\"?>\n"
operator|+
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
operator|+
literal|"hitCount=\"0\"/>"
return|;
name|Node
name|n
decl_stmt|;
name|Node
name|nn
decl_stmt|;
name|Element
name|temp
decl_stmt|;
name|DocumentImpl
name|owner
decl_stmt|;
if|if
condition|(
name|howmany
operator|>
name|resultSet
operator|.
name|getLength
argument_list|()
operator|||
name|howmany
operator|==
literal|0
condition|)
name|howmany
operator|=
name|resultSet
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|<
literal|1
operator|||
name|start
operator|>
name|resultSet
operator|.
name|getLength
argument_list|()
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"start parameter out of range"
argument_list|)
throw|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|prettyPrint
condition|)
block|{
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|OutputFormat
name|format
init|=
operator|new
name|OutputFormat
argument_list|(
literal|"xml"
argument_list|,
name|encoding
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|format
operator|.
name|setOmitXMLDeclaration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|.
name|setOmitComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|.
name|setLineWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|XMLSerializer
name|xmlout
init|=
operator|new
name|XMLSerializer
argument_list|(
name|sout
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setContentHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setLexicalHandler
argument_list|(
name|xmlout
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
operator|(
name|NodeSet
operator|)
name|resultSet
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|queryTime
argument_list|)
expr_stmt|;
return|return
name|sout
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
return|return
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeSet
operator|)
name|resultSet
argument_list|,
name|start
argument_list|,
name|howmany
argument_list|,
name|queryTime
argument_list|)
return|;
block|}
specifier|protected
name|String
name|printValues
parameter_list|(
name|ValueSet
name|resultSet
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|resultSet
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"<?xml version=\"1.0\" encoding=\""
operator|+
name|encoding
operator|+
literal|"\"?>\n"
operator|+
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
operator|+
literal|"hitCount=\"0\"/>"
return|;
if|if
condition|(
name|howmany
operator|>
name|resultSet
operator|.
name|getLength
argument_list|()
operator|||
name|howmany
operator|==
literal|0
condition|)
name|howmany
operator|=
name|resultSet
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|<
literal|1
operator|||
name|start
operator|>
name|resultSet
operator|.
name|getLength
argument_list|()
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"start parameter out of range"
argument_list|)
throw|;
name|Value
name|value
decl_stmt|;
name|Document
name|dest
init|=
name|docBuilder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|dest
operator|.
name|createElementNS
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"exist:result"
argument_list|)
decl_stmt|;
name|root
operator|.
name|setAttribute
argument_list|(
literal|"xmlns:exist"
argument_list|,
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|)
expr_stmt|;
name|root
operator|.
name|setAttribute
argument_list|(
literal|"hitCount"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dest
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Element
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|-
literal|1
init|;
name|i
operator|<
name|start
operator|+
name|howmany
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|=
name|resultSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|value
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNumber
case|:
name|temp
operator|=
name|dest
operator|.
name|createElementNS
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"exist:number"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value
operator|.
name|isString
case|:
name|temp
operator|=
name|dest
operator|.
name|createElementNS
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"exist:string"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value
operator|.
name|isBoolean
case|:
name|temp
operator|=
name|dest
operator|.
name|createElementNS
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
literal|"exist:boolean"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|LOG
operator|.
name|debug
argument_list|(
literal|"unknown type: "
operator|+
name|value
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|temp
operator|.
name|appendChild
argument_list|(
name|dest
operator|.
name|createTextNode
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|sout
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|OutputFormat
name|format
init|=
operator|new
name|OutputFormat
argument_list|(
literal|"xml"
argument_list|,
name|encoding
argument_list|,
name|prettyPrint
argument_list|)
decl_stmt|;
name|format
operator|.
name|setOmitXMLDeclaration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|.
name|setOmitComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|format
operator|.
name|setLineWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|XMLSerializer
name|xmlout
init|=
operator|new
name|XMLSerializer
argument_list|(
name|sout
argument_list|,
name|format
argument_list|)
decl_stmt|;
try|try
block|{
name|xmlout
operator|.
name|serialize
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
name|sout
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|query
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|boolean
name|summary
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|prettyPrint
argument_list|,
name|summary
argument_list|,
name|encoding
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|query
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|boolean
name|summary
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|sortExpr
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Value
name|resultValue
init|=
name|doQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultValue
operator|==
literal|null
condition|)
return|return
literal|"<?xml version=\"1.0\"?>\n"
operator|+
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" "
operator|+
literal|"hitCount=\"0\"/>"
return|;
name|String
name|result
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|PRELOAD
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|resultValue
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
name|NodeList
name|resultSet
init|=
name|resultValue
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortExpr
operator|!=
literal|null
condition|)
block|{
name|SortedNodeSet
name|sorted
init|=
operator|new
name|SortedNodeSet
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|sortExpr
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|sorted
expr_stmt|;
block|}
name|result
operator|=
name|printAll
argument_list|(
name|broker
argument_list|,
name|resultSet
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|prettyPrint
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
break|break;
default|default :
name|ValueSet
name|valueSet
init|=
name|resultValue
operator|.
name|getValueSet
argument_list|()
decl_stmt|;
name|result
operator|=
name|printValues
argument_list|(
name|valueSet
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|prettyPrint
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
break|break;
block|}
name|broker
operator|.
name|setRetrvMode
argument_list|(
name|RelationalBroker
operator|.
name|SINGLE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Vector
name|query
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Vector
name|query
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|s_id
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Vector
name|result
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|NodeSet
name|nodes
init|=
literal|null
decl_stmt|;
name|DocumentSet
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|docName
operator|!=
literal|null
operator|&&
name|s_id
operator|!=
literal|null
condition|)
block|{
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s_id
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
if|if
condition|(
operator|!
name|documentCache
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|documentCache
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|documentCache
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|nodes
operator|=
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|docs
operator|=
operator|new
name|DocumentSet
argument_list|()
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|node
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
name|Value
name|resultValue
init|=
name|doQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultValue
operator|==
literal|null
condition|)
return|return
name|result
return|;
switch|switch
condition|(
name|resultValue
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
name|NodeList
name|resultSet
init|=
name|resultValue
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|Vector
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|entry
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addElement
argument_list|(
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addElement
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|p
operator|.
name|getGID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
name|ValueSet
name|valueSet
init|=
name|resultValue
operator|.
name|getValueSet
argument_list|()
decl_stmt|;
name|Value
name|val
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSet
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|val
operator|=
name|valueSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|val
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Hashtable
name|queryP
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|s_id
parameter_list|,
name|String
name|sortBy
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Vector
name|result
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|NodeSet
name|nodes
init|=
literal|null
decl_stmt|;
name|DocumentSet
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|docName
operator|!=
literal|null
operator|&&
name|s_id
operator|!=
literal|null
condition|)
block|{
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s_id
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
if|if
condition|(
operator|!
name|documentCache
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|documentCache
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|documentCache
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|nodes
operator|=
operator|new
name|ArraySet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|docs
operator|=
operator|new
name|DocumentSet
argument_list|()
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|node
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
name|Value
name|resultValue
init|=
name|doQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultValue
operator|==
literal|null
condition|)
return|return
name|ret
return|;
switch|switch
condition|(
name|resultValue
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
name|NodeSet
name|resultSet
init|=
operator|(
name|NodeSet
operator|)
name|resultValue
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortBy
operator|!=
literal|null
condition|)
block|{
name|SortedNodeSet
name|sorted
init|=
operator|new
name|SortedNodeSet
argument_list|(
name|brokerPool
argument_list|,
name|user
argument_list|,
name|sortBy
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|sorted
expr_stmt|;
name|resultValue
operator|=
operator|new
name|ValueNodeSet
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
block|}
name|NodeProxy
name|p
decl_stmt|;
name|Vector
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|entry
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addElement
argument_list|(
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addElement
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|p
operator|.
name|getGID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
break|break;
default|default :
name|ValueSet
name|valueSet
init|=
name|resultValue
operator|.
name|getValueSet
argument_list|()
decl_stmt|;
name|Value
name|val
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueSet
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|val
operator|=
name|valueSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|val
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QueryResult
name|qr
init|=
operator|new
name|QueryResult
argument_list|(
name|resultValue
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
decl_stmt|;
name|connectionPool
operator|.
name|resultSets
operator|.
name|put
argument_list|(
name|qr
operator|.
name|hashCode
argument_list|()
argument_list|,
name|qr
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|qr
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"results"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|releaseQueryResult
parameter_list|(
name|int
name|handle
parameter_list|)
block|{
name|connectionPool
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed query result with handle "
operator|+
name|handle
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docName
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|docName
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document ["
operator|+
name|docName
operator|+
literal|"] not found!"
argument_list|)
throw|;
name|broker
operator|.
name|removeDocument
argument_list|(
name|user
argument_list|,
name|docName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|broker
operator|.
name|getCollection
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing collection "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
name|parser
operator|.
name|collection
operator|=
literal|null
expr_stmt|;
return|return
name|broker
operator|.
name|removeCollection
argument_list|(
name|user
argument_list|,
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"you are not allowed to remove users"
argument_list|)
throw|;
name|manager
operator|.
name|deleteUser
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|retrieve
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|s_id
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s_id
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
if|if
condition|(
operator|!
name|documentCache
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|documentCache
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|documentCache
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setIndent
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  resultId       Description of the Parameter 	 *@param  num            Description of the Parameter 	 *@param  prettyPrint    Description of the Parameter 	 *@param  encoding       Description of the Parameter 	 *@param  user           Description of the Parameter 	 *@return                Description of the Return Value 	 *@exception  Exception  Description of the Exception 	 */
specifier|public
name|String
name|retrieve
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|,
name|int
name|num
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pretty-print = "
operator|+
name|prettyPrint
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|QueryResult
name|qr
init|=
operator|(
name|QueryResult
operator|)
name|connectionPool
operator|.
name|resultSets
operator|.
name|get
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
switch|switch
condition|(
name|qr
operator|.
name|result
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Value
operator|.
name|isNodeList
case|:
name|NodeList
name|resultSet
init|=
name|qr
operator|.
name|result
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
name|NodeProxy
name|proxy
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|get
argument_list|(
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"index out of range"
argument_list|)
throw|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setIndent
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|proxy
argument_list|)
return|;
default|default :
name|ValueSet
name|valueSet
init|=
name|qr
operator|.
name|result
operator|.
name|getValueSet
argument_list|()
decl_stmt|;
name|Value
name|val
init|=
name|valueSet
operator|.
name|get
argument_list|(
name|num
argument_list|)
decl_stmt|;
return|return
name|val
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|terminate
condition|)
try|try
block|{
name|this
operator|.
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|inte
parameter_list|)
block|{
block|}
block|}
comment|// broker.shutdown();
block|}
comment|/** 	 *  Sets the permissions attribute of the RpcConnection object 	 * 	 *@param  user                           The new permissions value 	 *@param  resource                       The new permissions value 	 *@param  permissions                    The new permissions value 	 *@param  owner                          The new permissions value 	 *@param  ownerGroup                     The new permissions value 	 *@return                                Description of the Return Value 	 *@exception  EXistException             Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|ownerGroup
parameter_list|,
name|String
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document or collection "
operator|+
name|resource
operator|+
literal|" not found"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on document "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permissions
operator|!=
literal|null
operator|&&
name|permissions
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on collection "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
if|if
condition|(
name|permissions
operator|!=
literal|null
condition|)
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|setPermissions
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|ownerGroup
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document or collection "
operator|+
name|resource
operator|+
literal|" not found"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on document "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on collection "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *  Sets the password attribute of the RpcConnection object 	 * 	 *@param  user                           The new password value 	 *@param  name                           The new password value 	 *@param  passwd                         The new password value 	 *@param  groups                         The new user value 	 *@return                                Description of the Return Value 	 *@exception  EXistException             Description of the Exception 	 *@exception  PermissionDeniedException  Description of the Exception 	 */
specifier|public
name|boolean
name|setUser
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|passwd
parameter_list|,
name|Vector
name|groups
parameter_list|,
name|String
name|home
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|User
name|u
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasUser
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to create user"
argument_list|)
throw|;
name|u
operator|=
operator|new
name|User
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPasswordDigest
argument_list|(
name|passwd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
name|manager
operator|.
name|getUser
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"you are not allowed to change this user"
argument_list|)
throw|;
name|u
operator|.
name|setPasswordDigest
argument_list|(
name|passwd
argument_list|)
expr_stmt|;
block|}
name|String
name|g
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|g
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|u
operator|.
name|hasGroup
argument_list|(
name|g
argument_list|)
condition|)
name|u
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
name|u
operator|.
name|setHome
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setUser
argument_list|(
name|u
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  xpath          Description of the Parameter 	 *@param  user           Description of the Parameter 	 *@return                Description of the Return Value 	 *@exception  Exception  Description of the Exception 	 */
specifier|public
name|Hashtable
name|summary
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|xpath
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Value
name|resultValue
init|=
name|doQuery
argument_list|(
name|user
argument_list|,
name|xpath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultValue
operator|==
literal|null
condition|)
return|return
operator|new
name|Hashtable
argument_list|()
return|;
name|NodeList
name|resultSet
init|=
name|resultValue
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|doctypes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|doc
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|doc
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
operator|(
name|DoctypeCount
operator|)
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
name|result
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"queryTime"
argument_list|,
operator|new
name|Integer
argument_list|(
operator|(
name|int
operator|)
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
operator|new
name|Integer
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Vector
name|documents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|hitsByDoc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|hitsByDoc
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|counter
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|documents
operator|.
name|addElement
argument_list|(
name|hitsByDoc
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|Vector
name|dtypes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|hitsByType
decl_stmt|;
name|DoctypeCount
name|docTemp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|doctypes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|docTemp
operator|=
operator|(
name|DoctypeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|hitsByType
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|hitsByType
operator|.
name|addElement
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByType
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|dtypes
operator|.
name|addElement
argument_list|(
name|hitsByType
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"doctypes"
argument_list|,
name|dtypes
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  resultId            Description of the Parameter 	 *@param  user                Description of the Parameter 	 *@return                     Description of the Return Value 	 *@exception  EXistException  Description of the Exception 	 */
specifier|public
name|Hashtable
name|summary
parameter_list|(
name|User
name|user
parameter_list|,
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
operator|(
name|QueryResult
operator|)
name|connectionPool
operator|.
name|resultSets
operator|.
name|get
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
name|Hashtable
name|result
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"queryTime"
argument_list|,
operator|new
name|Integer
argument_list|(
operator|(
name|int
operator|)
name|qr
operator|.
name|queryTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qr
operator|.
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeList
name|resultSet
init|=
name|qr
operator|.
name|result
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|doctypes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|resultSet
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|doc
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|doc
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
operator|(
name|DoctypeCount
operator|)
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
operator|new
name|Integer
argument_list|(
name|resultSet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Vector
name|documents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|hitsByDoc
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|counter
operator|=
operator|(
name|NodeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|hitsByDoc
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|counter
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|counter
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|documents
operator|.
name|addElement
argument_list|(
name|hitsByDoc
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|documents
argument_list|)
expr_stmt|;
name|Vector
name|dtypes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|hitsByType
decl_stmt|;
name|DoctypeCount
name|docTemp
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|doctypes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|docTemp
operator|=
operator|(
name|DoctypeCount
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|hitsByType
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|hitsByType
operator|.
name|addElement
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByType
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|dtypes
operator|.
name|addElement
argument_list|(
name|hitsByType
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"doctypes"
argument_list|,
name|dtypes
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|getIndexedElements
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
name|Occurrences
name|occurrences
index|[]
init|=
name|broker
operator|.
name|scanIndexedElements
argument_list|(
name|user
argument_list|,
name|collection
argument_list|,
name|inclusive
argument_list|)
decl_stmt|;
name|Vector
name|result
init|=
operator|new
name|Vector
argument_list|(
name|occurrences
operator|.
name|length
argument_list|)
decl_stmt|;
name|Vector
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|occurrences
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
operator|new
name|Vector
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|temp
operator|.
name|addElement
argument_list|(
name|occurrences
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|occurrences
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|scanIndexTerms
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
name|Occurrences
name|occurrences
index|[]
init|=
name|broker
operator|.
name|getTextEngine
argument_list|()
operator|.
name|scanIndexTerms
argument_list|(
name|user
argument_list|,
name|collection
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|inclusive
argument_list|)
decl_stmt|;
name|Vector
name|result
init|=
operator|new
name|Vector
argument_list|(
name|occurrences
operator|.
name|length
argument_list|)
decl_stmt|;
name|Vector
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|occurrences
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
operator|new
name|Vector
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|temp
operator|.
name|addElement
argument_list|(
name|occurrences
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|occurrences
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addElement
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|synchronize
parameter_list|()
block|{
name|documentCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|terminate
parameter_list|()
block|{
name|terminate
operator|=
literal|true
expr_stmt|;
block|}
comment|/** 	 *  Description of the Class 	 * 	 *@author     wolf 	 *@created    28. Mai 2002 	 */
class|class
name|DoctypeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
comment|/** 		 *  Constructor for the DoctypeCount object 		 * 		 *@param  doctype  Description of the Parameter 		 */
specifier|public
name|DoctypeCount
parameter_list|(
name|DocumentType
name|doctype
parameter_list|)
block|{
name|this
operator|.
name|doctype
operator|=
name|doctype
expr_stmt|;
block|}
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
class|class
name|NodeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
comment|/** 		 *  Constructor for the NodeCount object 		 * 		 *@param  doc  Description of the Parameter 		 */
specifier|public
name|NodeCount
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

