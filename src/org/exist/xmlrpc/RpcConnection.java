begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|MutableDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|SortedNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DefaultDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|Backup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|embedded
operator|.
name|EmbeddedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|xmldb
operator|.
name|XmldbURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|SystemTaskJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|impl
operator|.
name|ShutdownTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|impl
operator|.
name|SystemTaskJobImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|EXistSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|ACEAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockedDocumentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
operator|.
name|Function2E
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
operator|.
name|Function3E
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|ValidationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmlrpc
operator|.
name|function
operator|.
name|XmlRpcCollectionFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmlrpc
operator|.
name|function
operator|.
name|XmlRpcCompiledXQueryFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmlrpc
operator|.
name|function
operator|.
name|XmlRpcDocumentFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmlrpc
operator|.
name|function
operator|.
name|XmlRpcFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|HTTPUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class implements the actual methods defined by  * {@link org.exist.xmlrpc.RpcAPI}.  *  * @author Wolfgang Meier (wolfgang@exist-db.org)  * Modified by {Marco.Tampucci, Massimo.Martinelli} @isti.cnr.it  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|RpcConnection
implements|implements
name|RpcAPI
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RpcConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|MAX_DOWNLOAD_CHUNK_SIZE
init|=
literal|0x40000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Charset
name|DEFAULT_ENCODING
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|private
specifier|final
name|XmldbRequestProcessorFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|Subject
name|user
decl_stmt|;
specifier|public
name|RpcConnection
parameter_list|(
specifier|final
name|XmldbRequestProcessorFactory
name|factory
parameter_list|,
specifier|final
name|Subject
name|user
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|Version
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|createCollection
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|createCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|,
name|created
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|createCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|Collection
name|current
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|current
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collUri
argument_list|)
expr_stmt|;
comment|//TODO : register a lock (wich one ?) within the transaction ?
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|setCreationTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|collUri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|current
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"collection "
operator|+
name|collUri
operator|+
literal|" has been created"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|configureCollection
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|,
specifier|final
name|String
name|configuration
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|configureCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|,
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|configureCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|,
specifier|final
name|String
name|configuration
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Collection
name|colRef
init|=
name|this
operator|.
expr|<
name|Collection
operator|>
name|readCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|collection
argument_list|)
decl_stmt|;
specifier|final
name|CollectionConfigurationManager
name|mgr
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfigurationManager
argument_list|()
decl_stmt|;
try|try
block|{
name|mgr
operator|.
name|addConfiguration
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|colRef
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|CollectionConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured '"
operator|+
name|collUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|createId
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|URISyntaxException
throws|,
name|PermissionDeniedException
block|{
return|return
name|createId
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|createId
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|XmldbURI
name|id
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
do|do
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|id
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
comment|// check if this id does already exist
if|if
condition|(
name|collection
operator|.
name|hasDocument
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|collection
operator|.
name|hasSubcollection
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|ok
condition|)
do|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
specifier|protected
name|QueryResult
name|doQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|CompiledXQuery
name|compiled
parameter_list|,
specifier|final
name|NodeSet
name|contextSet
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|XPathException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|checkPragmas
argument_list|(
name|compiled
operator|.
name|getContext
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|LockedDocumentMap
name|lockedDocuments
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|lockedDocuments
operator|=
name|beginProtected
argument_list|(
name|broker
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockedDocuments
operator|!=
literal|null
condition|)
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|setProtectedDocs
argument_list|(
name|lockedDocuments
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
name|contextSet
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
comment|// pass last modified date to the HTTP response
name|HTTPUtils
operator|.
name|addLastModifiedHeader
argument_list|(
name|result
argument_list|,
name|compiled
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"query took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueryResult
argument_list|(
name|result
argument_list|,
name|outputProperties
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
return|return
operator|new
name|QueryResult
argument_list|(
name|e
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lockedDocuments
operator|!=
literal|null
condition|)
block|{
name|lockedDocuments
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|LockedDocumentMap
name|beginProtected
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|String
name|protectColl
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|PROTECTED_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|protectColl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
do|do
block|{
name|MutableDocumentSet
name|docs
init|=
literal|null
decl_stmt|;
specifier|final
name|LockedDocumentMap
name|lockedDocuments
init|=
operator|new
name|LockedDocumentMap
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Collection
name|coll
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|protectColl
argument_list|)
argument_list|)
decl_stmt|;
name|docs
operator|=
operator|new
name|DefaultDocumentSet
argument_list|()
expr_stmt|;
name|coll
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|,
name|lockedDocuments
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
return|return
name|lockedDocuments
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deadlock detected. Starting over again. Docs: "
operator|+
name|docs
operator|.
name|getDocumentCount
argument_list|()
operator|+
literal|"; locked: "
operator|+
name|lockedDocuments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lockedDocuments
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
comment|/**      * @deprecated Use compileQuery lambda instead!      */
annotation|@
name|Deprecated
specifier|private
name|CompiledXQuery
name|compile
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|XMLRPC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|base
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|BASE_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|moduleLoadPath
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|MODULE_LOAD_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleLoadPath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|moduleLoadPath
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|NAMESPACES
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
operator|&&
name|namespaces
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|declareNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|//  declare static variables
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variableDecls
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|VARIABLES
argument_list|)
decl_stmt|;
if|if
condition|(
name|variableDecls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|variableDecls
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"declaring "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" = "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|declareVariable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
index|[]
name|staticDocuments
init|=
operator|(
name|Object
index|[]
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|STATIC_DOCUMENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticDocuments
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|XmldbURI
index|[]
name|d
init|=
operator|new
name|XmldbURI
index|[
name|staticDocuments
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|staticDocuments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XmldbURI
name|next
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
operator|(
name|String
operator|)
name|staticDocuments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|d
index|[
name|i
index|]
operator|=
name|next
expr_stmt|;
block|}
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|isBaseURIDeclared
argument_list|()
condition|)
block|{
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|context
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toXmldbURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|compiled
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|printDiagnostics
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|compiledQuery
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Check if the XQuery contains pragmas that define serialization settings.      * If yes, copy the corresponding settings to the current set of output      * properties.      *      * @param context      * @param parameters      * @throws org.exist.xquery.XPathException      */
specifier|protected
name|void
name|checkPragmas
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Option
name|pragma
init|=
name|context
operator|.
name|getOption
argument_list|(
name|Option
operator|.
name|SERIALIZE_QNAME
argument_list|)
decl_stmt|;
name|checkPragmas
argument_list|(
name|pragma
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkPragmas
parameter_list|(
specifier|final
name|Option
name|pragma
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|pragma
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
index|[]
name|contents
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|content
range|:
name|contents
control|)
block|{
specifier|final
name|String
index|[]
name|pair
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown parameter found in "
operator|+
name|pragma
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": '"
operator|+
name|content
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting serialization property from pragma: "
operator|+
name|pair
index|[
literal|0
index|]
operator|+
literal|" = "
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|executeQuery
parameter_list|(
specifier|final
name|byte
index|[]
name|xpath
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Charset
name|charset
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|encoding
argument_list|)
operator|.
name|map
argument_list|(
name|Charset
operator|::
name|forName
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xpathString
init|=
operator|new
name|String
argument_list|(
name|xpath
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query: "
operator|+
name|xpathString
argument_list|)
expr_stmt|;
return|return
name|executeQuery
argument_list|(
name|xpathString
argument_list|,
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|executeQuery
parameter_list|(
specifier|final
name|String
name|xpath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|QueryResult
name|result
init|=
name|this
operator|.
expr|<
name|QueryResult
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
name|doQuery
argument_list|(
name|broker
argument_list|,
name|compiledQuery
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|result
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|result
operator|.
name|queryTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
return|return
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
name|String
name|formatErrorMsg
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
return|return
name|formatErrorMsg
argument_list|(
literal|"error"
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|protected
name|String
name|formatErrorMsg
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\"0\">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"></exist:result>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|existsAndCanOpenCollection
parameter_list|(
specifier|final
name|String
name|collectionUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|use
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection '"
operator|+
name|collectionUri
operator|+
literal|"' does not indicate a valid collection URI: "
operator|+
name|use
operator|.
name|getMessage
argument_list|()
argument_list|,
name|use
argument_list|)
throw|;
block|}
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
return|return
name|collection
operator|!=
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCollectionDesc
parameter_list|(
specifier|final
name|String
name|rootCollection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|getCollectionDesc
argument_list|(
operator|(
name|rootCollection
operator|==
literal|null
operator|)
condition|?
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
else|:
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|rootCollection
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCollectionDesc
parameter_list|(
specifier|final
name|XmldbURI
name|rootUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readCollection
argument_list|(
name|rootUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|desc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Permission
name|perms
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hash
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perms
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perms
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|?
literal|"BinaryResource"
else|:
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Permission
name|perms
init|=
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
decl_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"collections"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perms
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perms
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|describeResource
parameter_list|(
specifier|final
name|String
name|resourceName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|describeResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resourceName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|describeResource
parameter_list|(
specifier|final
name|XmldbURI
name|resourceUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readDocument
argument_list|(
name|resourceUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hash
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|11
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|perms
init|=
name|document
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|resourceUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perms
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perms
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perms
operator|instanceof
name|ACLPermission
condition|)
block|{
name|hash
operator|.
name|put
argument_list|(
literal|"acl"
argument_list|,
name|getACEs
argument_list|(
name|perms
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hash
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|document
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|?
literal|"BinaryResource"
else|:
literal|"XMLResource"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|resourceLength
init|=
name|document
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"content-length"
argument_list|,
operator|(
name|resourceLength
operator|>
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|int
operator|)
name|resourceLength
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"content-length-64bit"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|resourceLength
argument_list|)
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"mime-type"
argument_list|,
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|"modified"
argument_list|,
operator|new
name|Date
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|describeCollection
parameter_list|(
specifier|final
name|String
name|rootCollection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|describeCollection
argument_list|(
operator|(
name|rootCollection
operator|==
literal|null
operator|)
condition|?
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
else|:
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|rootCollection
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * The method<code>describeCollection</code>      *      * Returns details of a collection - collections (list of sub-collections) -      * name - created - owner - group - permissions - acl      *      * If you do not have read access on the collection, the list of      * sub-collections will be empty, an exception will not be thrown!      *      * @param collUri a<code>XmldbURI</code> value      * @return a<code>Map</code> value      * @exception Exception if an error occurs      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|describeCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|desc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|collections
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Permission
name|perms
init|=
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
decl_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"collections"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perms
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perms
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perms
operator|instanceof
name|ACLPermission
condition|)
block|{
name|desc
operator|.
name|put
argument_list|(
literal|"acl"
argument_list|,
name|getACEs
argument_list|(
name|perms
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Charset
name|encoding
init|=
name|getEncoding
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|compression
init|=
name|useCompression
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xml
init|=
name|getDocumentAsString
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getDocument with compression"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|getDocumentAsString
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|docName
argument_list|)
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getDocumentAsString
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|document
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDocumentData
parameter_list|(
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|docUri
decl_stmt|;
try|try
block|{
name|docUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|docName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Charset
name|encoding
init|=
name|getEncoding
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
comment|// A tweak for very large resources, VirtualTempFile
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|VirtualTempFile
name|vtempFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|,
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"eXistRPCC"
argument_list|)
expr_stmt|;
comment|// binary check TODO dwes
if|if
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|vtempFile
argument_list|,
name|encoding
argument_list|)
init|)
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|document
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".bin"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|,
name|vtempFile
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|vtempFile
operator|!=
literal|null
condition|)
block|{
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|byte
index|[]
name|firstChunk
init|=
name|vtempFile
operator|.
name|getChunk
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|firstChunk
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vtempFile
operator|.
name|length
argument_list|()
operator|>
name|MAX_DOWNLOAD_CHUNK_SIZE
condition|)
block|{
name|offset
operator|=
name|firstChunk
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|handle
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
operator|new
name|SerializedResult
argument_list|(
name|vtempFile
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"supports-long-offset"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNextChunk
parameter_list|(
specifier|final
name|String
name|handle
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
specifier|final
name|int
name|resultId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|handle
argument_list|)
decl_stmt|;
specifier|final
name|SerializedResult
name|sr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getSerializedResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid handle specified"
argument_list|)
throw|;
block|}
comment|// This will keep the serialized result in the cache
name|sr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|VirtualTempFile
name|vfile
init|=
name|sr
operator|.
name|result
decl_stmt|;
if|if
condition|(
name|offset
operator|<=
literal|0
operator|||
name|offset
operator|>
name|vfile
operator|.
name|length
argument_list|()
condition|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No more data available"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|chunk
init|=
name|vfile
operator|.
name|getChunk
argument_list|(
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextChunk
init|=
name|offset
operator|+
name|chunk
operator|.
name|length
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextChunk
operator|>
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|nextChunk
operator|==
name|vfile
operator|.
name|length
argument_list|()
condition|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|nextChunk
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNextExtendedChunk
parameter_list|(
specifier|final
name|String
name|handle
parameter_list|,
specifier|final
name|String
name|offset
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
specifier|final
name|int
name|resultId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|handle
argument_list|)
decl_stmt|;
specifier|final
name|SerializedResult
name|sr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getSerializedResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid handle specified"
argument_list|)
throw|;
block|}
comment|// This will keep the serialized result in the cache
name|sr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|VirtualTempFile
name|vfile
init|=
name|sr
operator|.
name|result
decl_stmt|;
specifier|final
name|long
name|longOffset
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|longOffset
operator|<
literal|0
operator|||
name|longOffset
operator|>
name|vfile
operator|.
name|length
argument_list|()
condition|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No more data available"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|chunk
init|=
name|vfile
operator|.
name|getChunk
argument_list|(
name|longOffset
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextChunk
init|=
name|longOffset
operator|+
name|chunk
operator|.
name|length
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextChunk
operator|==
name|vfile
operator|.
name|length
argument_list|()
condition|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextChunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBinaryResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getBinaryResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getBinaryResource
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|getBinaryResource
argument_list|(
name|name
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getBinaryResource
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|int
name|requiredPermissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|byte
index|[]
operator|>
name|readDocument
argument_list|(
name|name
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Document "
operator|+
name|name
operator|+
literal|" is not a binary resource"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|requiredPermissions
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to access resource"
argument_list|)
throw|;
block|}
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|broker
operator|.
name|getBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|)
init|)
block|{
specifier|final
name|long
name|resourceSize
init|=
name|broker
operator|.
name|getBinaryResourceSize
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceSize
operator|>
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource too big to be read using this method."
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|resourceSize
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|xupdate
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|,
specifier|final
name|byte
index|[]
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
try|try
block|{
return|return
name|xupdate
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|xupdate
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|xupdate
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|,
specifier|final
name|String
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Collection
name|collectionRef
init|=
name|this
operator|.
expr|<
name|Collection
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|collection
argument_list|)
decl_stmt|;
comment|//TODO : register a lock (which one ?) in the transaction ?
specifier|final
name|DocumentSet
name|docs
init|=
name|collectionRef
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
operator|new
name|DefaultDocumentSet
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|XMLRPC
argument_list|)
decl_stmt|;
specifier|final
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Modification
name|modification
range|:
name|modifications
control|)
block|{
name|mods
operator|+=
name|modification
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|xupdateResource
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|byte
index|[]
name|xupdate
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
try|try
block|{
return|return
name|xupdateResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|xupdate
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|xupdateResource
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|DocumentImpl
name|documentRef
init|=
name|this
operator|.
expr|<
name|DocumentImpl
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|document
argument_list|)
decl_stmt|;
comment|//TODO : register a lock (which one ?) within the transaction ?
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|documentRef
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|XMLRPC
argument_list|)
decl_stmt|;
specifier|final
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Modification
name|modification
range|:
name|modifications
control|)
block|{
name|mods
operator|+=
name|modification
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sync
parameter_list|()
block|{
try|try
block|{
return|return
name|withDbAsSystem
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MAJOR_SYNC
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isXACMLEnabled
parameter_list|()
block|{
return|return
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|isXACMLEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dataBackup
parameter_list|(
specifier|final
name|String
name|dest
parameter_list|)
block|{
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|triggerSystemTask
argument_list|(
operator|new
name|DataBackup
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocumentListing
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|broker
operator|.
name|getAllXMLResources
argument_list|(
operator|new
name|DefaultDocumentSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|names
index|[]
init|=
name|docs
operator|.
name|getNames
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|XmldbURI
name|name
range|:
name|names
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCollectionListing
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getCollectionListing
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCollectionListing
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocumentListing
parameter_list|(
specifier|final
name|String
name|collName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getDocumentListing
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDocumentListing
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getResourceCount
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getResourceCount
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|getResourceCount
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Integer
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createResourceId
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|createResourceId
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates a unique name for a database resource Uniqueness is only      * guaranteed within the eXist instance      *      * The name is based on a hex encoded string of a random integer and will      * have the format xxxxxxxx.xml where x is in the range 0 to 9 and a to f      *      * @return the unique resource name      */
specifier|private
name|String
name|createResourceId
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|XmldbURI
name|id
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
do|do
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|id
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
comment|// check if this id does already exist
if|if
condition|(
name|collection
operator|.
name|hasDocument
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|collection
operator|.
name|hasSubcollection
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|ok
condition|)
do|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHits
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
if|if
condition|(
name|qr
operator|.
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|qr
operator|.
name|result
operator|.
name|getItemCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPermissions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getPermissions
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPermissions
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|perm
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document or collection "
operator|+
name|uri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|perm
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|perm
operator|=
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|ACLPermission
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"acl"
argument_list|,
name|getACEs
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSubCollectionPermissions
parameter_list|(
specifier|final
name|String
name|parentPath
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|perm
init|=
name|this
operator|.
expr|<
name|Permission
operator|>
name|readCollection
argument_list|(
name|uri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getSubCollectionEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getPermissions
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|ACLPermission
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"acl"
argument_list|,
name|getACEs
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSubResourcePermissions
parameter_list|(
specifier|final
name|String
name|parentPath
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|perm
init|=
name|this
operator|.
expr|<
name|Permission
operator|>
name|readCollection
argument_list|(
name|uri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getResourceEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getPermissions
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|ACLPermission
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"acl"
argument_list|,
name|getACEs
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSubCollectionCreationTime
parameter_list|(
specifier|final
name|String
name|parentPath
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Long
operator|>
name|readCollection
argument_list|(
name|uri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|collection
operator|.
name|getSubCollectionEntry
argument_list|(
name|broker
argument_list|,
name|name
argument_list|)
operator|.
name|getCreated
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ACEAider
argument_list|>
name|getACEs
parameter_list|(
specifier|final
name|Permission
name|perm
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ACLPermission
name|aclPermission
init|=
operator|(
name|ACLPermission
operator|)
name|perm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclPermission
operator|.
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|aces
operator|.
name|add
argument_list|(
operator|new
name|ACEAider
argument_list|(
name|aclPermission
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aces
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|listDocumentPermissions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|listDocumentPermissions
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|listDocumentPermissions
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|collection
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Permission
name|perm
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
specifier|final
name|List
name|tmp
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|ACLPermission
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|getACEs
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|List
argument_list|>
name|listCollectionPermissions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|listCollectionPermissions
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|List
argument_list|>
name|listCollectionPermissions
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|List
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|List
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|collection
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|XmldbURI
name|child
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
name|path
init|=
name|collUri
operator|.
name|append
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|childColl
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|perm
init|=
name|childColl
operator|.
name|getPermissionsNoLock
argument_list|()
decl_stmt|;
specifier|final
name|List
name|tmp
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|ACLPermission
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|getACEs
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCreationDate
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|URISyntaxException
block|{
return|return
name|getCreationDate
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Date
name|getCreationDate
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|this
operator|.
expr|<
name|Date
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|Date
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getTimestamps
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|URISyntaxException
block|{
return|return
name|getTimestamps
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Date
argument_list|>
name|getTimestamps
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|Date
argument_list|>
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|DocumentMetadata
name|metadata
init|=
name|document
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Date
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setLastModified
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|long
name|lastModified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeDocument
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|documentPath
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|//TODO : register the lock within the transaction ?
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|documentPath
argument_list|)
throw|;
block|}
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Account
name|u
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"account '"
operator|+
name|name
operator|+
literal|"' does not exist"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tab
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"uid"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|u
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|u
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Group
name|dg
init|=
name|u
operator|.
name|getDefaultGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|dg
operator|!=
literal|null
condition|)
block|{
name|tab
operator|.
name|put
argument_list|(
literal|"default-group-id"
argument_list|,
name|dg
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"default-group-realmId"
argument_list|,
name|dg
operator|.
name|getRealmId
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"default-group-name"
argument_list|,
name|dg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tab
operator|.
name|put
argument_list|(
literal|"enabled"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|u
operator|.
name|isEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"umask"
argument_list|,
name|u
operator|.
name|getUserMask
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SchemaType
name|key
range|:
name|u
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|key
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|u
operator|.
name|getMetadataValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tab
operator|.
name|put
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|tab
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getAccounts
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUsers
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Account
name|user
range|:
name|users
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tab
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"uid"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|user
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"enabled"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|user
operator|.
name|isEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tab
operator|.
name|put
argument_list|(
literal|"umask"
argument_list|,
name|user
operator|.
name|getUserMask
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SchemaType
name|key
range|:
name|user
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|key
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|user
operator|.
name|getMetadataValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tab
operator|.
name|put
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|v
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|group
range|:
name|groups
control|)
block|{
name|v
operator|.
name|add
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|securityManager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|securityManager
operator|.
name|getGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"realmId"
argument_list|,
name|group
operator|.
name|getRealmId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|groupManagers
init|=
name|group
operator|.
name|getManagers
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|managers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupManagers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Account
name|groupManager
range|:
name|groupManagers
control|)
block|{
name|managers
operator|.
name|add
argument_list|(
name|groupManager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"managers"
argument_list|,
name|managers
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SchemaType
name|key
range|:
name|group
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|key
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|group
operator|.
name|getMetadataValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|deleteGroup
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDocument
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|hasDocument
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasDocument
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|broker
operator|.
name|getXMLResource
argument_list|(
name|docUri
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCollection
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|URISyntaxException
throws|,
name|PermissionDeniedException
block|{
return|return
name|hasCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|parse
parameter_list|(
name|byte
index|[]
name|xml
parameter_list|,
name|String
name|documentPath
parameter_list|,
name|int
name|overwrite
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
name|xml
argument_list|,
name|documentPath
argument_list|,
name|overwrite
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|parse
parameter_list|(
specifier|final
name|byte
index|[]
name|xml
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parse
argument_list|(
name|xml
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|overwrite
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|parse
parameter_list|(
specifier|final
name|byte
index|[]
name|xml
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeCollection
argument_list|(
name|docUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|overwrite
operator|==
literal|0
condition|)
block|{
specifier|final
name|DocumentImpl
name|old
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Document exists and overwrite is not allowed"
argument_list|)
throw|;
block|}
block|}
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
argument_list|)
init|)
block|{
specifier|final
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|source
argument_list|)
decl_stmt|;
specifier|final
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
operator|&&
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|modified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"parsing "
operator|+
name|docUri
operator|+
literal|" took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Parse a file previously uploaded with upload.      *      * The temporary file will be removed.      *      * @param localFile      * @param documentPath      * @param overwrite      * @param mimeType      * @return      * @throws EXistException      * @throws java.net.URISyntaxException      */
specifier|public
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|documentPath
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Parse a file previously uploaded with upload, forcing it to XML or      * Binary.      *      * The temporary file will be removed.      *      * @param localFile      * @param documentPath      * @param overwrite      * @param mimeType      * @param isXML      * @return      * @throws EXistException      * @throws java.net.URISyntaxException      */
specifier|public
name|boolean
name|parseLocalExt
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|isXML
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocalExt
argument_list|(
name|localFile
argument_list|,
name|documentPath
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
name|isXML
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|docUri
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|boolean
name|parseLocalExt
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|isXML
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|docUri
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
name|isXML
operator|!=
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|parseLocalExt
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|isXML
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|overwrite
argument_list|,
name|mimeType
argument_list|,
name|isXML
operator|!=
literal|0
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|Boolean
name|isXML
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeCollection
argument_list|(
name|docUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|overwrite
operator|==
literal|0
condition|)
block|{
specifier|final
name|DocumentImpl
name|old
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Old document exists and overwrite is not allowed"
argument_list|)
throw|;
block|}
block|}
name|VirtualTempFileInputSource
name|source
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
specifier|final
name|int
name|handle
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
specifier|final
name|SerializedResult
name|sr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getSerializedResult
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid handle specified"
argument_list|)
throw|;
block|}
name|source
operator|=
operator|new
name|VirtualTempFileInputSource
argument_list|(
name|sr
operator|.
name|result
argument_list|)
expr_stmt|;
comment|// Unlinking the VirtualTempFile from the SerializeResult
name|sr
operator|.
name|result
operator|=
literal|null
expr_stmt|;
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// As this file can be a non-temporal one, we should not
comment|// blindly erase it!
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"unable to read file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|source
operator|=
operator|new
name|VirtualTempFileInputSource
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Error preparing virtual temp file for parsing"
argument_list|)
throw|;
block|}
specifier|final
name|MimeType
name|mime
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|mimeType
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|MimeType
operator|.
name|BINARY_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|treatAsXML
init|=
operator|(
name|isXML
operator|!=
literal|null
operator|&&
name|isXML
operator|)
operator|||
operator|(
name|isXML
operator|==
literal|null
operator|&&
name|mime
operator|.
name|isXMLType
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|treatAsXML
condition|)
block|{
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|modified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|source
operator|.
name|getByteStream
argument_list|()
init|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|is
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|,
name|source
operator|.
name|getByteStreamLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|modified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
comment|// DWES there are situations the file is not cleaned up
name|source
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|storeBinary
argument_list|(
name|data
argument_list|,
name|documentPath
argument_list|,
name|mimeType
argument_list|,
name|overwrite
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|storeBinary
argument_list|(
name|data
argument_list|,
name|docUri
argument_list|,
name|mimeType
argument_list|,
name|overwrite
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|storeBinary
argument_list|(
name|data
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|mimeType
argument_list|,
name|overwrite
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeCollection
argument_list|(
name|docUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|// keep the write lock in the transaction
name|transaction
operator|.
name|registerLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|overwrite
operator|==
literal|0
condition|)
block|{
specifier|final
name|DocumentImpl
name|old
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Old document exists and overwrite is not allowed"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing binary resource to collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|data
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|modified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
operator|!=
literal|null
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|upload
parameter_list|(
specifier|final
name|byte
index|[]
name|chunk
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
name|String
name|fileName
parameter_list|,
specifier|final
name|boolean
name|compressed
parameter_list|)
throws|throws
name|EXistException
throws|,
name|IOException
block|{
name|VirtualTempFile
name|vtempFile
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
operator|||
name|fileName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// create temporary file
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|,
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"rpc"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|handle
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
operator|new
name|SerializedResult
argument_list|(
name|vtempFile
argument_list|)
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//            LOG.debug("appending to file " + fileName);
try|try
block|{
specifier|final
name|int
name|handle
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|SerializedResult
name|sr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getSerializedResult
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid handle specified"
argument_list|)
throw|;
block|}
comment|// This will keep the serialized result in the cache
name|sr
operator|.
name|touch
argument_list|()
expr_stmt|;
name|vtempFile
operator|=
name|sr
operator|.
name|result
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Syntactically invalid handle specified"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|compressed
condition|)
block|{
name|Compressor
operator|.
name|uncompress
argument_list|(
name|chunk
argument_list|,
name|vtempFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vtempFile
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|fileName
return|;
block|}
specifier|protected
name|String
name|printAll
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|resultSet
parameter_list|,
name|int
name|howmany
parameter_list|,
name|int
name|start
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
specifier|final
name|long
name|queryTime
parameter_list|)
throws|throws
name|EXistException
throws|,
name|SAXException
throws|,
name|XPathException
block|{
if|if
condition|(
name|resultSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|opt
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|null
operator|||
name|opt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<exist:result xmlns:exist=\""
argument_list|)
operator|.
name|append
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hitCount=\"0\"/>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|howmany
operator|>
name|resultSet
operator|.
name|getItemCount
argument_list|()
operator|||
name|howmany
operator|==
literal|0
condition|)
block|{
name|howmany
operator|=
name|resultSet
operator|.
name|getItemCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|<
literal|1
operator|||
name|start
operator|>
name|resultSet
operator|.
name|getItemCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"start parameter out of range"
argument_list|)
throw|;
block|}
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<exist:result xmlns:exist=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\" hits=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|resultSet
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\" start=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\" count=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|howmany
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\">\n"
argument_list|)
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|Item
name|item
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|--
name|start
init|;
name|i
operator|<
name|start
operator|+
name|howmany
condition|;
name|i
operator|++
control|)
block|{
name|item
operator|=
name|resultSet
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|item
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ELEMENT
condition|)
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<exist:value type=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Type
operator|.
name|getTypeName
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</exist:value>"
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"\n</exist:result>"
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|compile
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|LINE
argument_list|,
name|e
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|COLUMN
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|query
parameter_list|(
specifier|final
name|String
name|xpath
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|this
operator|.
expr|<
name|QueryResult
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiled
lambda|->
name|doQuery
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
return|return
literal|"<?xml version=\"1.0\"?>\n"
operator|+
literal|"<exist:result xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\" "
operator|+
literal|"hitCount=\"0\"/>"
return|;
block|}
if|if
condition|(
name|qr
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
throw|throw
name|qr
operator|.
name|getException
argument_list|()
throw|;
block|}
return|return
name|printAll
argument_list|(
name|broker
argument_list|,
name|qr
operator|.
name|result
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|parameters
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryP
parameter_list|(
specifier|final
name|String
name|xpath
parameter_list|,
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|s_id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|queryP
argument_list|(
name|xpath
argument_list|,
operator|(
name|documentPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|s_id
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryP
parameter_list|(
specifier|final
name|String
name|xpath
parameter_list|,
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|s_id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|sortBy
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|SORT_EXPR
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Sequence
name|resultSeq
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeSet
name|nodes
decl_stmt|;
if|if
condition|(
name|docUri
operator|!=
literal|null
operator|&&
name|s_id
operator|!=
literal|null
condition|)
block|{
name|nodes
operator|=
name|this
operator|.
expr|<
name|NodeSet
operator|>
name|readDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
block|{
specifier|final
name|Object
index|[]
name|docs
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|docs
index|[
literal|0
index|]
operator|=
name|docUri
operator|.
name|toString
argument_list|()
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|STATIC_DOCUMENTS
argument_list|,
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|s_id
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|NodeId
name|nodeId
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromString
argument_list|(
name|s_id
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
specifier|final
name|NodeSet
name|nodeSet
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeSet
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|nodeSet
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodes
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|QueryResult
name|queryResult
init|=
name|this
operator|.
expr|<
name|QueryResult
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
name|doQuery
argument_list|(
name|broker
argument_list|,
name|compiledQuery
argument_list|,
name|nodes
argument_list|,
name|parameters
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryResult
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryResult
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
comment|// return an error description
specifier|final
name|XPathException
name|e
init|=
name|queryResult
operator|.
name|getException
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|LINE
argument_list|,
name|e
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|COLUMN
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|resultSeq
operator|=
name|queryResult
operator|.
name|result
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|resultSeq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortBy
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|SortedNodeSet
name|sorted
init|=
operator|new
name|SortedNodeSet
argument_list|(
name|factory
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|user
argument_list|,
name|sortBy
operator|.
name|get
argument_list|()
argument_list|,
name|AccessContext
operator|.
name|XMLRPC
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|resultSeq
argument_list|)
expr_stmt|;
name|resultSeq
operator|=
name|sorted
expr_stmt|;
block|}
name|NodeProxy
name|p
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entry
decl_stmt|;
if|if
condition|(
name|resultSeq
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SequenceIterator
name|i
init|=
name|resultSeq
operator|.
name|iterate
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
name|Item
name|next
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|next
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|entry
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|NodeValue
operator|)
name|next
operator|)
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|next
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|add
argument_list|(
literal|"temp_xquery/"
operator|+
name|next
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|NodeImpl
operator|)
name|next
operator|)
operator|.
name|getNodeNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sequence iterator is null. Should not"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"result sequence is null. Skipping it..."
argument_list|)
expr_stmt|;
block|}
name|queryResult
operator|.
name|result
operator|=
name|resultSeq
expr_stmt|;
name|queryResult
operator|.
name|queryTime
operator|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
specifier|final
name|int
name|id
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
name|queryResult
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"hash"
argument_list|,
name|queryResult
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"results"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|execute
parameter_list|(
specifier|final
name|String
name|pathToQuery
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|sortBy
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|RpcAPI
operator|.
name|SORT_EXPR
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readDocument
argument_list|(
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|pathToQuery
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|BinaryDocument
name|xquery
init|=
operator|(
name|BinaryDocument
operator|)
name|document
decl_stmt|;
if|if
condition|(
name|xquery
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Document "
operator|+
name|pathToQuery
operator|+
literal|" is not a binary resource"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|xquery
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
operator||
name|Permission
operator|.
name|EXECUTE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to access resource"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|source
init|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
name|xquery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|QueryResult
name|queryResult
init|=
name|this
operator|.
expr|<
name|QueryResult
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
name|doQuery
argument_list|(
name|broker
argument_list|,
name|compiledQuery
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryResult
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryResult
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
comment|// return an error description
specifier|final
name|XPathException
name|e
init|=
name|queryResult
operator|.
name|getException
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|LINE
argument_list|,
name|e
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|RpcAPI
operator|.
name|COLUMN
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|Sequence
name|resultSeq
init|=
name|queryResult
operator|.
name|result
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|resultSeq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortBy
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|SortedNodeSet
name|sorted
init|=
operator|new
name|SortedNodeSet
argument_list|(
name|factory
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|user
argument_list|,
name|sortBy
operator|.
name|get
argument_list|()
argument_list|,
name|AccessContext
operator|.
name|XMLRPC
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|resultSeq
argument_list|)
expr_stmt|;
name|resultSeq
operator|=
name|sorted
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultSeq
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SequenceIterator
name|i
init|=
name|resultSeq
operator|.
name|iterate
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
name|Item
name|next
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|next
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|entry
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|NodeValue
operator|)
name|next
operator|)
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
operator|(
name|NodeProxy
operator|)
name|next
decl_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|add
argument_list|(
literal|"temp_xquery/"
operator|+
name|next
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|NodeImpl
operator|)
name|next
operator|)
operator|.
name|getNodeNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sequence iterator is null. Should not be!"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"result sequence is null. Skipping it..."
argument_list|)
expr_stmt|;
block|}
name|queryResult
operator|.
name|result
operator|=
name|resultSeq
expr_stmt|;
name|queryResult
operator|.
name|queryTime
operator|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
specifier|final
name|int
name|id
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
name|queryResult
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"hash"
argument_list|,
name|queryResult
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"results"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|releaseQueryResult
parameter_list|(
specifier|final
name|int
name|handle
parameter_list|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed query result with handle "
operator|+
name|handle
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|releaseQueryResult
parameter_list|(
specifier|final
name|int
name|handle
parameter_list|,
specifier|final
name|int
name|hash
parameter_list|)
block|{
name|factory
operator|.
name|resultSets
operator|.
name|remove
argument_list|(
name|handle
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed query result with handle "
operator|+
name|handle
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|remove
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|remove
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeCollection
argument_list|(
name|docUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|// keep the write lock in the transaction
name|transaction
operator|.
name|registerLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Document "
operator|+
name|docUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeCollection
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|removeCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|removeCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collURI
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeCollection
argument_list|(
name|collURI
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|// keep the write lock in the transaction
name|transaction
operator|.
name|registerLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing collection "
operator|+
name|collURI
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"you are not allowed to remove users"
argument_list|)
throw|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|deleteAccount
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
specifier|final
name|String
name|doc
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
specifier|final
name|String
name|xml
init|=
name|retrieveAsString
argument_list|(
name|doc
argument_list|,
name|id
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|retrieveAsString
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|s_id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|retrieve
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|s_id
argument_list|,
name|parameters
argument_list|)
return|;
block|}
specifier|private
name|String
name|retrieve
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|s_id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|NodeId
name|nodeId
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromString
argument_list|(
name|s_id
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|retrieveFirstChunk
parameter_list|(
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|boolean
name|compression
init|=
name|useCompression
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|docUri
decl_stmt|;
try|try
block|{
name|docUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|docName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|NodeId
name|nodeId
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromString
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|node
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|,
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"eXistRPCC"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"retrieveFirstChunk with compression"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|vtempFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|=
name|vtempFile
expr_stmt|;
block|}
try|try
block|{
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
init|)
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
if|if
condition|(
name|os
operator|!=
name|vtempFile
condition|)
block|{
try|try
block|{
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
specifier|final
name|byte
index|[]
name|firstChunk
init|=
name|vtempFile
operator|.
name|getChunk
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|firstChunk
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vtempFile
operator|.
name|length
argument_list|()
operator|>
name|MAX_DOWNLOAD_CHUNK_SIZE
condition|)
block|{
name|offset
operator|=
name|firstChunk
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|handle
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
operator|new
name|SerializedResult
argument_list|(
name|vtempFile
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"supports-long-offset"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|int
name|num
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Charset
name|encoding
init|=
name|getEncoding
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|compression
init|=
name|useCompression
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xml
init|=
name|retrieveAsString
argument_list|(
name|resultId
argument_list|,
name|num
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"retrieve with compression"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|Compressor
operator|.
name|compress
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|retrieveAsString
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|int
name|num
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|qr
operator|.
name|result
operator|.
name|itemAt
argument_list|(
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"index out of range"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|nodeValue
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|qr
operator|.
name|serialization
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|nodeValue
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|item
operator|.
name|getStringValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|retrieveFirstChunk
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|int
name|num
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|boolean
name|compression
init|=
name|useCompression
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out: "
operator|+
name|resultId
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|qr
operator|.
name|result
operator|.
name|itemAt
argument_list|(
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"index out of range"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|,
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"eXistRPCC"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"retrieveFirstChunk with compression"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|vtempFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|=
name|vtempFile
expr_stmt|;
block|}
try|try
block|{
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|nodeValue
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|qr
operator|.
name|serialization
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|nodeValue
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
if|if
condition|(
name|os
operator|!=
name|vtempFile
condition|)
block|{
try|try
block|{
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
specifier|final
name|byte
index|[]
name|firstChunk
init|=
name|vtempFile
operator|.
name|getChunk
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|firstChunk
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vtempFile
operator|.
name|length
argument_list|()
operator|>
name|MAX_DOWNLOAD_CHUNK_SIZE
condition|)
block|{
name|offset
operator|=
name|firstChunk
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|handle
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
operator|new
name|SerializedResult
argument_list|(
name|vtempFile
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"supports-long-offset"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|retrieveAll
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|String
name|xml
init|=
name|retrieveAllAsString
argument_list|(
name|resultId
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|xml
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|retrieveAllAsString
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|qr
operator|.
name|serialization
argument_list|)
expr_stmt|;
specifier|final
name|SAXSerializer
name|handler
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
comment|//			serialize results
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
specifier|final
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"hitCount"
argument_list|,
literal|"hitCount"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|qr
operator|.
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|Item
name|current
decl_stmt|;
name|char
index|[]
name|value
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|qr
operator|.
name|result
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|current
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|current
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|retrieveAllFirstChunk
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|boolean
name|compression
init|=
name|useCompression
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|qr
operator|.
name|serialization
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|setProperties
argument_list|(
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SAXSerializer
name|handler
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|,
name|MAX_DOWNLOAD_CHUNK_SIZE
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|setTempPrefix
argument_list|(
literal|"eXistRPCC"
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|setTempPostfix
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"retrieveAllFirstChunk compression"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|vtempFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|=
name|vtempFile
expr_stmt|;
block|}
try|try
block|{
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
init|)
block|{
name|handler
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|toProperties
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
comment|// serialize results
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startPrefixMapping
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
specifier|final
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"hitCount"
argument_list|,
literal|"hitCount"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|qr
operator|.
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|Item
name|current
decl_stmt|;
name|char
index|[]
name|value
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|qr
operator|.
name|result
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|current
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
operator|(
operator|(
name|NodeValue
operator|)
name|current
operator|)
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|current
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"result"
argument_list|,
literal|"exist:result"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endPrefixMapping
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
if|if
condition|(
name|os
operator|!=
name|vtempFile
condition|)
block|{
try|try
block|{
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|//IgnoreIT(R)
block|}
block|}
block|}
specifier|final
name|byte
index|[]
name|firstChunk
init|=
name|vtempFile
operator|.
name|getChunk
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|firstChunk
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vtempFile
operator|.
name|length
argument_list|()
operator|>
name|MAX_DOWNLOAD_CHUNK_SIZE
condition|)
block|{
name|offset
operator|=
name|firstChunk
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|handle
init|=
name|factory
operator|.
name|resultSets
operator|.
name|add
argument_list|(
operator|new
name|SerializedResult
argument_list|(
name|vtempFile
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"handle"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"supports-long-offset"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|chgrp
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|ownerGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
name|permission
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|chown
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|chown
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|ownerGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setPermissions
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
name|permission
operator|.
name|setMode
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setPermissions
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
block|{
try|try
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unrecognised mode syntax: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setPermissions
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|ownerGroup
parameter_list|,
specifier|final
name|String
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
try|try
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unrecognised mode syntax: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setPermissions
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|ownerGroup
parameter_list|,
specifier|final
name|int
name|permissions
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setPermissions
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|uri
argument_list|,
name|permission
lambda|->
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|permission
operator|instanceof
name|ACLPermission
condition|)
block|{
specifier|final
name|ACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|ACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ACEAider
name|ace
range|:
name|aces
control|)
block|{
name|aclPermission
operator|.
name|addACE
argument_list|(
name|ace
operator|.
name|getAccessType
argument_list|()
argument_list|,
name|ace
operator|.
name|getTarget
argument_list|()
argument_list|,
name|ace
operator|.
name|getWho
argument_list|()
argument_list|,
name|ace
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|String
name|passwd
parameter_list|,
specifier|final
name|String
name|passwdDigest
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
specifier|final
name|Boolean
name|enabled
parameter_list|,
specifier|final
name|Integer
name|umask
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|passwd
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|passwd
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|hasAccount
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Account '"
operator|+
name|name
operator|+
literal|"' exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Account '"
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|"' not allowed to create new account"
argument_list|)
throw|;
block|}
specifier|final
name|UserAider
name|u
init|=
operator|new
name|UserAider
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|u
operator|.
name|setEncodedPassword
argument_list|(
name|passwd
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPasswordDigest
argument_list|(
name|passwdDigest
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
operator|!
name|u
operator|.
name|hasGroup
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|u
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enabled
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|umask
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|setUserMask
argument_list|(
name|umask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|setMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|setMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|addAccount
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|passwd
parameter_list|,
specifier|final
name|String
name|passwdDigest
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|updateAccount
argument_list|(
name|name
argument_list|,
name|passwd
argument_list|,
name|passwdDigest
argument_list|,
name|groups
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|String
name|passwd
parameter_list|,
specifier|final
name|String
name|passwdDigest
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
specifier|final
name|Boolean
name|enabled
parameter_list|,
specifier|final
name|Integer
name|umask
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|passwd
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|passwd
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|UserAider
name|account
init|=
operator|new
name|UserAider
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|account
operator|.
name|setEncodedPassword
argument_list|(
name|passwd
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPasswordDigest
argument_list|(
name|passwdDigest
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|g
range|:
name|groups
control|)
block|{
name|account
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enabled
operator|!=
literal|null
condition|)
block|{
name|account
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|umask
operator|!=
literal|null
condition|)
block|{
name|account
operator|.
name|setUserMask
argument_list|(
name|umask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|account
operator|.
name|setMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|account
operator|.
name|setMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasGroup
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to create group"
argument_list|)
throw|;
block|}
specifier|final
name|Group
name|role
init|=
operator|new
name|GroupAider
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|role
operator|.
name|setMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|role
operator|.
name|setMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|addGroup
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|setUserPrimaryGroup
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasGroup
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Group '"
operator|+
name|groupName
operator|+
literal|"' does not exist!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Not allowed to modify user"
argument_list|)
throw|;
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Account
name|account
init|=
name|manager
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|manager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|account
operator|.
name|setPrimaryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|manager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|managers
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|hasGroup
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|GroupAider
name|group
init|=
operator|new
name|GroupAider
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|groupManager
range|:
name|managers
control|)
block|{
name|group
operator|.
name|addManager
argument_list|(
operator|new
name|UserAider
argument_list|(
name|groupManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|setMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|valueOfNamespace
argument_list|(
name|key
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|manager
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroupMembers
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|findAllGroupMembers
argument_list|(
name|groupName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAccountToGroup
parameter_list|(
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
name|account
operator|.
name|addGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroupManager
parameter_list|(
specifier|final
name|String
name|manager
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|manager
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|addManager
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeGroupManager
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|,
specifier|final
name|String
name|manager
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|group
operator|.
name|removeManager
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeGroupMember
parameter_list|(
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|String
name|member
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|member
argument_list|)
decl_stmt|;
name|account
operator|.
name|remGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Added by {Marco.Tampucci, Massimo.Martinelli} @isti.cnr.it      *      * modified by Chris Tomlinson based on above updateAccount - it appears      * that this code can rely on the SecurityManager to enforce policy about      * whether user is or is not permitted to update the Account with name.      *      * This is called via RemoteUserManagementService.addUserGroup(Account)      *      * @param name      * @return      * @throws org.exist.security.PermissionDeniedException      */
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|Account
name|u
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAccount
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|u
operator|=
operator|new
name|UserAider
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
name|manager
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
operator|!
name|u
operator|.
name|hasGroup
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|u
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|manager
operator|.
name|updateAccount
argument_list|(
name|u
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addUserGroup encountered error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Added by {Marco.Tampucci, Massimo.Martinelli} @isti.cnr.it      *      * modified by Chris Tomlinson based on above updateAccount - it appears      * that this code can rely on the SecurityManager to enforce policy about      * whether user is or is not permitted to update the Account with name.      *      * This is called via RemoteUserManagementService.removeGroup(Account,      * String)      *      * @param name      * @param groups      * @param rgroup      * @return      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
specifier|final
name|String
name|rgroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|SecurityManager
name|manager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|u
init|=
name|manager
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
name|g
operator|.
name|equals
argument_list|(
name|rgroup
argument_list|)
condition|)
block|{
name|u
operator|.
name|remGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|manager
operator|.
name|updateAccount
argument_list|(
name|u
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeGroup encountered error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|lockResource
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|lockResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|userName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|lockResource
parameter_list|(
specifier|final
name|XmldbURI
name|docURI
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeDocument
argument_list|(
name|docURI
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|//TODO : register the lock within the transaction ?
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|docURI
argument_list|)
throw|;
block|}
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|userName
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" is not allowed "
operator|+
literal|"to lock the resource for user "
operator|+
name|userName
argument_list|)
throw|;
block|}
specifier|final
name|Account
name|lockOwner
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|lockOwner
operator|.
name|equals
argument_list|(
name|user
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|document
operator|.
name|setUserLock
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|hasUserLock
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|hasUserLock
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|hasUserLock
parameter_list|(
specifier|final
name|XmldbURI
name|docURI
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|readDocument
argument_list|(
name|docURI
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to read resource"
argument_list|)
throw|;
block|}
specifier|final
name|Account
name|u
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
return|return
name|u
operator|==
literal|null
condition|?
literal|""
else|:
name|u
operator|.
name|getName
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unlockResource
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|unlockResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|unlockResource
parameter_list|(
specifier|final
name|XmldbURI
name|docURI
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeDocument
argument_list|(
name|docURI
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|docURI
argument_list|)
throw|;
block|}
specifier|final
name|SecurityManager
name|manager
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|lockOwner
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|lockOwner
operator|.
name|equals
argument_list|(
name|user
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|document
operator|.
name|setUserLock
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|summary
parameter_list|(
specifier|final
name|String
name|xpath
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|StringSource
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|>
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|this
operator|.
expr|<
name|QueryResult
operator|>
name|compileQuery
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
operator|.
name|apply
argument_list|(
name|compiledQuery
lambda|->
name|doQuery
argument_list|(
name|broker
argument_list|,
name|compiledQuery
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
if|if
condition|(
name|qr
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
throw|throw
name|qr
operator|.
name|getException
argument_list|()
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeCount
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DoctypeCount
argument_list|>
name|doctypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|qr
operator|.
name|result
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|item
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|nv
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|nv
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"queryTime"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
name|qr
operator|.
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeCount
name|nodeCounter
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|hitsByDoc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|count
argument_list|)
expr_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|hitsByDoc
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|documents
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|dtypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DoctypeCount
name|docTemp
range|:
name|doctypes
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|hitsByType
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hitsByType
operator|.
name|add
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByType
operator|.
name|add
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
expr_stmt|;
name|dtypes
operator|.
name|add
argument_list|(
name|hitsByType
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"doctypes"
argument_list|,
name|dtypes
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|summary
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
throws|,
name|XPathException
block|{
specifier|final
name|QueryResult
name|qr
init|=
name|factory
operator|.
name|resultSets
operator|.
name|getResult
argument_list|(
name|resultId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"result set unknown or timed out"
argument_list|)
throw|;
block|}
name|qr
operator|.
name|touch
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"queryTime"
argument_list|,
name|qr
operator|.
name|queryTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|qr
operator|.
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeCount
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DoctypeCount
argument_list|>
name|doctypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
name|String
name|docName
decl_stmt|;
name|DocumentType
name|doctype
decl_stmt|;
name|NodeCount
name|counter
decl_stmt|;
name|DoctypeCount
name|doctypeCounter
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|qr
operator|.
name|result
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|item
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|nv
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|nv
expr_stmt|;
name|docName
operator|=
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|doctype
operator|=
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDoctype
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|docName
argument_list|)
condition|)
block|{
name|counter
operator|=
name|map
operator|.
name|get
argument_list|(
name|docName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|counter
operator|=
operator|new
name|NodeCount
argument_list|(
name|p
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|docName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doctype
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|doctypes
operator|.
name|containsKey
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doctypeCounter
operator|=
operator|(
name|DoctypeCount
operator|)
name|doctypes
operator|.
name|get
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doctypeCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doctypeCounter
operator|=
operator|new
name|DoctypeCount
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
name|doctypes
operator|.
name|put
argument_list|(
name|doctype
operator|.
name|getName
argument_list|()
argument_list|,
name|doctypeCounter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|result
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
name|qr
operator|.
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeCount
name|nodeCounter
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|hitsByDoc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByDoc
operator|.
name|add
argument_list|(
name|nodeCounter
operator|.
name|count
argument_list|)
expr_stmt|;
name|documents
operator|.
name|add
argument_list|(
name|hitsByDoc
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"documents"
argument_list|,
name|documents
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|dtypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DoctypeCount
name|docTemp
range|:
name|doctypes
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|hitsByType
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hitsByType
operator|.
name|add
argument_list|(
name|docTemp
operator|.
name|doctype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hitsByType
operator|.
name|add
argument_list|(
name|docTemp
operator|.
name|count
argument_list|)
expr_stmt|;
name|dtypes
operator|.
name|add
argument_list|(
name|hitsByType
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"doctypes"
argument_list|,
name|dtypes
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|List
argument_list|>
name|getIndexedElements
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|,
specifier|final
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|getIndexedElements
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|List
argument_list|>
name|getIndexedElements
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|,
specifier|final
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|List
argument_list|>
operator|>
name|readCollection
argument_list|(
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Occurrences
name|occurrences
index|[]
init|=
name|broker
operator|.
name|getElementIndex
argument_list|()
operator|.
name|scanIndexedElements
argument_list|(
name|collection
argument_list|,
name|inclusive
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|occurrences
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Occurrences
name|occurrence
range|:
name|occurrences
control|)
block|{
specifier|final
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|occurrence
operator|.
name|getTerm
argument_list|()
decl_stmt|;
specifier|final
name|List
name|temp
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|add
argument_list|(
name|occurrence
operator|.
name|getOccurrences
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|synchronize
parameter_list|()
block|{
block|}
specifier|private
name|Properties
name|toProperties
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
class|class
name|CachedQuery
block|{
specifier|final
name|PathExpr
name|expression
decl_stmt|;
specifier|final
name|String
name|queryString
decl_stmt|;
specifier|final
name|long
name|timestamp
decl_stmt|;
specifier|public
name|CachedQuery
parameter_list|(
specifier|final
name|PathExpr
name|expr
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|DoctypeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|final
name|DocumentType
name|doctype
decl_stmt|;
specifier|public
name|DoctypeCount
parameter_list|(
specifier|final
name|DocumentType
name|doctype
parameter_list|)
block|{
name|this
operator|.
name|doctype
operator|=
name|doctype
expr_stmt|;
block|}
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
class|class
name|NodeCount
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
decl_stmt|;
specifier|public
name|NodeCount
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
comment|//	FIXME: Check it for possible security hole. Check name.
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDocumentChunk
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"unable to read file "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|<
name|start
operator|+
name|len
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"address too big "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|final
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|RandomAccessFile
name|os
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"r"
argument_list|)
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read from: "
operator|+
name|start
operator|+
literal|" to: "
operator|+
operator|(
name|start
operator|+
name|len
operator|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|os
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
specifier|public
name|boolean
name|moveOrCopyResource
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|,
specifier|final
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|,
name|move
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|moveOrCopyResource
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|XmldbURI
name|destUri
parameter_list|,
specifier|final
name|XmldbURI
name|newName
parameter_list|,
specifier|final
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<Boolean>withCollection(move ? Lock.WRITE_LOCK : Lock.READ_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|docUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|source
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|this
operator|.
block_content|<Boolean>writeDocument(broker1
argument_list|,
name|transaction1
argument_list|,
name|source
argument_list|,
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker2
parameter_list|,
name|transaction2
parameter_list|)
lambda|->
name|this
operator|.
block_content|<Boolean>writeCollection(broker2
argument_list|,
name|transaction2
argument_list|,
name|destUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destination
parameter_list|,
name|broker3
parameter_list|,
name|transaction3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|move
condition|)
block|{
name|broker3
operator|.
name|moveResource
argument_list|(
name|transaction3
argument_list|,
name|document
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker3
operator|.
name|copyResource
argument_list|(
name|transaction3
argument_list|,
name|document
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
block_content|)
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|boolean
name|moveOrCopyCollection
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|,
specifier|final
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|,
name|move
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|moveOrCopyCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|,
specifier|final
name|XmldbURI
name|destUri
parameter_list|,
specifier|final
name|XmldbURI
name|newName
parameter_list|,
specifier|final
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<Boolean>withCollection(move ? Lock.WRITE_LOCK : Lock.READ_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|source
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|this
operator|.
block_content|<Boolean>writeCollection(broker1
argument_list|,
name|transaction1
argument_list|,
name|destUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|destination
parameter_list|,
name|broker2
parameter_list|,
name|transaction2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|move
condition|)
block|{
name|broker2
operator|.
name|moveCollection
argument_list|(
name|transaction2
argument_list|,
name|source
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker2
operator|.
name|copyCollection
argument_list|(
name|transaction2
argument_list|,
name|source
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
block_content|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
specifier|public
name|boolean
name|reindexCollection
parameter_list|(
specifier|final
name|String
name|collectionName
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|reindexCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|reindexCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|broker
operator|.
name|reindexCollection
argument_list|(
name|collUri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"collection "
operator|+
name|collUri
operator|+
literal|" and sub-collections reindexed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|backup
parameter_list|(
specifier|final
name|String
name|userbackup
parameter_list|,
specifier|final
name|String
name|password
parameter_list|,
specifier|final
name|String
name|destcollection
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
specifier|final
name|Backup
name|backup
init|=
operator|new
name|Backup
argument_list|(
name|userbackup
argument_list|,
name|password
argument_list|,
name|destcollection
operator|+
literal|"-backup"
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|toString
argument_list|()
operator|+
name|collection
argument_list|)
argument_list|)
decl_stmt|;
name|backup
operator|.
name|backup
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
decl||
name|IOException
decl||
name|SAXException
decl||
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**      * Validate if specified document is Valid.      *      * @param documentPath Path to XML document in database      * @return TRUE if document is valid, FALSE if not or errors or.....      * @throws java.net.URISyntaxException      * @throws PermissionDeniedException User is not allowed to perform action.      * @throws org.exist.EXistException      */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|URISyntaxException
throws|,
name|EXistException
block|{
return|return
name|isValid
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isValid
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
block|{
comment|// Setup validator
specifier|final
name|Validator
name|validator
init|=
operator|new
name|Validator
argument_list|(
name|factory
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get inputstream
comment|// TODO DWES reconsider
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|EmbeddedInputStream
argument_list|(
operator|new
name|XmldbURL
argument_list|(
name|docUri
argument_list|)
argument_list|)
init|)
block|{
comment|// Perform validation
specifier|final
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
name|is
argument_list|)
decl_stmt|;
comment|// Return validation result
return|return
name|report
operator|.
name|isValid
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocType
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|URISyntaxException
block|{
return|return
name|getDocType
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDocType
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|readDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|document
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|setDocType
parameter_list|(
specifier|final
name|String
name|documentPath
parameter_list|,
specifier|final
name|String
name|doctypename
parameter_list|,
specifier|final
name|String
name|publicid
parameter_list|,
specifier|final
name|String
name|systemid
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|setDocType
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
argument_list|,
name|doctypename
argument_list|,
name|publicid
argument_list|,
name|systemid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|setDocType
parameter_list|(
specifier|final
name|XmldbURI
name|docUri
parameter_list|,
specifier|final
name|String
name|doctypename
parameter_list|,
specifier|final
name|String
name|publicid
parameter_list|,
specifier|final
name|String
name|systemid
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|writeDocument
argument_list|(
name|docUri
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|//TODO : register the lock within the transaction ?
if|if
condition|(
operator|!
name|document
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|docUri
argument_list|)
throw|;
block|}
name|DocumentType
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|doctypename
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|doctypename
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|publicid
argument_list|)
condition|?
literal|null
else|:
name|publicid
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|systemid
argument_list|)
condition|?
literal|null
else|:
name|systemid
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|setDocumentType
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|copyResource
parameter_list|(
specifier|final
name|String
name|docPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyResource
argument_list|(
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|copyCollection
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyCollection
argument_list|(
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|moveResource
parameter_list|(
specifier|final
name|String
name|docPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyResource
argument_list|(
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|moveCollection
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|,
specifier|final
name|String
name|destinationPath
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|moveOrCopyCollection
argument_list|(
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDocumentChunk
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"rpc"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|getDocument
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|copyCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|namedest
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
try|try
block|{
name|createCollection
argument_list|(
name|namedest
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|desc
init|=
name|getCollectionDesc
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|collections
init|=
operator|(
name|Object
index|[]
operator|)
name|desc
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|documents
init|=
operator|(
name|Object
index|[]
operator|)
name|desc
operator|.
name|get
argument_list|(
literal|"documents"
argument_list|)
decl_stmt|;
comment|//recurse the collection
for|for
control|(
specifier|final
name|Object
name|collection
range|:
name|collections
control|)
block|{
specifier|final
name|String
name|nome
init|=
name|collection
operator|.
name|toString
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
name|copyCollection
argument_list|(
name|name
operator|+
literal|"/"
operator|+
name|nome
argument_list|,
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
block|}
comment|//Copy i file
name|int
name|p
decl_stmt|,
name|dsize
init|=
name|documents
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dsize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hash
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|documents
index|[
name|i
index|]
decl_stmt|;
name|String
name|nome
init|=
operator|(
name|String
operator|)
name|hash
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|//TODO : use dedicated function in XmldbURI
if|if
condition|(
operator|(
name|p
operator|=
name|nome
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|nome
operator|=
name|nome
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|xml
init|=
name|getDocument
argument_list|(
name|name
operator|+
literal|"/"
operator|+
name|nome
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|xml
argument_list|,
name|namedest
operator|+
literal|"/"
operator|+
name|nome
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|xupdateResource
parameter_list|(
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|byte
index|[]
name|xupdate
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|SAXException
block|{
return|return
name|xupdateResource
argument_list|(
name|resource
argument_list|,
name|xupdate
argument_list|,
name|DEFAULT_ENCODING
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|querySummary
parameter_list|(
specifier|final
name|int
name|resultId
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
return|return
name|summary
argument_list|(
name|resultId
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|executeQuery
parameter_list|(
specifier|final
name|byte
index|[]
name|xpath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|executeQuery
argument_list|(
name|xpath
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|storeBinary
argument_list|(
name|data
argument_list|,
name|docName
argument_list|,
name|mimeType
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|storeBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|storeBinary
argument_list|(
name|data
argument_list|,
name|docName
argument_list|,
name|mimeType
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parseLocalExt
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|boolean
name|treatAsXML
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocalExt
argument_list|(
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
name|mimeType
argument_list|,
name|treatAsXML
condition|?
literal|1
else|:
literal|0
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|,
specifier|final
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
name|mimeType
argument_list|,
name|created
argument_list|,
name|modified
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parseLocalExt
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|boolean
name|treatAsXML
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocalExt
argument_list|(
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
name|mimeType
argument_list|,
name|treatAsXML
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parseLocal
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|boolean
name|replace
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|URISyntaxException
block|{
return|return
name|parseLocal
argument_list|(
name|localFile
argument_list|,
name|docName
argument_list|,
name|replace
condition|?
literal|1
else|:
literal|0
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|uploadCompressed
parameter_list|(
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
return|return
name|upload
argument_list|(
name|data
argument_list|,
name|length
argument_list|,
name|file
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|uploadCompressed
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
return|return
name|upload
argument_list|(
name|data
argument_list|,
name|length
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|upload
parameter_list|(
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|byte
index|[]
name|chunk
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
return|return
name|upload
argument_list|(
name|chunk
argument_list|,
name|length
argument_list|,
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|upload
parameter_list|(
specifier|final
name|byte
index|[]
name|chunk
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
return|return
name|upload
argument_list|(
name|chunk
argument_list|,
name|length
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parse
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|parse
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
name|docName
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parse
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|int
name|overwrite
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|parse
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
name|docName
argument_list|,
name|overwrite
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|parse
parameter_list|(
specifier|final
name|byte
index|[]
name|xmlData
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|parse
argument_list|(
name|xmlData
argument_list|,
name|docName
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|querySummary
parameter_list|(
specifier|final
name|String
name|xquery
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|summary
argument_list|(
name|xquery
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|query
parameter_list|(
specifier|final
name|byte
index|[]
name|xquery
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|String
name|result
init|=
name|query
argument_list|(
operator|new
name|String
argument_list|(
name|xquery
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
name|howmany
argument_list|,
name|start
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|(
name|parameters
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryP
parameter_list|(
specifier|final
name|byte
index|[]
name|xpath
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|String
name|s_id
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
return|return
name|queryP
argument_list|(
operator|new
name|String
argument_list|(
name|xpath
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
name|docName
argument_list|,
name|s_id
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryP
parameter_list|(
specifier|final
name|byte
index|[]
name|xpath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|queryP
argument_list|(
operator|new
name|String
argument_list|(
name|xpath
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
operator|(
name|XmldbURI
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|compile
parameter_list|(
specifier|final
name|byte
index|[]
name|xquery
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|compile
argument_list|(
operator|new
name|String
argument_list|(
name|xquery
argument_list|,
name|DEFAULT_ENCODING
argument_list|)
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|retrieve
parameter_list|(
specifier|final
name|String
name|doc
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|retrieve
argument_list|(
name|doc
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|prettyPrint
parameter_list|,
specifier|final
name|String
name|stylesheet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|prettyPrint
operator|>
literal|0
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
return|return
name|getDocumentAsString
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDocumentAsString
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|prettyPrint
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|getDocumentAsString
argument_list|(
name|name
argument_list|,
name|prettyPrint
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|int
name|prettyPrint
parameter_list|,
specifier|final
name|String
name|stylesheet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|prettyPrint
operator|>
literal|0
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|EXistOutputKeys
operator|.
name|STYLESHEET
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|getDocument
argument_list|(
name|name
argument_list|,
name|parameters
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDocument
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|encoding
parameter_list|,
specifier|final
name|int
name|prettyPrint
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|getDocument
argument_list|(
name|name
argument_list|,
name|encoding
argument_list|,
name|prettyPrint
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|setTriggersEnabled
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|boolean
name|triggersEnabled
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|collection
operator|.
name|setTriggersEnabled
argument_list|(
name|triggersEnabled
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|shutdown
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|shutdown
parameter_list|(
specifier|final
name|String
name|delay
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
return|return
name|shutdown
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|delay
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|shutdown
parameter_list|(
specifier|final
name|long
name|delay
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to shut down"
operator|+
literal|"the database"
argument_list|)
throw|;
block|}
specifier|final
name|SystemTaskJob
name|shutdownJob
init|=
operator|new
name|SystemTaskJobImpl
argument_list|(
literal|"rpc-api.shutdown"
argument_list|,
operator|new
name|ShutdownTask
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|createPeriodicJob
argument_list|(
literal|0
argument_list|,
name|shutdownJob
argument_list|,
name|delay
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|enterServiceMode
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|BrokerPool
name|brokerPool
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
name|brokerPool
operator|.
name|enterServiceMode
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|exitServiceMode
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|BrokerPool
name|brokerPool
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
name|brokerPool
operator|.
name|exitServiceMode
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|runCommand
parameter_list|(
specifier|final
name|XmldbURI
name|collectionURI
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|command
operator|.
name|Commands
operator|.
name|command
argument_list|(
name|collectionURI
argument_list|,
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|params
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Gets the encoding parameter or returns the default encoding      */
end_comment

begin_function
specifier|private
name|Charset
name|getEncoding
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|Charset
operator|.
name|forName
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_ENCODING
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Determines if compression is switched on in the parameters      */
end_comment

begin_function
specifier|private
name|boolean
name|useCompression
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|EXistOutputKeys
operator|.
name|COMPRESS_OUTPUT
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Takes a query from the pool or compiles a new one      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function3E
argument_list|<
name|XmlRpcCompiledXQueryFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|XPathException
argument_list|>
name|compileQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|compiledOp
lambda|->
block|{
specifier|final
name|XQueryPool
name|pool
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
try|try
block|{
name|compiled
operator|=
name|compile
argument_list|(
name|broker
argument_list|,
name|source
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|compiledOp
operator|.
name|apply
argument_list|(
name|compiled
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing read locked operations on a collection      *      * @param uri The full XmldbURI of the collection      * @return A function to receive an operation to perform on the locked database collection      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|readCollection
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|readOp
lambda|->
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>readCollection(broker
operator|,
name|transaction
operator|,
name|uri
block_content|)
block|.apply(readOp
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing read locked operations on a collection      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the collection      * @return A function to receive an operation to perform on the locked database collection      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|readCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withCollection
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing write locked operations on a collection      *      * @param uri The full XmldbURI of the collection      * @return A function to receive an operation to perform on the locked database collection      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|writeCollection
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|writeOp
lambda|->
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>writeCollection(broker
operator|,
name|transaction
operator|,
name|uri
block_content|)
block|.apply(writeOp
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing write locked operations on a collection      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the collection      * @return A function to receive an operation to perform on the locked database collection      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|writeCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withCollection
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing lockable operations on a collection      *      * @param lockMode      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the collection      * @return A function to receive an operation to perform on the locked database collection      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|withCollection
parameter_list|(
specifier|final
name|int
name|lockMode
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|readOp
lambda|->
block|{
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"collection "
operator|+
name|uri
operator|+
literal|" not found!"
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EXistException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|readOp
operator|.
name|apply
argument_list|(
name|collection
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|lockMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing read locked operations on a document      *      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|readDocument
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|readOp
lambda|->
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>readDocument(broker
operator|,
name|transaction
operator|,
name|uri
block_content|)
block|.apply(readOp
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing read locked operations on a document      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|readDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDocument
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing write locked operations on a document      *      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|writeDocument
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|writeOp
lambda|->
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|this
operator|.
block_content|<R>writeDocument(broker
operator|,
name|transaction
operator|,
name|uri
block_content|)
block|.apply(writeOp
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing write locked operations on a document      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|writeDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDocument
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order function for performing write locked operations on a document      *      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param collection The collection in which the document resides      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|writeDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDocument
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//TODO(AR) consider interleaving the collection and document access, i.e. we could be finished with (and release the lock on) the collection once we have access to a handle to the document
end_comment

begin_comment
comment|/**      * Higher-order function for performing lockable operations on a document      *      * @param lockMode      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|withDocument
parameter_list|(
specifier|final
name|int
name|lockMode
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withOp
lambda|->
name|this
operator|.
block_content|<R>readCollection(broker
operator|,
name|transaction
operator|,
name|uri
operator|.
name|removeLastSegment
argument_list|()
block_content|)
block|.apply((collection
operator|,
function|broker1
operator|,
function|transaction1
end_function

begin_expr_stmt
unit|)
operator|->
name|this
operator|.
expr|<
name|R
operator|>
name|withDocument
argument_list|(
name|lockMode
argument_list|,
name|broker1
argument_list|,
name|transaction1
argument_list|,
name|collection
argument_list|,
name|uri
argument_list|)
operator|.
name|apply
argument_list|(
name|withOp
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing lockable operations on a document      *      * @param lockMode      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param collection The collection in which the document resides      * @param uri The full XmldbURI of the document      * @return A function to receive an operation to perform on the locked database document      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|Function2E
argument_list|<
name|XmlRpcDocumentFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|>
name|withDocument
parameter_list|(
specifier|final
name|int
name|lockMode
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|readOp
lambda|->
block|{
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"document "
operator|+
name|uri
operator|+
literal|" not found!"
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EXistException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|readOp
operator|.
name|apply
argument_list|(
name|document
argument_list|,
name|broker
argument_list|,
name|transaction
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|releaseDocument
argument_list|(
name|document
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for performing an XMLDB operation on      * the database as the SYSTEM_USER.      *      * @param dbOperation The operation to perform on the database      * @param<R>         The return type of the operation      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|withDbAsSystem
parameter_list|(
specifier|final
name|XmlRpcFunction
argument_list|<
name|R
argument_list|>
name|dbOperation
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|,
name|dbOperation
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for performing an XMLDB operation on      * the database.      *      * Performs the operation as the current user of the RpcConnection      *      * @param dbOperation The operation to perform on the database      * @param<R>         The return type of the operation      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|withDb
parameter_list|(
specifier|final
name|XmlRpcFunction
argument_list|<
name|R
argument_list|>
name|dbOperation
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
return|return
name|withDb
argument_list|(
name|user
argument_list|,
name|dbOperation
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Higher-order-function for performing an XMLDB operation on      * the database      *      * @param user The user to execute the operation as      * @param dbOperation The operation to perform on the database      * @param<R>         The return type of the operation      * @throws org.exist.EXistException      * @throws org.exist.security.PermissionDeniedException      */
end_comment

begin_function
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|withDb
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|XmlRpcFunction
argument_list|<
name|R
argument_list|>
name|dbOperation
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|get
argument_list|(
name|user
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|factory
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|R
name|result
init|=
name|dbOperation
operator|.
name|apply
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
decl_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_function

unit|}
end_unit

