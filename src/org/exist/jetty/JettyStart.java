begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|xml
operator|.
name|XmlConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|SystemProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SingleInstanceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|XmlLibraryChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ShutdownListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_comment
comment|/**  * This class provides a main method to start Jetty with eXist. It registers shutdown  * handlers to cleanly shut down the database and the webserver.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|JettyStart
extends|extends
name|Observable
implements|implements
name|LifeCycle
operator|.
name|Listener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JETTY_HOME_PROP
init|=
literal|"jetty.home"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JETTY_BASE_PROP
init|=
literal|"jetty.base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JETTY_PROPETIES_FILENAME
init|=
literal|"jetty.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|JettyStart
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|JettyStart
name|start
init|=
operator|new
name|JettyStart
argument_list|()
decl_stmt|;
name|start
operator|.
name|run
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|SIGNAL_STARTING
init|=
literal|"jetty starting"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SIGNAL_STARTED
init|=
literal|"jetty started"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SIGNAL_ERROR
init|=
literal|"error"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|STATUS_STARTING
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|STATUS_STARTED
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|STATUS_STOPPING
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|STATUS_STOPPED
init|=
literal|3
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
name|int
name|status
init|=
name|STATUS_STOPPED
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
name|Optional
argument_list|<
name|Thread
argument_list|>
name|shutdownHook
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
name|int
name|primaryPort
init|=
literal|8080
decl_stmt|;
specifier|public
name|JettyStart
parameter_list|()
block|{
comment|// Additional checks XML libs @@@@
name|XmlLibraryChecker
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|jettyProperty
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_HOME_PROP
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|home
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jettyHome
init|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|home
argument_list|,
literal|"tools"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"jetty"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jettyPath
init|=
name|jettyHome
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JETTY_HOME_PROP
argument_list|,
name|jettyPath
argument_list|)
expr_stmt|;
return|return
name|jettyPath
return|;
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|standaloneFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jettyProperty
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|STANDALONE_ENABLED_JETTY_CONFIGS
argument_list|)
decl_stmt|;
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
name|standaloneFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|,
specifier|final
name|Observer
name|observer
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"No configuration file specified!"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Path
name|jettyConfig
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|jettyConfig
argument_list|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Configuration file: {} does not exist!"
argument_list|,
name|jettyConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configProperties
decl_stmt|;
try|try
block|{
name|configProperties
operator|=
name|getConfigProperties
argument_list|(
name|jettyConfig
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|observer
operator|!=
literal|null
condition|)
block|{
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Running with Java {} [{} ({}) in {}]"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|,
literal|"(unknown java.version)"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|,
literal|"(unknown java.vendor)"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.name"
argument_list|,
literal|"(unknown java.vm.name)"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|,
literal|"(unknown java.home)"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running as user '{}'"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|,
literal|"(unknown user.name)"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[eXist Home : {}]"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[eXist Version : {}]"
argument_list|,
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-version"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[eXist Build : {}]"
argument_list|,
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-build"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[Git commit : {}]"
argument_list|,
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"git-commit"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[Operating System : {} {} {}]"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[log4j.configurationFile : {}]"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[jetty Version: {}]"
argument_list|,
name|getJettyVersion
argument_list|(
name|configProperties
operator|.
name|get
argument_list|(
name|JETTY_BASE_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{} : {}]"
argument_list|,
name|JETTY_HOME_PROP
argument_list|,
name|configProperties
operator|.
name|get
argument_list|(
name|JETTY_HOME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{} : {}]"
argument_list|,
name|JETTY_BASE_PROP
argument_list|,
name|configProperties
operator|.
name|get
argument_list|(
name|JETTY_BASE_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[jetty configuration : {}]"
argument_list|,
name|jettyConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// configure the database instance
name|SingleInstanceConfiguration
name|config
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|config
operator|=
operator|new
name|SingleInstanceConfiguration
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|SingleInstanceConfiguration
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Configuring eXist from {}"
argument_list|,
name|config
operator|.
name|getConfigFilePath
argument_list|()
operator|.
name|map
argument_list|(
name|Path
operator|::
name|normalize
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toAbsolutePath
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"<UNKNOWN>"
argument_list|)
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|observer
argument_list|)
argument_list|)
expr_stmt|;
comment|// register the XMLDB driver
specifier|final
name|Database
name|xmldb
init|=
operator|new
name|DatabaseImpl
argument_list|()
decl_stmt|;
name|xmldb
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|xmldb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"configuration error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|// load jetty configurations
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|configFiles
init|=
name|getEnabledConfigFiles
argument_list|(
name|jettyConfig
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|configuredObjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|XmlConfiguration
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|confFile
range|:
name|configFiles
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[loading jetty configuration : {}]"
argument_list|,
name|confFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|confFile
argument_list|)
init|)
block|{
specifier|final
name|XmlConfiguration
name|configuration
init|=
operator|new
name|XmlConfiguration
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|getIdMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|last
operator|.
name|getIdMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|configProperties
argument_list|)
expr_stmt|;
name|configuredObjects
operator|.
name|add
argument_list|(
name|configuration
operator|.
name|configure
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|configuration
expr_stmt|;
block|}
block|}
comment|// start Jetty
specifier|final
name|Optional
argument_list|<
name|Server
argument_list|>
name|maybeServer
init|=
name|startJetty
argument_list|(
name|configuredObjects
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|maybeServer
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to find a server to start in jetty configurations"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|final
name|Server
name|server
init|=
name|maybeServer
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Connector
index|[]
name|connectors
init|=
name|server
operator|.
name|getConnectors
argument_list|()
decl_stmt|;
comment|// Construct description of all ports opened.
specifier|final
name|StringBuilder
name|allPorts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectors
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// plural s
name|allPorts
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|establishedPrimaryPort
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Connector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|instanceof
name|NetworkConnector
condition|)
block|{
specifier|final
name|NetworkConnector
name|networkConnector
init|=
operator|(
name|NetworkConnector
operator|)
name|connector
decl_stmt|;
if|if
condition|(
operator|!
name|establishedPrimaryPort
condition|)
block|{
name|this
operator|.
name|primaryPort
operator|=
name|networkConnector
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|establishedPrimaryPort
operator|=
literal|true
expr_stmt|;
block|}
name|allPorts
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|allPorts
operator|.
name|append
argument_list|(
name|networkConnector
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO: use pluggable interface
name|Class
argument_list|<
name|?
argument_list|>
name|openid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openid
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.security.realm.openid.AuthenticatorOpenIdServlet"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not find OpenID extension. OpenID will be disabled!"
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|oauth
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oauth
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.security.realm.oauth.OAuthServlet"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not find OAuthServlet extension. OAuth will be disabled!"
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|iprange
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iprange
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.security.realm.iprange.IPRangeServlet"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not find IPRangeServlet extension. IPRange will be disabled!"
argument_list|)
expr_stmt|;
block|}
comment|//*************************************************************
specifier|final
name|List
argument_list|<
name|URI
argument_list|>
name|serverUris
init|=
name|getSeverURIs
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverUris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|primaryPort
operator|=
name|serverUris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"-----------------------------------------------------"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Server has started, listening on:"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|URI
name|serverUri
range|:
name|serverUris
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"\t{}"
argument_list|,
name|serverUri
operator|.
name|resolve
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Configured contexts:"
argument_list|)
expr_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
name|getAllHandlers
argument_list|(
name|server
operator|.
name|getHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Handler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
specifier|final
name|ContextHandler
name|contextHandler
init|=
operator|(
name|ContextHandler
operator|)
name|handler
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"\t{}"
argument_list|,
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO(AR) openid and oauth servlet configs should be moved to the exist-webapp-context or into $EXIST_HOME/webapp/WEB-INF/web.xml
if|if
condition|(
name|openid
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|ServletContextHandler
condition|)
block|{
specifier|final
name|ServletContextHandler
name|contextHandler
init|=
operator|(
name|ServletContextHandler
operator|)
name|handler
decl_stmt|;
name|contextHandler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Servlet
argument_list|>
operator|)
name|openid
argument_list|)
argument_list|,
literal|"/openid"
argument_list|)
expr_stmt|;
name|String
name|suffix
decl_stmt|;
if|if
condition|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|"openid"
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|"/openid"
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"\t{}"
argument_list|,
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oauth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|ServletContextHandler
condition|)
block|{
specifier|final
name|ServletContextHandler
name|contextHandler
init|=
operator|(
name|ServletContextHandler
operator|)
name|handler
decl_stmt|;
name|contextHandler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Servlet
argument_list|>
operator|)
name|oauth
argument_list|)
argument_list|,
literal|"/oauth/*"
argument_list|)
expr_stmt|;
name|String
name|suffix
decl_stmt|;
if|if
condition|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|"oauth"
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|"/oauth"
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"\t{}"
argument_list|,
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iprange
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|ServletContextHandler
condition|)
block|{
specifier|final
name|ServletContextHandler
name|contextHandler
init|=
operator|(
name|ServletContextHandler
operator|)
name|handler
decl_stmt|;
name|contextHandler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Servlet
argument_list|>
operator|)
name|iprange
argument_list|)
argument_list|,
literal|"/iprange"
argument_list|)
expr_stmt|;
name|String
name|suffix
decl_stmt|;
if|if
condition|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|"iprange"
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|"/iprange"
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"'"
operator|+
name|contextHandler
operator|.
name|getContextPath
argument_list|()
operator|+
name|suffix
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//*************************************************************
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"-----------------------------------------------------"
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_STARTED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MultiException
name|e
parameter_list|)
block|{
comment|// Mute the BindExceptions
name|boolean
name|hasBindException
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Throwable
name|t
range|:
name|e
operator|.
name|getThrowables
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|java
operator|.
name|net
operator|.
name|BindException
condition|)
block|{
name|hasBindException
operator|=
literal|true
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"----------------------------------------------------------"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"ERROR: Could not bind to port because {}"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"----------------------------------------------------------"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If it is another error, print stacktrace
if|if
condition|(
operator|!
name|hasBindException
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_ERROR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SocketException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"----------------------------------------------------------"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"ERROR: Could not bind to port because {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"----------------------------------------------------------"
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_ERROR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getJettyVersion
parameter_list|(
specifier|final
name|String
name|jettyBase
parameter_list|)
block|{
specifier|final
name|Path
name|jettyLib
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jettyBase
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jettyLib
argument_list|)
condition|)
block|{
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|children
init|=
name|Files
operator|.
name|list
argument_list|(
name|jettyLib
argument_list|)
init|)
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|jettyServerJar
init|=
name|children
operator|.
name|filter
argument_list|(
name|child
lambda|->
block|{
specifier|final
name|String
name|fileName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|child
argument_list|)
decl_stmt|;
return|return
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"jetty-server"
argument_list|)
operator|&&
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|jettyServerJar
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|jettyServerJar
operator|.
name|get
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Manifest
name|manifest
init|=
name|jarFile
operator|.
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|manifest
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Attributes
name|mainAttributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|mainAttributes
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|jettyVersion
init|=
name|mainAttributes
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|jettyVersion
operator|!=
literal|null
condition|)
block|{
return|return
name|jettyVersion
return|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|"<UNKNOWN>"
return|;
block|}
specifier|private
name|LinkedHashSet
argument_list|<
name|Handler
argument_list|>
name|getAllHandlers
parameter_list|(
specifier|final
name|Handler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|HandlerWrapper
condition|)
block|{
specifier|final
name|HandlerWrapper
name|handlerWrapper
init|=
operator|(
name|HandlerWrapper
operator|)
name|handler
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handlerWrapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|handlerWrapper
operator|.
name|getHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|handlers
operator|.
name|addAll
argument_list|(
name|getAllHandlers
argument_list|(
name|handlerWrapper
operator|.
name|getHandler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|handlers
return|;
block|}
if|else if
condition|(
name|handler
operator|instanceof
name|HandlerContainer
condition|)
block|{
specifier|final
name|HandlerContainer
name|handlerContainer
init|=
operator|(
name|HandlerContainer
operator|)
name|handler
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Handler
name|childHandler
range|:
name|handlerContainer
operator|.
name|getChildHandlers
argument_list|()
control|)
block|{
name|handlers
operator|.
name|addAll
argument_list|(
name|getAllHandlers
argument_list|(
name|childHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|handlers
return|;
block|}
else|else
block|{
comment|//assuming just Handler
specifier|final
name|LinkedHashSet
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|handlers
return|;
block|}
block|}
comment|/**      * See {@link Server#getURI()}      */
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|getSeverURIs
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|)
block|{
specifier|final
name|ContextHandler
name|context
init|=
name|server
operator|.
name|getChildHandlerByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|server
operator|.
name|getConnectors
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|connector
lambda|->
name|connector
operator|instanceof
name|NetworkConnector
argument_list|)
operator|.
name|map
argument_list|(
name|connector
lambda|->
operator|(
name|NetworkConnector
operator|)
name|connector
argument_list|)
operator|.
name|map
argument_list|(
name|networkConnector
lambda|->
name|getURI
argument_list|(
name|networkConnector
argument_list|,
name|context
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * See {@link Server#getURI()}      */
specifier|private
name|URI
name|getURI
parameter_list|(
specifier|final
name|NetworkConnector
name|networkConnector
parameter_list|,
specifier|final
name|ContextHandler
name|context
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|protocol
init|=
name|networkConnector
operator|.
name|getDefaultConnectionFactory
argument_list|()
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
specifier|final
name|String
name|scheme
decl_stmt|;
if|if
condition|(
name|protocol
operator|.
name|startsWith
argument_list|(
literal|"SSL-"
argument_list|)
operator|||
name|protocol
operator|.
name|equals
argument_list|(
literal|"SSL"
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|"https"
expr_stmt|;
block|}
else|else
block|{
name|scheme
operator|=
literal|"http"
expr_stmt|;
block|}
name|String
name|host
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getVirtualHosts
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getVirtualHosts
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|host
operator|=
name|context
operator|.
name|getVirtualHosts
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
name|networkConnector
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|context
operator|==
literal|null
condition|?
literal|null
else|:
name|context
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|host
argument_list|,
name|networkConnector
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnknownHostException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Optional
argument_list|<
name|Server
argument_list|>
name|startJetty
parameter_list|(
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|configuredObjects
parameter_list|)
throws|throws
name|Exception
block|{
comment|// For all objects created by XmlConfigurations, start them if they are lifecycles.
name|Optional
argument_list|<
name|Server
argument_list|>
name|server
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|configuredObject
range|:
name|configuredObjects
control|)
block|{
if|if
condition|(
name|configuredObject
operator|instanceof
name|Server
condition|)
block|{
specifier|final
name|Server
name|_server
init|=
operator|(
name|Server
operator|)
name|configuredObject
decl_stmt|;
comment|//skip this server if we have already started it
if|if
condition|(
name|server
operator|.
name|map
argument_list|(
name|configuredServer
lambda|->
name|configuredServer
operator|==
name|_server
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//setup server shutdown
name|_server
operator|.
name|addLifeCycleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|registerShutdownListener
argument_list|(
operator|new
name|ShutdownListenerImpl
argument_list|(
name|_server
argument_list|)
argument_list|)
expr_stmt|;
comment|// register a shutdown hook for the server
specifier|final
name|BrokerPoolAndJettyShutdownHook
name|brokerPoolAndJettyShutdownHook
init|=
operator|new
name|BrokerPoolAndJettyShutdownHook
argument_list|(
name|_server
argument_list|)
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|brokerPoolAndJettyShutdownHook
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdownHook
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|brokerPoolAndJettyShutdownHook
argument_list|)
expr_stmt|;
name|server
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|_server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuredObject
operator|instanceof
name|LifeCycle
condition|)
block|{
specifier|final
name|LifeCycle
name|lc
init|=
operator|(
name|LifeCycle
operator|)
name|configuredObject
decl_stmt|;
if|if
condition|(
operator|!
name|lc
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[Starting jetty component : {}]"
argument_list|,
name|lc
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|lc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|server
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfigProperties
parameter_list|(
specifier|final
name|Path
name|configDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//load jetty.properties file
specifier|final
name|Path
name|propertiesFile
init|=
name|configDir
operator|.
name|resolve
argument_list|(
name|JETTY_PROPETIES_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|propertiesFile
argument_list|)
condition|)
block|{
specifier|final
name|Properties
name|jettyProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|propertiesFile
argument_list|)
init|)
block|{
name|jettyProperties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Loaded jetty.properties from: {}"
argument_list|,
name|propertiesFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|property
range|:
name|jettyProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|configProperties
operator|.
name|put
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set or override jetty.home and jetty.base with System properties
name|configProperties
operator|.
name|put
argument_list|(
name|JETTY_HOME_PROP
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_HOME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|put
argument_list|(
name|JETTY_BASE_PROP
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_BASE_PROP
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|JETTY_HOME_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configProperties
return|;
block|}
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getEnabledConfigFiles
parameter_list|(
specifier|final
name|Path
name|enabledJettyConfigs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|enabledJettyConfigs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find config enabler: "
operator|+
name|enabledJettyConfigs
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|configFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|enabledJettyConfigs
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|tl
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|tl
operator|.
name|isEmpty
argument_list|()
operator|||
name|tl
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
continue|continue;
block|}
else|else
block|{
specifier|final
name|Path
name|configFile
init|=
name|enabledJettyConfigs
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|tl
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find enabled config: "
operator|+
name|configFile
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|configFiles
return|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
name|shutdownHook
operator|.
name|ifPresent
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|::
name|removeShutdownHook
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|status
operator|!=
name|STATUS_STOPPED
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**      * This class gets called after the database received a shutdown request.      *      * @author wolf      */
specifier|private
specifier|static
class|class
name|ShutdownListenerImpl
implements|implements
name|ShutdownListener
block|{
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
name|ShutdownListenerImpl
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|int
name|remainingInstances
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Database shutdown: stopping server in 1sec ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|remainingInstances
operator|==
literal|0
condition|)
block|{
comment|// give the webserver a 1s chance to complete open requests
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|"jetty shutdown schedule"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// stop the server
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// timer.schedule
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BrokerPoolAndJettyShutdownHook
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
name|BrokerPoolAndJettyShutdownHook
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|)
block|{
name|super
argument_list|(
literal|"JettyStart-ShutdownHook"
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|isStopping
argument_list|()
operator|||
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|isStarted
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
name|STATUS_STARTED
operator|||
name|status
operator|==
name|STATUS_STARTING
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|==
name|STATUS_STOPPED
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
name|status
operator|!=
name|STATUS_STOPPED
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|lifeCycleStarting
parameter_list|(
specifier|final
name|LifeCycle
name|lifeCycle
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Jetty server starting..."
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_STARTING
argument_list|)
expr_stmt|;
name|status
operator|=
name|STATUS_STARTING
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|lifeCycleStarted
parameter_list|(
specifier|final
name|LifeCycle
name|lifeCycle
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Jetty server started."
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|SIGNAL_STARTED
argument_list|)
expr_stmt|;
name|status
operator|=
name|STATUS_STARTED
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleFailure
parameter_list|(
specifier|final
name|LifeCycle
name|lifeCycle
parameter_list|,
specifier|final
name|Throwable
name|throwable
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|lifeCycleStopping
parameter_list|(
specifier|final
name|LifeCycle
name|lifeCycle
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Jetty server stopping..."
argument_list|)
expr_stmt|;
name|status
operator|=
name|STATUS_STOPPING
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|lifeCycleStopped
parameter_list|(
specifier|final
name|LifeCycle
name|lifeCycle
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Jetty server stopped"
argument_list|)
expr_stmt|;
name|status
operator|=
name|STATUS_STOPPED
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|int
name|getPrimaryPort
parameter_list|()
block|{
return|return
name|primaryPort
return|;
block|}
block|}
end_class

end_unit

