begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|DefaultLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Java
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Commandline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A wrapper to call {@link Launcher} with correct VM settings.  * Spawns a new Java process using Ant. Mainly used when launching  * eXist by double clicking on start.jar.  *  * @author Tobi Krebs  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|LauncherWrapper
block|{
specifier|public
specifier|final
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LauncherWrapper
name|wrapper
init|=
operator|new
name|LauncherWrapper
argument_list|()
decl_stmt|;
name|wrapper
operator|.
name|startServer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startServer
parameter_list|()
block|{
name|Project
name|project
init|=
operator|new
name|Project
argument_list|()
decl_stmt|;
name|DefaultLogger
name|logger
init|=
operator|new
name|DefaultLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setOutputPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|logger
operator|.
name|setErrorPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|logger
operator|.
name|setMessageOutputLevel
argument_list|(
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|project
operator|.
name|addBuildListener
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|Java
name|java
init|=
operator|new
name|Java
argument_list|()
decl_stmt|;
name|java
operator|.
name|setFork
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|java
operator|.
name|setSpawn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|java
operator|.
name|setClassname
argument_list|(
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|java
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|java
operator|.
name|setClasspath
argument_list|(
name|Path
operator|.
name|systemClasspath
argument_list|)
expr_stmt|;
name|Commandline
operator|.
name|Argument
name|jvmArgs
init|=
name|java
operator|.
name|createJvmarg
argument_list|()
decl_stmt|;
name|String
name|javaOpts
init|=
name|getJavaOpts
argument_list|()
decl_stmt|;
name|jvmArgs
operator|.
name|setLine
argument_list|(
name|javaOpts
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Java opts: "
operator|+
name|javaOpts
argument_list|)
expr_stmt|;
name|Commandline
operator|.
name|Argument
name|args
init|=
name|java
operator|.
name|createArg
argument_list|()
decl_stmt|;
name|args
operator|.
name|setLine
argument_list|(
name|org
operator|.
name|exist
operator|.
name|launcher
operator|.
name|Launcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|java
operator|.
name|init
argument_list|()
expr_stmt|;
name|java
operator|.
name|executeJava
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getJavaOpts
parameter_list|()
block|{
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|StringBuilder
name|opts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|opts
operator|.
name|append
argument_list|(
name|getVMOpts
argument_list|()
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|"-Dexist.home="
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|"-Djava.endorsed.dirs="
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
name|home
operator|+
literal|"/lib/endorsed"
argument_list|)
expr_stmt|;
return|return
name|opts
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getVMOpts
parameter_list|()
block|{
name|StringBuilder
name|opts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|File
name|propFile
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
literal|"vm.properties"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|propFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|propFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|LauncherWrapper
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"vm.properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|matches
argument_list|(
literal|"^\\s*#.*"
argument_list|)
condition|)
name|opts
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"vm.properties not found"
argument_list|)
expr_stmt|;
block|}
return|return
name|opts
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

