begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rzo
operator|.
name|yajsw
operator|.
name|os
operator|.
name|OperatingSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rzo
operator|.
name|yajsw
operator|.
name|os
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rzo
operator|.
name|yajsw
operator|.
name|os
operator|.
name|ProcessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rzo
operator|.
name|yajsw
operator|.
name|os
operator|.
name|ms
operator|.
name|win
operator|.
name|w32
operator|.
name|WindowsXPProcess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A wrapper to start a Java process using start.jar with correct VM settings.  * Spawns a new Java VM using Ant. Mainly used when launching  * eXist by double clicking on start.jar.  *  * @author Tobi Krebs  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|LauncherWrapper
block|{
specifier|private
specifier|final
specifier|static
name|String
name|LAUNCHER
init|=
name|org
operator|.
name|exist
operator|.
name|launcher
operator|.
name|Launcher
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|LauncherWrapper
name|wrapper
init|=
operator|new
name|LauncherWrapper
argument_list|(
name|LAUNCHER
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|command
decl_stmt|;
specifier|public
name|LauncherWrapper
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|void
name|launch
parameter_list|()
block|{
name|launch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|launch
parameter_list|(
name|boolean
name|spawn
parameter_list|)
block|{
specifier|final
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|vmProperties
init|=
name|getVMProperties
argument_list|()
decl_stmt|;
specifier|final
name|OperatingSystem
name|os
init|=
name|OperatingSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|final
name|ProcessManager
name|pm
init|=
name|os
operator|.
name|processManagerInstance
argument_list|()
decl_stmt|;
specifier|final
name|Process
name|process
init|=
name|pm
operator|.
name|createProcess
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cmdLine
init|=
name|getJavaCmd
argument_list|()
operator|+
name|getJavaOpts
argument_list|(
name|home
argument_list|,
name|vmProperties
argument_list|)
operator|+
literal|" -jar start.jar "
operator|+
name|command
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"exec: "
operator|+
name|cmdLine
argument_list|)
expr_stmt|;
name|process
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|process
operator|.
name|setPipeStreams
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|process
operator|.
name|setCommand
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|instanceof
name|WindowsXPProcess
condition|)
block|{
specifier|final
name|boolean
name|result
init|=
operator|(
operator|(
name|WindowsXPProcess
operator|)
name|process
operator|)
operator|.
name|startElevated
argument_list|()
decl_stmt|;
comment|//            if (result) {
comment|//                process.waitFor();
comment|//                process.destroy();
comment|//            }
block|}
else|else
block|{
name|process
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getJavaCmd
parameter_list|()
block|{
specifier|final
name|File
name|javaHome
init|=
name|SystemUtils
operator|.
name|getJavaHome
argument_list|()
decl_stmt|;
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
name|Path
name|javaBin
init|=
name|Paths
operator|.
name|get
argument_list|(
name|javaHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"bin"
argument_list|,
literal|"javaw.exe"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isExecutable
argument_list|(
name|javaBin
argument_list|)
condition|)
block|{
return|return
literal|'"'
operator|+
name|javaBin
operator|.
name|toString
argument_list|()
operator|+
literal|'"'
return|;
block|}
name|javaBin
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|javaHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"bin"
argument_list|,
literal|"java.exe"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isExecutable
argument_list|(
name|javaBin
argument_list|)
condition|)
block|{
return|return
literal|'"'
operator|+
name|javaBin
operator|.
name|toString
argument_list|()
operator|+
literal|'"'
return|;
block|}
block|}
else|else
block|{
name|Path
name|javaBin
init|=
name|Paths
operator|.
name|get
argument_list|(
name|javaHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"bin"
argument_list|,
literal|"java"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isExecutable
argument_list|(
name|javaBin
argument_list|)
condition|)
block|{
return|return
name|javaBin
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|"java"
return|;
block|}
specifier|protected
name|String
name|getJavaOpts
parameter_list|(
name|String
name|home
parameter_list|,
name|Properties
name|vmProperties
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|opts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|opts
operator|.
name|append
argument_list|(
name|getVMOpts
argument_list|(
name|vmProperties
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|LAUNCHER
argument_list|)
operator|&&
literal|"mac os x"
operator|.
name|equals
argument_list|(
name|OS
argument_list|)
condition|)
block|{
name|opts
operator|.
name|append
argument_list|(
literal|" -Dapple.awt.UIElement=true"
argument_list|)
expr_stmt|;
block|}
name|opts
operator|.
name|append
argument_list|(
literal|" -Dexist.home="
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|home
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|" -Djava.endorsed.dirs="
argument_list|)
expr_stmt|;
name|opts
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|home
argument_list|)
operator|.
name|append
argument_list|(
literal|"/lib/endorsed"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
return|return
name|opts
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getVMOpts
parameter_list|(
name|Properties
name|vmProperties
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|opts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|vmProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"memory."
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"memory.max"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|opts
operator|.
name|append
argument_list|(
literal|" -Xmx"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"memory.min"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|opts
operator|.
name|append
argument_list|(
literal|" -Xms"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"vmoptions"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|opts
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"vmoptions."
argument_list|)
condition|)
block|{
specifier|final
name|String
name|os
init|=
name|key
operator|.
name|substring
argument_list|(
literal|"vmoptions."
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|contains
argument_list|(
name|os
argument_list|)
condition|)
block|{
name|opts
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|opts
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Properties
name|getVMProperties
parameter_list|()
block|{
specifier|final
name|Properties
name|vmProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|final
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|propFile
init|=
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
literal|"vm.properties"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|propFile
argument_list|)
condition|)
block|{
name|is
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|propFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|LauncherWrapper
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"vm.properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|vmProperties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"vm.properties not found"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|vmProperties
return|;
block|}
block|}
end_class

end_unit

