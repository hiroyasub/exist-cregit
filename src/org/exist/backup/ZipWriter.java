begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_comment
comment|/**  * Implementation of BackupWriter that writes to a zip file.  */
end_comment

begin_class
specifier|public
class|class
name|ZipWriter
implements|implements
name|BackupWriter
block|{
specifier|private
name|String
name|currentPath
decl_stmt|;
specifier|private
name|ZipOutputStream
name|out
decl_stmt|;
specifier|private
name|StringWriter
name|contents
decl_stmt|;
specifier|public
name|ZipWriter
parameter_list|(
name|String
name|zipFile
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|zipFile
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|currentPath
operator|=
name|collection
expr_stmt|;
block|}
specifier|public
name|Writer
name|newContents
parameter_list|()
throws|throws
name|IOException
block|{
name|contents
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
return|return
name|contents
return|;
block|}
specifier|public
name|void
name|closeContents
parameter_list|()
throws|throws
name|IOException
block|{
name|ZipEntry
name|entry
init|=
operator|new
name|ZipEntry
argument_list|(
name|mkRelative
argument_list|(
name|currentPath
argument_list|)
operator|+
literal|"/__contents__.xml"
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|newEntry
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipEntry
name|entry
init|=
operator|new
name|ZipEntry
argument_list|(
name|mkRelative
argument_list|(
name|currentPath
argument_list|)
operator|+
literal|'/'
operator|+
name|name
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
name|void
name|closeEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|newCollection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|currentPath
operator|=
name|currentPath
operator|+
literal|'/'
operator|+
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|closeCollection
parameter_list|()
block|{
name|int
name|p
init|=
name|currentPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>
literal|0
condition|)
name|currentPath
operator|=
name|currentPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|mkRelative
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
return|return
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

