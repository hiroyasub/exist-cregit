begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2005-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id: Restore.java 15109 2011-08-09 13:03:09Z deliriumsky $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|BackupDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|listener
operator|.
name|RestoreListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_TARGET
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ExistSAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistCollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|txn
operator|.
name|bridge
operator|.
name|InTxnLocalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_comment
comment|/**  * Handler for parsing __contents.xml__ files during  * restoration of a db backup  *  * @author  Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|RestoreHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RestoreHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SAXParserFactory
name|saxFactory
init|=
name|ExistSAXParserFactory
operator|.
name|getSAXParserFactory
argument_list|()
decl_stmt|;
static|static
block|{
name|saxFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saxFactory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|STRICT_URI_VERSION
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|RestoreListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbBaseUri
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbUsername
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbPassword
decl_stmt|;
specifier|private
specifier|final
name|BackupDescriptor
name|descriptor
decl_stmt|;
comment|//handler state
specifier|private
name|int
name|version
init|=
literal|0
decl_stmt|;
specifier|private
name|EXistCollection
name|currentCollection
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|DeferredPermission
argument_list|>
name|deferredPermissions
init|=
operator|new
name|ArrayDeque
argument_list|<
name|DeferredPermission
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RestoreHandler
parameter_list|(
specifier|final
name|RestoreListener
name|listener
parameter_list|,
specifier|final
name|String
name|dbBaseUri
parameter_list|,
specifier|final
name|String
name|dbUsername
parameter_list|,
specifier|final
name|String
name|dbPassword
parameter_list|,
specifier|final
name|BackupDescriptor
name|descriptor
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|dbBaseUri
operator|=
name|dbBaseUri
expr_stmt|;
name|this
operator|.
name|dbUsername
operator|=
name|dbUsername
expr_stmt|;
name|this
operator|.
name|dbPassword
operator|=
name|dbPassword
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|listener
operator|.
name|setCurrentBackup
argument_list|(
name|descriptor
operator|.
name|getSymbolicPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see  org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)      */
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|,
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//only process entries in the exist namespace
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
operator|!
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"resource"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
specifier|final
name|DeferredPermission
name|df
decl_stmt|;
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|df
operator|=
name|restoreCollectionEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|df
operator|=
name|restoreResourceEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
name|deferredPermissions
operator|.
name|push
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"subcollection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|restoreSubCollectionEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"deleted"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|restoreDeletedEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ace"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|addACEToDeferredPermissions
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
operator|&&
operator|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"resource"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
name|setDeferredPermissions
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getAttr
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|fallback
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|fallback
return|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|DeferredPermission
name|restoreCollectionEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Collection requires a name attribute"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|owner
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"owner"
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"group"
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mode
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"mode"
argument_list|,
literal|"644"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|created
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|strVersion
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strVersion
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse version number for Collection '"
operator|+
name|name
operator|+
literal|"', defaulting to version 0"
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
literal|0
expr_stmt|;
block|}
block|}
try|try
block|{
name|listener
operator|.
name|createCollection
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|collUri
decl_stmt|;
if|if
condition|(
name|version
operator|>=
name|STRICT_URI_VERSION
condition|)
block|{
name|collUri
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|collUri
operator|=
name|URIUtils
operator|.
name|encodeXmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Could not parse document name into a URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
name|currentCollection
operator|=
name|mkcol
argument_list|(
name|collUri
argument_list|,
name|getDateFromXSDateTimeStringForItem
argument_list|(
name|created
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setCurrentCollection
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Collection not found: "
operator|+
name|collUri
argument_list|)
throw|;
block|}
specifier|final
name|DeferredPermission
name|deferredPermission
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION
argument_list|)
condition|)
block|{
comment|//prevents restore of a backup from changing System collection ownership
name|deferredPermission
operator|=
operator|new
name|CollectionDeferredPermission
argument_list|(
name|listener
argument_list|,
name|currentCollection
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deferredPermission
operator|=
operator|new
name|CollectionDeferredPermission
argument_list|(
name|listener
argument_list|,
name|currentCollection
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|deferredPermission
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"An unrecoverable error occurred while restoring\ncollection '"
operator|+
name|name
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Aborting restore!"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|restoreSubCollectionEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
comment|//exclude /db/system collection and sub-collections, as these have already been restored
try|try
block|{
specifier|final
name|String
name|currentCollectionName
init|=
name|currentCollection
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|"/db"
operator|.
name|equals
argument_list|(
name|currentCollectionName
argument_list|)
operator|&&
literal|"system"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|||
operator|(
literal|"/db/system"
operator|.
name|equals
argument_list|(
name|currentCollectionName
argument_list|)
operator|&&
literal|"security"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|xe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|xe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xe
argument_list|)
throw|;
block|}
comment|//parse the sub-collection descriptor and restore
specifier|final
name|BackupDescriptor
name|subDescriptor
init|=
name|descriptor
operator|.
name|getChildBackupDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subDescriptor
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SAXParser
name|sax
decl_stmt|;
try|try
block|{
name|sax
operator|=
name|saxFactory
operator|.
name|newSAXParser
argument_list|()
expr_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|sax
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|EXistInputSource
name|is
init|=
name|subDescriptor
operator|.
name|getInputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
specifier|final
name|RestoreHandler
name|handler
init|=
operator|new
name|RestoreHandler
argument_list|(
name|listener
argument_list|,
name|dbBaseUri
argument_list|,
name|dbUsername
argument_list|,
name|dbPassword
argument_list|,
name|subDescriptor
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParserConfigurationException
name|pce
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"Could not initalise SAXParser for processing sub-collection: "
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"Could not read sub-collection for processing: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|se
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"SAX exception while reading sub-collection "
operator|+
name|subDescriptor
operator|.
name|getSymbolicPath
argument_list|()
operator|+
literal|" for processing: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"Collection "
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|" does not exist or is not readable."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DeferredPermission
name|restoreResourceEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|skip
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"skip"
argument_list|)
decl_stmt|;
comment|//dont process entries which should be skipped
if|if
condition|(
name|skip
operator|!=
literal|null
operator|&&
operator|!
literal|"no"
operator|.
name|equals
argument_list|(
name|skip
argument_list|)
condition|)
block|{
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Resource requires a name attribute"
argument_list|)
throw|;
block|}
comment|//triggers should NOT be disabled, because it do used by the system tasks (like security manager)
comment|//UNDERSTAND: split triggers: user& system
comment|//current.setTriggersEnabled(false);
comment|/*         try {             if(currentCollection.getName().equals("/db/system")&& name.equals("users.xml")&& currentCollection.getChildCollection("security") != null) {                 listener.warn("Skipped resource '" + name + "'\nfrom file '" + descriptor.getSymbolicPath(name, false) + "'.");                 return new SkippedEntryDeferredPermission();             }         } catch(XMLDBException xe) {             LOG.error(xe.getMessage(), xe);             listener.error(xe.getMessage());             return new SkippedEntryDeferredPermission();         }*/
specifier|final
name|String
name|type
decl_stmt|;
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|"XMLResource"
expr_stmt|;
block|}
specifier|final
name|String
name|owner
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"owner"
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"group"
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|perms
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"mode"
argument_list|,
literal|"644"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|filename
decl_stmt|;
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|name
expr_stmt|;
block|}
specifier|final
name|String
name|mimetype
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"mimetype"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|created
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|modified
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"modified"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|publicid
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"publicid"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|systemid
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"systemid"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|namedoctype
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"namedoctype"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|docUri
decl_stmt|;
if|if
condition|(
name|version
operator|>=
name|STRICT_URI_VERSION
condition|)
block|{
name|docUri
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|docUri
operator|=
name|URIUtils
operator|.
name|encodeXmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse document name into a URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|listener
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
specifier|final
name|EXistInputSource
name|is
init|=
name|descriptor
operator|.
name|getInputSource
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Failed to restore resource '"
operator|+
name|name
operator|+
literal|"'\nfrom file '"
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|"'.\nReason: Unable to obtain its EXistInputSource"
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
try|try
block|{
name|listener
operator|.
name|setCurrentResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCollection
operator|instanceof
name|Observable
condition|)
block|{
name|listener
operator|.
name|observe
argument_list|(
operator|(
name|Observable
operator|)
name|currentCollection
argument_list|)
expr_stmt|;
block|}
name|Resource
name|res
init|=
name|currentCollection
operator|.
name|createResource
argument_list|(
name|docUri
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimetype
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimetype
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|.
name|getByteStreamLength
argument_list|()
operator|>
literal|0
operator|||
literal|"BinaryResource"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|res
operator|.
name|setContent
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
literal|null
expr_stmt|;
block|}
comment|// Restoring name
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to restore resource '"
operator|+
name|name
operator|+
literal|"'\nfrom file '"
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|"'. The resource is empty."
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
else|else
block|{
name|Date
name|date_created
init|=
literal|null
decl_stmt|;
name|Date
name|date_modified
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|date_created
operator|=
operator|(
operator|new
name|DateTimeValue
argument_list|(
name|created
argument_list|)
operator|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Illegal creation date. Ignoring date..."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|date_modified
operator|=
operator|(
operator|new
name|DateTimeValue
argument_list|(
name|modified
argument_list|)
operator|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Illegal modification date. Ignoring date..."
argument_list|)
expr_stmt|;
block|}
block|}
name|currentCollection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|,
name|date_created
argument_list|,
name|date_modified
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|publicid
operator|!=
literal|null
operator|)
operator|||
operator|(
name|systemid
operator|!=
literal|null
operator|)
condition|)
block|{
specifier|final
name|DocumentType
name|doctype
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|namedoctype
argument_list|,
name|publicid
argument_list|,
name|systemid
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setDocType
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|DeferredPermission
name|deferredPermission
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION
argument_list|)
condition|)
block|{
comment|//prevents restore of a backup from changing system collection resource ownership
name|deferredPermission
operator|=
operator|new
name|ResourceDeferredPermission
argument_list|(
name|listener
argument_list|,
name|res
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|perms
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deferredPermission
operator|=
operator|new
name|ResourceDeferredPermission
argument_list|(
name|listener
argument_list|,
name|res
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|perms
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|restored
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|deferredPermission
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to restore resource '"
operator|+
name|name
operator|+
literal|"'\nfrom file '"
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|"'.\nReason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreDeletedEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|Collection
name|child
init|=
name|currentCollection
operator|.
name|getChildCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|currentCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|CollectionManagementService
name|cmgt
init|=
operator|(
name|CollectionManagementService
operator|)
name|currentCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cmgt
operator|.
name|removeCollection
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|currentCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to remove deleted collection: "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"resource"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|Resource
name|resource
init|=
name|currentCollection
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|currentCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|currentCollection
operator|.
name|removeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|currentCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to remove deleted resource: "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addACEToDeferredPermissions
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ACE_TARGET
name|target
init|=
name|ACE_TARGET
operator|.
name|valueOf
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|who
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"who"
argument_list|)
decl_stmt|;
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|ACE_ACCESS_TYPE
operator|.
name|valueOf
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"access_type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"mode"
argument_list|)
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|deferredPermissions
operator|.
name|peek
argument_list|()
operator|.
name|addACE
argument_list|(
name|index
argument_list|,
name|target
argument_list|,
name|who
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDeferredPermissions
parameter_list|()
block|{
specifier|final
name|DeferredPermission
name|deferredPermission
init|=
name|deferredPermissions
operator|.
name|pop
argument_list|()
decl_stmt|;
name|deferredPermission
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Date
name|getDateFromXSDateTimeStringForItem
parameter_list|(
specifier|final
name|String
name|strXSDateTime
parameter_list|,
specifier|final
name|String
name|itemName
parameter_list|)
block|{
name|Date
name|date_created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|strXSDateTime
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|date_created
operator|=
operator|new
name|DateTimeValue
argument_list|(
name|strXSDateTime
argument_list|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e2
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|date_created
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse created date '"
operator|+
name|strXSDateTime
operator|+
literal|"' from backup for: '"
operator|+
name|itemName
operator|+
literal|"', using current time!"
decl_stmt|;
name|listener
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|date_created
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
return|return
name|date_created
return|;
block|}
specifier|private
name|EXistCollection
name|mkcol
parameter_list|(
specifier|final
name|XmldbURI
name|collPath
parameter_list|,
specifier|final
name|Date
name|created
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
specifier|final
name|XmldbURI
index|[]
name|allSegments
init|=
name|collPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|allSegments
argument_list|,
literal|1
argument_list|,
name|allSegments
operator|.
name|length
argument_list|)
decl_stmt|;
comment|//drop the first 'db' segment
specifier|final
name|XmldbURI
name|dbUri
decl_stmt|;
if|if
condition|(
operator|!
name|dbBaseUri
operator|.
name|endsWith
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
condition|)
block|{
name|dbUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|dbBaseUri
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|dbBaseUri
argument_list|)
expr_stmt|;
block|}
name|EXistCollection
name|current
init|=
operator|(
name|EXistCollection
operator|)
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|dbUri
operator|.
name|toString
argument_list|()
argument_list|,
name|dbUsername
argument_list|,
name|dbPassword
argument_list|)
decl_stmt|;
name|XmldbURI
name|p
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
decl_stmt|;
for|for
control|(
specifier|final
name|XmldbURI
name|segment
range|:
name|segments
control|)
block|{
name|p
operator|=
name|p
operator|.
name|append
argument_list|(
name|segment
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|xmldbURI
init|=
name|dbUri
operator|.
name|resolveCollectionPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|EXistCollection
name|c
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|localConnection
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|xmldbURI
operator|.
name|getApiName
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|XmldbURI
operator|.
name|API_LOCAL
operator|::
name|equals
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|localConnection
condition|)
block|{
comment|//short-cut to an XMLDB Collection that can be used with the current transaction
try|try
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|securityManager
operator|.
name|authenticate
argument_list|(
name|dbUsername
argument_list|,
name|dbPassword
argument_list|)
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|new
name|InTxnLocalCollection
argument_list|(
name|subject
argument_list|,
name|pool
argument_list|,
literal|null
argument_list|,
name|xmldbURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|errorCode
operator|==
name|ErrorCodes
operator|.
name|NO_SUCH_COLLECTION
condition|)
block|{
name|c
operator|=
literal|null
expr_stmt|;
comment|//no such collection, will be created below
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|PERMISSION_DENIED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|c
operator|=
operator|(
name|EXistCollection
operator|)
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|xmldbURI
operator|.
name|toString
argument_list|()
argument_list|,
name|dbUsername
argument_list|,
name|dbPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|current
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|c
operator|=
operator|(
name|EXistCollection
operator|)
name|mgtService
operator|.
name|createCollection
argument_list|(
name|segment
argument_list|,
name|created
argument_list|)
expr_stmt|;
name|current
operator|.
name|setTriggersEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|c
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
block|}
end_class

end_unit

