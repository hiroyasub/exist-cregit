begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_class
specifier|public
class|class
name|BackupDirectory
block|{
specifier|public
specifier|final
specifier|static
name|String
name|FILE_REGEX
init|=
literal|"(full|inc)(\\d{8}-\\d{4}).*"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|DateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd-HHmm"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|dir
decl_stmt|;
specifier|private
name|Matcher
name|matcher
decl_stmt|;
specifier|public
name|BackupDirectory
parameter_list|(
name|String
name|dirPath
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|File
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BackupDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|directory
expr_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|FILE_REGEX
argument_list|)
decl_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|createBackup
parameter_list|(
name|boolean
name|incremental
parameter_list|,
name|boolean
name|zip
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|File
name|file
decl_stmt|;
do|do
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|incremental
condition|?
literal|"inc"
else|:
literal|"full"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|++
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
operator|.
name|append
argument_list|(
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|zip
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|".zip"
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
do|;
return|return
name|file
return|;
block|}
specifier|public
name|BackupFile
name|lastBackupFile
parameter_list|()
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|isFile
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|BackupFile
name|newest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|dateTime
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BackupFile
name|backup
init|=
operator|new
name|BackupFile
argument_list|(
name|files
index|[
name|i
index|]
argument_list|,
name|dateTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|newest
operator|==
literal|null
operator|||
name|backup
operator|.
name|after
argument_list|(
name|newest
argument_list|)
condition|)
block|{
name|newest
operator|=
name|backup
expr_stmt|;
block|}
block|}
block|}
return|return
name|newest
return|;
block|}
block|}
end_class

end_unit

