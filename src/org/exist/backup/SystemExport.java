begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|NamespaceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|Agent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|AgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|AccountImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ProcessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|CollectionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_comment
comment|/**  * Embedded database export tool class. Tries to export as much data as possible, even if parts of the collection hierarchy are corrupted or documents  * are no longer readable. Features:  *  *<ul>  *<li>Descendant collections will be exported properly even if their ancestor collection is corrupted.</li>  *<li>Documents which are intact but belong to a destroyed collection will be stored into a special collection /db/__lost_and_found__.</li>  *<li>Damaged documents are detected by ConsistencyCheck and are removed from the backup.</li>  *<li>The format of the exported data is compatible with backups generated via the standard backup tool (Java admin client).</li>  *</ul>  *  *<p>The class should be used in combination with {@link ConsistencyCheck}. The error lists returned by ConsistencyCheck can be passed to {@link  * #export(org.exist.collections.Collection, BackupWriter, java.util.Date, BackupDescriptor, java.util.List, org.exist.dom.MutableDocumentSet)}.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SystemExport
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SystemExport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd-HHmm"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEMP_COLLECTION
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|CONTENTS_URI
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
literal|"__contents__.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|LOST_URI
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
literal|"__lost_and_found__"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|currVersion
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|collectionCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Properties
name|defaultOutputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|Properties
name|contentsOutputProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|StatusCallback
name|callback
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|directAccess
init|=
literal|false
decl_stmt|;
specifier|private
name|ProcessMonitor
operator|.
name|Monitor
name|monitor
init|=
literal|null
decl_stmt|;
block|{
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
block|{
name|contentsOutputProps
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SystemExport
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|StatusCallback
name|callback
parameter_list|,
name|ProcessMonitor
operator|.
name|Monitor
name|monitor
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|directAccess
operator|=
name|direct
expr_stmt|;
block|}
specifier|public
name|File
name|export
parameter_list|(
name|String
name|targetDir
parameter_list|,
name|boolean
name|incremental
parameter_list|,
name|boolean
name|zip
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
return|return
operator|(
name|export
argument_list|(
name|targetDir
argument_list|,
name|incremental
argument_list|,
operator|-
literal|1
argument_list|,
name|zip
argument_list|,
name|errorList
argument_list|)
operator|)
return|;
block|}
comment|/**      * Export the contents of the database, trying to preserve as much data as possible. To be effective, this method should be used in combination      * with class {@link ConsistencyCheck}.      *      * @param   targetDir    the output directory or file to which data will be written. Output will be written to a zip file if target ends with      *                       .zip.      * @param   incremental  DOCUMENT ME!      * @param   maxInc       DOCUMENT ME!      * @param   zip          DOCUMENT ME!      * @param   errorList    a list of {@link ErrorReport} objects as returned by methods in {@link ConsistencyCheck}.      *      * @return  DOCUMENT ME!      */
specifier|public
name|File
name|export
parameter_list|(
name|String
name|targetDir
parameter_list|,
name|boolean
name|incremental
parameter_list|,
name|int
name|maxInc
parameter_list|,
name|boolean
name|zip
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
name|File
name|backupFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|BackupDirectory
name|directory
init|=
operator|new
name|BackupDirectory
argument_list|(
name|targetDir
argument_list|)
decl_stmt|;
name|BackupDescriptor
name|prevBackup
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|incremental
condition|)
block|{
name|prevBackup
operator|=
name|directory
operator|.
name|lastBackupFile
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating incremental backup. Prev backup: "
operator|+
operator|(
operator|(
name|prevBackup
operator|==
literal|null
operator|)
condition|?
literal|"none"
else|:
name|prevBackup
operator|.
name|getSymbolicPath
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|int
name|seqNr
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|incremental
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|BackupDescriptor
operator|.
name|PREVIOUS_PROP_NAME
argument_list|,
operator|(
name|prevBackup
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|prevBackup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevBackup
operator|!=
literal|null
condition|)
block|{
name|Properties
name|prevProp
init|=
name|prevBackup
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevProp
operator|!=
literal|null
condition|)
block|{
name|String
name|seqNrStr
init|=
name|prevProp
operator|.
name|getProperty
argument_list|(
name|BackupDescriptor
operator|.
name|NUMBER_IN_SEQUENCE_PROP_NAME
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
try|try
block|{
name|seqNr
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|seqNrStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|seqNr
operator|==
name|maxInc
condition|)
block|{
name|seqNr
operator|=
literal|1
expr_stmt|;
name|incremental
operator|=
literal|false
expr_stmt|;
name|prevBackup
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
operator|++
name|seqNr
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad sequence number in backup descriptor: "
operator|+
name|prevBackup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|properties
operator|.
name|setProperty
argument_list|(
name|BackupDescriptor
operator|.
name|NUMBER_IN_SEQUENCE_PROP_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|seqNr
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|BackupDescriptor
operator|.
name|INCREMENTAL_PROP_NAME
argument_list|,
name|incremental
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
try|try
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|BackupDescriptor
operator|.
name|DATE_PROP_NAME
argument_list|,
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
block|}
name|backupFile
operator|=
name|directory
operator|.
name|createBackup
argument_list|(
name|incremental
operator|&&
operator|(
name|prevBackup
operator|!=
literal|null
operator|)
argument_list|,
name|zip
argument_list|)
expr_stmt|;
name|BackupWriter
name|output
decl_stmt|;
if|if
condition|(
name|zip
condition|)
block|{
name|output
operator|=
operator|new
name|ZipWriter
argument_list|(
name|backupFile
argument_list|,
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
operator|new
name|FileSystemWriter
argument_list|(
operator|new
name|File
argument_list|(
name|backupFile
argument_list|,
name|DBBroker
operator|.
name|ROOT_COLLECTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|(
name|prevBackup
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|prevBackup
operator|.
name|getDate
argument_list|()
decl_stmt|;
name|CollectionCallback
name|cb
init|=
operator|new
name|CollectionCallback
argument_list|(
name|output
argument_list|,
name|date
argument_list|,
name|prevBackup
argument_list|,
name|errorList
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|getCollectionsFailsafe
argument_list|(
name|cb
argument_list|)
expr_stmt|;
name|exportOrphans
argument_list|(
name|output
argument_list|,
name|cb
operator|.
name|getDocs
argument_list|()
argument_list|,
name|errorList
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
name|backupFile
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"A write error occurred while exporting data: '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'. Aborting export."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|backupFile
operator|!=
literal|null
condition|)
block|{
name|backupFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
specifier|private
name|void
name|reportError
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|error
argument_list|(
literal|"EXPORT: "
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isDamaged
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
for|for
control|(
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
name|report
range|:
name|errorList
control|)
block|{
if|if
condition|(
operator|(
name|report
operator|.
name|getErrcode
argument_list|()
operator|==
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
operator|.
name|RESOURCE_ACCESS_FAILED
operator|)
operator|&&
operator|(
operator|(
operator|(
name|ErrorReport
operator|.
name|ResourceError
operator|)
name|report
operator|)
operator|.
name|getDocumentId
argument_list|()
operator|==
name|doc
operator|.
name|getDocId
argument_list|()
operator|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
name|boolean
name|isDamaged
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
for|for
control|(
name|ErrorReport
name|report
range|:
name|errorList
control|)
block|{
if|if
condition|(
operator|(
name|report
operator|.
name|getErrcode
argument_list|()
operator|==
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
operator|.
name|CHILD_COLLECTION
operator|)
operator|&&
operator|(
operator|(
operator|(
name|ErrorReport
operator|.
name|CollectionError
operator|)
name|report
operator|)
operator|.
name|getCollectionId
argument_list|()
operator|==
name|collection
operator|.
name|getId
argument_list|()
operator|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isDamagedChild
parameter_list|(
name|XmldbURI
name|uri
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
for|for
control|(
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
name|report
range|:
name|errorList
control|)
block|{
if|if
condition|(
operator|(
name|report
operator|.
name|getErrcode
argument_list|()
operator|==
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
operator|.
name|CHILD_COLLECTION
operator|)
operator|&&
operator|(
operator|(
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
operator|.
name|CollectionError
operator|)
name|report
operator|)
operator|.
name|getCollectionURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|/**      * Scan all document records in collections.dbx and try to find orphaned documents whose parent collection got destroyed or is damaged.      *      * @param  output     the backup writer      * @param  docs       a document set containing all the documents which were exported regularily. the method will ignore those.      * @param  errorList  a list of {@link org.exist.backup.ErrorReport} objects as returned by methods in {@link ConsistencyCheck}      */
specifier|private
name|void
name|exportOrphans
parameter_list|(
name|BackupWriter
name|output
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|)
block|{
name|output
operator|.
name|newCollection
argument_list|(
literal|"/db/__lost_and_found__"
argument_list|)
expr_stmt|;
try|try
block|{
name|Writer
name|contents
init|=
name|output
operator|.
name|newContents
argument_list|()
decl_stmt|;
comment|// serializer writes to __contents__.xml
name|SAXSerializer
name|serializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|contents
argument_list|,
name|contentsOutputProps
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"/db/__lost_and_found__"
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"version"
argument_list|,
literal|"version"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|currVersion
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mode"
argument_list|,
literal|"mode"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"0771"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|DocumentCallback
name|docCb
init|=
operator|new
name|DocumentCallback
argument_list|(
name|output
argument_list|,
name|serializer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|docs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|getResourcesFailsafe
argument_list|(
name|docCb
argument_list|,
name|directAccess
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endPrefixMapping
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|output
operator|.
name|closeContents
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|output
operator|.
name|closeCollection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Export a collection. Write out the collection metadata and save the resources stored in the collection.      *      * @param   current     the collection      * @param   output      the output writer      * @param   date      * @param   prevBackup  DOCUMENT ME!      * @param   errorList   a list of {@link org.exist.backup.ErrorReport} objects as returned by methods in {@link org.exist.backup.ConsistencyCheck}      * @param   docs        a document set to keep track of all written documents.      *      * @throws  IOException      * @throws  SAXException      * @throws  TerminatedException  DOCUMENT ME!      */
specifier|private
name|void
name|export
parameter_list|(
name|Collection
name|current
parameter_list|,
name|BackupWriter
name|output
parameter_list|,
name|Date
name|date
parameter_list|,
name|BackupDescriptor
name|prevBackup
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|startCollection
argument_list|(
name|current
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|monitor
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|monitor
operator|.
name|proceed
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|TerminatedException
argument_list|(
literal|"system export terminated by db"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|!
name|current
operator|.
name|getURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
condition|)
block|{
name|output
operator|.
name|newCollection
argument_list|(
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|current
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Writer
name|contents
init|=
name|output
operator|.
name|newContents
argument_list|()
decl_stmt|;
comment|// serializer writes to __contents__.xml
name|SAXSerializer
name|serializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|contents
argument_list|,
name|contentsOutputProps
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|XmldbURI
name|uri
init|=
name|current
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"version"
argument_list|,
literal|"version"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|currVersion
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mode"
argument_list|,
literal|"mode"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|current
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|int
name|docsCount
init|=
name|current
operator|.
name|getDocumentCountNoLock
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|current
operator|.
name|iteratorNoLock
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDamaged
argument_list|(
name|doc
argument_list|,
name|errorList
argument_list|)
condition|)
block|{
name|reportError
argument_list|(
literal|"Skipping damaged document "
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|CONTENTS_URI
argument_list|)
operator|||
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|LOST_URI
argument_list|)
condition|)
block|{
continue|continue;
comment|// skip __contents__.xml documents
block|}
name|exportDocument
argument_list|(
name|output
argument_list|,
name|date
argument_list|,
name|prevBackup
argument_list|,
name|serializer
argument_list|,
name|docsCount
argument_list|,
name|count
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|current
operator|.
name|collectionIteratorNoLock
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmldbURI
name|childUri
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childUri
operator|.
name|equalsInternal
argument_list|(
name|TEMP_COLLECTION
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isDamagedChild
argument_list|(
name|childUri
argument_list|,
name|errorList
argument_list|)
condition|)
block|{
name|reportError
argument_list|(
literal|"Skipping damaged child collection "
operator|+
name|childUri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|attr
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|childUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"filename"
argument_list|,
literal|"filename"
argument_list|,
literal|"CDATA"
argument_list|,
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|childUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"subcollection"
argument_list|,
literal|"subcollection"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"subcollection"
argument_list|,
literal|"subcollection"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevBackup
operator|!=
literal|null
condition|)
block|{
comment|// Check which collections and resources have been deleted since
comment|// the
comment|// last backup
name|CheckDeletedHandler
name|check
init|=
operator|new
name|CheckDeletedHandler
argument_list|(
name|current
argument_list|,
name|serializer
argument_list|)
decl_stmt|;
try|try
block|{
name|prevBackup
operator|.
name|parse
argument_list|(
name|check
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception while trying to parse previous backup descriptor: "
operator|+
name|prevBackup
operator|.
name|getSymbolicPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// close<collection>
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endPrefixMapping
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|output
operator|.
name|closeContents
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|getURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
condition|)
block|{
name|output
operator|.
name|closeCollection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|exportDocument
parameter_list|(
name|BackupWriter
name|output
parameter_list|,
name|Date
name|date
parameter_list|,
name|BackupDescriptor
name|prevBackup
parameter_list|,
name|SAXSerializer
name|serializer
parameter_list|,
name|int
name|docsCount
parameter_list|,
name|int
name|count
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TerminatedException
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|startDocument
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|count
argument_list|,
name|docsCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|monitor
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|monitor
operator|.
name|proceed
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|TerminatedException
argument_list|(
literal|"system export terminated by db"
argument_list|)
operator|)
throw|;
block|}
name|boolean
name|needsBackup
init|=
operator|(
name|prevBackup
operator|==
literal|null
operator|)
operator|||
operator|(
name|date
operator|.
name|getTime
argument_list|()
operator|<
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|needsBackup
condition|)
block|{
name|OutputStream
name|os
init|=
name|output
operator|.
name|newEntry
argument_list|(
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
comment|// write resource to contentSerializer
name|SAXSerializer
name|contentSerializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|contentSerializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|defaultOutputProperties
argument_list|)
expr_stmt|;
name|writeXML
argument_list|(
name|doc
argument_list|,
name|contentSerializer
argument_list|)
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|contentSerializer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"A write error occurred while exporting document: '"
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
operator|+
literal|"'. Continuing with next document."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|output
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
comment|// store permissions
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
operator|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|)
condition|?
literal|"BinaryResource"
else|:
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"skip"
argument_list|,
literal|"skip"
argument_list|,
literal|"CDATA"
argument_list|,
operator|(
name|needsBackup
condition|?
literal|"no"
else|:
literal|"yes"
operator|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mode"
argument_list|,
literal|"mode"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// be careful when accessing document metadata: it is stored in a
comment|// different place than the
comment|// main document info and could thus be damaged
name|DocumentMetadata
name|metadata
init|=
literal|null
decl_stmt|;
try|try
block|{
name|metadata
operator|=
name|doc
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// LOG.warn(e.getMessage(), e);
block|}
try|try
block|{
name|String
name|created
decl_stmt|;
name|String
name|modified
decl_stmt|;
comment|// metadata could be damaged
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|created
operator|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|modified
operator|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|metadata
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|created
operator|=
operator|new
name|DateTimeValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|modified
operator|=
name|created
expr_stmt|;
block|}
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|created
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"modified"
argument_list|,
literal|"modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"filename"
argument_list|,
literal|"filename"
argument_list|,
literal|"CDATA"
argument_list|,
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mimeType
init|=
literal|"application/xml"
decl_stmt|;
if|if
condition|(
operator|(
name|metadata
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|metadata
operator|.
name|getMimeType
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|mimeType
operator|=
name|Backup
operator|.
name|encode
argument_list|(
name|metadata
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mimetype"
argument_list|,
literal|"mimetype"
argument_list|,
literal|"CDATA"
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
operator|)
operator|&&
operator|(
name|metadata
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"namedoctype"
argument_list|,
literal|"namedoctype"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"publicid"
argument_list|,
literal|"publicid"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"systemid"
argument_list|,
literal|"systemid"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"resource"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Serialize a document to XML, based on {@link XMLStreamReader}.      *      * @param  doc       the document to serialize      * @param  receiver  the output handler      */
specifier|private
name|void
name|writeXML
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
block|{
try|try
block|{
name|EmbeddedXMLStreamReader
name|reader
decl_stmt|;
name|char
index|[]
name|ch
decl_stmt|;
name|int
name|nsdecls
decl_stmt|;
name|NamespaceSupport
name|nsSupport
init|=
operator|new
name|NamespaceSupport
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StoredNode
name|child
init|=
operator|(
name|StoredNode
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|reader
operator|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|XMLStreamReader
operator|.
name|START_DOCUMENT
case|:
case|case
name|XMLStreamReader
operator|.
name|END_DOCUMENT
case|:
block|{
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|START_ELEMENT
case|:
block|{
name|nsdecls
operator|=
name|reader
operator|.
name|getNamespaceCount
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|ni
init|=
literal|0
init|;
name|ni
operator|<
name|nsdecls
condition|;
name|ni
operator|++
control|)
block|{
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|ni
argument_list|)
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|ni
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AttrList
name|attribs
init|=
operator|new
name|AttrList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|j
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|j
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
name|qn
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|END_ELEMENT
case|:
block|{
name|receiver
operator|.
name|endElement
argument_list|(
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nsdecls
operator|=
name|reader
operator|.
name|getNamespaceCount
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|ni
init|=
literal|0
init|;
name|ni
operator|<
name|nsdecls
condition|;
name|ni
operator|++
control|)
block|{
name|receiver
operator|.
name|endPrefixMapping
argument_list|(
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|ni
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|CHARACTERS
case|:
block|{
name|receiver
operator|.
name|characters
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|CDATA
case|:
block|{
name|ch
operator|=
name|reader
operator|.
name|getTextCharacters
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|cdataSection
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|COMMENT
case|:
block|{
name|ch
operator|=
name|reader
operator|.
name|getTextCharacters
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamReader
operator|.
name|PROCESSING_INSTRUCTION
case|:
block|{
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|COMMENT_NODE
operator|)
operator|||
operator|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
operator|)
condition|)
block|{
break|break;
block|}
block|}
name|nsSupport
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|File
name|getUniqueFile
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|String
name|filename
init|=
name|base
operator|+
literal|'-'
operator|+
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filename
operator|+
name|extension
argument_list|)
decl_stmt|;
name|int
name|version
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filename
operator|+
literal|'_'
operator|+
name|version
operator|++
operator|+
name|extension
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|file
operator|)
return|;
block|}
specifier|public
name|int
name|getCollectionCount
parameter_list|()
throws|throws
name|TerminatedException
block|{
if|if
condition|(
name|collectionCount
operator|==
operator|-
literal|1
condition|)
block|{
name|AccountImpl
operator|.
name|getSecurityProperties
argument_list|()
operator|.
name|enableCheckPasswords
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|CollectionCallback
name|cb
init|=
operator|new
name|CollectionCallback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|broker
operator|.
name|getCollectionsFailsafe
argument_list|(
name|cb
argument_list|)
expr_stmt|;
name|collectionCount
operator|=
name|cb
operator|.
name|collectionCount
expr_stmt|;
block|}
finally|finally
block|{
name|AccountImpl
operator|.
name|getSecurityProperties
argument_list|()
operator|.
name|enableCheckPasswords
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|collectionCount
operator|)
return|;
block|}
specifier|public
specifier|static
interface|interface
name|StatusCallback
block|{
name|void
name|startCollection
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
name|void
name|startDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|current
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|CollectionCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
name|BackupWriter
name|writer
decl_stmt|;
specifier|private
name|BackupDescriptor
name|prevBackup
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errors
decl_stmt|;
specifier|private
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
specifier|private
name|int
name|collectionCount
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|exportCollection
decl_stmt|;
specifier|private
name|int
name|lastPercentage
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Agent
name|jmxAgent
init|=
name|AgentFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|CollectionCallback
parameter_list|(
name|BackupWriter
name|writer
parameter_list|,
name|Date
name|date
parameter_list|,
name|BackupDescriptor
name|prevBackup
parameter_list|,
name|List
argument_list|<
name|ErrorReport
argument_list|>
name|errorList
parameter_list|,
name|boolean
name|exportCollection
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errorList
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|this
operator|.
name|prevBackup
operator|=
name|prevBackup
expr_stmt|;
name|this
operator|.
name|exportCollection
operator|=
name|exportCollection
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collectionCount
operator|++
expr_stmt|;
if|if
condition|(
name|exportCollection
condition|)
block|{
name|CollectionStore
name|store
init|=
operator|(
name|CollectionStore
operator|)
operator|(
operator|(
name|NativeBroker
operator|)
name|broker
operator|)
operator|.
name|getStorage
argument_list|(
name|NativeBroker
operator|.
name|COLLECTIONS_DBX_ID
argument_list|)
decl_stmt|;
name|uri
operator|=
name|UTF8
operator|.
name|decode
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
operator|+
name|CollectionStore
operator|.
name|CollectionKey
operator|.
name|OFFSET_VALUE
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
operator|-
name|CollectionStore
operator|.
name|CollectionKey
operator|.
name|OFFSET_VALUE
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|CollectionStore
operator|.
name|NEXT_COLLECTION_ID_KEY
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
name|CollectionStore
operator|.
name|NEXT_DOC_ID_KEY
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
name|CollectionStore
operator|.
name|FREE_COLLECTION_ID_KEY
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
name|CollectionStore
operator|.
name|FREE_DOC_ID_KEY
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|startCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|Collection
name|collection
init|=
operator|new
name|Collection
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|VariableByteInput
name|istream
init|=
name|store
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
decl_stmt|;
name|collection
operator|.
name|read
argument_list|(
name|broker
argument_list|,
name|istream
argument_list|)
expr_stmt|;
name|BackupDescriptor
name|bd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prevBackup
operator|!=
literal|null
condition|)
block|{
name|bd
operator|=
name|prevBackup
operator|.
name|getBackupDescriptor
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|int
name|percentage
init|=
literal|100
operator|*
operator|(
name|collectionCount
operator|+
literal|1
operator|)
operator|/
operator|(
name|getCollectionCount
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|jmxAgent
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|percentage
operator|!=
name|lastPercentage
operator|)
condition|)
block|{
name|lastPercentage
operator|=
name|percentage
expr_stmt|;
name|jmxAgent
operator|.
name|updateStatus
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|percentage
argument_list|)
expr_stmt|;
block|}
name|export
argument_list|(
name|collection
argument_list|,
name|writer
argument_list|,
name|date
argument_list|,
name|bd
argument_list|,
name|errors
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Terminating system export upon request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// rethrow
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Caught exception while scanning collections: "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
specifier|public
name|DocumentSet
name|getDocs
parameter_list|()
block|{
return|return
operator|(
name|docs
operator|)
return|;
block|}
block|}
specifier|private
class|class
name|DocumentCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
name|DocumentSet
name|exportedDocs
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|writtenDocs
init|=
literal|null
decl_stmt|;
specifier|private
name|SAXSerializer
name|serializer
decl_stmt|;
specifier|private
name|BackupWriter
name|output
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
specifier|private
name|BackupDescriptor
name|prevBackup
decl_stmt|;
specifier|private
name|DocumentCallback
parameter_list|(
name|BackupWriter
name|output
parameter_list|,
name|SAXSerializer
name|serializer
parameter_list|,
name|Date
name|date
parameter_list|,
name|BackupDescriptor
name|prevBackup
parameter_list|,
name|DocumentSet
name|exportedDocs
parameter_list|,
name|boolean
name|checkNames
parameter_list|)
block|{
name|this
operator|.
name|exportedDocs
operator|=
name|exportedDocs
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|this
operator|.
name|prevBackup
operator|=
name|prevBackup
expr_stmt|;
if|if
condition|(
name|checkNames
condition|)
block|{
name|writtenDocs
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|CollectionStore
name|store
init|=
operator|(
name|CollectionStore
operator|)
operator|(
operator|(
name|NativeBroker
operator|)
name|broker
operator|)
operator|.
name|getStorage
argument_list|(
name|NativeBroker
operator|.
name|COLLECTIONS_DBX_ID
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|CollectionStore
operator|.
name|DocumentKey
operator|.
name|getDocumentId
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exportedDocs
operator|.
name|contains
argument_list|(
name|docId
argument_list|)
condition|)
block|{
try|try
block|{
name|byte
name|type
init|=
name|key
operator|.
name|data
argument_list|()
index|[
name|key
operator|.
name|start
argument_list|()
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
operator|+
name|DocumentImpl
operator|.
name|LENGTH_DOCUMENT_TYPE
index|]
decl_stmt|;
name|VariableByteInput
name|istream
init|=
name|store
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|doc
operator|=
operator|new
name|BinaryDocument
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
name|reportError
argument_list|(
literal|"Found an orphaned document: "
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|writtenDocs
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
name|String
name|fileURI
init|=
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|origURI
init|=
name|fileURI
decl_stmt|;
while|while
condition|(
name|writtenDocs
operator|.
name|contains
argument_list|(
name|fileURI
argument_list|)
condition|)
block|{
name|fileURI
operator|=
name|origURI
operator|+
literal|"."
operator|+
name|count
operator|++
expr_stmt|;
block|}
name|doc
operator|.
name|setFileURI
argument_list|(
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|fileURI
argument_list|)
argument_list|)
expr_stmt|;
name|writtenDocs
operator|.
name|add
argument_list|(
name|fileURI
argument_list|)
expr_stmt|;
block|}
name|exportDocument
argument_list|(
name|output
argument_list|,
name|date
argument_list|,
name|prevBackup
argument_list|,
name|serializer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Caught an exception while scanning documents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
specifier|private
class|class
name|CheckDeletedHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
name|Collection
name|collection
decl_stmt|;
specifier|private
name|SAXSerializer
name|serializer
decl_stmt|;
specifier|private
name|CheckDeletedHandler
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|SAXSerializer
name|serializer
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"subcollection"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|collection
operator|.
name|hasChildCollection
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"deleted"
argument_list|,
literal|"deleted"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"deleted"
argument_list|,
literal|"deleted"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"resource"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|hasDocument
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"deleted"
argument_list|,
literal|"deleted"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"deleted"
argument_list|,
literal|"deleted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

