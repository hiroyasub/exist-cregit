begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|repair
operator|.
name|ErrorReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|SystemExport
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SystemExport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Properties
name|defaultOutputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
block|{
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Properties
name|contentsOutputProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
block|{
name|contentsOutputProps
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEMP_COLLECTION
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|NativeBroker
operator|.
name|TEMP_COLLECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|CONTENTS_URI
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
literal|"__contents__.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|currVersion
init|=
literal|1
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|String
name|target
decl_stmt|;
specifier|private
name|StatusCallback
name|callback
init|=
literal|null
decl_stmt|;
specifier|public
name|SystemExport
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|target
parameter_list|,
name|StatusCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
specifier|private
name|void
name|reportError
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|export
parameter_list|(
name|List
name|errorList
parameter_list|)
block|{
try|try
block|{
name|Collection
name|root
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
decl_stmt|;
name|BackupWriter
name|output
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
name|output
operator|=
operator|new
name|ZipWriter
argument_list|(
name|target
argument_list|,
literal|"/db"
argument_list|)
expr_stmt|;
else|else
name|output
operator|=
operator|new
name|FileSystemWriter
argument_list|(
name|target
operator|+
literal|"/db"
argument_list|)
expr_stmt|;
name|export
argument_list|(
name|root
argument_list|,
name|output
argument_list|,
name|errorList
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"A write error occurred while exporting data: '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'. Aborting export."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"A write error occurred while exporting data: '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'. Aborting export."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isDamaged
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|List
name|errorList
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|ErrorReport
name|report
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|errorList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|report
operator|=
operator|(
name|ErrorReport
operator|)
name|errorList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|getErrcode
argument_list|()
operator|==
name|ErrorReport
operator|.
name|RESOURCE_ACCESS_FAILED
operator|&&
name|report
operator|.
name|getDocumentId
argument_list|()
operator|==
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|export
parameter_list|(
name|Collection
name|current
parameter_list|,
name|BackupWriter
name|output
parameter_list|,
name|List
name|errorList
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|startCollection
argument_list|(
name|current
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Writer
name|contents
init|=
name|output
operator|.
name|newContents
argument_list|()
decl_stmt|;
comment|// serializer writes to __contents__.xml
name|SAXSerializer
name|serializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|contents
argument_list|,
name|contentsOutputProps
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|XmldbURI
name|uri
init|=
name|current
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"version"
argument_list|,
literal|"version"
argument_list|,
literal|"CDATA"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|currVersion
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mode"
argument_list|,
literal|"mode"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|current
operator|.
name|getPermissions
argument_list|()
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|current
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|OutputStream
name|os
decl_stmt|;
name|BufferedWriter
name|writer
decl_stmt|;
name|SAXSerializer
name|contentSerializer
decl_stmt|;
name|int
name|docsCount
init|=
name|current
operator|.
name|getDocumentCount
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|current
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDamaged
argument_list|(
name|doc
argument_list|,
name|errorList
argument_list|)
condition|)
block|{
name|reportError
argument_list|(
literal|"Skipping damaged document "
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|CONTENTS_URI
argument_list|)
condition|)
continue|continue;
comment|// skip __contents__.xml documents
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|startDocument
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|count
argument_list|,
name|docsCount
argument_list|)
expr_stmt|;
name|os
operator|=
name|output
operator|.
name|newEntry
argument_list|(
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// write resource to contentSerializer
name|contentSerializer
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|contentSerializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|defaultOutputProperties
argument_list|)
expr_stmt|;
name|writeXML
argument_list|(
name|doc
argument_list|,
name|contentSerializer
argument_list|)
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|contentSerializer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"A write error occurred while exporting document: '"
operator|+
name|doc
operator|.
name|getFileURI
argument_list|()
operator|+
literal|"'. Continuing with next document."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|output
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
comment|//store permissions
name|attr
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|?
literal|"BinaryResource"
else|:
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"owner"
argument_list|,
literal|"owner"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"group"
argument_list|,
literal|"group"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mode"
argument_list|,
literal|"mode"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toOctalString
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|created
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"created"
argument_list|,
literal|"created"
argument_list|,
literal|"CDATA"
argument_list|,
name|created
argument_list|)
expr_stmt|;
specifier|final
name|String
name|modified
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|(
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"modified"
argument_list|,
literal|"modified"
argument_list|,
literal|"CDATA"
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"filename"
argument_list|,
literal|"filename"
argument_list|,
literal|"CDATA"
argument_list|,
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"mimetype"
argument_list|,
literal|"mimetype"
argument_list|,
literal|"CDATA"
argument_list|,
name|Backup
operator|.
name|encode
argument_list|(
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
operator|&&
name|doc
operator|.
name|getDoctype
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"namedoctype"
argument_list|,
literal|"namedoctype"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
operator|!=
literal|null
condition|)
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"publicid"
argument_list|,
literal|"publicid"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"systemid"
argument_list|,
literal|"systemid"
argument_list|,
literal|"CDATA"
argument_list|,
name|doc
operator|.
name|getDoctype
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"resource"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"resource"
argument_list|,
literal|"resource"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|current
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmldbURI
name|childUri
init|=
operator|(
name|XmldbURI
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childUri
operator|.
name|equalsInternal
argument_list|(
name|TEMP_COLLECTION
argument_list|)
condition|)
continue|continue;
name|Collection
name|child
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|append
argument_list|(
name|childUri
argument_list|)
argument_list|)
decl_stmt|;
name|attr
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|childUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"filename"
argument_list|,
literal|"filename"
argument_list|,
literal|"CDATA"
argument_list|,
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|childUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"subcollection"
argument_list|,
literal|"subcollection"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"subcollection"
argument_list|,
literal|"subcollection"
argument_list|)
expr_stmt|;
block|}
comment|// close<collection>
name|serializer
operator|.
name|endElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"collection"
argument_list|,
literal|"collection"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endPrefixMapping
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|output
operator|.
name|closeContents
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|current
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmldbURI
name|childUri
init|=
operator|(
name|XmldbURI
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childUri
operator|.
name|equalsInternal
argument_list|(
name|TEMP_COLLECTION
argument_list|)
condition|)
continue|continue;
name|Collection
name|child
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|append
argument_list|(
name|childUri
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|output
operator|.
name|newCollection
argument_list|(
name|Backup
operator|.
name|encode
argument_list|(
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|childUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|export
argument_list|(
name|child
argument_list|,
name|output
argument_list|,
name|errorList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"An error occurred while writing collection "
operator|+
name|child
operator|.
name|getURI
argument_list|()
operator|+
literal|". Continuing with next collection."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|output
operator|.
name|closeCollection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeXML
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
block|{
try|try
block|{
name|EmbeddedXMLStreamReader
name|reader
decl_stmt|;
name|char
name|ch
index|[]
decl_stmt|;
name|NodeList
name|children
init|=
name|doc
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|=
name|doc
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLStreamReader
argument_list|(
operator|(
name|StoredNode
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|XMLStreamReader
operator|.
name|START_DOCUMENT
case|:
case|case
name|XMLStreamReader
operator|.
name|END_DOCUMENT
case|:
break|break;
case|case
name|XMLStreamReader
operator|.
name|START_ELEMENT
case|:
name|AttrList
name|attribs
init|=
operator|new
name|AttrList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|j
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|j
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
name|qn
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|END_ELEMENT
case|:
name|receiver
operator|.
name|endElement
argument_list|(
operator|new
name|QName
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|CHARACTERS
case|:
name|receiver
operator|.
name|characters
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|CDATA
case|:
name|ch
operator|=
name|reader
operator|.
name|getTextCharacters
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|cdataSection
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|COMMENT
case|:
name|ch
operator|=
name|reader
operator|.
name|getTextCharacters
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|receiver
operator|.
name|processingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|StatusCallback
block|{
specifier|public
name|void
name|startCollection
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
specifier|public
name|void
name|startDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|current
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

