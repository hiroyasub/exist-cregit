begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xupdate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|parser
operator|.
name|XPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|RootNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_comment
comment|/**  * XUpdateProcessor.java  *   * @author Wolfgang Meier  *   * TODO:  *   xupdate:processing-instruction  *   xupdate:comment  */
end_comment

begin_class
specifier|public
class|class
name|XUpdateProcessor
implements|implements
name|ContentHandler
implements|,
name|LexicalHandler
block|{
specifier|public
specifier|final
specifier|static
name|String
name|XUPDATE_NS
init|=
literal|"http://www.xmldb.org/xupdate"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XUpdateProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|inModification
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|inAttribute
init|=
literal|false
decl_stmt|;
specifier|private
name|Modification
name|modification
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentBuilder
name|builder
decl_stmt|;
specifier|private
name|Document
name|doc
decl_stmt|;
specifier|private
name|DocumentFragment
name|fragment
init|=
literal|null
decl_stmt|;
specifier|private
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Node
name|currentNode
init|=
literal|null
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|DocumentSet
name|documentSet
decl_stmt|;
specifier|private
name|ArrayList
name|modifications
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|FastStringBuffer
name|charBuf
init|=
operator|new
name|FastStringBuffer
argument_list|(
literal|6
argument_list|,
literal|15
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|TreeMap
name|variables
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
comment|/** 	 * Constructor for XUpdateProcessor. 	 */
specifier|public
name|XUpdateProcessor
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|User
name|user
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|documentSet
operator|=
name|docs
expr_stmt|;
block|}
comment|/** 	 * Parse the input source into a set of modifications. 	 *  	 * @param is 	 * @return an array of type Modification 	 * @throws ParserConfigurationException 	 * @throws IOException 	 * @throws SAXException 	 */
specifier|public
name|Modification
index|[]
name|parse
parameter_list|(
name|InputSource
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|SAXParserFactory
name|saxFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|saxFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saxFactory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SAXParser
name|sax
init|=
name|saxFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|sax
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|Modification
name|mods
index|[]
init|=
operator|new
name|Modification
index|[
name|modifications
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|Modification
index|[]
operator|)
name|modifications
operator|.
name|toArray
argument_list|(
name|mods
argument_list|)
return|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator) 	 */
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startDocument() 	 */
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endDocument() 	 */
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String) 	 */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) 	 */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// save accumulated character content
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"appending text to fragment: "
operator|+
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|fragment
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|XUPDATE_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"modifications"
argument_list|)
condition|)
block|{
name|String
name|version
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"version attribute is required for "
operator|+
literal|"element modifications"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|version
operator|.
name|equals
argument_list|(
literal|"1.0"
argument_list|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Version "
operator|+
name|version
operator|+
literal|" of XUpdate "
operator|+
literal|"not supported."
argument_list|)
throw|;
return|return;
block|}
name|String
name|select
init|=
literal|null
decl_stmt|;
comment|// variable declaration
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"variable"
argument_list|)
condition|)
block|{
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"variable declaration requires a select attribute"
argument_list|)
throw|;
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"variable declarations requires a name attribute"
argument_list|)
throw|;
name|createVariable
argument_list|(
name|name
argument_list|,
name|select
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"append"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-before"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-after"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"remove"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"rename"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"update"
argument_list|)
condition|)
block|{
if|if
condition|(
name|inModification
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"nested modifications are not allowed"
argument_list|)
throw|;
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
name|localName
operator|+
literal|" requires a select attribute"
argument_list|)
throw|;
name|doc
operator|=
name|builder
operator|.
name|newDocument
argument_list|()
expr_stmt|;
name|fragment
operator|=
name|doc
operator|.
name|createDocumentFragment
argument_list|()
expr_stmt|;
name|inModification
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|localName
operator|.
name|equals
argument_list|(
literal|"element"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"attribute"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"processing-instruction"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"comment"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|inModification
operator|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"creation elements are only allowed inside "
operator|+
literal|"a modification"
argument_list|)
throw|;
comment|// start a new modification section
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"append"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Append
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|)
expr_stmt|;
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"update"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Update
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|)
expr_stmt|;
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-before"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Insert
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|Insert
operator|.
name|INSERT_BEFORE
argument_list|)
expr_stmt|;
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-after"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Insert
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|Insert
operator|.
name|INSERT_AFTER
argument_list|)
expr_stmt|;
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"remove"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Remove
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|)
expr_stmt|;
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"rename"
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Rename
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|)
expr_stmt|;
comment|// process commands for node creation
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"element"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"element requires a name attribute"
argument_list|)
throw|;
name|Element
name|elem
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fragment
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"attribute requires a name attribute"
argument_list|)
throw|;
name|Attr
name|attrib
init|=
name|doc
operator|.
name|createAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|fragment
operator|.
name|appendChild
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|setAttributeNode
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
block|}
name|inAttribute
operator|=
literal|true
expr_stmt|;
name|currentNode
operator|=
name|attrib
expr_stmt|;
comment|// process value-of
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"value-of"
argument_list|)
condition|)
block|{
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"value-of requires a select attribute"
argument_list|)
throw|;
name|List
name|nodes
decl_stmt|;
if|if
condition|(
name|select
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|nodes
operator|=
operator|(
name|List
operator|)
name|variables
operator|.
name|get
argument_list|(
name|select
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"variable "
operator|+
name|select
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
else|else
name|nodes
operator|=
name|processQuery
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|nodes
operator|.
name|size
argument_list|()
operator|+
literal|" nodes for value-of"
argument_list|)
expr_stmt|;
name|Node
name|node
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|node
operator|=
name|XMLUtil
operator|.
name|copyNode
argument_list|(
name|doc
argument_list|,
operator|(
name|Node
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|fragment
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|inModification
condition|)
block|{
name|Element
name|elem
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespaceURI
argument_list|,
name|qName
argument_list|)
decl_stmt|;
name|Attr
name|a
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|,
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setValue
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fragment
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fragment
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|XUPDATE_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"element"
argument_list|)
condition|)
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"attribute"
argument_list|)
condition|)
name|inAttribute
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"append"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"update"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"remove"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"rename"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-before"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"insert-after"
argument_list|)
condition|)
block|{
name|inModification
operator|=
literal|false
expr_stmt|;
name|modification
operator|.
name|setContent
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|modifications
operator|.
name|add
argument_list|(
name|modification
argument_list|)
expr_stmt|;
name|modification
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|inModification
condition|)
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#characters(char, int, int) 	 */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
condition|)
block|{
if|if
condition|(
name|inAttribute
condition|)
operator|(
operator|(
name|Attr
operator|)
name|currentNode
operator|)
operator|.
name|setValue
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#ignorableWhitespace(char, int, int) 	 */
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"appending text to fragment: "
operator|+
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|fragment
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inModification
condition|)
block|{
name|ProcessingInstruction
name|pi
init|=
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fragment
operator|.
name|appendChild
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String) 	 */
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|private
name|void
name|createVariable
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|select
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating variable "
operator|+
name|name
operator|+
literal|" as "
operator|+
name|select
argument_list|)
expr_stmt|;
name|List
name|result
init|=
name|processQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" for variable "
operator|+
name|name
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
literal|'$'
operator|+
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
name|processQuery
parameter_list|(
name|String
name|select
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|XPathLexer
name|lexer
init|=
operator|new
name|XPathLexer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|select
argument_list|)
argument_list|)
decl_stmt|;
name|XPathParser
name|parser
init|=
operator|new
name|XPathParser
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|lexer
argument_list|)
decl_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|RootNode
name|root
init|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|parser
operator|.
name|expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
name|parser
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
throw|;
name|DocumentSet
name|ndocs
init|=
name|expr
operator|.
name|preselect
argument_list|(
name|documentSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|ndocs
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
return|;
name|Value
name|resultValue
init|=
name|expr
operator|.
name|eval
argument_list|(
name|documentSet
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|resultValue
operator|.
name|getType
argument_list|()
operator|==
name|Value
operator|.
name|isNodeList
operator|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"select expression should evaluate to a"
operator|+
literal|"node-set"
argument_list|)
throw|;
name|NodeList
name|set
init|=
name|resultValue
operator|.
name|getNodeList
argument_list|()
decl_stmt|;
name|ArrayList
name|out
init|=
operator|new
name|ArrayList
argument_list|(
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|set
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|set
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int) 	 */
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"appending text to fragment: "
operator|+
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|fragment
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inModification
condition|)
block|{
name|Comment
name|comment
init|=
name|doc
operator|.
name|createComment
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fragment
operator|.
name|appendChild
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endCDATA() 	 */
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endDTD() 	 */
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endEntity(java.lang.String) 	 */
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startCDATA() 	 */
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startDTD(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startEntity(java.lang.String) 	 */
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
block|}
end_class

end_unit

