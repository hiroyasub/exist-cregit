begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_comment
comment|/*  *  Some modifications Copyright (C) 2004 Luigi P. Bai  *  finder@users.sf.net  *  Licensed as above under the LGPL.  *    */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xupdate
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSetHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|NullAccessContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AnalyzeContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryTreeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Main class to pre-process an XUpdate request. XUpdateProcessor  * will parse the request via SAX and compile it into a set of  * {@link Modification} objects as returned by the {@link #parse(org.xml.sax.InputSource)}  * method. The modifications can then be executed via {@link Modification#process(org.exist.storage.txn.Txn)}.  *   * @author Wolfgang Meier  *   */
end_comment

begin_class
specifier|public
class|class
name|XUpdateProcessor
implements|implements
name|ContentHandler
implements|,
name|LexicalHandler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MODIFICATIONS
init|=
literal|"modifications"
decl_stmt|;
comment|// Modifications
specifier|public
specifier|static
specifier|final
name|String
name|INSERT_AFTER
init|=
literal|"insert-after"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INSERT_BEFORE
init|=
literal|"insert-before"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLACE
init|=
literal|"replace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RENAME
init|=
literal|"rename"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REMOVE
init|=
literal|"remove"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|APPEND
init|=
literal|"append"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE
init|=
literal|"update"
decl_stmt|;
comment|// node constructors
specifier|public
specifier|static
specifier|final
name|String
name|COMMENT
init|=
literal|"comment"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSING_INSTRUCTION
init|=
literal|"processing-instruction"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"text"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTRIBUTE
init|=
literal|"attribute"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT
init|=
literal|"element"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALUE_OF
init|=
literal|"value-of"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VARIABLE
init|=
literal|"variable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IF
init|=
literal|"if"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XUPDATE_NS
init|=
literal|"http://www.xmldb.org/xupdate"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XUpdateProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * NodeList to keep track of created document fragments within      * the currently processed XUpdate modification.      */
specifier|private
name|NodeListImpl
name|contents
init|=
literal|null
decl_stmt|;
comment|// Flags needed during SAX processing
specifier|private
name|boolean
name|inModification
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|inAttribute
init|=
literal|false
decl_stmt|;
comment|/**      * Whitespace preservation: the XUpdate processor      * will honour xml:space attribute settings.      */
specifier|private
name|boolean
name|preserveWhitespace
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|preserveWhitespaceTemp
init|=
literal|false
decl_stmt|;
comment|/**      * Stack to maintain xml:space settings. The items on the      * stack are strings, containing either "default" or "preserve".      */
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|spaceStack
init|=
literal|null
decl_stmt|;
comment|/**      * The modification we are currently processing.      */
specifier|private
name|Modification
name|modification
init|=
literal|null
decl_stmt|;
comment|/** The DocumentBuilder used to create new nodes */
specifier|private
name|DocumentBuilder
name|builder
decl_stmt|;
comment|/** The Document object used to create new nodes */
specifier|private
name|Document
name|doc
decl_stmt|;
comment|/** The current element stack. Contains the last elements processed. */
specifier|private
name|Stack
argument_list|<
name|Element
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
comment|/** The last node that has been created */
specifier|private
name|Node
name|currentNode
init|=
literal|null
decl_stmt|;
comment|/** DBBroker for this instance */
specifier|private
name|DBBroker
name|broker
decl_stmt|;
comment|/** The set of documents to which this XUpdate might apply. */
specifier|private
name|DocumentSet
name|documentSet
decl_stmt|;
comment|/**      * The final list of modifications. All modifications encountered      * within the XUpdate will be added to this list. The final list      * will be returned to the caller.      */
specifier|private
name|List
argument_list|<
name|Modification
argument_list|>
name|modifications
init|=
operator|new
name|ArrayList
argument_list|<
name|Modification
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Temporary string buffer used for collecting text chunks */
specifier|private
name|FastStringBuffer
name|charBuf
init|=
operator|new
name|FastStringBuffer
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|// Environment
comment|/** Contains all variables declared via xupdate:variable.      * Maps variable QName to the Sequence returned by      * evaluating the variable expression.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Keeps track of namespaces declared within the XUpdate.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|/**      * Stack used to track conditionals.      */
specifier|private
name|Stack
argument_list|<
name|Conditional
argument_list|>
name|conditionals
init|=
operator|new
name|Stack
argument_list|<
name|Conditional
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AccessContext
name|accessCtx
decl_stmt|;
comment|/** 	 * Constructor for XUpdateProcessor. 	 */
specifier|public
name|XUpdateProcessor
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|AccessContext
name|accessCtx
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
if|if
condition|(
name|accessCtx
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullAccessContextException
argument_list|()
throw|;
name|this
operator|.
name|accessCtx
operator|=
name|accessCtx
expr_stmt|;
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|documentSet
operator|=
name|docs
expr_stmt|;
comment|//namespaces.put("xml", Namespaces.XML_NS);
comment|//TODO : move this to a dedicated configure() method.
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|config
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Boolean
name|temp
decl_stmt|;
if|if
condition|(
operator|(
name|temp
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
literal|"indexer.preserve-whitespace-mixed-content"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|preserveWhitespaceTemp
operator|=
name|temp
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|XUpdateProcessor
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|void
name|setDocumentSet
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|this
operator|.
name|documentSet
operator|=
name|docs
expr_stmt|;
block|}
comment|/** 	 * Parse the input source into a set of modifications. 	 *  	 * @param is 	 * @return an array of type Modification 	 * @throws ParserConfigurationException 	 * @throws IOException 	 * @throws SAXException 	 */
specifier|public
name|Modification
index|[]
name|parse
parameter_list|(
name|InputSource
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|XMLReader
name|reader
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
name|Namespaces
operator|.
name|SAX_NAMESPACES_PREFIXES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|Modification
name|mods
index|[]
init|=
operator|new
name|Modification
index|[
name|modifications
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|modifications
operator|.
name|toArray
argument_list|(
name|mods
argument_list|)
return|;
block|}
finally|finally
block|{
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator) 	 */
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startDocument() 	 */
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// The default...
name|this
operator|.
name|preserveWhitespace
operator|=
name|preserveWhitespaceTemp
expr_stmt|;
name|this
operator|.
name|spaceStack
operator|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|spaceStack
operator|.
name|push
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endDocument() 	 */
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String) 	 */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) 	 */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// save accumulated character content
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//            String normalized = charBuf.toString();
specifier|final
name|String
name|normalized
init|=
name|preserveWhitespace
condition|?
name|charBuf
operator|.
name|toString
argument_list|()
else|:
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|charBuf
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//LOG.debug("appending text to fragment: " + text.getData());
name|contents
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|XUPDATE_NS
argument_list|)
condition|)
block|{
name|String
name|select
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|MODIFICATIONS
argument_list|)
condition|)
block|{
name|startModifications
argument_list|(
name|atts
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|VARIABLE
argument_list|)
condition|)
block|{
comment|// variable declaration
name|startVariableDecl
argument_list|(
name|atts
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|IF
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
name|inModification
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"xupdate:if is not allowed inside a modification"
argument_list|)
throw|;
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Conditional
name|cond
init|=
operator|new
name|Conditional
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
decl_stmt|;
name|cond
operator|.
name|setAccessContext
argument_list|(
name|accessCtx
argument_list|)
expr_stmt|;
name|conditionals
operator|.
name|push
argument_list|(
name|cond
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|VALUE_OF
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|inModification
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"xupdate:value-of is not allowed outside a modification"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|APPEND
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|INSERT_BEFORE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|INSERT_AFTER
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|REMOVE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|RENAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|UPDATE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|REPLACE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
name|inModification
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"nested modifications are not allowed"
argument_list|)
throw|;
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
name|localName
operator|+
literal|" requires a select attribute"
argument_list|)
throw|;
name|doc
operator|=
name|builder
operator|.
name|newDocument
argument_list|()
expr_stmt|;
name|contents
operator|=
operator|new
name|NodeListImpl
argument_list|()
expr_stmt|;
name|inModification
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|ATTRIBUTE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|TEXT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|PROCESSING_INSTRUCTION
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
name|COMMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|inModification
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"creation elements are only allowed inside "
operator|+
literal|"a modification"
argument_list|)
throw|;
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unknown XUpdate element: "
operator|+
name|qName
argument_list|)
throw|;
comment|// start a new modification section
if|if
condition|(
name|APPEND
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|child
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|modification
operator|=
operator|new
name|Append
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|child
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|UPDATE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Update
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|else if
condition|(
name|INSERT_BEFORE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Insert
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|Insert
operator|.
name|INSERT_BEFORE
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|else if
condition|(
name|INSERT_AFTER
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Insert
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|Insert
operator|.
name|INSERT_AFTER
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|else if
condition|(
name|REMOVE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Remove
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|else if
condition|(
name|RENAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Rename
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
if|else if
condition|(
name|REPLACE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|modification
operator|=
operator|new
name|Replace
argument_list|(
name|broker
argument_list|,
name|documentSet
argument_list|,
name|select
argument_list|,
name|namespaces
argument_list|,
name|variables
argument_list|)
expr_stmt|;
comment|// process commands for node creation
if|else if
condition|(
name|ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"element requires a name attribute"
argument_list|)
throw|;
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|prefix
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
name|p
operator|+
literal|1
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"illegal prefix in qname: "
operator|+
name|name
argument_list|)
throw|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
name|namespace
operator|=
operator|(
name|String
operator|)
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"no namespace defined for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
block|}
name|Element
name|elem
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|elem
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
name|elem
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setWhitespaceHandling
argument_list|(
operator|(
name|Element
operator|)
name|stack
operator|.
name|push
argument_list|(
name|elem
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ATTRIBUTE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"attribute requires a name attribute"
argument_list|)
throw|;
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|String
name|prefix
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
name|p
operator|+
literal|1
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"illegal prefix in qname: "
operator|+
name|name
argument_list|)
throw|;
name|namespace
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
name|namespace
operator|=
operator|(
name|String
operator|)
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"no namespace defined for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
name|Attr
name|attrib
init|=
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
else|:
name|doc
operator|.
name|createAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|contents
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|n
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|nname
init|=
name|ns
operator|==
literal|null
condition|?
name|n
operator|.
name|getNodeName
argument_list|()
else|:
name|n
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
name|ns
operator|=
literal|""
expr_stmt|;
comment|// check for duplicate attributes
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|&&
name|nname
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|ns
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"The attribute "
operator|+
name|attrib
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" cannot be specified twice"
argument_list|)
throw|;
block|}
name|contents
operator|.
name|add
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasAttributeNS
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
operator|||
name|namespace
operator|==
literal|null
operator|&&
name|last
operator|.
name|hasAttribute
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"The attribute "
operator|+
name|attrib
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" cannot be specified "
operator|+
literal|"twice on the same element"
argument_list|)
throw|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
name|last
operator|.
name|setAttributeNodeNS
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
else|else
name|last
operator|.
name|setAttributeNode
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
block|}
name|inAttribute
operator|=
literal|true
expr_stmt|;
name|currentNode
operator|=
name|attrib
expr_stmt|;
comment|// process value-of
block|}
if|else if
condition|(
name|VALUE_OF
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|select
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"value-of requires a select attribute"
argument_list|)
throw|;
name|Sequence
name|seq
init|=
name|processQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|seq
operator|.
name|getItemCount
argument_list|()
operator|+
literal|" items for value-of"
argument_list|)
expr_stmt|;
name|Item
name|item
decl_stmt|;
try|try
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|seq
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|item
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|NodeSetHelper
operator|.
name|copyNode
argument_list|(
name|doc
argument_list|,
operator|(
operator|(
name|NodeValue
operator|)
name|item
operator|)
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|contents
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|value
init|=
name|item
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|characters
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|else if
condition|(
name|inModification
condition|)
block|{
name|Element
name|elem
init|=
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespaceURI
argument_list|,
name|qName
argument_list|)
else|:
name|doc
operator|.
name|createElement
argument_list|(
name|qName
argument_list|)
decl_stmt|;
name|Attr
name|a
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nsURI
init|=
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
comment|// Why are these showing up? They are supposed to be stripped out?
block|}
else|else
block|{
name|a
operator|=
name|nsURI
operator|!=
literal|null
condition|?
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|nsURI
argument_list|,
name|name
argument_list|)
else|:
name|doc
operator|.
name|createAttribute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|a
operator|.
name|setValue
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nsURI
operator|!=
literal|null
condition|)
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|a
argument_list|)
expr_stmt|;
else|else
name|elem
operator|.
name|setAttributeNode
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
operator|(
name|Element
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setWhitespaceHandling
argument_list|(
operator|(
name|Element
operator|)
name|stack
operator|.
name|push
argument_list|(
name|elem
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startVariableDecl
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|select
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"select"
argument_list|)
decl_stmt|;
if|if
condition|(
name|select
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"variable declaration requires a select attribute"
argument_list|)
throw|;
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"variable declarations requires a name attribute"
argument_list|)
throw|;
name|createVariable
argument_list|(
name|name
argument_list|,
name|select
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startModifications
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|version
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"version attribute is required for "
operator|+
literal|"element modifications"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|version
operator|.
name|equals
argument_list|(
literal|"1.0"
argument_list|)
condition|)
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Version "
operator|+
name|version
operator|+
literal|" of XUpdate "
operator|+
literal|"not supported."
argument_list|)
throw|;
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|preserveWhitespace
condition|?
name|charBuf
operator|.
name|toString
argument_list|()
else|:
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|charBuf
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|XUPDATE_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
if|if
condition|(
name|IF
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|Conditional
name|cond
init|=
name|conditionals
operator|.
name|pop
argument_list|()
decl_stmt|;
name|modifications
operator|.
name|add
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ELEMENT
argument_list|)
condition|)
block|{
name|this
operator|.
name|resetWhitespaceHandling
argument_list|(
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ATTRIBUTE
argument_list|)
condition|)
block|{
name|inAttribute
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|APPEND
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|UPDATE
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|REMOVE
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|RENAME
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|REPLACE
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|INSERT_BEFORE
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
name|INSERT_AFTER
argument_list|)
condition|)
block|{
name|inModification
operator|=
literal|false
expr_stmt|;
name|modification
operator|.
name|setContent
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|modification
operator|.
name|setAccessContext
argument_list|(
name|accessCtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conditionals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Conditional
name|cond
init|=
name|conditionals
operator|.
name|peek
argument_list|()
decl_stmt|;
name|cond
operator|.
name|addModification
argument_list|(
name|modification
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modifications
operator|.
name|add
argument_list|(
name|modification
argument_list|)
expr_stmt|;
block|}
name|modification
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|inModification
condition|)
block|{
name|this
operator|.
name|resetWhitespaceHandling
argument_list|(
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#characters(char[], int, int) 	 */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
condition|)
block|{
if|if
condition|(
name|inAttribute
condition|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|currentNode
decl_stmt|;
name|String
name|val
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|val
operator|+=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int) 	 */
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|this
operator|.
name|preserveWhitespace
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|inModification
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|inAttribute
condition|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|this
operator|.
name|currentNode
decl_stmt|;
name|String
name|val
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|val
operator|+=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|charBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setWhitespaceHandling
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|String
name|wsSetting
init|=
name|e
operator|.
name|getAttributeNS
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"space"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"preserve"
operator|.
name|equals
argument_list|(
name|wsSetting
argument_list|)
condition|)
block|{
name|this
operator|.
name|spaceStack
operator|.
name|push
argument_list|(
name|wsSetting
argument_list|)
expr_stmt|;
name|this
operator|.
name|preserveWhitespace
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|wsSetting
argument_list|)
condition|)
block|{
name|this
operator|.
name|spaceStack
operator|.
name|push
argument_list|(
name|wsSetting
argument_list|)
expr_stmt|;
name|this
operator|.
name|preserveWhitespace
operator|=
name|preserveWhitespaceTemp
expr_stmt|;
block|}
comment|// Otherwise, don't change what's currently in effect!
block|}
specifier|private
name|void
name|resetWhitespaceHandling
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|String
name|wsSetting
init|=
name|e
operator|.
name|getAttributeNS
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"space"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"preserve"
operator|.
name|equals
argument_list|(
name|wsSetting
argument_list|)
operator|||
literal|"default"
operator|.
name|equals
argument_list|(
name|wsSetting
argument_list|)
condition|)
block|{
comment|// Since an opinion was expressed, restore what was previously set:
name|this
operator|.
name|spaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|this
operator|.
name|spaceStack
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// This is the default...
name|this
operator|.
name|preserveWhitespace
operator|=
name|preserveWhitespaceTemp
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|preserveWhitespace
operator|=
operator|(
literal|"preserve"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|spaceStack
operator|.
name|peek
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"appending text to fragment: "
operator|+
name|text
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inModification
condition|)
block|{
name|ProcessingInstruction
name|pi
init|=
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String) 	 */
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|private
name|void
name|createVariable
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|select
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating variable "
operator|+
name|name
operator|+
literal|" as "
operator|+
name|select
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|processQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getItemCount
argument_list|()
operator|+
literal|" for variable "
operator|+
name|name
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Sequence
name|processQuery
parameter_list|(
name|String
name|select
parameter_list|)
throws|throws
name|SAXException
block|{
name|XQueryContext
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|=
operator|new
name|XQueryContext
argument_list|(
name|broker
argument_list|,
name|accessCtx
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|documentSet
argument_list|)
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceEntry
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|namespaceEntry
operator|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|context
operator|.
name|declareNamespace
argument_list|(
name|namespaceEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|namespaceEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|variables
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO(pkaminsk2): why replicate XQuery.compile here?
name|XQueryLexer
name|lexer
init|=
operator|new
name|XQueryLexer
argument_list|(
name|context
argument_list|,
operator|new
name|StringReader
argument_list|(
name|select
argument_list|)
argument_list|)
decl_stmt|;
name|XQueryParser
name|parser
init|=
operator|new
name|XQueryParser
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|XQueryTreeParser
name|treeParser
init|=
operator|new
name|XQueryTreeParser
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|parser
operator|.
name|xpath
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
name|AST
name|ast
init|=
name|parser
operator|.
name|getAST
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"generated AST: "
operator|+
name|ast
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|treeParser
operator|.
name|xpath
argument_list|(
name|ast
argument_list|,
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|treeParser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|treeParser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
name|expr
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|expr
operator|.
name|eval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|seq
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while creating variable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|context
operator|.
name|reset
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#comment(char[], int, int) 	 */
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inModification
operator|&&
name|charBuf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|normalized
init|=
name|charBuf
operator|.
name|getNormalizedString
argument_list|(
name|FastStringBuffer
operator|.
name|SUPPRESS_BOTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalized
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Text
name|text
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//LOG.debug("appending text to fragment: " + text.getData());
name|contents
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|charBuf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inModification
condition|)
block|{
name|Comment
name|comment
init|=
name|doc
operator|.
name|createComment
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|last
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|last
operator|.
name|appendChild
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endCDATA() 	 */
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endDTD() 	 */
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#endEntity(java.lang.String) 	 */
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startCDATA() 	 */
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startDTD(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ext.LexicalHandler#startEntity(java.lang.String) 	 */
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|preserveWhitespace
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|spaceStack
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inModification
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|inAttribute
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|modification
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|doc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|contents
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentNode
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|broker
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|documentSet
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|modifications
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|charBuf
operator|=
operator|new
name|FastStringBuffer
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|this
operator|.
name|variables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|conditionals
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//this.namespaces.put("xml", Namespaces.XML_NS);
block|}
block|}
end_class

end_unit

