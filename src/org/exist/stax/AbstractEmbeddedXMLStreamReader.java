begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 The eXist team  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Signatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|dom
operator|.
name|IRawNodeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|StreamFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Lazy implementation of a StAX {@link javax.xml.stream.XMLStreamReader}, which directly reads  * information from the persistent DOM. The class is optimized to support fast scanning of the DOM, where only  * a few selected node properties are requested. Node properties are extracted on demand. For example, the QName of  * an element will not be read unless {@link #getText()} is called.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractEmbeddedXMLStreamReader
parameter_list|<
name|T
extends|extends
name|IRawNodeIterator
parameter_list|>
implements|implements
name|IEmbeddedXMLStreamReader
implements|,
name|ExtendedXMLStreamReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AbstractEmbeddedXMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|T
name|iterator
decl_stmt|;
specifier|private
name|Value
name|current
init|=
literal|null
decl_stmt|;
specifier|private
name|Value
name|previous
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|ElementEvent
argument_list|>
name|elementStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|state
init|=
name|START_DOCUMENT
decl_stmt|;
specifier|private
name|boolean
name|beforeRoot
init|=
literal|false
decl_stmt|;
specifier|private
name|DocumentImpl
name|document
decl_stmt|;
specifier|protected
name|NodeId
name|nodeId
decl_stmt|;
specifier|protected
name|NodeHandle
name|origin
decl_stmt|;
specifier|private
name|QName
name|qname
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|XMLString
name|text
init|=
operator|new
name|XMLString
argument_list|(
literal|256
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|nsRead
init|=
literal|false
decl_stmt|;
specifier|private
name|AttrList
name|attributes
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|reportAttribs
init|=
literal|false
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
comment|/**      * Construct an EmbeddedXMLStreamReader.      *      * @param doc              the document to which the start node belongs.      * @param iterator         a RawNodeIterator positioned on the start node.      * @param origin           an optional NodeHandle whose nodeId should match the first node in the stream      *                         (or null if no need to check)      * @param reportAttributes if set to true, attributes will be reported as top-level events.      * @throws javax.xml.stream.XMLStreamException      */
specifier|public
name|AbstractEmbeddedXMLStreamReader
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|T
name|iterator
parameter_list|,
specifier|final
name|NodeHandle
name|origin
parameter_list|,
specifier|final
name|boolean
name|reportAttributes
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|reportAttribs
operator|=
name|reportAttributes
expr_stmt|;
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
specifier|final
name|StreamFilter
name|filter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|accept
argument_list|(
name|this
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reposition
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|NodeHandle
name|node
parameter_list|,
specifier|final
name|boolean
name|reportAttributes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
comment|// Seeking to a node with unknown address will reuse this reader, so do it before setting all
comment|// the fields otherwise they could get overwritten.
name|iterator
operator|.
name|seek
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|current
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|previous
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|elementStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|START_DOCUMENT
expr_stmt|;
name|this
operator|.
name|reportAttribs
operator|=
name|reportAttributes
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
name|this
operator|.
name|origin
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|Signatures
operator|.
name|getType
argument_list|(
name|current
operator|.
name|data
argument_list|()
index|[
name|current
operator|.
name|start
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|initNode
parameter_list|()
block|{
specifier|final
name|short
name|type
init|=
name|Signatures
operator|.
name|getType
argument_list|(
name|current
operator|.
name|data
argument_list|()
index|[
name|current
operator|.
name|start
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// TODO: remove potential NPE
if|if
condition|(
name|state
operator|==
name|START_DOCUMENT
operator|&&
name|type
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|beforeRoot
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|state
operator|=
name|START_ELEMENT
expr_stmt|;
name|elementStack
operator|.
name|push
argument_list|(
operator|new
name|ElementEvent
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|beforeRoot
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|state
operator|=
name|ATTRIBUTE
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|state
operator|=
name|CHARACTERS
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|state
operator|=
name|COMMENT
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|state
operator|=
name|CDATA
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|state
operator|=
name|PROCESSING_INSTRUCTION
expr_stmt|;
break|break;
block|}
name|reset
argument_list|()
expr_stmt|;
name|readNodeId
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|skipAttributes
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
comment|// attributes were not yet read. skip them...
specifier|final
name|ElementEvent
name|parent
init|=
name|elementStack
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|int
name|attrs
init|=
name|getAttributeCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
condition|;
name|i
operator|++
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|parent
operator|.
name|incrementChild
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|readAttributes
parameter_list|()
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
specifier|final
name|ElementEvent
name|parent
init|=
name|elementStack
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|getAttributeCount
argument_list|()
decl_stmt|;
name|attributes
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Value
name|v
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|AttrImpl
operator|.
name|addToList
argument_list|(
name|broker
argument_list|,
name|v
operator|.
name|data
argument_list|()
argument_list|,
name|v
operator|.
name|start
argument_list|()
argument_list|,
name|v
operator|.
name|getLength
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|parent
operator|.
name|incrementChild
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|readNodeId
parameter_list|()
block|{
name|int
name|offset
init|=
name|current
operator|.
name|start
argument_list|()
operator|+
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|START_ELEMENT
operator|||
name|state
operator|==
name|END_ELEMENT
condition|)
block|{
name|offset
operator|+=
name|ElementImpl
operator|.
name|LENGTH_ELEMENT_CHILD_COUNT
expr_stmt|;
block|}
specifier|final
name|int
name|dlnLen
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|current
operator|.
name|data
argument_list|()
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
expr_stmt|;
name|nodeId
operator|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|dlnLen
argument_list|,
name|current
operator|.
name|data
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|state
operator|!=
name|END_ELEMENT
condition|)
block|{
name|previous
operator|=
name|current
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|START_ELEMENT
operator|&&
operator|!
name|reportAttribs
condition|)
block|{
name|skipAttributes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|ElementEvent
name|parent
init|=
name|elementStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|getChildCount
argument_list|()
operator|==
name|parent
operator|.
name|getCurrentChild
argument_list|()
condition|)
block|{
name|elementStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|=
name|END_ELEMENT
expr_stmt|;
name|current
operator|=
name|parent
operator|.
name|data
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
else|else
block|{
name|parent
operator|.
name|incrementChild
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|state
operator|!=
name|START_DOCUMENT
operator|&&
operator|!
name|beforeRoot
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|boolean
name|first
init|=
name|state
operator|==
name|START_DOCUMENT
decl_stmt|;
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|initNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|&&
name|origin
operator|!=
literal|null
condition|)
block|{
name|verifyOriginNodeId
argument_list|()
expr_stmt|;
name|origin
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
specifier|protected
name|void
name|verifyOriginNodeId
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|origin
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Node got moved, we had the wrong address.  Resync iterator by nodeid.
name|LOG
operator|.
name|warn
argument_list|(
literal|"expected node id "
operator|+
name|origin
operator|.
name|getNodeId
argument_list|()
operator|+
literal|", got "
operator|+
name|nodeId
operator|+
literal|"; resyncing address"
argument_list|)
expr_stmt|;
name|origin
operator|.
name|setInternalAddress
argument_list|(
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|reportAttribsBackup
init|=
name|reportAttribs
decl_stmt|;
name|DocumentImpl
name|documentBackup
init|=
name|document
decl_stmt|;
try|try
block|{
name|iterator
operator|.
name|seek
argument_list|(
name|origin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Seeking the iterator might've reused this reader, so reset all fields.
name|reset
argument_list|()
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
name|elementStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reportAttribs
operator|=
name|reportAttribsBackup
expr_stmt|;
name|document
operator|=
name|documentBackup
expr_stmt|;
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|initNode
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|nodeId
operator|=
literal|null
expr_stmt|;
name|qname
operator|=
literal|null
expr_stmt|;
name|attributes
operator|=
literal|null
expr_stmt|;
name|text
operator|.
name|reuse
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|END_ELEMENT
condition|)
block|{
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nsRead
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|require
parameter_list|(
specifier|final
name|int
name|type
parameter_list|,
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
throws|throws
name|XMLStreamException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getElementText
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|getEventType
argument_list|()
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"parser must be on START_ELEMENT to read next text"
argument_list|)
throw|;
block|}
name|int
name|eventType
init|=
name|next
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|content
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|eventType
operator|!=
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|eventType
operator|==
name|CHARACTERS
operator|||
name|eventType
operator|==
name|CDATA
operator|||
name|eventType
operator|==
name|SPACE
operator|||
name|eventType
operator|==
name|ENTITY_REFERENCE
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|eventType
operator|==
name|PROCESSING_INSTRUCTION
operator|||
name|eventType
operator|==
name|COMMENT
condition|)
block|{
comment|// skipping
block|}
if|else if
condition|(
name|eventType
operator|==
name|END_DOCUMENT
condition|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"unexpected end of document when reading element text content"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|eventType
operator|==
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"element text content may not contain START_ELEMENT"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"Unexpected event type "
operator|+
name|eventType
argument_list|)
throw|;
block|}
name|eventType
operator|=
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|content
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getProperty
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|string
operator|.
name|equals
argument_list|(
name|PROPERTY_NODE_ID
argument_list|)
condition|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|readNodeId
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeId
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextTag
parameter_list|()
throws|throws
name|XMLStreamException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|XMLStreamException
block|{
return|return
name|state
operator|==
name|START_DOCUMENT
operator|||
name|beforeRoot
operator|||
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStartElement
parameter_list|()
block|{
return|return
name|state
operator|==
name|START_ELEMENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEndElement
parameter_list|()
block|{
return|return
name|state
operator|==
name|END_ELEMENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCharacters
parameter_list|()
block|{
return|return
name|state
operator|==
name|CHARACTERS
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWhiteSpace
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
name|readAttributes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
name|qn
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
name|qn
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
specifier|final
name|int
name|offset
init|=
name|current
operator|.
name|start
argument_list|()
operator|+
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
operator|+
name|ElementImpl
operator|.
name|LENGTH_ELEMENT_CHILD_COUNT
operator|+
name|NodeId
operator|.
name|LENGTH_NODE_ID_UNITS
operator|+
name|nodeId
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|current
operator|.
name|data
argument_list|()
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getAttributeName
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getQName
argument_list|(
name|index
argument_list|)
operator|.
name|toJavaQName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
name|getAttributeQName
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getQName
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getQName
argument_list|(
name|index
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getQName
argument_list|(
name|index
argument_list|)
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getQName
argument_list|(
name|index
argument_list|)
operator|.
name|getPrefix
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeType
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|type
init|=
name|attributes
operator|.
name|getType
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|AttrImpl
operator|.
name|getAttributeType
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getValue
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|getAttributeId
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|START_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at an element"
argument_list|)
throw|;
block|}
name|readAttributes
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|attributes
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
literal|"index should be< "
operator|+
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributes
operator|.
name|getNodeId
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNamespaceCount
parameter_list|()
block|{
name|readNamespaceDecls
argument_list|()
expr_stmt|;
return|return
name|namespaces
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|readNamespaceDecls
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>
name|namespaces
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
index|[]
name|decl
init|=
name|namespaces
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|decl
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|readNamespaceDecls
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>
name|namespaces
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
index|[]
name|decl
init|=
name|namespaces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|decl
index|[
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getEventType
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|XMLString
name|getXMLText
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|CHARACTERS
operator|||
name|state
operator|==
name|COMMENT
operator|||
name|state
operator|==
name|CDATA
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|AbstractCharacterData
operator|.
name|readData
argument_list|(
name|nodeId
argument_list|,
name|current
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
return|return
operator|new
name|XMLString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|getXMLText
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|char
index|[]
name|getTextCharacters
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|dst
init|=
operator|new
name|char
index|[
name|s
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|s
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|dst
operator|.
name|length
argument_list|,
name|dst
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|dst
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTextCharacters
parameter_list|(
specifier|final
name|int
name|sourceStart
parameter_list|,
specifier|final
name|char
index|[]
name|chars
parameter_list|,
specifier|final
name|int
name|targetStart
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|XMLStreamException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTextStart
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTextLength
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|CHARACTERS
operator|||
name|state
operator|==
name|COMMENT
operator|||
name|state
operator|==
name|CDATA
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|AbstractCharacterData
operator|.
name|getStringLength
argument_list|(
name|nodeId
argument_list|,
name|current
argument_list|)
return|;
block|}
return|return
name|text
operator|.
name|length
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasText
parameter_list|()
block|{
return|return
name|state
operator|==
name|CHARACTERS
operator|||
name|state
operator|==
name|COMMENT
operator|||
name|state
operator|==
name|CDATA
return|;
block|}
annotation|@
name|Override
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getName
parameter_list|()
block|{
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
return|return
name|qname
return|;
block|}
if|if
condition|(
name|state
operator|==
name|START_ELEMENT
operator|||
name|state
operator|==
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|readNodeId
argument_list|()
expr_stmt|;
block|}
name|qname
operator|=
name|ElementImpl
operator|.
name|readQName
argument_list|(
name|current
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|)
operator|.
name|toJavaQName
argument_list|()
expr_stmt|;
block|}
return|return
name|qname
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
name|getQName
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|START_ELEMENT
operator|||
name|state
operator|==
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|readNodeId
argument_list|()
expr_stmt|;
block|}
return|return
name|ElementImpl
operator|.
name|readQName
argument_list|(
name|current
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Read all namespace declarations defined on the current element.      * Cache them in the namespaces map.      */
specifier|private
name|void
name|readNamespaceDecls
parameter_list|()
block|{
if|if
condition|(
name|nsRead
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|state
operator|==
name|START_ELEMENT
operator|||
name|state
operator|==
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|readNodeId
argument_list|()
expr_stmt|;
block|}
name|ElementImpl
operator|.
name|readNamespaceDecls
argument_list|(
name|namespaces
argument_list|,
name|current
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|nsRead
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|getPrefix
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasName
parameter_list|()
block|{
return|return
operator|(
name|state
operator|==
name|START_ELEMENT
operator|||
name|state
operator|==
name|END_ELEMENT
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IStoredNode
name|getNode
parameter_list|()
block|{
specifier|final
name|IStoredNode
name|node
init|=
name|StoredNode
operator|.
name|deserialize
argument_list|(
name|current
operator|.
name|data
argument_list|()
argument_list|,
name|current
operator|.
name|start
argument_list|()
argument_list|,
name|current
operator|.
name|getLength
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|node
operator|.
name|setInternalAddress
argument_list|(
name|current
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|IStoredNode
name|getPreviousNode
parameter_list|()
block|{
specifier|final
name|StoredNode
name|node
init|=
name|StoredNode
operator|.
name|deserialize
argument_list|(
name|previous
operator|.
name|data
argument_list|()
argument_list|,
name|previous
operator|.
name|start
argument_list|()
argument_list|,
name|previous
operator|.
name|getLength
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|node
operator|.
name|setOwnerDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|node
operator|.
name|setInternalAddress
argument_list|(
name|previous
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStandalone
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|standaloneSet
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharacterEncodingScheme
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPITarget
parameter_list|()
block|{
name|readPI
argument_list|()
expr_stmt|;
return|return
name|qname
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPIData
parameter_list|()
block|{
name|readPI
argument_list|()
expr_stmt|;
return|return
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|readPI
parameter_list|()
block|{
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|state
operator|!=
name|PROCESSING_INSTRUCTION
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cursor is not at a processing instruction"
argument_list|)
throw|;
block|}
specifier|final
name|ProcessingInstruction
name|pi
init|=
operator|(
name|ProcessingInstruction
operator|)
name|StoredNode
operator|.
name|deserialize
argument_list|(
name|current
operator|.
name|data
argument_list|()
argument_list|,
name|current
operator|.
name|start
argument_list|()
argument_list|,
name|current
operator|.
name|getLength
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|pi
operator|.
name|getTarget
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|pi
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ElementEvent
block|{
specifier|private
specifier|final
name|Value
name|data
decl_stmt|;
specifier|private
specifier|final
name|int
name|childCount
decl_stmt|;
specifier|private
name|int
name|currentChild
init|=
literal|0
decl_stmt|;
specifier|public
name|ElementEvent
parameter_list|(
name|Value
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|childCount
operator|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|start
argument_list|()
operator|+
name|StoredNode
operator|.
name|LENGTH_SIGNATURE_LENGTH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Value
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|childCount
return|;
block|}
specifier|public
name|int
name|getCurrentChild
parameter_list|()
block|{
return|return
name|currentChild
return|;
block|}
specifier|public
name|void
name|incrementChild
parameter_list|()
block|{
name|currentChild
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

