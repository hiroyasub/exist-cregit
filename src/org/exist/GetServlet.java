begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Simple Servlet to retrieve a document from the repository.  *  * It accepts the following parameters to a get-request:  * - name      the document's name  * - indent    if set to true, enables pretty printing of xml output  * - encoding  set the character encoding of xml output  */
end_comment

begin_class
specifier|public
class|class
name|GetServlet
extends|extends
name|HttpServlet
block|{
specifier|protected
name|String
name|serverURI
init|=
literal|"http://localhost:8081"
decl_stmt|;
specifier|protected
name|XmlRpcClient
name|client
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|serverURI
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|=
operator|new
name|XmlRpcClient
argument_list|(
name|serverURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|mue
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"wrong url for init parameter \"server\""
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|String
name|document
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|indent
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|document
operator|=
name|request
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
name|int
name|p
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|document
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|)
operator|>=
literal|0
condition|)
name|document
operator|=
name|document
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|indent
operator|!=
literal|null
operator|&&
name|indent
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
name|params
operator|.
name|addElement
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"getDocument"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<h1>eXist error</h1>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<p>The server responded with an exception</p>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<p>"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

