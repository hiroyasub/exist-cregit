begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|DeferrableFilteringTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|utils
operator|.
name|ConverterFrom1_0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sax
operator|.
name|event
operator|.
name|SAXEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sax
operator|.
name|event
operator|.
name|contenthandler
operator|.
name|Characters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sax
operator|.
name|event
operator|.
name|contenthandler
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sax
operator|.
name|event
operator|.
name|contenthandler
operator|.
name|StartElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * Amongst other things, this trigger defers immediate updates to Principals  * (Accounts or Groups) until it has enough information to determine  * if such an update would cause a principal id or name collision.  *  * If a collision is detected, then it attempts to resolve the collision,  * before the deferred updates are applied.  *  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurationDocumentTrigger
extends|extends
name|DeferrableFilteringTrigger
block|{
specifier|private
specifier|final
specifier|static
name|String
name|ID_ATTR
init|=
literal|"id"
decl_stmt|;
specifier|protected
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
comment|/*     Used for holding a pre-allocated id for either an account or group     */
specifier|private
specifier|final
name|PreAllocatedIdReceiver
name|preAllocatedId
init|=
operator|new
name|PreAllocatedIdReceiver
argument_list|()
decl_stmt|;
comment|/*     Are we creating or updating a document?     */
specifier|private
name|boolean
name|createOrUpdate
init|=
literal|false
decl_stmt|;
comment|/*     Guard used to prevent processing group elements     within account elements as though they were standalone     group elements     */
specifier|private
name|boolean
name|processingAccount
init|=
literal|false
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|void
name|finish
parameter_list|(
specifier|final
name|int
name|event
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|XmldbURI
name|documentPath
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
name|Configuration
name|conf
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|REMOVE_DOCUMENT_EVENT
case|:
name|conf
operator|=
name|Configurator
operator|.
name|getConfigurtion
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|documentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|Configurator
operator|.
name|unregister
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//XXX: inform object that configuration was deleted
block|}
break|break;
default|default:
name|conf
operator|=
name|Configurator
operator|.
name|getConfigurtion
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|documentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|checkForUpdates
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|documentPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ConverterFrom1_0
operator|.
name|LEGACY_USERS_DOCUMENT_PATH
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|ConverterFrom1_0
operator|.
name|convert
argument_list|(
name|sm
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ? -pb
block|}
block|}
break|break;
block|}
block|}
specifier|private
name|void
name|checkForUpdates
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
specifier|final
name|Configuration
name|conf
init|=
name|Configurator
operator|.
name|getConfigurtion
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|checkForUpdates
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO : use XmldbURI methos ! not String.equals()
if|if
condition|(
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ConverterFrom1_0
operator|.
name|LEGACY_USERS_DOCUMENT_PATH
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|ConverterFrom1_0
operator|.
name|convert
argument_list|(
name|sm
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ? -pb
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
operator|.
name|createOrUpdate
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//check saving list
if|if
condition|(
name|Configurator
operator|.
name|saving
operator|.
name|contains
argument_list|(
name|Configurator
operator|.
name|getFullURI
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|checkForUpdates
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|uri
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|SecurityManager
operator|.
name|SECURITY_COLLECTION_URI
argument_list|)
condition|)
block|{
try|try
block|{
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|processPramatter
argument_list|(
name|broker
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Configuration can't be processed ["
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ? -pb
block|}
block|}
name|this
operator|.
name|broker
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|createOrUpdate
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
operator|.
name|createOrUpdate
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
comment|//check saving list
if|if
condition|(
name|Configurator
operator|.
name|saving
operator|.
name|contains
argument_list|(
name|Configurator
operator|.
name|getFullURI
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|XmldbURI
name|uri
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|SecurityManager
operator|.
name|SECURITY_COLLECTION_URI
argument_list|)
condition|)
block|{
try|try
block|{
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|processPramatterBeforeSave
argument_list|(
name|broker
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Configuration can't be processed ["
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ? -pb
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//check saving list
if|if
condition|(
name|Configurator
operator|.
name|saving
operator|.
name|contains
argument_list|(
name|Configurator
operator|.
name|getFullURI
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|checkForUpdates
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|uri
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|SecurityManager
operator|.
name|SECURITY_COLLECTION_URI
argument_list|)
condition|)
block|{
try|try
block|{
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|processPramatter
argument_list|(
name|broker
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Configuration can't be processed ["
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ? -pb
block|}
block|}
name|this
operator|.
name|broker
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|createOrUpdate
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|checkForUpdates
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|checkForUpdates
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|Configurator
operator|.
name|getConfigurtion
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|Configurator
operator|.
name|unregister
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//XXX: inform object that configuration was deleted
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocumentMetadata
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|txn
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|parent
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qname
parameter_list|,
specifier|final
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|createOrUpdate
operator|&&
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Configuration
operator|.
name|NS
argument_list|)
operator|&&
operator|(
operator|(
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|ACCOUNT
operator|.
name|getElementName
argument_list|()
argument_list|)
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|"id"
argument_list|)
operator|!=
literal|null
operator|)
operator|||
operator|(
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
operator|.
name|getElementName
argument_list|()
argument_list|)
operator|&&
operator|!
name|processingAccount
operator|)
operator|)
condition|)
block|{
name|processingAccount
operator|=
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|ACCOUNT
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
comment|//set group account/group guard
name|defer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
name|createOrUpdate
operator|&&
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Configuration
operator|.
name|NS
argument_list|)
operator|&&
operator|(
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|ACCOUNT
operator|.
name|getElementName
argument_list|()
argument_list|)
operator|||
operator|(
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|GROUP
operator|.
name|getElementName
argument_list|()
argument_list|)
operator|&&
operator|!
name|processingAccount
operator|)
operator|)
condition|)
block|{
comment|//we have now captured the entire account or group in our deferred queue,
comment|//so we can now process it in it's entirety
if|if
condition|(
name|processingAccount
condition|)
block|{
name|processPrincipal
argument_list|(
name|PrincipalType
operator|.
name|fromElementName
argument_list|(
name|localName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//stop deferring events and apply
name|defer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|PrincipalType
operator|.
name|ACCOUNT
operator|.
name|getElementName
argument_list|()
argument_list|)
condition|)
block|{
comment|//we are no longer processing an account
name|processingAccount
operator|=
literal|false
expr_stmt|;
comment|//reset account/group guard
block|}
block|}
block|}
comment|/**      * When configuring a Principal (Account or Group) we need to      * make sure of two things:      *      * 1) If the principal uses an old style id, i.e. before ACL Permissions      * were introduced then we have to modernise this id      *      * 2) If the principal uses a name or id which already exists in      * the database then we must avoid conflicts      */
specifier|private
name|void
name|processPrincipal
parameter_list|(
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|SAXEvent
name|firstEvent
init|=
name|deferred
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|firstEvent
operator|instanceof
name|StartElement
operator|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unbalanced SAX Events"
argument_list|)
throw|;
block|}
specifier|final
name|StartElement
name|start
init|=
operator|(
operator|(
name|StartElement
operator|)
name|firstEvent
operator|)
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|namespaceURI
operator|==
literal|null
operator|||
operator|!
name|start
operator|.
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Configuration
operator|.
name|NS
argument_list|)
operator|||
operator|!
name|start
operator|.
name|localName
operator|.
name|equals
argument_list|(
name|principalType
operator|.
name|getElementName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"First element does not match ending '"
operator|+
name|principalType
operator|.
name|getElementName
argument_list|()
operator|+
literal|"' element"
argument_list|)
throw|;
block|}
comment|//if needed, update old style id to new style id
specifier|final
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|(
name|migrateIdAttribute
argument_list|(
name|start
operator|.
name|attributes
argument_list|,
name|principalType
argument_list|)
argument_list|)
decl_stmt|;
comment|//check if there is a name collision, i.e. another principal with the same name
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|String
name|principalName
init|=
name|findName
argument_list|()
decl_stmt|;
comment|// first check if the account or group exists before trying to retrieve it
comment|// otherwise the LDAP realm will create a new user, leading to an endless loop
specifier|final
name|boolean
name|principalExists
init|=
name|principalName
operator|!=
literal|null
operator|&&
name|principalType
operator|.
name|hasPrincipal
argument_list|(
name|sm
argument_list|,
name|principalName
argument_list|)
decl_stmt|;
name|Principal
name|existingPrincipleByName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|principalExists
condition|)
block|{
name|existingPrincipleByName
operator|=
name|principalType
operator|.
name|getPrincipal
argument_list|(
name|sm
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|newId
decl_stmt|;
if|if
condition|(
name|existingPrincipleByName
operator|!=
literal|null
condition|)
block|{
comment|//use id of existing principal which has the same name
name|newId
operator|=
name|existingPrincipleByName
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//check if there is an id collision, i.e. another principal with the same id
specifier|final
name|Integer
name|id
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
name|ID_ATTR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|principalIdExists
init|=
name|principalType
operator|.
name|hasPrincipal
argument_list|(
name|sm
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Principal
name|existingPrincipalById
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|principalIdExists
condition|)
block|{
name|existingPrincipalById
operator|=
name|principalType
operator|.
name|getPrincipal
argument_list|(
name|sm
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingPrincipalById
operator|!=
literal|null
condition|)
block|{
comment|//pre-allocate a new id, so as not to collide with the existing principal
if|if
condition|(
name|isValidating
argument_list|()
condition|)
block|{
try|try
block|{
name|principalType
operator|.
name|preAllocateId
argument_list|(
name|sm
argument_list|,
name|preAllocatedId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unable to pre-allocate principle id for "
operator|+
name|principalType
operator|.
name|getElementName
argument_list|()
operator|+
literal|": "
operator|+
name|principalName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|newId
operator|=
name|preAllocatedId
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isValidating
argument_list|()
condition|)
block|{
name|preAllocatedId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|newId
operator|=
name|id
expr_stmt|;
comment|//use the provided id as it is currently unallocated
block|}
block|}
comment|//update attributes of the principal in deferred
name|attrs
operator|.
name|setValue
argument_list|(
name|attrs
operator|.
name|getIndex
argument_list|(
name|ID_ATTR
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|newId
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StartElement
name|prevPrincipalStart
init|=
operator|(
name|StartElement
operator|)
name|deferred
operator|.
name|poll
argument_list|()
decl_stmt|;
name|deferred
operator|.
name|addFirst
argument_list|(
operator|new
name|StartElement
argument_list|(
name|prevPrincipalStart
operator|.
name|namespaceURI
argument_list|,
name|prevPrincipalStart
operator|.
name|localName
argument_list|,
name|prevPrincipalStart
operator|.
name|qname
argument_list|,
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Migrates the id of a principal      *      * @param attrs The existing attributes of the principal      * @param principalType The type of the principal      *      * @return The updated attributes containing the new id      */
specifier|private
name|Attributes
name|migrateIdAttribute
parameter_list|(
specifier|final
name|Attributes
name|attrs
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
block|{
specifier|final
name|boolean
name|aclPermissionInUse
init|=
name|PermissionFactory
operator|.
name|getDefaultResourcePermission
argument_list|()
operator|instanceof
name|ACLPermission
decl_stmt|;
specifier|final
name|Attributes
name|newAttrs
decl_stmt|;
specifier|final
name|String
name|strId
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|ID_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclPermissionInUse
operator|&&
name|strId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Integer
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strId
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|newId
init|=
name|principalType
operator|.
name|migrateId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|newId
operator|!=
literal|null
condition|)
block|{
name|newAttrs
operator|=
operator|new
name|AttributesImpl
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AttributesImpl
operator|)
name|newAttrs
operator|)
operator|.
name|setValue
argument_list|(
name|newAttrs
operator|.
name|getIndex
argument_list|(
name|ID_ATTR
argument_list|)
argument_list|,
name|newId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newAttrs
operator|=
name|attrs
expr_stmt|;
block|}
block|}
else|else
block|{
name|newAttrs
operator|=
name|attrs
expr_stmt|;
block|}
return|return
name|newAttrs
return|;
block|}
comment|/**      * Attempts to find and extract the text value      * of the name element from the deferred elements      *      * @return The text value of the name element, or null otherwise      */
specifier|private
name|String
name|findName
parameter_list|()
block|{
name|boolean
name|inName
init|=
literal|false
decl_stmt|;
specifier|final
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|SAXEvent
argument_list|>
name|iterator
init|=
name|deferred
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|SAXEvent
name|event
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|Element
condition|)
block|{
specifier|final
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|namespaceURI
operator|!=
literal|null
operator|&&
name|element
operator|.
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Configuration
operator|.
name|NS
argument_list|)
operator|&&
name|element
operator|.
name|localName
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|inName
operator|=
operator|!
name|inName
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inName
operator|&&
name|event
operator|instanceof
name|Characters
condition|)
block|{
name|name
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Characters
operator|)
name|event
operator|)
operator|.
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|name
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Abstracts the difference between working      * with Accounts or Groups      */
specifier|private
enum|enum
name|PrincipalType
block|{
name|ACCOUNT
argument_list|(
literal|"account"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
operator|-
literal|1
argument_list|,
name|RealmImpl
operator|.
name|UNKNOWN_ACCOUNT_ID
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|0
argument_list|,
name|RealmImpl
operator|.
name|SYSTEM_ACCOUNT_ID
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|1
argument_list|,
name|RealmImpl
operator|.
name|ADMIN_ACCOUNT_ID
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|2
argument_list|,
name|RealmImpl
operator|.
name|GUEST_ACCOUNT_ID
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|GROUP
argument_list|(
literal|"group"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
operator|-
literal|1
argument_list|,
name|RealmImpl
operator|.
name|UNKNOWN_GROUP_ID
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|1
argument_list|,
name|RealmImpl
operator|.
name|DBA_GROUP_ID
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|2
argument_list|,
name|RealmImpl
operator|.
name|GUEST_GROUP_ID
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|elementName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|idMigration
decl_stmt|;
name|PrincipalType
parameter_list|(
specifier|final
name|String
name|elementName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|idMigration
parameter_list|)
block|{
name|this
operator|.
name|elementName
operator|=
name|elementName
expr_stmt|;
name|this
operator|.
name|idMigration
operator|=
name|idMigration
expr_stmt|;
block|}
comment|/**          * Get the local-name of the element          * for the principal          *          * @return The local-name of the element used          * in the persisted XML document for the principal          */
specifier|public
name|String
name|getElementName
parameter_list|()
block|{
return|return
name|elementName
return|;
block|}
comment|/**          * Looks up a new Id given an old Id.          *          * Old Id's were used prior to the introduction of          * ACL Permissions into eXist. Looking up          * a non-old id will return null;          *          * @param oldId The older id          *          * @return The new Id or null if there is no mapping from old to new          */
specifier|public
name|Integer
name|migrateId
parameter_list|(
specifier|final
name|Integer
name|oldId
parameter_list|)
block|{
return|return
name|idMigration
operator|.
name|get
argument_list|(
name|oldId
argument_list|)
return|;
block|}
comment|/**          * Gets a principal of this type from the SecurityManager by name          *          * @param sm An instance of the SecurityManager          * @param name The name of the principal          *          * @return A principal of this type, or null if there is no principal          * matching the provided name          */
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ACCOUNT
case|:
return|return
name|sm
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
return|;
case|case
name|GROUP
case|:
return|return
name|sm
operator|.
name|getGroup
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**          * Check if a user or group already exists (by name)          *          * @param sm          * @param name          * @return          */
specifier|public
name|boolean
name|hasPrincipal
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ACCOUNT
case|:
return|return
name|sm
operator|.
name|hasAccount
argument_list|(
name|name
argument_list|)
return|;
case|case
name|GROUP
case|:
return|return
name|sm
operator|.
name|hasGroup
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**          * Gets a principal of this type from the SecurityManager by id          *          * @param sm An instance of the SecurityManager          * @param id The id of the principal          *          * @return A principal of this type, or null if there is no principal          * matching the provided id          */
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|int
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ACCOUNT
case|:
return|return
name|sm
operator|.
name|getAccount
argument_list|(
name|id
argument_list|)
return|;
case|case
name|GROUP
case|:
return|return
name|sm
operator|.
name|getGroup
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**          * Check if a user or group already exists (by id)          *          * @param sm          * @param id          * @return          */
specifier|public
name|boolean
name|hasPrincipal
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|int
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ACCOUNT
case|:
return|return
name|sm
operator|.
name|hasUser
argument_list|(
name|id
argument_list|)
return|;
case|case
name|GROUP
case|:
return|return
name|sm
operator|.
name|hasGroup
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|preAllocateId
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|PreAllocatedIdReceiver
name|receiver
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ACCOUNT
case|:
name|sm
operator|.
name|preAllocateAccountId
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
break|break;
case|case
name|GROUP
case|:
name|sm
operator|.
name|preAllocateGroupId
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**          * Get the PrincipalType by its element name          *          * @return The PrincipalType for the element name          *          * @throws java.util.NoSuchElementException If there is no PrincipalType          * for the provided element name          */
specifier|public
specifier|static
name|PrincipalType
name|fromElementName
parameter_list|(
specifier|final
name|String
name|elementName
parameter_list|)
block|{
for|for
control|(
specifier|final
name|PrincipalType
name|pt
range|:
name|PrincipalType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|pt
operator|.
name|getElementName
argument_list|()
operator|.
name|equals
argument_list|(
name|elementName
argument_list|)
condition|)
block|{
return|return
name|pt
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No PrincipalType with element name: "
operator|+
name|elementName
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|PreAllocatedIdReceiver
implements|implements
name|SecurityManager
operator|.
name|PrincipalIdReceiver
block|{
name|Integer
name|id
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|allocate
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|int
name|getId
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Id has not been allocated"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|id
return|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|id
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

