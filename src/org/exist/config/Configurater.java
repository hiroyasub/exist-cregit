begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationField
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Configurater
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Configurater
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|getProperyFieldMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
name|map
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|link
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationField
operator|.
name|class
argument_list|)
condition|)
block|{
name|link
operator|.
name|put
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationField
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|link
return|;
block|}
specifier|public
specifier|static
name|boolean
name|configure
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|ConfigElement
name|configuration
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"no configuration name at "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
return|return
name|configureByCurrent
argument_list|(
name|instance
argument_list|,
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|configName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|configureByCurrent
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|ConfigElement
name|configuration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|properyFieldMap
init|=
name|getProperyFieldMap
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"no properties for "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|+
literal|" @ "
operator|+
name|configuration
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
operator|!
name|properyFieldMap
operator|.
name|containsKey
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unused property "
operator|+
name|property
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Field
name|field
init|=
name|properyFieldMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Integer"
argument_list|)
condition|)
block|{
name|Integer
name|value
init|=
name|configuration
operator|.
name|getPropertyInteger
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Boolean"
argument_list|)
condition|)
block|{
name|Boolean
name|value
init|=
name|configuration
operator|.
name|getPropertyBoolean
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported configuration value type "
operator|+
name|field
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"configuration error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"security error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

