begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2012 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Forward reference resolver universal implementation.  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|ReferenceImpl
parameter_list|<
name|R
parameter_list|,
name|O
extends|extends
name|Configurable
parameter_list|>
implements|implements
name|Reference
argument_list|<
name|R
argument_list|,
name|O
argument_list|>
implements|,
name|Configurable
block|{
specifier|private
name|R
name|resolver
decl_stmt|;
specifier|private
name|String
name|methodName
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|O
name|cached
init|=
literal|null
decl_stmt|;
specifier|public
name|ReferenceImpl
parameter_list|(
name|R
name|resolver
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * @deprecated Use ReferenceImpl(R, O, String) instead          */
annotation|@
name|Deprecated
specifier|public
name|ReferenceImpl
parameter_list|(
name|R
name|resolver
parameter_list|,
name|O
name|cached
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cached
operator|=
name|cached
expr_stmt|;
block|}
specifier|public
name|ReferenceImpl
parameter_list|(
name|R
name|resolver
parameter_list|,
name|O
name|cached
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|cached
operator|=
name|cached
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|O
name|resolve
parameter_list|()
block|{
if|if
condition|(
name|cached
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
try|try
block|{
name|cached
operator|=
operator|(
name|O
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|resolver
argument_list|,
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cached
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|return
name|cached
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|resolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
name|O
name|obj
init|=
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|obj
operator|.
name|isConfigured
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
name|O
name|obj
init|=
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|obj
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
block|}
end_class

end_unit

