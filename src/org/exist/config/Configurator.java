begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationReferenceBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Configurator
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Configurator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ConcurrentMap
argument_list|<
name|XmldbURI
argument_list|,
name|Configuration
argument_list|>
name|hotConfigs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|XmldbURI
argument_list|,
name|Configuration
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|getProperyFieldMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
name|map
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|link
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|link
operator|.
name|put
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldAsAttribute
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
name|link
operator|.
name|put
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//if (superClass.getAnnotation(ConfigurationClass.class).value().equals( clazz.getAnnotation(ConfigurationClass.class).value() ))
name|link
operator|.
name|putAll
argument_list|(
name|getProperyFieldMap
argument_list|(
name|superClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|link
return|;
block|}
specifier|public
specifier|static
name|Method
name|searchForSetMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
try|try
block|{
name|String
name|methodName
init|=
literal|"set"
operator|+
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|methodName
operator|=
name|methodName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
return|return
name|method
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|//Nothing to do
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|//Nothing to do
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Method
name|searchForAddMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|property
parameter_list|)
block|{
try|try
block|{
name|String
name|methodName
init|=
literal|"add"
operator|+
name|property
decl_stmt|;
name|methodName
operator|=
name|methodName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
comment|//&& method.getParameterTypes()[0].getName().equals("org.exist.config.Configuration")
condition|)
return|return
name|method
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|//Nothing to do
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|//Nothing to do
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|configure
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//LOG.info("no configuration name at "+instance.getClass());
return|return
literal|null
return|;
block|}
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"no configuration ["
operator|+
name|configName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|config
operator|instanceof
name|ConfigurationImpl
condition|)
block|{
name|ConfigurationImpl
name|impl
init|=
operator|(
name|ConfigurationImpl
operator|)
name|config
decl_stmt|;
comment|//XXX: lock issue here, fix it
name|Configurable
name|configurable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|impl
operator|.
name|configuredObjectReference
operator|!=
literal|null
condition|)
name|configurable
operator|=
name|impl
operator|.
name|configuredObjectReference
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|configurable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configurable
operator|!=
name|instance
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration can't be used by "
operator|+
name|instance
operator|+
literal|", "
operator|+
literal|"because allready in use by "
operator|+
name|configurable
argument_list|)
throw|;
block|}
else|else
name|impl
operator|.
name|configuredObjectReference
operator|=
operator|new
name|WeakReference
argument_list|<
name|Configurable
argument_list|>
argument_list|(
name|instance
argument_list|)
expr_stmt|;
comment|//end (lock issue)
block|}
return|return
name|configureByCurrent
argument_list|(
name|instance
argument_list|,
name|config
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Configuration
name|configureByCurrent
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|properyFieldMap
init|=
name|getProperyFieldMap
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//LOG.info("no properties for "+instance.getClass()+" @ "+configuration);
return|return
name|configuration
return|;
block|}
comment|//process simple types: String, int, long, boolean
for|for
control|(
name|String
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
operator|!
name|properyFieldMap
operator|.
name|containsKey
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unused property "
operator|+
name|property
operator|+
literal|" @"
operator|+
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Field
name|field
init|=
name|properyFieldMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
block|{
name|value
operator|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Integer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
condition|)
block|{
name|String
name|settings
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|int
name|radix
init|=
literal|10
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|startsWith
argument_list|(
literal|"radix="
argument_list|)
condition|)
block|{
name|radix
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|configuration
operator|.
name|getPropertyInteger
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Long"
argument_list|)
condition|)
block|{
name|value
operator|=
name|configuration
operator|.
name|getPropertyLong
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Boolean"
argument_list|)
condition|)
block|{
name|value
operator|=
name|configuration
operator|.
name|getPropertyBoolean
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
comment|//skip, it will be processed as structure
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"org.exist.xmldb.XmldbURI"
argument_list|)
condition|)
block|{
name|value
operator|=
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
operator|.
name|create
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"org.exist.security.realm.ldap.LdapContextFactory"
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|ldap
operator|.
name|LdapContextFactory
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"skip unsupported configuration value type "
operator|+
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
condition|)
block|{
name|Method
name|method
init|=
name|searchForSetMethod
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|method
operator|==
literal|null
condition|)
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"configuration error: \n"
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|" property: "
operator|+
name|property
operator|+
literal|"\n"
operator|+
literal|" message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw configuration error
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"security error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw configuration error
block|}
block|}
comment|//process simple structures: List
try|try
block|{
for|for
control|(
name|Field
name|field
range|:
name|properyFieldMap
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wrong annotation for structure: "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|", list can't be configurated throw attribute."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|confName
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Configurable
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Configurable
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|String
name|referenceBy
decl_stmt|;
name|List
argument_list|<
name|Configuration
argument_list|>
name|confs
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
condition|)
block|{
name|confs
operator|=
name|configuration
operator|.
name|getConfigurations
argument_list|(
name|confName
argument_list|)
expr_stmt|;
name|referenceBy
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
name|configuration
operator|.
name|getConfigurations
argument_list|(
name|confName
argument_list|)
expr_stmt|;
name|referenceBy
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Configurable
argument_list|>
argument_list|(
name|confs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|!=
literal|null
condition|)
block|{
comment|//remove& update
for|for
control|(
name|Iterator
argument_list|<
name|Configurable
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Configurable
name|obj
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Configuration
name|current_conf
init|=
name|obj
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|current_conf
operator|==
literal|null
condition|)
block|{
comment|//skip internal staff
if|if
condition|(
name|obj
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
condition|)
block|{
comment|//TODO: static list
continue|continue;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unconfigured instance ["
operator|+
name|obj
operator|+
literal|"], remove the object."
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Configuration
argument_list|>
name|i
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Configuration
name|conf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|current_conf
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|current_conf
operator|.
name|checkForUpdates
argument_list|(
name|conf
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration was removed, remove the object ["
operator|+
name|obj
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|//create
for|for
control|(
name|Configuration
name|conf
range|:
name|confs
control|)
block|{
if|if
condition|(
name|referenceBy
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|referenceBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Method
name|method
init|=
name|searchForAddMethod
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|confName
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|//TODO: AddMethod with Configuration argument
block|}
name|String
name|id
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Subconfiguration must have id ["
operator|+
name|conf
operator|+
literal|"], skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|clazzName
init|=
literal|"org.exist.security.realm."
operator|+
name|id
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|id
operator|+
literal|"Realm"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|Configurable
argument_list|>
name|constructor
init|=
operator|(
name|Constructor
argument_list|<
name|Configurable
argument_list|>
operator|)
name|clazz
operator|.
name|getConstructor
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|constructor
operator|.
name|newInstance
argument_list|(
name|instance
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class ["
operator|+
name|clazzName
operator|+
literal|"] not found, skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Security exception on class ["
operator|+
name|clazzName
operator|+
literal|"] creation, skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class ["
operator|+
name|clazzName
operator|+
literal|"] constructor not found, skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Instantiation exception on class ["
operator|+
name|clazzName
operator|+
literal|"] creation, skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invocation target exception on class ["
operator|+
name|clazzName
operator|+
literal|"] creation, skip instance creation."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|configuration
return|;
block|}
comment|//public static Configuration parse(InputStream is) throws ExceptionConfiguration {
comment|//throw new ExceptionConfiguration("parser was not implemented");
comment|//}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|ConfigurationException
block|{
try|try
block|{
return|return
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//public static Configuration parseDefault() throws ExceptionConfiguration {
comment|//throw new ExceptionConfiguration("default configuration parser was not implemented");
comment|//}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|ConfigurationException
block|{
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigurationImpl
argument_list|(
operator|(
name|ElementAtExist
operator|)
name|adapter
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Configuration
name|parseDefault
parameter_list|()
throws|throws
name|ConfigurationException
block|{
try|try
block|{
return|return
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
literal|"conf.xml"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|asXMLtoBuffer
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|StringBuilder
name|buf
parameter_list|,
name|String
name|referenceBy
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
comment|//UNDERSTAND: throw exception
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|properyFieldMap
init|=
name|getProperyFieldMap
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|field
init|=
name|properyFieldMap
operator|.
name|get
argument_list|(
name|referenceBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Reference field '"
operator|+
name|referenceBy
operator|+
literal|"' can't be found for class '"
operator|+
name|clazz
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
decl_stmt|;
try|try
block|{
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Reference field '"
operator|+
name|referenceBy
operator|+
literal|"' for class '"
operator|+
name|clazz
operator|+
literal|"' is NULL"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
block|{
name|value
operator|=
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported reference field type '"
operator|+
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
comment|//open tag
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|configName
argument_list|)
expr_stmt|;
comment|//buf.append(" xmlns='");
comment|//buf.append(Configuration.NS_REF);
comment|//buf.append("'");
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|referenceBy
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"'/>"
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|asXMLtoBuffer
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
comment|//UNDERSTAND: throw exception
block|}
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
comment|//open tag
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" xmlns='"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Configuration
operator|.
name|NS
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|StringBuilder
name|bufContext
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|bufferToUse
decl_stmt|;
name|boolean
name|simple
init|=
literal|true
decl_stmt|;
comment|//store field's values as attributes or elements depends on annotation
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|properyFieldMap
init|=
name|getProperyFieldMap
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|entry
range|:
name|properyFieldMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|simple
operator|=
literal|true
expr_stmt|;
specifier|final
name|Field
name|field
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|//skip null values
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|storeAsAttribute
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
name|storeAsAttribute
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|referenceBy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
condition|)
block|{
name|referenceBy
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storeAsAttribute
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|bufferToUse
operator|=
name|buf
expr_stmt|;
block|}
else|else
block|{
name|bufferToUse
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
block|{
name|bufferToUse
operator|.
name|append
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Integer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
condition|)
block|{
name|String
name|settings
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|int
name|radix
init|=
literal|10
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|startsWith
argument_list|(
literal|"radix="
argument_list|)
condition|)
block|{
try|try
block|{
name|radix
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//UNDERSTAND: ignore, set back to default or throw error?
name|radix
operator|=
literal|10
expr_stmt|;
block|}
block|}
name|bufferToUse
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|radix
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bufferToUse
operator|.
name|append
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Long"
argument_list|)
condition|)
block|{
name|bufferToUse
operator|.
name|append
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Boolean"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
condition|)
block|{
name|bufferToUse
operator|.
name|append
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bufferToUse
operator|.
name|append
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
name|simple
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|Configurable
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Configurable
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
for|for
control|(
name|Configurable
name|el
range|:
name|list
control|)
block|{
if|if
condition|(
name|referenceBy
operator|==
literal|null
condition|)
block|{
name|asXMLtoBuffer
argument_list|(
name|el
argument_list|,
name|bufferToUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|asXMLtoBuffer
argument_list|(
name|el
argument_list|,
name|bufferToUse
argument_list|,
name|referenceBy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"field '"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"' have unsupported type ["
operator|+
name|typeName
operator|+
literal|"] - skiped"
argument_list|)
expr_stmt|;
comment|//unsupported type - skip
comment|//buf.append(field.get(instance));
block|}
if|if
condition|(
name|storeAsAttribute
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bufferToUse
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|simple
condition|)
block|{
name|bufContext
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|bufContext
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|bufContext
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|bufContext
operator|.
name|append
argument_list|(
name|bufferToUse
argument_list|)
expr_stmt|;
if|if
condition|(
name|simple
condition|)
block|{
name|bufContext
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|bufContext
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|bufContext
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|bufContext
argument_list|)
expr_stmt|;
comment|//close tag
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|fileURL
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Configuration
name|conf
decl_stmt|;
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
name|conf
operator|=
name|hotConfigs
operator|.
name|get
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|fileURL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
return|return
name|conf
return|;
comment|//XXX: locking required
name|DocumentAtExist
name|document
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|fileURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|broker
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
comment|//database in read-only mode& there no configuration file,
comment|//create in memory document& configuration
try|try
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|asXMLtoBuffer
argument_list|(
name|instance
argument_list|,
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
name|document
operator|=
name|save
argument_list|(
name|instance
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|,
name|fileURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
comment|//throw new ConfigurationException("The configuration file can't be found, url = "+collection.getURI().append(fileURL));
name|ElementAtExist
name|confElement
init|=
operator|(
name|ElementAtExist
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|confElement
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
comment|//throw new ConfigurationException("The configuration file is empty, url = "+collection.getURI().append(fileURL));
name|conf
operator|=
operator|new
name|ConfigurationImpl
argument_list|(
name|confElement
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
name|hotConfigs
operator|.
name|put
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|DocumentAtExist
name|document
parameter_list|)
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Configuration
name|conf
decl_stmt|;
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
name|conf
operator|=
name|hotConfigs
operator|.
name|get
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
return|return
name|conf
return|;
name|ElementAtExist
name|confElement
init|=
operator|(
name|ElementAtExist
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|confElement
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
comment|//throw new ConfigurationException("The configuration file is empty, url = "+collection.getURI().append(fileURL));
name|conf
operator|=
operator|new
name|ConfigurationImpl
argument_list|(
name|confElement
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
name|hotConfigs
operator|.
name|put
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|DocumentAtExist
name|save
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|BrokerPool
name|database
decl_stmt|;
try|try
block|{
name|database
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|database
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collection URI = "
operator|+
name|uri
operator|.
name|removeLastSegment
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
return|return
name|save
argument_list|(
name|instance
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|database
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|DocumentAtExist
name|save
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|asXMLtoBuffer
argument_list|(
name|instance
argument_list|,
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|BrokerPool
name|pool
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"STORING CONFIGURATION collection = "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
operator|+
literal|" document = "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|Subject
name|currentUser
init|=
name|broker
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|txn
operator|.
name|acquireLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|uri
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
init|=
name|info
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setPermissions
argument_list|(
literal|0770
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MAJOR_SYNC
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
for|for
control|(
name|Configuration
name|conf
range|:
name|hotConfigs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|conf
operator|instanceof
name|ConfigurationImpl
condition|)
block|{
operator|(
operator|(
name|ConfigurationImpl
operator|)
name|conf
operator|)
operator|.
name|configuredObjectReference
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|hotConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|unregister
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
return|return;
synchronized|synchronized
init|(
name|hotConfigs
init|)
block|{
if|if
condition|(
name|hotConfigs
operator|.
name|containsValue
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|XmldbURI
argument_list|,
name|Configuration
argument_list|>
name|entry
range|:
name|hotConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
name|configuration
condition|)
block|{
name|hotConfigs
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

