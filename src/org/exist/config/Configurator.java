begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Configurator
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|Configurable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|getProperyFieldMap
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
name|map
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|link
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationField
operator|.
name|class
argument_list|)
condition|)
block|{
name|link
operator|.
name|put
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationField
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|superClass
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
condition|)
name|link
operator|.
name|putAll
argument_list|(
name|getProperyFieldMap
argument_list|(
name|superClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|link
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|configure
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//LOG.info("no configuration name at "+instance.getClass());
return|return
literal|null
return|;
block|}
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"no configuration ["
operator|+
name|configName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|configureByCurrent
argument_list|(
name|instance
argument_list|,
name|config
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Configuration
name|configureByCurrent
parameter_list|(
name|Configurable
name|instance
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|properyFieldMap
init|=
name|getProperyFieldMap
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//LOG.info("no properties for "+instance.getClass()+" @ "+configuration);
return|return
name|configuration
return|;
block|}
for|for
control|(
name|String
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
operator|!
name|properyFieldMap
operator|.
name|containsKey
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unused property "
operator|+
name|property
operator|+
literal|" @"
operator|+
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Field
name|field
init|=
name|properyFieldMap
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.String"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Integer"
argument_list|)
condition|)
block|{
name|Integer
name|value
init|=
name|configuration
operator|.
name|getPropertyInteger
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Long"
argument_list|)
condition|)
block|{
name|Long
name|value
init|=
name|configuration
operator|.
name|getPropertyLong
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"java.lang.Boolean"
argument_list|)
condition|)
block|{
name|Boolean
name|value
init|=
name|configuration
operator|.
name|getPropertyBoolean
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsupported configuration value type "
operator|+
name|field
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"configuration error: \n"
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|" property: "
operator|+
name|property
operator|+
literal|"\n"
operator|+
literal|" message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw configuration error
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"security error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw configuration error
block|}
block|}
return|return
name|configuration
return|;
block|}
comment|//	public static Configuration parse(InputStream is) throws ExceptionConfiguration {
comment|//		throw new ExceptionConfiguration("parser was not implemented");
comment|//	}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|ExceptionConfiguration
block|{
try|try
block|{
return|return
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionConfiguration
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//	public static Configuration parseDefault() throws ExceptionConfiguration {
comment|//		throw new ExceptionConfiguration("default configuration parser was not implemented");
comment|//	}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|ExceptionConfiguration
block|{
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigurationImpl
argument_list|(
operator|(
name|ElementAtExist
operator|)
name|adapter
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionConfiguration
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionConfiguration
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionConfiguration
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Configuration
name|parseDefault
parameter_list|()
throws|throws
name|ExceptionConfiguration
block|{
try|try
block|{
return|return
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
literal|"conf.xml"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionConfiguration
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

