begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2013 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldSettings
operator|.
name|SettingKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
operator|.
name|ConsumerE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|FullXmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * This class handle all configuration needs: extracting and saving,  * reconfiguring& etc.  *  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Configurator
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Configurator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|FullXmldbURI
argument_list|,
name|Configuration
argument_list|>
name|hotConfigs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|AFields
name|getConfigurationAnnotatedFields
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|AFields
name|fields
init|=
operator|new
name|AFields
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|fields
operator|.
name|addAttribute
argument_list|(
operator|new
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldAsAttribute
operator|.
name|class
argument_list|)
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
name|fields
operator|.
name|addElement
argument_list|(
operator|new
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//XXX: remove? this force to have annotation at superclass
specifier|final
name|AFields
name|superFields
init|=
name|getConfigurationAnnotatedFields
argument_list|(
name|superClass
argument_list|)
decl_stmt|;
name|fields
operator|.
name|addAllAttributes
argument_list|(
name|superFields
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addAllElements
argument_list|(
name|superFields
operator|.
name|getElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|getAnnotation
parameter_list|(
name|Field
name|field
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
name|field
operator|.
name|getAnnotation
argument_list|(
name|annotation
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Finds the Getter Method for the named property of a class      *      * @param clazz The class of methods to search      * @param property The named property in the class to find a getter method for      *      * @return The Getter method for the property or null      */
specifier|public
specifier|static
name|Method
name|searchForGetMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|property
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|methodName
init|=
operator|(
literal|"get"
operator|+
name|property
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ncdfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ncdfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ncdfe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the Setter Method for a class field      *      * @param clazz The class of methods to search      * @param field The field in the class to find a setter method for      *      * @return The Setter method for the field or null      */
specifier|public
specifier|static
name|Method
name|searchForSetMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|methodName
init|=
operator|(
literal|"set"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ncdfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ncdfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ncdfe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the Adder Method for the named property of a class      *      * @param clazz The class of methods to search      * @param property The named property in the class to find an adder method for. e.g. if the property is "cog" then we find the method "void addCog(Cog cog)"      *      * @return The Adder method for the property or null      */
specifier|public
specifier|static
name|Method
name|searchForAddMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|property
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|methodName
init|=
operator|(
literal|"add"
operator|+
name|property
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ncdfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ncdfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ncdfe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Method
name|searchForInsertMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|property
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|methodName
init|=
operator|(
literal|"insert"
operator|+
name|property
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|2
operator|&&
name|int
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ncdfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ncdfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ncdfe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|configure
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Instance '"
operator|+
name|instance
operator|+
literal|"' is missing annotation '@org.exist.config.annotation.ConfigurationClass'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw new ConfigurationException("Instance '"+instance+"' don't have annotaion 'ConfigurationClass'");
block|}
specifier|final
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No configuration ["
operator|+
name|configName
operator|+
literal|"] found for ["
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//XXX: throw new ConfigurationException("No configuration [" + configName + "]");
block|}
if|if
condition|(
name|config
operator|instanceof
name|ConfigurationImpl
condition|)
block|{
specifier|final
name|ConfigurationImpl
name|impl
init|=
operator|(
name|ConfigurationImpl
operator|)
name|config
decl_stmt|;
comment|//XXX: lock issue here, fix it
name|Configurable
name|configurable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|impl
operator|.
name|configuredObjectReference
operator|!=
literal|null
condition|)
block|{
name|configurable
operator|=
name|impl
operator|.
name|configuredObjectReference
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|configurable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configurable
operator|!=
name|instance
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration can't be used by "
operator|+
name|instance
operator|+
literal|", "
operator|+
literal|"because already in use by "
operator|+
name|configurable
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|impl
operator|.
name|configuredObjectReference
operator|=
operator|new
name|WeakReference
argument_list|<
name|Configurable
argument_list|>
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
comment|//end (lock issue)
block|}
try|try
block|{
return|return
name|configureByCurrent
argument_list|(
name|instance
argument_list|,
name|config
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|instanceof
name|ConfigurationImpl
condition|)
block|{
specifier|final
name|ConfigurationImpl
name|impl
init|=
operator|(
name|ConfigurationImpl
operator|)
name|config
decl_stmt|;
name|impl
operator|.
name|configuredObjectReference
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|config
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
comment|//XXX: must be exception
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Configuration
name|configureByCurrent
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
specifier|final
name|AFields
name|annotatedFields
init|=
name|getConfigurationAnnotatedFields
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|configuration
return|;
block|}
comment|//process simple types: String, int, long, boolean
for|for
control|(
specifier|final
name|String
name|property
range|:
name|properties
control|)
block|{
specifier|final
name|AField
name|annotatedField
init|=
name|annotatedFields
operator|.
name|findByAnnotationValue
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotatedField
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unused property "
operator|+
name|property
operator|+
literal|" @"
operator|+
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Field
name|field
init|=
name|annotatedField
operator|.
name|getField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|NewClass
name|newClass
init|=
name|getAnnotation
argument_list|(
name|field
argument_list|,
name|NewClass
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|newClass
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|mapper
operator|.
name|Constructor
operator|.
name|load
argument_list|(
name|newClass
argument_list|,
name|instance
argument_list|,
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|String
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//String
name|value
operator|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|int
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Integer
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//int or Integer
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|String
name|settings
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|SettingKey
name|settingKey
init|=
name|SettingKey
operator|.
name|forSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|settingKey
operator|==
name|SettingKey
operator|.
name|RADIX
condition|)
block|{
specifier|final
name|int
name|radix
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|settingKey
operator|.
name|extractValueFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|settingKey
operator|==
name|SettingKey
operator|.
name|OCTAL_STRING
condition|)
block|{
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//ignore
continue|continue;
block|}
block|}
else|else
block|{
name|value
operator|=
name|configuration
operator|.
name|getPropertyInteger
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|long
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Long
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//long or Long
name|value
operator|=
name|configuration
operator|.
name|getPropertyLong
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|boolean
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Boolean
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//boolean or Boolean
name|value
operator|=
name|configuration
operator|.
name|getPropertyBoolean
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Map
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//Map
comment|//skip contents, they will be processed as structure in the next loop on ConfigurationFieldAsElement
name|value
operator|=
name|configuration
operator|.
name|getPropertyMap
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|List
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//List
comment|//skip, will be processed as structure in the next loop on ConfigurationFieldAsElement
comment|//TODO what about simple generic types?
block|}
if|else if
condition|(
name|XmldbURI
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//use annotation ConfigurationFieldClassMask
name|value
operator|=
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
operator|.
name|create
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Configuration
name|conf
init|=
name|configuration
operator|.
name|getConfiguration
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
name|value
operator|=
name|create
argument_list|(
name|conf
argument_list|,
name|instance
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
condition|)
block|{
name|Method
name|method
init|=
name|searchForSetMethod
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Configuration error: "
operator|+
name|EOL
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
name|EOL
operator|+
literal|" property: "
operator|+
name|property
operator|+
name|EOL
operator|+
literal|" message: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
throw|;
comment|//                return null; //XXX: throw configuration error
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|iae
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Security error: "
operator|+
name|EOL
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
name|EOL
operator|+
literal|" property: "
operator|+
name|property
operator|+
name|EOL
operator|+
literal|" message: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
throw|;
comment|//                LOG.error("Security error: " + iae.getMessage(), iae);
comment|//                return null; //XXX: throw configuration error
block|}
block|}
comment|//process simple structures: List
name|Field
name|field
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
range|:
name|annotatedFields
operator|.
name|getElements
argument_list|()
control|)
block|{
name|field
operator|=
name|element
operator|.
name|getField
argument_list|()
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
comment|//List
specifier|final
name|String
name|confName
init|=
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|referenceBy
decl_stmt|;
name|List
argument_list|<
name|Configuration
argument_list|>
name|confs
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
condition|)
block|{
name|confs
operator|=
name|configuration
operator|.
name|getConfigurations
argument_list|(
name|confName
argument_list|)
expr_stmt|;
name|referenceBy
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
name|configuration
operator|.
name|getConfigurations
argument_list|(
name|confName
argument_list|)
expr_stmt|;
name|referenceBy
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Configurable
argument_list|>
argument_list|(
name|confs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|!=
literal|null
condition|)
block|{
comment|//remove& update
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removed
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//referencedBy -> index
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|obj
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Configuration
name|current_conf
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Configurable
operator|)
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|//TODO Surely we should log a problem here or throw an exception?
continue|continue;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Reference
condition|)
block|{
if|if
condition|(
operator|!
name|referenceBy
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"illegal design '"
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
literal|"' ["
operator|+
name|field
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
specifier|final
name|String
name|name
init|=
operator|(
operator|(
name|Reference
operator|)
name|obj
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//Lookup for new configuration, update if found
specifier|final
name|List
argument_list|<
name|Configuration
argument_list|>
name|applicableConfs
init|=
name|filter
argument_list|(
name|confs
argument_list|,
name|conf
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getPropertyBoolean
argument_list|(
name|referenceBy
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|value
lambda|->
operator|!
name|value
operator|.
name|equals
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicableConfs
operator|.
name|size
argument_list|()
operator|==
name|confs
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuration was removed, will attempt to replace object ["
operator|+
name|obj
operator|+
literal|"]."
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|referee
init|=
name|getFieldRecursive
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|referenceBy
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|referee
operator|!=
literal|null
condition|)
block|{
name|referee
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removed
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|referee
operator|.
name|get
argument_list|(
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not lookup referenced field: "
operator|+
name|referenceBy
operator|.
name|get
argument_list|()
operator|+
literal|" against: "
operator|+
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|confs
operator|=
name|applicableConfs
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|current_conf
operator|=
operator|(
operator|(
name|Configurable
operator|)
name|obj
operator|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|current_conf
operator|==
literal|null
condition|)
block|{
comment|//skip internal staff //TODO: static list
if|if
condition|(
name|obj
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unconfigured instance ["
operator|+
name|obj
operator|+
literal|"], will attempt to replace object..."
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|referee
init|=
name|getFieldRecursive
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|referenceBy
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|referee
operator|!=
literal|null
condition|)
block|{
name|referee
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removed
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|referee
operator|.
name|get
argument_list|(
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not lookup referenced field: "
operator|+
name|referenceBy
operator|.
name|get
argument_list|()
operator|+
literal|" against: "
operator|+
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|//Lookup for new configuration, update if found
specifier|final
name|Configuration
name|final_current_conf
init|=
name|current_conf
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Configuration
argument_list|>
name|applicableConfs
init|=
name|filter
argument_list|(
name|confs
argument_list|,
name|conf
lambda|->
operator|!
name|final_current_conf
operator|.
name|equals
argument_list|(
name|conf
argument_list|,
name|referenceBy
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicableConfs
operator|.
name|size
argument_list|()
operator|==
name|confs
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuration was removed, will attempt to replace ["
operator|+
name|obj
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|removed
operator|.
name|put
argument_list|(
operator|(
operator|(
name|Configurable
operator|)
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|referenceBy
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
name|applicableConfs
expr_stmt|;
block|}
block|}
comment|//create
for|for
control|(
specifier|final
name|Configuration
name|conf
range|:
name|confs
control|)
block|{
if|if
condition|(
name|referenceBy
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|referenceBy
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|ConsumerE
argument_list|<
name|String
argument_list|,
name|ReflectiveOperationException
argument_list|>
argument_list|>
name|updateFn
init|=
name|updateListFn
argument_list|(
name|instance
argument_list|,
name|confName
argument_list|,
name|removed
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updateFn
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not insert configured object"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|updateFn
operator|.
name|get
argument_list|()
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
specifier|final
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not update "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for configuration '"
operator|+
name|conf
operator|.
name|getName
argument_list|()
operator|+
literal|"' referenceBy '"
operator|+
name|referenceBy
operator|.
name|get
argument_list|()
operator|+
literal|"' for value '"
operator|+
name|value
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
specifier|final
name|Type
name|genericType
init|=
name|field
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"java.util.List<java.lang.String>"
operator|.
name|equals
argument_list|(
name|genericType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|ConsumerE
argument_list|<
name|String
argument_list|,
name|ReflectiveOperationException
argument_list|>
argument_list|>
name|updateFn
init|=
name|updateListFn
argument_list|(
name|instance
argument_list|,
name|confName
argument_list|,
name|removed
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updateFn
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not insert configured object"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|updateFn
operator|.
name|get
argument_list|()
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
specifier|final
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not update "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for configuration '"
operator|+
name|conf
operator|.
name|getName
argument_list|()
operator|+
literal|"' for value '"
operator|+
name|value
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//TODO: AddMethod with Configuration argument
block|}
specifier|final
name|ConfigurationFieldClassMask
name|annotation
init|=
name|getAnnotation
argument_list|(
name|field
argument_list|,
name|ConfigurationFieldClassMask
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
specifier|final
name|NewClass
name|newClass
init|=
name|getAnnotation
argument_list|(
name|field
argument_list|,
name|NewClass
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|newClass
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|obj
init|=
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|mapper
operator|.
name|Constructor
operator|.
name|load
argument_list|(
name|newClass
argument_list|,
name|instance
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Field '"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"' must have '@org.exist.config.annotation.ConfigurationFieldClassMask' annotation ["
operator|+
name|conf
operator|.
name|getName
argument_list|()
operator|+
literal|"], skipping instance creation."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|String
name|id
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|ID
argument_list|)
decl_stmt|;
name|Object
index|[]
name|objs
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|objs
operator|=
operator|new
name|Object
index|[]
block|{
literal|""
block|,
literal|""
block|}
expr_stmt|;
block|}
else|else
block|{
name|objs
operator|=
operator|new
name|Object
index|[]
block|{
name|id
operator|.
name|toLowerCase
argument_list|()
block|,
name|id
block|}
expr_stmt|;
block|}
specifier|final
name|String
name|clazzName
init|=
name|String
operator|.
name|format
argument_list|(
name|annotation
operator|.
name|value
argument_list|()
argument_list|,
name|objs
argument_list|)
decl_stmt|;
specifier|final
name|Configurable
name|obj
init|=
name|create
argument_list|(
name|conf
argument_list|,
name|instance
argument_list|,
name|clazzName
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Configuration error: "
operator|+
name|EOL
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
name|EOL
operator|+
literal|" field: "
operator|+
name|field
operator|+
name|EOL
operator|+
literal|" message: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
throw|;
comment|//            LOG.error(iae.getMessage(), iae);
comment|//            return null;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|iae
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Security error: "
operator|+
name|EOL
operator|+
literal|" config: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
operator|+
name|EOL
operator|+
literal|" field: "
operator|+
name|field
operator|+
name|EOL
operator|+
literal|" message: "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|iae
argument_list|)
throw|;
comment|//            LOG.error(iae.getMessage(), iae);
comment|//            return null;
block|}
return|return
name|configuration
return|;
block|}
comment|/**      * If the value was previously removed, we can attempt      * to reinsert it at the same index so as to keep the      * ordering consistent. Otherwise... we just add it.      */
specifier|private
specifier|static
name|Optional
argument_list|<
name|ConsumerE
argument_list|<
name|String
argument_list|,
name|ReflectiveOperationException
argument_list|>
argument_list|>
name|updateListFn
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|String
name|confName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removed
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|removed
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
operator|<
name|Optional
argument_list|<
name|ConsumerE
argument_list|<
name|String
argument_list|,
name|ReflectiveOperationException
argument_list|>
argument_list|>
operator|>
name|map
argument_list|(
name|removedIdx
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|searchForInsertMethod
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|confName
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|insertMethod
lambda|->
name|v
lambda|->
name|insertMethod
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|removedIdx
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|searchForAddMethod
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|confName
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|addMethod
lambda|->
name|v
lambda|->
name|addMethod
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Field
name|getFieldRecursive
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Class
argument_list|>
name|maybeClazz
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|maybeClazz
operator|.
name|map
argument_list|(
name|clazz
lambda|->
name|Stream
operator|.
name|of
argument_list|(
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|field
lambda|->
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
name|getFieldRecursive
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Configuration
argument_list|>
name|filter
parameter_list|(
specifier|final
name|List
argument_list|<
name|Configuration
argument_list|>
name|configurations
parameter_list|,
name|Predicate
argument_list|<
name|Configuration
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|configurations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return The Configurable or null      */
specifier|private
specifier|static
name|Configurable
name|create
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|String
name|clazzName
parameter_list|)
block|{
name|Configurable
name|configurable
decl_stmt|;
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|configurable
operator|=
name|create
argument_list|(
name|conf
argument_list|,
name|instance
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Class ["
operator|+
name|clazzName
operator|+
literal|"] not found, skip instance creation."
argument_list|)
expr_stmt|;
name|configurable
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|configurable
return|;
block|}
comment|/**      * @return The Configurable or null      */
specifier|private
specifier|static
name|Configurable
name|create
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
name|Configurable
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Constructor
argument_list|<
name|Configurable
argument_list|>
name|constructor
init|=
operator|(
name|Constructor
argument_list|<
name|Configurable
argument_list|>
operator|)
name|clazz
operator|.
name|getConstructor
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|instance
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to invoke Constructor on Configurable instance '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', so creating new Constructor..."
argument_list|)
expr_stmt|;
specifier|final
name|Constructor
argument_list|<
name|Configurable
argument_list|>
name|constructor
init|=
operator|(
name|Constructor
argument_list|<
name|Configurable
argument_list|>
operator|)
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|LifeCycle
condition|)
block|{
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
comment|//ignore if database is starting-up
comment|//TODO: add to BrokerPool static list to activate when ready
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LifeCycle
operator|)
name|obj
operator|)
operator|.
name|start
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|obj
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Security exception on class ["
operator|+
name|clazz
operator|+
literal|"] creation '"
operator|+
name|se
operator|.
name|getMessage
argument_list|()
operator|+
literal|"' ,skipping instance creation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|clazz
operator|+
literal|" constructor "
operator|+
literal|"("
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|Configuration
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|" or "
operator|+
literal|"("
operator|+
name|Configuration
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|"not found '"
operator|+
name|nsme
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', skipping instance creation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|nsme
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsme
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InstantiationException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Instantiation exception on "
operator|+
name|clazz
operator|+
literal|" creation '"
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', skipping instance creation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invocation target exception on "
operator|+
name|clazz
operator|+
literal|" creation '"
operator|+
name|ite
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', skipping instance creation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ite
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Database exception on "
operator|+
name|clazz
operator|+
literal|" startup '"
operator|+
name|ee
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', skipping instance creation."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|ConfigurationException
block|{
try|try
block|{
return|return
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|ConfigurationException
block|{
try|try
block|{
specifier|final
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConfigurationImpl
argument_list|(
name|adapter
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*     public static Configuration parseDefault() throws ConfigurationException {         try {             return parse(new FileInputStream(ConfigurationHelper.lookup("conf.xml")));                      } catch (final FileNotFoundException e) {             throw new ConfigurationException(e);         }     }*/
specifier|private
specifier|static
name|Boolean
name|implementsInterface
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|object
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|object
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|iface
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|static
name|void
name|serializeByReference
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|,
specifier|final
name|String
name|fieldAsElementName
parameter_list|,
specifier|final
name|String
name|referenceBy
parameter_list|)
throws|throws
name|SAXException
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ReferenceImpl
operator|)
name|instance
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//        final Configurable resolved = ((ReferenceImpl) instance).resolve();
comment|//        final Method getMethod = searchForGetMethod(resolved.getClass(), referenceBy);
comment|//        Object value;
comment|//
comment|//        try {
comment|//            value = getMethod.invoke(resolved);
comment|//
comment|//        } catch (final IllegalArgumentException iae) {
comment|//            LOG.error(iae.getMessage(), iae);
comment|//            //TODO : throw exception ? -pb
comment|//            return;
comment|//
comment|//        } catch (final IllegalAccessException iae) {
comment|//            LOG.error(iae.getMessage(), iae);
comment|//            //TODO : throw exception ? -pb
comment|//            return;
comment|//
comment|//        } catch (final InvocationTargetException ite) {
comment|//            LOG.error(ite.getMessage(), ite);
comment|//            //TODO : throw exception ? -pb
comment|//            return;
comment|//        }
specifier|final
name|QName
name|qnConfig
init|=
operator|new
name|QName
argument_list|(
name|fieldAsElementName
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|comment
init|=
literal|"<"
operator|+
name|qnConfig
operator|+
literal|" "
operator|+
name|referenceBy
operator|+
literal|"=''/>"
decl_stmt|;
specifier|final
name|char
index|[]
name|ch
init|=
name|comment
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|EOL
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|.
name|startElement
argument_list|(
name|qnConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|attribute
argument_list|(
operator|new
name|QName
argument_list|(
name|referenceBy
argument_list|,
literal|null
argument_list|)
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|qnConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|serialize
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|,
specifier|final
name|String
name|fieldAsElementName
parameter_list|,
specifier|final
name|String
name|referenceBy
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|instance
operator|instanceof
name|ReferenceImpl
condition|)
block|{
name|serializeByReference
argument_list|(
name|instance
argument_list|,
name|serializer
argument_list|,
name|fieldAsElementName
argument_list|,
name|referenceBy
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
comment|//UNDERSTAND: throw exception
block|}
specifier|final
name|AFields
name|annotatedFields
init|=
name|getConfigurationAnnotatedFields
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AField
argument_list|<
name|?
argument_list|>
name|annotatedField
init|=
name|annotatedFields
operator|.
name|findByAnnotationValue
argument_list|(
name|referenceBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotatedField
operator|==
literal|null
condition|)
block|{
return|return;
comment|//UNDERSTAND: throw exception
block|}
specifier|final
name|Field
name|field
init|=
name|annotatedField
operator|.
name|getField
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Reference field '"
operator|+
name|referenceBy
operator|+
literal|"' can't be found for class '"
operator|+
name|clazz
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//TODO : throw eception ? -pb
return|return;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|extractFieldValue
argument_list|(
name|field
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
expr_stmt|;
comment|//TODO : throw exception , -pb
return|return;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ? -pb
return|return;
block|}
specifier|final
name|QName
name|qnConfig
init|=
operator|new
name|QName
argument_list|(
name|fieldAsElementName
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|comment
init|=
literal|"<"
operator|+
name|qnConfig
operator|+
literal|" "
operator|+
name|referenceBy
operator|+
literal|"=''/>"
decl_stmt|;
specifier|final
name|char
index|[]
name|ch
init|=
name|comment
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|EOL
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|.
name|startElement
argument_list|(
name|qnConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|attribute
argument_list|(
operator|new
name|QName
argument_list|(
name|referenceBy
argument_list|,
literal|null
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|qnConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|extractFieldValue
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|Configurable
name|instance
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|int
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Integer
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|String
name|settings
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationFieldSettings
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|SettingKey
name|settingKey
init|=
name|SettingKey
operator|.
name|forSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|settingKey
operator|==
name|SettingKey
operator|.
name|RADIX
condition|)
block|{
try|try
block|{
specifier|final
name|int
name|radix
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|settingKey
operator|.
name|extractValueFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|radix
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO UNDERSTAND: ignore, set back to default or throw error?
block|}
block|}
if|else if
condition|(
name|settingKey
operator|==
name|SettingKey
operator|.
name|OCTAL_STRING
condition|)
block|{
return|return
literal|"0"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
literal|8
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
if|else if
condition|(
name|long
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Long
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|boolean
operator|.
name|class
operator|==
name|fieldType
operator|||
name|Boolean
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|XmldbURI
operator|.
name|class
operator|==
name|fieldType
condition|)
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
name|void
name|serialize
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|ConfigurationException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
comment|//UNDERSTAND: throw exception
block|}
specifier|final
name|String
name|configName
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationClass
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
try|try
block|{
comment|//open tag
specifier|final
name|QName
name|qnConfig
init|=
operator|new
name|QName
argument_list|(
name|configName
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|qnConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|simple
init|=
literal|true
decl_stmt|;
comment|//store field's values as attributes or elements depends on annotation
specifier|final
name|AFields
name|annotatedFields
init|=
name|getConfigurationAnnotatedFields
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|//pass one - extract just attributes
for|for
control|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
name|attr
range|:
name|annotatedFields
operator|.
name|getAttributes
argument_list|()
control|)
block|{
specifier|final
name|Field
name|field
init|=
name|attr
operator|.
name|getField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//XXX: artifact? remove?
comment|//skip elements
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//skip null values
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|//now we just have attributes
specifier|final
name|String
name|value
init|=
name|extractFieldValue
argument_list|(
name|field
argument_list|,
name|instance
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|attribute
argument_list|(
operator|new
name|QName
argument_list|(
name|attr
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|//pass two - just elements or text nodes
for|for
control|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
range|:
name|annotatedFields
operator|.
name|getElements
argument_list|()
control|)
block|{
name|simple
operator|=
literal|true
expr_stmt|;
specifier|final
name|Field
name|field
init|=
name|element
operator|.
name|getField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//XXX: artifact? remove?
comment|//skip attributes
if|if
condition|(
operator|!
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationFieldAsElement
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//ignore mapped fields for now, TODO: need to code back mapping.
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|NewClass
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|referenceBy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
condition|)
block|{
name|referenceBy
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
comment|//skip null values
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|tagName
init|=
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|comment
init|=
literal|"<"
operator|+
name|tagName
decl_stmt|;
if|if
condition|(
name|referenceBy
operator|!=
literal|null
condition|)
block|{
name|comment
operator|+=
literal|" "
operator|+
name|referenceBy
operator|+
literal|"=\"\"/>"
expr_stmt|;
block|}
else|else
block|{
name|comment
operator|+=
literal|"></"
operator|+
name|tagName
operator|+
literal|">"
expr_stmt|;
block|}
name|serializer
operator|.
name|characters
argument_list|(
name|EOL
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|char
index|[]
name|ch
init|=
name|comment
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|value
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|typeName
init|=
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"java.util.List"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|serializeList
argument_list|(
name|instance
argument_list|,
name|element
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|implementsInterface
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|Configurable
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|Configurable
name|subInstance
init|=
operator|(
name|Configurable
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|serialize
argument_list|(
name|subInstance
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
literal|"java.util.Map"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|serializeMap
argument_list|(
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|value
operator|=
name|extractFieldValue
argument_list|(
name|field
argument_list|,
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"field '"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"' has unsupported type ["
operator|+
name|typeName
operator|+
literal|"] - skipped"
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ? -pb
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|simple
condition|)
block|{
specifier|final
name|QName
name|qnSimple
init|=
operator|new
name|QName
argument_list|(
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|qnSimple
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
operator|new
name|QName
argument_list|(
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|.
name|characters
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|tagName
init|=
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|comment
init|=
literal|"<"
operator|+
name|tagName
decl_stmt|;
if|if
condition|(
name|referenceBy
operator|!=
literal|null
condition|)
block|{
name|comment
operator|+=
literal|" "
operator|+
name|referenceBy
operator|+
literal|"=\"\"/>"
expr_stmt|;
block|}
else|else
block|{
name|comment
operator|+=
literal|"></"
operator|+
name|tagName
operator|+
literal|">"
expr_stmt|;
block|}
name|serializer
operator|.
name|characters
argument_list|(
name|EOL
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|char
index|[]
name|ch
init|=
name|comment
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|comment
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//close tag
name|serializer
operator|.
name|endElement
argument_list|(
name|qnConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|serializeList
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|SAXException
block|{
specifier|final
name|Field
name|field
init|=
name|element
operator|.
name|getField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//determine the list entries type from its generic type
specifier|final
name|Type
name|fieldGenericType
init|=
name|field
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldGenericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
specifier|final
name|Type
name|genericTypeArgs
index|[]
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|fieldGenericType
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericTypeArgs
operator|!=
literal|null
operator|&&
name|genericTypeArgs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
specifier|final
name|Type
name|genericListType
init|=
name|genericTypeArgs
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|genericListType
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|serializeStringList
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|element
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//assume List<Configurable>
name|serializeConfigurableList
argument_list|(
operator|(
name|List
argument_list|<
name|Configurable
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|field
argument_list|,
name|element
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//assume List<Configurable>
name|serializeConfigurableList
argument_list|(
operator|(
name|List
argument_list|<
name|Configurable
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|instance
argument_list|)
argument_list|,
name|field
argument_list|,
name|element
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|serializeStringList
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|fieldAsElementName
init|=
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|QName
name|qnConfig
init|=
operator|new
name|QName
argument_list|(
name|fieldAsElementName
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|listItem
range|:
name|list
control|)
block|{
name|serializer
operator|.
name|startElement
argument_list|(
name|qnConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|listItem
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|qnConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|serializeConfigurableList
parameter_list|(
specifier|final
name|List
argument_list|<
name|Configurable
argument_list|>
name|list
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|SAXException
block|{
name|String
name|referenceBy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
condition|)
block|{
name|referenceBy
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|ConfigurationReferenceBy
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Configurable
name|el
range|:
name|list
control|)
block|{
if|if
condition|(
name|referenceBy
operator|==
literal|null
condition|)
block|{
name|serialize
argument_list|(
name|el
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serialize
argument_list|(
name|el
argument_list|,
name|serializer
argument_list|,
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|referenceBy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|serializeMap
parameter_list|(
specifier|final
name|String
name|mapName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
specifier|final
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
specifier|final
name|QName
name|mapQName
init|=
operator|new
name|QName
argument_list|(
name|mapName
argument_list|,
name|Configuration
operator|.
name|NS
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|attrQName
init|=
operator|new
name|QName
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|serializer
operator|.
name|startElement
argument_list|(
name|mapQName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|attribute
argument_list|(
name|attrQName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|mapQName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|FullXmldbURI
name|getFullURI
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|instanceof
name|FullXmldbURI
condition|)
block|{
return|return
operator|(
name|FullXmldbURI
operator|)
name|uri
return|;
block|}
specifier|final
name|StringBuilder
name|accessor
init|=
operator|new
name|StringBuilder
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
decl_stmt|;
name|accessor
operator|.
name|append
argument_list|(
name|pool
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|accessor
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
name|accessor
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|FullXmldbURI
operator|)
name|XmldbURI
operator|.
name|create
argument_list|(
name|accessor
operator|.
name|toString
argument_list|()
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|fileURL
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|final
name|FullXmldbURI
name|key
init|=
name|getFullURI
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|fileURL
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|=
name|hotConfigs
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
return|;
block|}
comment|//XXX: locking required
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|fileURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|broker
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
comment|//database in read-only mode& there no configuration file,
comment|//create in memory document& configuration
try|try
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|SAXSerializer
name|serializer
init|=
operator|new
name|SAXSerializer
argument_list|(
name|writer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serialize
argument_list|(
name|instance
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
specifier|final
name|String
name|data
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|document
operator|=
name|save
argument_list|(
name|instance
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|,
name|fileURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ? -pb
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
block|}
specifier|final
name|Element
name|confElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|confElement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
block|}
name|conf
operator|=
operator|new
name|ConfigurationImpl
argument_list|(
name|confElement
argument_list|)
expr_stmt|;
name|hotConfigs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|Configuration
name|parse
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Configuration
name|conf
decl_stmt|;
specifier|final
name|FullXmldbURI
name|key
init|=
name|getFullURI
argument_list|(
name|pool
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|=
name|hotConfigs
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
return|;
block|}
specifier|final
name|Element
name|confElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|confElement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|//possibly on corrupted database, find better solution (recovery flag?)
block|}
name|conf
operator|=
operator|new
name|ConfigurationImpl
argument_list|(
name|confElement
argument_list|)
expr_stmt|;
name|hotConfigs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|DocumentImpl
name|save
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|BrokerPool
name|database
decl_stmt|;
try|try
block|{
name|database
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|database
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|save
argument_list|(
name|broker
argument_list|,
name|instance
argument_list|,
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|database
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|DocumentImpl
name|save
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collection URI = "
operator|+
name|uri
operator|.
name|removeLastSegment
argument_list|()
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
return|return
name|save
argument_list|(
name|instance
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|pde
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|FullXmldbURI
argument_list|>
name|saving
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|DocumentImpl
name|save
parameter_list|(
specifier|final
name|Configurable
name|instance
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|SAXSerializer
name|serializer
init|=
operator|new
name|SAXSerializer
argument_list|(
name|writer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serialize
argument_list|(
name|instance
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
specifier|final
name|String
name|data
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FullXmldbURI
name|fullURI
init|=
literal|null
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing configuration "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
operator|+
literal|"/"
operator|+
name|uri
argument_list|)
expr_stmt|;
specifier|final
name|Subject
name|currentUser
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setSubject
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|txn
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|txn
operator|.
name|acquireLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|uri
argument_list|,
name|data
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|info
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|setMode
argument_list|(
name|Permission
operator|.
name|DEFAULT_SYSTSEM_RESOURCE_PERM
argument_list|)
expr_stmt|;
name|fullURI
operator|=
name|getFullURI
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|saving
operator|.
name|add
argument_list|(
name|fullURI
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|=
literal|null
expr_stmt|;
name|saving
operator|.
name|remove
argument_list|(
name|fullURI
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MAJOR_SYNC
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullURI
operator|!=
literal|null
condition|)
block|{
name|saving
operator|.
name|remove
argument_list|(
name|fullURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transact
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSubject
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|clear
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|FullXmldbURI
argument_list|,
name|Configuration
argument_list|>
name|entry
range|:
name|hotConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|FullXmldbURI
name|uri
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getInstanceName
argument_list|()
operator|.
name|equals
argument_list|(
name|db
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Configuration
name|conf
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|instanceof
name|ConfigurationImpl
condition|)
block|{
operator|(
operator|(
name|ConfigurationImpl
operator|)
name|conf
operator|)
operator|.
name|configuredObjectReference
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|hotConfigs
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|unregister
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|hotConfigs
operator|.
name|containsValue
argument_list|(
name|configuration
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|FullXmldbURI
argument_list|,
name|Configuration
argument_list|>
name|entry
range|:
name|hotConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
name|configuration
condition|)
block|{
name|hotConfigs
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|/*     private static Object instantiateObject(final String className, final Configuration configuration) throws ConfigurationException {         try {             final Class<?> clazz = Class.forName(className);             final Constructor<?> cstr = clazz.getConstructor(Configuration.class);             return cstr.newInstance(configuration);                      } catch (final Exception e) {             throw new ConfigurationException(e.getMessage(), e);         }     }*/
specifier|private
specifier|static
class|class
name|AFields
implements|implements
name|Iterable
argument_list|<
name|AField
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addAttribute
parameter_list|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
name|attribute
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllAttributes
parameter_list|(
specifier|final
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|.
name|addAll
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addElement
parameter_list|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllElements
parameter_list|(
specifier|final
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|>
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
specifier|public
name|List
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|>
name|getElements
parameter_list|()
block|{
return|return
name|elements
return|;
block|}
specifier|public
name|AField
name|findByAnnotationValue
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
name|attr
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|attr
return|;
block|}
block|}
for|for
control|(
specifier|final
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|.
name|getAnnotation
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|element
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|AField
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|AField
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsAttribute
argument_list|>
argument_list|>
name|itAttributes
init|=
name|attributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|AField
argument_list|<
name|ConfigurationFieldAsElement
argument_list|>
argument_list|>
name|itElements
init|=
name|elements
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|itAttributes
operator|.
name|hasNext
argument_list|()
operator||
name|itElements
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AField
name|next
parameter_list|()
block|{
if|if
condition|(
name|itAttributes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|itAttributes
operator|.
name|next
argument_list|()
return|;
block|}
if|else if
condition|(
name|itElements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|itElements
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AField
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|T
name|annotation
decl_stmt|;
specifier|private
specifier|final
name|Field
name|field
decl_stmt|;
specifier|public
name|AField
parameter_list|(
specifier|final
name|T
name|annotation
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|)
block|{
name|this
operator|.
name|annotation
operator|=
name|annotation
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
specifier|public
name|T
name|getAnnotation
parameter_list|()
block|{
return|return
name|annotation
return|;
block|}
specifier|public
name|Field
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
block|}
specifier|public
specifier|static
name|Configuration
name|getConfigurtion
parameter_list|(
specifier|final
name|BrokerPool
name|db
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
return|return
name|hotConfigs
operator|.
name|get
argument_list|(
name|Configurator
operator|.
name|getFullURI
argument_list|(
name|db
argument_list|,
name|uri
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

