begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|NewClass
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Constructor
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Configuration
argument_list|>
name|configurations
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Configuration
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Configuration
name|getConfiguration
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|configurations
operator|.
name|get
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/** 	 * Create new java object by mapping instructions. 	 */
specifier|public
specifier|static
name|Object
name|load
parameter_list|(
name|NewClass
name|newClazz
parameter_list|,
name|Configurable
name|instance
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|url
init|=
name|newClazz
operator|.
name|mapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Filed must have 'ConfigurationFieldClassMask' annotation or "
operator|+
literal|"registered mapping instruction for class '"
operator|+
name|newClazz
operator|.
name|name
argument_list|()
operator|+
literal|"' ["
operator|+
name|conf
operator|.
name|getName
argument_list|()
operator|+
literal|"], "
operator|+
literal|"skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|InputStream
name|is
init|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Registered mapping instruction for class '"
operator|+
name|newClazz
operator|.
name|name
argument_list|()
operator|+
literal|"' missing resource '"
operator|+
name|url
operator|+
literal|"', "
operator|+
literal|"skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|XMLInputFactory
name|inputFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLStreamReader
name|reader
init|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
name|Stack
argument_list|<
name|Object
argument_list|>
name|objs
init|=
operator|new
name|Stack
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|CallMathod
argument_list|>
name|instructions
init|=
operator|new
name|Stack
argument_list|<
name|CallMathod
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|eventType
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|eventType
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|XMLEvent
operator|.
name|START_ELEMENT
case|:
name|String
name|localName
init|=
name|reader
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
literal|"name"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"class element first attribute must be 'name', skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|clazzName
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|Object
name|newInstance
init|=
name|constructor
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
name|obj
operator|=
name|newInstance
expr_stmt|;
name|objs
operator|.
name|add
argument_list|(
name|newInstance
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instructions
operator|.
name|empty
argument_list|()
condition|)
name|instructions
operator|.
name|peek
argument_list|()
operator|.
name|setValue
argument_list|(
name|newInstance
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"callMethod"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|Configuration
name|_conf_
init|=
name|conf
decl_stmt|;
if|if
condition|(
operator|!
name|instructions
operator|.
name|empty
argument_list|()
condition|)
name|_conf_
operator|=
name|instructions
operator|.
name|peek
argument_list|()
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|CallMathod
name|call
init|=
operator|new
name|CallMathod
argument_list|(
name|objs
operator|.
name|peek
argument_list|()
argument_list|,
name|_conf_
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|call
operator|.
name|set
argument_list|(
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|instructions
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLEvent
operator|.
name|END_ELEMENT
case|:
name|localName
operator|=
name|reader
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
comment|//System.out.println("END_ELEMENT "+localName);
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|objs
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"callMethod"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|CallMathod
name|call
init|=
name|instructions
operator|.
name|pop
argument_list|()
decl_stmt|;
name|call
operator|.
name|eval
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
name|configurations
operator|.
name|put
argument_list|(
name|obj
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

