begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  */
end_comment

begin_class
specifier|public
class|class
name|CallMethod
block|{
specifier|private
name|Object
name|obj
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
name|value
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|attribute
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|element
init|=
literal|null
decl_stmt|;
specifier|public
name|CallMethod
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|obj
operator|=
name|obj
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
literal|"attribute"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|attribute
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
literal|"element"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|element
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|eval
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"'callMethod' element must have 'name' attribute, skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|attribute
operator|==
literal|null
operator|&&
name|element
operator|==
literal|null
condition|)
block|{
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"'callMethod' element must have 'attribute' or 'element' attribute, skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|Method
index|[]
name|methods
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|methods
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|k
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|methods
index|[
name|k
index|]
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
specifier|final
name|String
name|typeName
init|=
name|types
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|methods
index|[
name|k
index|]
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|methods
index|[
name|k
index|]
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|conf
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Integer"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|methods
index|[
name|k
index|]
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|attribute
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
name|Configurator
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"'callMethod' element '"
operator|+
name|name
operator|+
literal|"' method can not be found, skip instance creation."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
return|return
name|conf
operator|.
name|getConfiguration
argument_list|(
name|element
argument_list|)
return|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

