begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|// Copyright (c) 2002 Mort Bay Consulting (Australia) Pty. Ltd.
end_comment

begin_comment
comment|// $Id$
end_comment

begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|/**  * This is an adopted version of the corresponding classes shipped   * with Jetty.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|start
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_comment
comment|/**  * @author Jan Hlavaty (hlavac@code.cz)  * @author Wolfgang Meier (meier@ifs.tu-darmstadt.de)  * @version $Revision$    TODO:    - finish possible jetty.home locations    - use File.toURI.toURL() on JDK 1.4+    - better handling of errors (i.e. when jetty.home cannot be autodetected...)    - include entries from lib _when needed_  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|private
name|String
name|_classname
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_mode
init|=
literal|"jetty"
decl_stmt|;
specifier|private
name|boolean
name|_debug
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"exist.start.debug"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
operator|new
name|Main
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Main
parameter_list|()
block|{
block|}
specifier|public
name|Main
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|_mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|static
name|File
name|getDirectory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|dir
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|isAvailable
parameter_list|(
name|String
name|classname
parameter_list|,
name|Classpath
name|classpath
parameter_list|)
block|{
try|try
block|{
name|Class
name|check
init|=
name|Class
operator|.
name|forName
argument_list|(
name|classname
argument_list|)
decl_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
name|ClassLoader
name|loader
init|=
name|classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
name|check
init|=
name|loader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
decl_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|invokeMain
parameter_list|(
name|ClassLoader
name|classloader
parameter_list|,
name|String
name|classname
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
name|Class
name|invoked_class
init|=
literal|null
decl_stmt|;
name|invoked_class
operator|=
name|classloader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
expr_stmt|;
name|Class
index|[]
name|method_param_types
init|=
operator|new
name|Class
index|[
literal|1
index|]
decl_stmt|;
name|method_param_types
index|[
literal|0
index|]
operator|=
name|args
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|Method
name|main
init|=
literal|null
decl_stmt|;
name|main
operator|=
name|invoked_class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"main"
argument_list|,
name|method_param_types
argument_list|)
expr_stmt|;
name|Object
index|[]
name|method_params
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|method_params
index|[
literal|0
index|]
operator|=
name|args
expr_stmt|;
name|main
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|method_params
argument_list|)
expr_stmt|;
block|}
name|void
name|configureClasspath
parameter_list|(
name|String
name|home
parameter_list|,
name|Classpath
name|classpath
parameter_list|,
name|InputStream
name|config
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
try|try
block|{
name|BufferedReader
name|cfg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|config
argument_list|,
literal|"ISO-8859-1"
argument_list|)
argument_list|)
decl_stmt|;
name|Version
name|java_version
init|=
operator|new
name|Version
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|)
decl_stmt|;
name|Version
name|ver
init|=
operator|new
name|Version
argument_list|()
decl_stmt|;
comment|// JAR's already processed
name|java
operator|.
name|util
operator|.
name|Hashtable
name|done
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|cfg
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">"
operator|+
name|line
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|subject
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|boolean
name|include_subject
init|=
literal|true
decl_stmt|;
name|String
name|condition
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|include_subject
operator|&&
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|condition
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"never"
argument_list|)
condition|)
block|{
name|include_subject
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"always"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"available"
argument_list|)
condition|)
block|{
name|String
name|class_to_check
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
name|isAvailable
argument_list|(
name|class_to_check
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"!available"
argument_list|)
condition|)
block|{
name|String
name|class_to_check
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
operator|!
name|isAvailable
argument_list|(
name|class_to_check
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"java"
argument_list|)
condition|)
block|{
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ver
operator|.
name|parse
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|include_subject
operator|&=
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"<"
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"<="
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=<"
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=>"
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|">="
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=="
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|==
literal|0
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"!="
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"nargs"
argument_list|)
condition|)
block|{
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|int
name|number
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|include_subject
operator|&=
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"<"
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"<="
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<=
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=<"
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<=
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=>"
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>=
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|">="
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>=
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=="
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|==
name|number
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"!="
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|!=
name|number
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|condition
operator|.
name|equals
argument_list|(
literal|"mode"
argument_list|)
condition|)
block|{
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|m
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"=="
argument_list|)
operator|&&
name|mode
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|)
operator|||
operator|(
name|operator
operator|.
name|equals
argument_list|(
literal|"!="
argument_list|)
operator|&&
operator|(
operator|!
name|mode
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Unknown condition: "
operator|+
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|file
init|=
name|subject
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
operator|(
name|subject
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|)
else|:
operator|(
name|home
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|subject
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"subject="
operator|+
name|subject
operator|+
literal|" file="
operator|+
name|file
operator|+
literal|" condition="
operator|+
name|condition
operator|+
literal|" include_subject="
operator|+
name|include_subject
argument_list|)
expr_stmt|;
comment|// ok, should we include?
if|if
condition|(
name|subject
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
comment|// directory of JAR files
name|File
name|extdir
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|File
index|[]
name|jars
init|=
name|extdir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|namelc
init|=
name|name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
return|return
name|namelc
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|jars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|jar
init|=
name|jars
index|[
name|i
index|]
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|containsKey
argument_list|(
name|jar
argument_list|)
condition|)
block|{
if|if
condition|(
name|include_subject
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|jar
argument_list|,
name|jar
argument_list|)
expr_stmt|;
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|jar
argument_list|)
operator|&&
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding JAR from directory: "
operator|+
name|jar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|subject
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// class directory
name|File
name|cd
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|d
init|=
name|cd
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|containsKey
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|d
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|include_subject
condition|)
block|{
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|d
argument_list|)
operator|&&
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding directory: "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|subject
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
comment|// Class
name|_classname
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subject
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// single JAR file
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|d
init|=
name|f
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|containsKey
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|d
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|include_subject
condition|)
block|{
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|d
argument_list|)
operator|&&
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding single JAR: "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|line
operator|=
name|cfg
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"client"
argument_list|)
condition|)
block|{
comment|//_classname = "org.exist.client.InteractiveClient";
name|_classname
operator|=
literal|"org.exist.client.InteractiveClient"
expr_stmt|;
name|_mode
operator|=
literal|"client"
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"standalone"
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.Server"
expr_stmt|;
name|_mode
operator|=
literal|"standalone"
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"backup"
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.backup.Main"
expr_stmt|;
name|_mode
operator|=
literal|"backup"
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
comment|//_classname = "org.mortbay.jetty.Server";
name|_classname
operator|=
literal|"org.exist.JettyStart"
expr_stmt|;
name|_mode
operator|=
literal|"jetty"
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"shutdown"
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.ServerShutdown"
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
name|String
index|[]
name|nargs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|nargs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|args
operator|=
name|nargs
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
literal|"org.exist.client.InteractiveClient"
expr_stmt|;
name|_mode
operator|=
literal|"client"
expr_stmt|;
block|}
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"mode = "
operator|+
name|_mode
argument_list|)
expr_stmt|;
block|}
name|File
name|_home_dir
init|=
name|detectHome
argument_list|()
decl_stmt|;
comment|//TODO: more attempts here...
if|if
condition|(
name|_home_dir
operator|!=
literal|null
condition|)
block|{
comment|// if we managed to detect exist.home, store it in system property
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"EXIST_HOME="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"exist.home"
argument_list|,
name|_home_dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.dir"
argument_list|,
name|_home_dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to find Jetty
if|if
condition|(
name|_mode
operator|.
name|equals
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
name|File
name|_tools_dir
init|=
operator|new
name|File
argument_list|(
name|_home_dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"tools"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_tools_dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: tools directory not found in "
operator|+
name|_home_dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|_jetty_dir
init|=
literal|null
decl_stmt|;
name|String
name|_dirs
index|[]
init|=
name|_tools_dir
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|_dirs
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
name|_jetty_dir
operator|=
name|_dirs
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|_jetty_dir
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Jetty could not be found in "
operator|+
name|_tools_dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"jetty.home"
argument_list|,
name|_tools_dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|_jetty_dir
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.home"
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"etc"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"jetty.xml"
block|}
expr_stmt|;
block|}
comment|// find log4j.xml
name|String
name|log4j
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"log4j.configuration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|log4j
operator|==
literal|null
condition|)
block|{
name|log4j
operator|=
name|_home_dir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"log4j.xml"
expr_stmt|;
name|File
name|lf
init|=
operator|new
name|File
argument_list|(
name|log4j
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|.
name|canRead
argument_list|()
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.configuration"
argument_list|,
name|lf
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// clean up tempdir for Jetty...
try|try
block|{
name|File
name|tmpdir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpdir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
name|tmpdir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
name|Classpath
name|_classpath
init|=
name|constructClasspath
argument_list|(
name|_home_dir
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|_classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TEMPDIR="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invoke org.mortbay.jetty.Server.main(args) using new classloader.
try|try
block|{
name|invokeMain
argument_list|(
name|cl
argument_list|,
name|_classname
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if not, warn user
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: exist.home cound not be autodetected, bailing out."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @return 	 */
specifier|public
name|File
name|detectHome
parameter_list|()
block|{
comment|//--------------------
comment|// detect exist.home:
comment|//--------------------
name|File
name|_home_dir
init|=
name|getDirectory
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// if eXist is deployed as web application, try to find WEB-INF first
name|File
name|webinf
init|=
operator|new
name|File
argument_list|(
literal|"WEB-INF"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|webinf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|webinf
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|webinf
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"lib"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"exist.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
try|try
block|{
name|_home_dir
operator|=
name|webinf
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// failed: try exist.jar in current directory
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
literal|"exist.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jar
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// failed: try ../exist.jar
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
literal|".."
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"exist.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
try|try
block|{
name|_home_dir
operator|=
operator|new
name|File
argument_list|(
literal|".."
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
comment|// searching exist.jar failed, try conf.xml to have the configuration
comment|// at least
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// try conf.xml in current dir
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
literal|"conf.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jar
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// try ../conf.xml
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
literal|".."
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"conf.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
try|try
block|{
name|_home_dir
operator|=
operator|new
name|File
argument_list|(
literal|".."
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
name|_home_dir
return|;
block|}
comment|/** 	 * @param args 	 */
specifier|public
name|Classpath
name|constructClasspath
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// set up classpath:
name|Classpath
name|_classpath
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
comment|// prefill existing paths in classpath_dirs...
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"existing classpath = "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
name|_classpath
operator|.
name|addClasspath
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add JARs from ext and lib
comment|// be smart about it
try|try
block|{
name|InputStream
name|cpcfg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cpcfg
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|FileInputStream
argument_list|(
name|homeDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"start.config"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|cpcfg
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cpcfg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Configuring classpath from default resource"
argument_list|)
expr_stmt|;
name|cpcfg
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/exist/start/start.config"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cpcfg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"start.config not found. Bailing out."
argument_list|)
throw|;
block|}
name|configureClasspath
argument_list|(
name|homeDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|_classpath
argument_list|,
name|cpcfg
argument_list|,
name|args
argument_list|,
name|_mode
argument_list|)
expr_stmt|;
name|cpcfg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// try to find javac and add it in classpaths
name|String
name|java_home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|java_home
operator|!=
literal|null
condition|)
block|{
name|File
name|jdk_home
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jdk_home
operator|=
operator|new
name|File
argument_list|(
name|java_home
argument_list|)
operator|.
name|getParentFile
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|jdk_home
operator|!=
literal|null
condition|)
block|{
name|File
name|tools_jar_file
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tools_jar_file
operator|=
operator|new
name|File
argument_list|(
name|jdk_home
argument_list|,
literal|"lib"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tools.jar"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
operator|(
name|tools_jar_file
operator|!=
literal|null
operator|)
operator|&&
name|tools_jar_file
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// OK, found tools.jar in java.home/../lib
comment|// add it in
name|_classpath
operator|.
name|addComponent
argument_list|(
name|tools_jar_file
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JAVAC = "
operator|+
name|tools_jar_file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// okay, classpath complete.
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.class.path"
argument_list|,
name|_classpath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"CLASSPATH="
operator|+
name|_classpath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|_classpath
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

