begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|// Copyright (c) 2002 Mort Bay Consulting (Australia) Pty. Ltd.
end_comment

begin_comment
comment|// $Id$
end_comment

begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|//Modified for eXist-db
end_comment

begin_comment
comment|/**  * This is an adopted version of the corresponding classes shipped  * with Jetty.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|start
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * @author Jan Hlavaty (hlavac@code.cz)  * @author Wolfgang Meier (meier@ifs.tu-darmstadt.de)  * @version $Revision$  *<p/>  *          TODO:  *          - finish possible jetty.home locations  *          - better handling of errors (i.e. when jetty.home cannot be autodetected...)  *          - include entries from lib _when needed_  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|private
specifier|final
specifier|static
name|String
name|START_CONFIG
init|=
literal|"start.config"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD_ENABLED_JETTY_CONFIGS
init|=
literal|"standard.enabled-jetty-configs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STANDALONE_ENABLED_JETTY_CONFIGS
init|=
literal|"standalone.enabled-jetty-configs"
decl_stmt|;
specifier|private
name|String
name|_classname
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_mode
init|=
literal|"jetty"
decl_stmt|;
specifier|private
specifier|static
name|Main
name|exist
decl_stmt|;
specifier|private
name|boolean
name|_debug
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"exist.start.debug"
argument_list|)
decl_stmt|;
comment|// Stores the path to the "start.config" file that's used to configure
comment|// the runtime classpath.
specifier|private
name|String
name|startConfigFileName
init|=
literal|""
decl_stmt|;
comment|// Used to find latest version of jar files that should be added to the
comment|// classpath.
specifier|private
specifier|final
name|LatestFileResolver
name|jarFileResolver
init|=
operator|new
name|LatestFileResolver
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|getMain
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Singleton Factory Method      */
specifier|public
specifier|static
name|Main
name|getMain
parameter_list|()
block|{
if|if
condition|(
name|exist
operator|==
literal|null
condition|)
block|{
name|exist
operator|=
operator|new
name|Main
argument_list|()
expr_stmt|;
block|}
return|return
name|exist
return|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|_mode
return|;
block|}
specifier|private
name|Main
parameter_list|()
block|{
block|}
specifier|public
name|Main
parameter_list|(
specifier|final
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|_mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|static
name|Path
name|getDirectory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|dir
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|isAvailable
parameter_list|(
specifier|final
name|String
name|classname
parameter_list|,
specifier|final
name|Classpath
name|classpath
parameter_list|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|classname
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
specifier|final
name|ClassLoader
name|loader
init|=
name|classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|loader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|invokeMain
parameter_list|(
specifier|final
name|ClassLoader
name|classloader
parameter_list|,
specifier|final
name|String
name|classname
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|invoked_class
init|=
name|classloader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|method_param_types
init|=
operator|new
name|Class
index|[
literal|1
index|]
decl_stmt|;
name|method_param_types
index|[
literal|0
index|]
operator|=
name|args
operator|.
name|getClass
argument_list|()
expr_stmt|;
specifier|final
name|Method
name|main
init|=
name|invoked_class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"main"
argument_list|,
name|method_param_types
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|method_params
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|method_params
index|[
literal|0
index|]
operator|=
name|args
expr_stmt|;
name|main
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|method_params
argument_list|)
expr_stmt|;
block|}
name|void
name|configureClasspath
parameter_list|(
specifier|final
name|Path
name|home
parameter_list|,
specifier|final
name|Classpath
name|classpath
parameter_list|,
specifier|final
name|InputStream
name|config
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|,
specifier|final
name|String
name|mode
parameter_list|)
block|{
comment|// Any files referenced in start.config that don't exist or cannot be resolved
comment|// are placed in this list.
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|invalidJars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|BufferedReader
name|cfg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|config
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Version
name|java_version
init|=
operator|new
name|Version
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Version
name|ver
init|=
operator|new
name|Version
argument_list|()
decl_stmt|;
comment|// JAR's already processed
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|done
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|cfg
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">"
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subject
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|boolean
name|include_subject
init|=
literal|true
decl_stmt|;
name|String
name|condition
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|include_subject
operator|&&
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|condition
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"never"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
name|include_subject
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
comment|// ignore
block|}
if|else if
condition|(
literal|"available"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
specifier|final
name|String
name|class_to_check
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
name|isAvailable
argument_list|(
name|class_to_check
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"!available"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
specifier|final
name|String
name|class_to_check
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
operator|!
name|isAvailable
argument_list|(
name|class_to_check
argument_list|,
name|classpath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"java"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
specifier|final
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|String
name|version
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ver
operator|.
name|parse
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|include_subject
operator|&=
operator|(
literal|"<"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
literal|">"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>
literal|0
operator|)
operator|||
operator|(
literal|"<="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
literal|"=<"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
literal|"=>"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
literal|">="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
literal|"=="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|==
literal|0
operator|)
operator|||
operator|(
literal|"!="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|java_version
operator|.
name|compare
argument_list|(
name|ver
argument_list|)
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"nargs"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
specifier|final
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|int
name|number
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|include_subject
operator|&=
operator|(
literal|"<"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<
name|number
operator|)
operator|||
operator|(
literal|">"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>
name|number
operator|)
operator|||
operator|(
literal|"<="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<=
name|number
operator|)
operator|||
operator|(
literal|"=<"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|<=
name|number
operator|)
operator|||
operator|(
literal|"=>"
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>=
name|number
operator|)
operator|||
operator|(
literal|">="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|>=
name|number
operator|)
operator|||
operator|(
literal|"=="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|==
name|number
operator|)
operator|||
operator|(
literal|"!="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|!=
name|number
operator|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"mode"
operator|.
name|equals
argument_list|(
name|condition
argument_list|)
condition|)
block|{
specifier|final
name|String
name|operator
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|String
name|m
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|include_subject
operator|&=
operator|(
literal|"=="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
name|mode
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|)
operator|||
operator|(
literal|"!="
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
operator|&&
operator|(
operator|!
name|mode
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Unknown condition: "
operator|+
name|condition
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|file
init|=
name|subject
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|subject
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
else|:
name|home
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|subject
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"subject="
operator|+
name|subject
operator|+
literal|" file="
operator|+
name|file
operator|+
literal|" condition="
operator|+
name|condition
operator|+
literal|" include_subject="
operator|+
name|include_subject
argument_list|)
expr_stmt|;
block|}
comment|// ok, should we include?
if|if
condition|(
name|subject
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
comment|// directory of JAR files
specifier|final
name|Path
name|extdir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|jars
init|=
name|list
argument_list|(
name|extdir
argument_list|,
name|p
lambda|->
name|fileName
argument_list|(
name|p
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|fileName
argument_list|(
name|p
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Path
name|jarFile
range|:
name|jars
control|)
block|{
specifier|final
name|Path
name|canonicalPath
init|=
name|jarFile
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|contains
argument_list|(
name|canonicalPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|include_subject
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|canonicalPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|canonicalPath
argument_list|)
operator|&&
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding JAR from directory: "
operator|+
name|canonicalPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|subject
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// class directory
specifier|final
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|include_subject
condition|)
block|{
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|p
argument_list|)
operator|&&
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding directory: "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|subject
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
comment|// Class
name|_classname
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subject
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// single JAR file
specifier|final
name|String
name|resolvedFile
init|=
name|jarFileResolver
operator|.
name|getResolvedFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|f
init|=
name|Paths
operator|.
name|get
argument_list|(
name|resolvedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|include_subject
condition|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|invalidJars
operator|.
name|add
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Path
name|d
init|=
name|f
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|done
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
if|if
condition|(
name|include_subject
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|classpath
operator|.
name|addComponent
argument_list|(
name|d
argument_list|)
operator|&&
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Adding single JAR: "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// Print message if any files from start.config were added
comment|// to the classpath but they could not be found.
comment|//        if (invalidJars.size()> 0) {
comment|//            final StringBuilder nonexistentJars = new StringBuilder();
comment|//            for (final String invalidJar : invalidJars) {
comment|//                nonexistentJars.append("    " + invalidJar + "\n");
comment|//            }
comment|/*             System.err.println(             "\nWARN: The following JAR file entries from '"             + startConfigFileName + "' aren't available (this may NOT be a "             + "problem):\n"             + nonexistentJars             );              */
comment|//        }
block|}
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"client"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//_classname = "org.exist.client.InteractiveClient";
name|_classname
operator|=
literal|"org.exist.client.InteractiveClient"
expr_stmt|;
name|_mode
operator|=
literal|"client"
expr_stmt|;
block|}
if|else if
condition|(
literal|"backup"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.backup.Main"
expr_stmt|;
name|_mode
operator|=
literal|"backup"
expr_stmt|;
block|}
if|else if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"standalone"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//_classname = "org.mortbay.jetty.Server";
name|_classname
operator|=
literal|"org.exist.jetty.JettyStart"
expr_stmt|;
name|_mode
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
if|else if
condition|(
literal|"launch"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.launcher.LauncherWrapper"
expr_stmt|;
name|_mode
operator|=
literal|"jetty"
expr_stmt|;
block|}
if|else if
condition|(
literal|"shutdown"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.jetty.ServerShutdown"
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
name|String
index|[]
name|nargs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|nargs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|args
operator|=
name|nargs
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
literal|"org.exist.launcher.LauncherWrapper"
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"mode = "
operator|+
name|_mode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|_home_dir
init|=
name|detectHome
argument_list|()
decl_stmt|;
comment|//TODO: more attempts here...
if|if
condition|(
name|_home_dir
operator|!=
literal|null
condition|)
block|{
comment|// if we managed to detect exist.home, store it in system property
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"EXIST_HOME="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DWES #### can this be removed?
name|System
operator|.
name|setProperty
argument_list|(
literal|"exist.home"
argument_list|,
name|_home_dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.dir"
argument_list|,
name|_home_dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to find Jetty
if|if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
operator|||
literal|"standalone"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.home"
argument_list|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|Path
name|_tools_dir
init|=
name|_home_dir
operator|.
name|resolve
argument_list|(
literal|"tools"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|_tools_dir
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: tools directory not found in "
operator|+
name|_home_dir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|_dirs
init|=
name|list
argument_list|(
name|_tools_dir
argument_list|,
name|p
lambda|->
name|Files
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
operator|&&
name|fileName
argument_list|(
name|p
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"jetty"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|_dirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"jetty.home"
argument_list|,
name|_dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Jetty could not be found in "
operator|+
name|_tools_dir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Jetty could not be found in "
operator|+
name|_tools_dir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|String
name|config
decl_stmt|;
if|if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
condition|)
block|{
name|config
operator|=
name|STANDARD_ENABLED_JETTY_CONFIGS
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
name|STANDALONE_ENABLED_JETTY_CONFIGS
expr_stmt|;
block|}
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.home"
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"etc"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|config
block|}
expr_stmt|;
block|}
comment|// find log4j2.xml
specifier|final
name|Path
name|log4j
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|_home_dir
operator|.
name|resolve
argument_list|(
literal|"log4j2.xml"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|log4j
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|,
name|log4j
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//redirect JUL to log4j2 unless otherwise specified
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.util.logging.manager"
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.util.logging.manager"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"org.apache.logging.log4j.jul.LogManager"
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up tempdir for Jetty...
try|try
block|{
specifier|final
name|Path
name|tmpdir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|tmpdir
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
name|tmpdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
specifier|final
name|Classpath
name|_classpath
init|=
name|constructClasspath
argument_list|(
name|_home_dir
argument_list|,
name|args
argument_list|)
decl_stmt|;
specifier|final
name|EXistClassLoader
name|cl
init|=
name|_classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TEMPDIR="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Invoke org.mortbay.jetty.Server.main(args) using new classloader.
try|try
block|{
name|invokeMain
argument_list|(
name|cl
argument_list|,
name|_classname
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if not, warn user
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: exist.home could not be autodetected, bailing out."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      */
specifier|public
name|Path
name|detectHome
parameter_list|()
block|{
comment|//--------------------
comment|// detect exist.home:
comment|//--------------------
comment|// DWES #### use Configuration.getExistHome() ?
name|Path
name|_home_dir
init|=
name|getDirectory
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// if eXist is deployed as web application, try to find WEB-INF first
specifier|final
name|Path
name|webinf
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"WEB-INF"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|webinf
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|webinf
argument_list|)
condition|)
block|{
specifier|final
name|Path
name|jar
init|=
name|webinf
operator|.
name|resolve
argument_list|(
literal|"lib"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"exist.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jar
argument_list|)
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
name|webinf
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// failed: try exist.jar in current directory
specifier|final
name|Path
name|jar
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"exist.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|jar
argument_list|)
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// failed: try ../exist.jar
specifier|final
name|Path
name|jar
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|".."
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"exist.jar"
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jar
argument_list|)
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
name|jar
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|// searching exist.jar failed, try conf.xml to have the configuration at least
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// try conf.xml in current dir
specifier|final
name|Path
name|jar
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"conf.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|jar
argument_list|)
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|_home_dir
operator|==
literal|null
condition|)
block|{
comment|// try ../conf.xml
specifier|final
name|Path
name|jar
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|".."
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf.xml"
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"trying "
operator|+
name|jar
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jar
argument_list|)
condition|)
block|{
try|try
block|{
name|_home_dir
operator|=
name|jar
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|_home_dir
return|;
block|}
comment|/**      * @param args      */
specifier|public
name|Classpath
name|constructClasspath
parameter_list|(
specifier|final
name|Path
name|homeDir
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// set up classpath:
specifier|final
name|Classpath
name|_classpath
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
comment|// prefill existing paths in classpath_dirs...
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"existing classpath = "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_classpath
operator|.
name|addClasspath
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add JARs from ext and lib
comment|// be smart about it
try|try
block|{
specifier|final
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|configureClasspath
init|=
parameter_list|(
name|path
parameter_list|,
name|is
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Configuring classpath from: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|configureClasspath
argument_list|(
name|homeDir
argument_list|,
name|_classpath
argument_list|,
name|is
argument_list|,
name|args
argument_list|,
name|_mode
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|// start.config can be found in one of two locations...
specifier|final
name|Path
name|configFilePath1
init|=
name|homeDir
operator|.
name|resolve
argument_list|(
name|START_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|configFilePath1
argument_list|)
condition|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|cpcfg
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|configFilePath1
argument_list|)
init|)
block|{
specifier|final
name|String
name|cfgPath
init|=
name|configFilePath1
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|configureClasspath
operator|.
name|accept
argument_list|(
name|cfgPath
argument_list|,
name|cpcfg
argument_list|)
expr_stmt|;
name|this
operator|.
name|startConfigFileName
operator|=
name|cfgPath
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Configuring classpath from default resource"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|configFilePath2
init|=
literal|"org/exist/start/"
operator|+
name|START_CONFIG
decl_stmt|;
specifier|final
name|URL
name|configFilePath2Url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|configFilePath2
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFilePath2Url
operator|!=
literal|null
condition|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|cpcfg
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|configFilePath2
argument_list|)
init|)
block|{
name|configureClasspath
operator|.
name|accept
argument_list|(
name|configFilePath2
argument_list|,
name|cpcfg
argument_list|)
expr_stmt|;
name|this
operator|.
name|startConfigFileName
operator|=
name|configFilePath2
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|START_CONFIG
operator|+
literal|" not found at "
operator|+
name|configFilePath1
operator|+
literal|" or "
operator|+
name|configFilePath2
operator|+
literal|", Bailing out."
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// try to find javac and add it in classpaths
specifier|final
name|String
name|java_home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|java_home
operator|!=
literal|null
condition|)
block|{
name|Path
name|jdk_home
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jdk_home
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|java_home
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|jdk_home
operator|!=
literal|null
condition|)
block|{
name|Path
name|tools_jar_file
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tools_jar_file
operator|=
name|jdk_home
operator|.
name|resolve
argument_list|(
literal|"lib"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"tools.jar"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
operator|(
name|tools_jar_file
operator|!=
literal|null
operator|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|tools_jar_file
argument_list|)
condition|)
block|{
comment|// OK, found tools.jar in java.home/../lib
comment|// add it in
name|_classpath
operator|.
name|addComponent
argument_list|(
name|tools_jar_file
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JAVAC = "
operator|+
name|tools_jar_file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// okay, classpath complete.
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.class.path"
argument_list|,
name|_classpath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"CLASSPATH="
operator|+
name|_classpath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_classpath
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// only used in test suite
try|try
block|{
specifier|final
name|Class
name|brokerPool
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.storage.BrokerPool"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|stopAll
init|=
name|brokerPool
operator|.
name|getDeclaredMethod
argument_list|(
literal|"stopAll"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|stopAll
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copied from {@link org.exist.util.FileUtils#list(Path, Predicate)}      * as org.exist.start is compiled into a separate Jar and doesn't have      * the rest of eXist available on the classpath      */
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|list
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|Path
argument_list|>
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|entries
init|=
name|Files
operator|.
name|list
argument_list|(
name|directory
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
init|)
block|{
return|return
name|entries
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Copied from {@link org.exist.util.FileUtils#fileName(Path)}      * as org.exist.start is compiled into a separate Jar and doesn't have      * the rest of eXist available on the classpath      */
specifier|static
name|String
name|fileName
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

