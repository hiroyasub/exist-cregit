begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|// Copyright (c) 2002 Mort Bay Consulting (Australia) Pty. Ltd.
end_comment

begin_comment
comment|// $Id$
end_comment

begin_comment
comment|// ========================================================================
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|start
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing and comparing version strings.  * JDK 1.1 compatible.  * @author Jan Hlavatï¿½  */
end_comment

begin_class
specifier|public
class|class
name|Version
block|{
name|int
name|_version
init|=
literal|0
decl_stmt|;
name|int
name|_revision
init|=
literal|0
decl_stmt|;
name|int
name|_subrevision
init|=
literal|0
decl_stmt|;
name|String
name|_suffix
init|=
literal|""
decl_stmt|;
specifier|public
name|Version
parameter_list|()
block|{
block|}
specifier|public
name|Version
parameter_list|(
name|String
name|version_string
parameter_list|)
block|{
name|parse
argument_list|(
name|version_string
argument_list|)
expr_stmt|;
block|}
comment|/**      * parses version string in the form version[.revision[.subrevision[extension]]]      * into this instance.      */
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|version_string
parameter_list|)
block|{
name|_version
operator|=
literal|0
expr_stmt|;
name|_revision
operator|=
literal|0
expr_stmt|;
name|_subrevision
operator|=
literal|0
expr_stmt|;
name|_suffix
operator|=
literal|""
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|startpos
init|=
literal|0
decl_stmt|;
name|int
name|endpos
init|=
name|version_string
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|pos
operator|<
name|endpos
operator|)
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|version_string
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|_version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|version_string
operator|.
name|substring
argument_list|(
name|startpos
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pos
operator|<
name|endpos
operator|)
operator|&&
name|version_string
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|startpos
operator|=
operator|++
name|pos
expr_stmt|;
while|while
condition|(
operator|(
name|pos
operator|<
name|endpos
operator|)
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|version_string
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|_revision
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|version_string
operator|.
name|substring
argument_list|(
name|startpos
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|pos
operator|<
name|endpos
operator|)
operator|&&
name|version_string
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|startpos
operator|=
operator|++
name|pos
expr_stmt|;
while|while
condition|(
operator|(
name|pos
operator|<
name|endpos
operator|)
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|version_string
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|_subrevision
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|version_string
operator|.
name|substring
argument_list|(
name|startpos
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
name|endpos
condition|)
block|{
name|_suffix
operator|=
name|version_string
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return string representation of this version      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|_version
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|_revision
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|_subrevision
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|_suffix
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// java.lang.Comparable is Java 1.2! Cannot use it
comment|/**      * Compares with other version. Does not take extension into account,      * as there is no reliable way to order them.      * @return Constants.INFERIOR if this is older version that other,      *         Constants.EQUAL if its same version,      *         Constants.SUPERIOR if it's newer version than other      */
specifier|public
name|int
name|compare
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"other version is null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|_version
operator|<
name|other
operator|.
name|_version
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
if|if
condition|(
name|this
operator|.
name|_version
operator|>
name|other
operator|.
name|_version
condition|)
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
if|if
condition|(
name|this
operator|.
name|_revision
operator|<
name|other
operator|.
name|_revision
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
if|if
condition|(
name|this
operator|.
name|_revision
operator|>
name|other
operator|.
name|_revision
condition|)
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
if|if
condition|(
name|this
operator|.
name|_subrevision
operator|<
name|other
operator|.
name|_subrevision
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
if|if
condition|(
name|this
operator|.
name|_subrevision
operator|>
name|other
operator|.
name|_subrevision
condition|)
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
return|return
name|Constants
operator|.
name|EQUAL
return|;
block|}
comment|/**      * Check whether this verion is in range of versions specified      */
specifier|public
name|boolean
name|isInRange
parameter_list|(
name|Version
name|low
parameter_list|,
name|Version
name|high
parameter_list|)
block|{
return|return
operator|(
name|compare
argument_list|(
name|low
argument_list|)
operator|>=
literal|0
operator|&&
name|compare
argument_list|(
name|high
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

