begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *	note: some of these tests rely on local timezone override to -05:00, done in super.setUp()  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DateTimeTest
extends|extends
name|AbstractTimeRelatedTestCase
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|create1
parameter_list|()
throws|throws
name|XPathException
block|{
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|create2
parameter_list|()
throws|throws
name|XPathException
block|{
operator|new
name|DateTimeValue
argument_list|(
literal|"10:00:00Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00Z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00Z"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00-01:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00-01:00"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00-01:00"
argument_list|,
name|v
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T24:00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-12T00:00:00"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00-00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00Z"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat5
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00.5"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00.5"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat6
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00.50"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00.5"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat7
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00.0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat8
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11T10:00:00"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPart1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02.6Z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MILLISECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPart2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02+05:00"
argument_list|)
decl_stmt|;
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|v2
operator|)
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02+05:00"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11+05:00"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|v2
operator|)
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert5
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02+05:00"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|"10:05:02+05:00"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert6
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|"10:05:02"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|v2
operator|)
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert7
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02.123456"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|"10:05:02.123456"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getType
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|v1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02+05:30"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT5H30M"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02-05:30"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT5H30M"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T10:05:02Z"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P0D"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withoutTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00"
argument_list|,
name|v1
operator|.
name|withoutTimezone
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withoutTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00-07:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00"
argument_list|,
name|v1
operator|.
name|withoutTimezone
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00-05:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00-05:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00-07:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T12:00:00-05:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T12:00:00-05:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT10H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00-10:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T10:00:00-10:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00-07:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT10H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T07:00:00-10:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T07:00:00-10:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone5
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T10:00:00-07:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT10H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-08T03:00:00+10:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-08T03:00:00+10:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone6
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T00:00:00+01:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT8H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-06T15:00:00-08:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-06T15:00:00-08:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone7
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T00:00:00+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT15H"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone8
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T00:00:00+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT14H01M"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone9
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T00:00:00+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT8H4S"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone10
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-03-07T00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT14H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T00:00:00+14:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07T00:00:00+14:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00-01:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T17:00:00+04:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T23:00:00+06:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T17:00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|+
literal|1
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare5
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T23:00:00-04:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-03T02:00:00-01:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare6
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|NEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare7
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T17:00:00"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|NEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare8
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2006-09-14T04:15:16.559+04:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2006-10-14T04:15:16.559+04:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|INFERIOR
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minMax1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T12:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|v2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2002-04-02T17:00:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v2
argument_list|,
name|v1
operator|.
name|max
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v2
argument_list|,
name|v2
operator|.
name|max
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v1
operator|.
name|min
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
operator|.
name|min
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2001-12-30T11:12:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00Z"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2001-12-30T11:12:00Z"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P3DT1H15M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-11-02T12:27:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus4
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00Z"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P3DT1H15M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-11-02T12:27:00Z"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus1
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t1
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T06:12:00"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|t2
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"1999-11-28T09:00:00Z"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P337DT2H12M"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
name|d
argument_list|,
name|t1
operator|.
name|minus
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus2
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"1999-08-30T11:12:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus3
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-30T11:12:00"
argument_list|)
decl_stmt|;
specifier|final
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P3DT1H15M"
argument_list|)
decl_stmt|;
specifier|final
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2000-10-27T09:57:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

