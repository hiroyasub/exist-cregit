begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LsnTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|compareTo
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Lsn
operator|.
name|LSN_INVALID
operator|.
name|compareTo
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Lsn
operator|.
name|LSN_INVALID
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|124
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|124
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|122
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|123
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalsTo
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
operator|.
name|equals
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
operator|.
name|equals
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Lsn
operator|.
name|LSN_INVALID
operator|.
name|equals
argument_list|(
operator|new
name|Lsn
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

