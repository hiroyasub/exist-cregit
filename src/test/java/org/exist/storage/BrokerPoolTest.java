begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2013 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|BrokerPoolTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|noPrivilegeEscalationThroughBrokerRelease
parameter_list|()
throws|throws
name|EXistException
block|{
comment|//take a broker with the guest user
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|guestUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker1
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|guestUser
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//take a broker with the system user
specifier|final
name|Subject
name|sysUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker2
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sysUser
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `SYSTEM` user, but was: "
operator|+
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sysUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//ensure that after releasing the broker, the user has been returned to the guest user
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|privilegeStableWhenSubjectNull
parameter_list|()
throws|throws
name|EXistException
block|{
comment|//take a broker with the SYSTEM user
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|sysUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker1
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sysUser
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `SYSTEM` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sysUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//take a broker without changing the user
try|try
init|(
specifier|final
name|DBBroker
name|broker2
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `SYSTEM` user, but was: "
operator|+
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sysUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//ensure that after releasing the broker, the user is still the SYSTEM user
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sysUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|guestDefaultPriviledge
parameter_list|()
throws|throws
name|EXistException
block|{
comment|//take a broker with default perms
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker1
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|Subject
name|guestUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//take a broker without changing the user
try|try
init|(
specifier|final
name|DBBroker
name|broker2
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker2
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//ensure that after releasing the broker, the user is still the SYSTEM user
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPrivilegeEscalationThroughBrokerRelease_xmldb
parameter_list|()
throws|throws
name|EXistException
throws|,
name|XMLDBException
block|{
comment|//take a broker with the guest user
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|guestUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker1
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|guestUser
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//perform an XML:DB operation as the SYSTEM user
specifier|final
name|Subject
name|sysUser
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
operator|new
name|LocalCollection
argument_list|(
name|sysUser
argument_list|,
name|pool
argument_list|,
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
expr_stmt|;
comment|//ensure that after releasing the broker, the user has been returned to the guest user
name|assertEquals
argument_list|(
literal|"Expected `guest` user, but was: "
operator|+
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|guestUser
operator|.
name|getId
argument_list|()
argument_list|,
name|broker1
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks that when all broker leases are taken,      * no further lease is taken, until a lease has      * been released.      */
annotation|@
name|Test
specifier|public
name|void
name|canReleaseWhenSaturated
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxBrokers
init|=
name|pool
operator|.
name|getMax
argument_list|()
decl_stmt|;
comment|// test requires at least 2 leasedBrokers to prove the issue
name|assertTrue
argument_list|(
name|maxBrokers
operator|>
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|firstBrokerReleaseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|releaseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// lease all brokers
specifier|final
name|Thread
name|brokerUsers
index|[]
init|=
operator|new
name|Thread
index|[
name|maxBrokers
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|acquiredLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|maxBrokers
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|firstBrokerUser
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|BrokerUser
argument_list|(
name|pool
argument_list|,
name|acquiredLatch
argument_list|,
name|firstBrokerReleaseLatch
argument_list|)
argument_list|,
literal|"first-brokerUser"
argument_list|)
decl_stmt|;
name|brokerUsers
index|[
literal|0
index|]
operator|=
name|firstBrokerUser
expr_stmt|;
name|brokerUsers
index|[
literal|0
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|maxBrokers
condition|;
name|i
operator|++
control|)
block|{
name|brokerUsers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BrokerUser
argument_list|(
name|pool
argument_list|,
name|acquiredLatch
argument_list|,
name|releaseLatch
argument_list|)
argument_list|)
expr_stmt|;
name|brokerUsers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all brokers to be acquired
name|acquiredLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// check that we have all brokers
name|assertEquals
argument_list|(
name|maxBrokers
argument_list|,
name|pool
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new thread and attempt to get an additional broker
specifier|final
name|CountDownLatch
name|additionalBrokerAcquiredLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|additionalBrokerUser
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|BrokerUser
argument_list|(
name|pool
argument_list|,
name|additionalBrokerAcquiredLatch
argument_list|,
name|releaseLatch
argument_list|)
argument_list|,
literal|"additional-brokerUser"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|additionalBrokerAcquiredLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|additionalBrokerUser
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we should not be able to acquire an additional broker, as we have already leased max
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// just to ensure the other thread has done something
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|additionalBrokerAcquiredLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// we will now release a previously acquired broker (i.e. the first broker)... this should then allow the lease of an additional broker to advance
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstBrokerReleaseLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|firstBrokerReleaseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstBrokerReleaseLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|firstBrokerUser
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// wait for the first broker lease thread to complete
comment|// check that the additional broker lease has now been acquired
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// just to ensure the other thread has done something
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|additionalBrokerAcquiredLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// release all brokers from brokerUsers
if|if
condition|(
name|firstBrokerReleaseLatch
operator|.
name|getCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|firstBrokerReleaseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|releaseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BrokerUser
implements|implements
name|Runnable
block|{
specifier|final
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|acquiredLatch
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|releaseLatch
decl_stmt|;
specifier|public
name|BrokerUser
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
specifier|final
name|CountDownLatch
name|acquiredLatch
parameter_list|,
specifier|final
name|CountDownLatch
name|releaseLatch
parameter_list|)
block|{
name|this
operator|.
name|brokerPool
operator|=
name|brokerPool
expr_stmt|;
name|this
operator|.
name|acquiredLatch
operator|=
name|acquiredLatch
expr_stmt|;
name|this
operator|.
name|releaseLatch
operator|=
name|releaseLatch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|getBroker
argument_list|()
init|)
block|{
comment|// signal that we have acquired the broker
name|acquiredLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|acquiredLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for signal to release the broker
name|releaseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

