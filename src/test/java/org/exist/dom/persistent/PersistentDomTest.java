begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedCollectionLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|PersistentDomTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_SIMPLE_XML_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/persistent-dom-simple-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|SIMPLE_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"simple.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_XML
init|=
literal|"<document-element><child-level1><child-level2/></child-level1></document-element>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_MIXED_XML_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/persistent-dom-mixed-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|MIXED_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"mixed.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MIXED_XML
init|=
literal|"<!-- 1 -->\n"
operator|+
literal|"<x>\n"
operator|+
literal|"<!-- x.1 -->\n"
operator|+
literal|"<y1>text1<z1/><!-- y.1 --></y1>\n"
operator|+
literal|"<!-- x.2 -->\n"
operator|+
literal|"<y2>text2<z2/><!-- y.2 --></y2>\n"
operator|+
literal|"<!-- x.3 -->\n"
operator|+
literal|"</x>\n"
operator|+
literal|"<!-- 2 -->"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_CDATA_XML_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/persistent-dom-cdata-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|CDATA_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"cdata.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CDATA_CONTENT
init|=
literal|"<p>Hello there \"Bob?\"</p>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CDATA_XML
init|=
literal|"<cdataText><![CDATA["
operator|+
name|CDATA_CONTENT
operator|+
literal|"]]></cdataText>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|mixed_childNodes
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_MIXED_XML_COLLECTION
operator|.
name|append
argument_list|(
name|MIXED_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|documentChildNodes
init|=
name|document
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|documentChildNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- 1 -->"
argument_list|,
name|documentChildNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertMixedChildXNodes
argument_list|(
name|broker
argument_list|,
name|documentChildNodes
operator|.
name|item
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- 2 -->"
argument_list|,
name|documentChildNodes
operator|.
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
name|void
name|assertMixedChildXNodes
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeX
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"x"
argument_list|,
name|nodeX
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|xChildNodes
init|=
name|nodeX
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|xChildNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.1 -->"
argument_list|,
name|xChildNodes
operator|.
name|item
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertMixedChildY1Nodes
argument_list|(
name|broker
argument_list|,
name|xChildNodes
operator|.
name|item
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.2 -->"
argument_list|,
name|xChildNodes
operator|.
name|item
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertMixedChildY2Nodes
argument_list|(
name|broker
argument_list|,
name|xChildNodes
operator|.
name|item
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.3 -->"
argument_list|,
name|xChildNodes
operator|.
name|item
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|xChildNodes
operator|.
name|item
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMixedChildY1Nodes
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeY1
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"y1"
argument_list|,
name|nodeY1
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|y1ChildNodes
init|=
name|nodeY1
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y1ChildNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
literal|"text1"
argument_list|,
name|y1ChildNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"z1"
argument_list|,
name|y1ChildNodes
operator|.
name|item
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- y.1 -->"
argument_list|,
name|y1ChildNodes
operator|.
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMixedChildY2Nodes
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeY2
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"y2"
argument_list|,
name|nodeY2
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|y2ChildNodes
init|=
name|nodeY2
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y2ChildNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
literal|"text2"
argument_list|,
name|y2ChildNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"z2"
argument_list|,
name|y2ChildNodes
operator|.
name|item
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- y.2 -->"
argument_list|,
name|y2ChildNodes
operator|.
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mixed_siblings
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_MIXED_XML_COLLECTION
operator|.
name|append
argument_list|(
name|MIXED_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|document
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|document
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment1
init|=
name|document
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- 1 -->"
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comment1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|nodeX
init|=
name|comment1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertMixedSiblingsNodeX
argument_list|(
name|broker
argument_list|,
name|nodeX
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- 1 -->"
argument_list|,
name|nodeX
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment2
init|=
name|nodeX
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- 2 -->"
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"x"
argument_list|,
name|comment2
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comment2
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertMixedSiblingsNodeX
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeX
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"x"
argument_list|,
name|nodeX
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text1
init|=
name|nodeX
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|text1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment1
init|=
name|text1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.1 -->"
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|comment1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text2
init|=
name|comment1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text2
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.1 -->"
argument_list|,
name|text2
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|nodeY1
init|=
name|text2
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertMixedSiblingsNodeY1
argument_list|(
name|broker
argument_list|,
name|nodeY1
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|nodeY1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text3
init|=
name|nodeY1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text3
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"y1"
argument_list|,
name|text3
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment2
init|=
name|text3
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.2 -->"
argument_list|,
name|comment2
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|comment2
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text4
init|=
name|comment2
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text4
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.2 -->"
argument_list|,
name|text4
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|nodeY2
init|=
name|text4
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertMixedSiblingsNodeY2
argument_list|(
name|broker
argument_list|,
name|nodeY2
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|nodeY2
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text5
init|=
name|nodeY2
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text5
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"y2"
argument_list|,
name|text5
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment3
init|=
name|text5
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.3 -->"
argument_list|,
name|comment3
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
name|comment3
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text6
init|=
name|comment3
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
name|text6
argument_list|)
expr_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- x.3 -->"
argument_list|,
name|text6
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|text6
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMixedSiblingsNodeY1
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeY1
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"y1"
argument_list|,
name|nodeY1
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text1
init|=
name|nodeY1
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
literal|"text1"
argument_list|,
name|text1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|text1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|nodeZ1
init|=
name|text1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertElement
argument_list|(
literal|"z1"
argument_list|,
name|nodeZ1
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
literal|"text1"
argument_list|,
name|nodeZ1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment1
init|=
name|nodeZ1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- y.1 -->"
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"z1"
argument_list|,
name|comment1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comment1
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMixedSiblingsNodeY2
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|nodeY2
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertElement
argument_list|(
literal|"y2"
argument_list|,
name|nodeY2
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|text1
init|=
name|nodeY2
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertTextNode
argument_list|(
literal|"text2"
argument_list|,
name|text1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|text1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|nodeZ1
init|=
name|text1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertElement
argument_list|(
literal|"z2"
argument_list|,
name|nodeZ1
argument_list|)
expr_stmt|;
name|assertTextNode
argument_list|(
literal|"text2"
argument_list|,
name|nodeZ1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|comment1
init|=
name|nodeZ1
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|assertComment
argument_list|(
name|broker
argument_list|,
literal|"<!-- y.2 -->"
argument_list|,
name|comment1
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"z2"
argument_list|,
name|comment1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comment1
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|documentElement_previousSibling_simple
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
operator|.
name|append
argument_list|(
name|SIMPLE_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|document
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|documentElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documentElement
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|documentElement
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|childLevel1
init|=
operator|(
name|Element
operator|)
name|documentElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|childLevel1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childLevel1
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|childLevel2
init|=
operator|(
name|Element
operator|)
name|childLevel1
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|childLevel2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childLevel2
operator|.
name|getPreviousSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|documentElement_nextSibling_simple
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
operator|.
name|append
argument_list|(
name|SIMPLE_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|document
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|documentElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documentElement
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|documentElement
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|childLevel1
init|=
operator|(
name|Element
operator|)
name|documentElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|childLevel1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childLevel1
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|childLevel2
init|=
operator|(
name|Element
operator|)
name|childLevel1
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|childLevel2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childLevel2
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|cdata
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_CDATA_XML_COLLECTION
operator|.
name|append
argument_list|(
name|CDATA_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
specifier|final
name|Element
name|documentElement
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documentElement
argument_list|)
expr_stmt|;
specifier|final
name|CDATASection
name|cdataSection
init|=
operator|(
name|CDATASection
operator|)
name|documentElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cdataSection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CDATA_CONTENT
argument_list|,
name|cdataSection
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|defaultOutputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultOutputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// normal document serialization
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|(
name|defaultOutputProperties
argument_list|)
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|XDM_SERIALIZATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CDATA_XML
argument_list|,
name|serialize
argument_list|(
name|broker
argument_list|,
name|documentElement
argument_list|,
name|outputProperties
argument_list|)
argument_list|)
expr_stmt|;
comment|// XDM serialization
name|outputProperties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultOutputProperties
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|XDM_SERIALIZATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"<cdataText>"
operator|+
name|CDATA_CONTENT
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
operator|+
literal|"</cdataText>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|serialize
argument_list|(
name|broker
argument_list|,
name|documentElement
argument_list|,
name|outputProperties
argument_list|)
argument_list|)
expr_stmt|;
comment|// XDM serialization with cdata-section-elements
name|outputProperties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultOutputProperties
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|XDM_SERIALIZATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|CDATA_SECTION_ELEMENTS
argument_list|,
literal|"{}cdataText"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CDATA_XML
argument_list|,
name|serialize
argument_list|(
name|broker
argument_list|,
name|documentElement
argument_list|,
name|outputProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertElement
parameter_list|(
specifier|final
name|String
name|expectedName
parameter_list|,
specifier|final
name|Node
name|actual
parameter_list|)
block|{
name|assertElement
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedName
argument_list|,
name|actual
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertElement
parameter_list|(
specifier|final
name|Node
name|actual
parameter_list|)
block|{
name|assertType
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertComment
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|expectedComment
parameter_list|,
specifier|final
name|Node
name|actual
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|assertType
argument_list|(
name|Node
operator|.
name|COMMENT_NODE
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedComment
argument_list|,
name|serialize
argument_list|(
name|broker
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTextNode
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|Node
name|actual
parameter_list|)
block|{
name|assertTextNode
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTextNode
parameter_list|(
specifier|final
name|Node
name|actual
parameter_list|)
block|{
name|assertType
argument_list|(
name|Node
operator|.
name|TEXT_NODE
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertType
parameter_list|(
specifier|final
name|short
name|expectedType
parameter_list|,
specifier|final
name|Node
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|actual
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertXml
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|Node
name|actual
parameter_list|)
block|{
specifier|final
name|Source
name|srcExpected
init|=
name|Input
operator|.
name|fromString
argument_list|(
name|expected
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|srcActual
init|=
name|Input
operator|.
name|fromNode
argument_list|(
name|actual
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|srcActual
argument_list|)
operator|.
name|withTest
argument_list|(
name|srcExpected
argument_list|)
operator|.
name|checkForIdentical
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|serialize
argument_list|(
name|broker
argument_list|,
name|node
argument_list|,
name|outputProperties
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Properties
name|outputProperties
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// serialize the results to the response output stream
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SAXSerializer
name|sax
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|sax
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|sax
argument_list|,
name|sax
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
operator|new
name|NodeProxy
argument_list|(
operator|(
name|NodeHandle
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|sax
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|SIMPLE_XML_NAME
argument_list|,
name|SIMPLE_XML
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_MIXED_XML_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|MIXED_XML_NAME
argument_list|,
name|MIXED_XML
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_CDATA_XML_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|CDATA_XML_NAME
argument_list|,
name|CDATA_XML
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_MIXED_XML_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_CDATA_XML_COLLECTION
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
modifier|...
name|docs
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|EXistException
block|{
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|collectionLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collectionUri
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collectionUri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
name|doc
range|:
name|docs
control|)
block|{
name|storeXml
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
argument_list|,
name|doc
operator|.
name|_1
argument_list|,
name|doc
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|storeXml
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|String
name|xml
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
specifier|final
name|IndexInfo
name|indexInfo
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

